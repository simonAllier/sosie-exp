[{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[373],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((this.org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[12,13,270,471,472,473],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[333,474,475,476,477,478,479,387,469,470],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[480,474,475,476,481,482,478,469],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[483,484,134,156,485,486],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,90,91,92,93,94,95,96,97,98,103,111,112,118,119,122,123,124,125,133,141,142,143,144,145,146,152,155,157,160,161,162,166,167,169,197,198,199,200,201,202,207,208,209,210,211,212,213,232,233,234,235,236,240,241,242,244,245,247,248,249,250,251,252,253,256,260,261,263,264,265,266,269,272,274,278,279,280,281,283,284,285,286,287,288,291,292,293,296,300,303,313,319,322,323,324,325,326,327,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,354,361,362,363,364,365,366,367,369,370,371,372,374,375,378,379,383,384,385,386,396,397,399,400,403,406,409,410,413,414,415,416,417,418,421,422,423,424,430,437,438,439,440,442,443,444,445,446,447,449,450,451,452,453,454,455,456,457,458,459,460,462,463,464,465,466,468,469],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:163","failures":[331,332],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[138,404,441],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:190","failures":[49,70,110,111,113,114,115,116,117,124,139,154,159,160,207,262,274,288,322,337,339,341,342,345,346,347,389,399,400,405,408,412,413,440,446,447,449,452,458,459,460,462],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[229],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[12,13,487,469],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[49,488,124,125,134,135,138,139,153,156,159,398,404,405,412],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:338","sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,9,10,11,14,15,16,19,20,22,27,32,44,45,52,53,55,60,65,82,110,111,112,113,114,115,116,117,121,124,125,135,138,139,140,147,149,150,152,155,156,158,161,166,167,169,201,202,204,205,206,207,240,241,242,244,245,247,248,249,250,251,256,259,261,262,263,264,265,266,269,274,278,279,280,281,283,284,285,286,287,288,291,295,296,300,303,313,319,325,327,330,333,334,335,336,337,338,339,340,341,342,344,345,346,347,348,354,361,362,363,364,365,366,367,374,376,383,385,386,395,396,398,399,400,404,405,407,409,411,414,421,422,430,440,446,447,449,450,452,455,458,459,460,461,462,469],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[87,489,490],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[491],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[492,437,456,459],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[0,12,13,43,46,126,129,267,270,273,274,277,303,313,319,323,333,379,471,380,381,493,382,383,384,385,479,386,494,387,388,389,473,390,469,470,495],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[352,428],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:94","failures":[278,279,280,281,288,289,439,440,442,443,444,445,446,447,448,449,458,459,463,464],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"position":"org.easymock.internal.matchers.Any:36","failures":[49,74,75,118,119,120,121,122,145,157,232,233,234,235,236,252,253,279,285,286,291,410,445,449],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[496],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[49,497,498,124,125,159,412],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[99,237],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"failMessage"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[114,115,124],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"failures":[50,51,58,65,212,253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[499,437,456,462],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","shouldBeUsedInOneThread":"state","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"org.easymock.MockType.NICE","org.easymock.MockType.NICE":"type"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:52","sourceCode":"java.lang.InstantiationException java.lang.InstantiationException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[343,403],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[80],"status":-1,"binaryOperator":"(int >= 0)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[121,423],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":440,"org.easymock.tests2.UsageTest.argumentsOrdered":405,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":132,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":346,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":183,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":400,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":16,"org.easymock.tests2.DelegateToTest.testReturnException":374,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":142,"org.easymock.tests.MockingTest.testPartialClassMocking":166,"org.easymock.tests.MockClassControlTest.testToString":104,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":368,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":192,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":303,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":422,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":474,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":447,"org.easymock.tests2.UsageTest.wrongArguments":398,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":118,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":360,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":92,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":129,"org.easymock.tests2.UsageConstraintsTest.testNull":443,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":171,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":264,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":345,"org.easymock.tests2.CaptureTest.testPrimitive":281,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":122,"org.easymock.tests.UsageTest.moreThanOneArgument":133,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":36,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":263,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":211,"org.easymock.tests.UsageTest.argumentsOrdered":139,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":77,"org.easymock.tests.UsageVarargTest.varargIntAccepted":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":188,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":232,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":482,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":379,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":435,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":175,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":236,"org.easymock.tests.ReplayStateInvalidUsageTest.times":228,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":354,"org.easymock.tests2.DependencyTest.testClassMocking":419,"org.easymock.tests2.AnswerTest.answer":327,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":190,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":418,"org.easymock.tests2.CaptureTest.testAnd":278,"org.easymock.tests2.UsageTest.strictResetToDefault":396,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":493,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":272,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":210,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":340,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":81,"org.easymock.tests2.DelegateToTest.testDelegate":378,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":32,"org.easymock.tests.LimitationsTest.mockFinalMethod":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":145,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":98,"org.easymock.tests2.DependencyTest.testClassMockingSupport":420,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":258,"org.easymock.tests2.CaptureTest.testCapture1_2446744":282,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":268,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":416,"org.easymock.tests.UsageThrowableTest.throwError":110,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":222,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":128,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":436,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":213,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":321,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests.MockingTest.testInterfaceMocking":168,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":223,"org.easymock.tests2.CompareToTest.testLessOrEqual":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":233,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":38,"org.easymock.tests2.UsageTest.niceToStrict":399,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":18,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":173,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":383,"org.easymock.tests2.MockBuilderTest.testCreateMock":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":316,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":357,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":485,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":26,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":341,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":239,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":197,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":90,"org.easymock.tests.UsageOverloadedMethodTest.overloading":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":318,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":453,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":150,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":61,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":206,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":489,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":452,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":287,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":243,"org.easymock.tests.MockClassControlTest.testEquals":108,"org.easymock.tests2.EasyMockSupportClassTest.testAll":300,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":34,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":417,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":96,"org.easymock.tests2.CaptureTest.testCaptureAll":279,"org.easymock.tests.MockNameTest.defaultName":48,"org.easymock.tests2.UsageConstraintsTest.testMatches":454,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":212,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":220,"org.easymock.samples.ExampleTest.voteForRemovals":6,"org.easymock.tests.UsageVarargTest.allKinds":251,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":97,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":116,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":408,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":146,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":377,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":478,"org.easymock.tests2.UsageConstraintsTest.greaterThan":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":301,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":71,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":275,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":89,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":276,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":293,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":130,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":267,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":395,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":82,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":387,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":180,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":338,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":298,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":141,"org.easymock.tests2.CaptureTest.testCaptureFirst":291,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":339,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":407,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":153,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":57,"org.easymock.tests2.UsageTest.moreThanOneArgument":397,"org.easymock.tests2.CaptureTest.testCapture2_2446744":290,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":295,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":191,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":250,"org.easymock.tests.GenericTest.testBridgedEquals":47,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":204,"org.easymock.tests.UsageExpectAndReturnTest.longType":53,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":94,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":336,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":35,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":461,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":76,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":33,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":209,"org.easymock.tests.UsageCallCountTest.tooManyCalls":205,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":317,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":58,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":359,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":115,"org.easymock.tests.MockingTest.testNiceClassMocking":172,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":362,"org.easymock.tests.MockingTest.testClassMocking":164,"org.easymock.tests2.UsageConstraintsTest.testContains":451,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":198,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":325,"org.easymock.tests2.UsageConstraintsTest.testFind":442,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":208,"org.easymock.tests.MockTypeTest.fromEasyMockClass":127,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":468,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":154,"org.easymock.tests.UsageExpectAndReturnTest.object":60,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":344,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":475,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":245,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":217,"org.easymock.tests.UsageTest.exactCallCountByLastCall":140,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":178,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":40,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":470,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":66,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":240,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":149,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":426,"org.easymock.tests.MockClassControlTest.testHashCode":107,"org.easymock.tests2.EasyMockSupportTest.testVerify":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":310,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":79,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":147,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":238,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":415,"org.easymock.tests.UsageVarargTest.varargCharAccepted":244,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":196,"org.easymock.tests2.UsageTest.openCallCountByLastCall":401,"org.easymock.tests.DefaultClassInstantiatorTest.object":83,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":347,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":237,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":215,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":488,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":311,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":113,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":352,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":425,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":106,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":273,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":23,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":67,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":99,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":319,"org.easymock.tests2.UsageTest.resumeIfFailure":406,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":144,"org.easymock.tests2.StubTest.stubWithReturnValue":424,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":479,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":462,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":59,"org.easymock.tests2.SerializationTest.testAllMockedMethod":335,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":189,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":486,"org.easymock.samples.SupportTest.voteForRemovals":10,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":43,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":428,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":29,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":195,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":328,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":42,"org.easymock.tests.UsageExpectAndThrowTest.object":27,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":459,"org.easymock.tests2.DelegateToTest.testWrongClass":376,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":252,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":253,"org.easymock.tests.UsageStrictMockTest.range":159,"org.easymock.samples.ConstructorCalledMockTest.testTax":12,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":393,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":343,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":361,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":385,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":138,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":297,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":91,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":483,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":39,"org.easymock.tests2.CaptureTest.testCaptureNone":286,"org.easymock.tests.UsageUnorderedTest.message":49,"org.easymock.tests.UsageVerifyTest.twoReturns":125,"org.easymock.tests.UsageVarargTest.varargByteAccepted":249,"org.easymock.tests2.ThreadingTest.testThreadSafe":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":314,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":202,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":218,"org.easymock.tests2.CaptureTest.testCapture_2617107":280,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":260,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":193,"org.easymock.tests2.UsageConstraintsTest.any":449,"org.easymock.tests2.StubTest.stub":423,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":227,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":143,"org.easymock.tests.UsageExpectAndThrowTest.longType":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":194,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":87,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":226,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":411,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":430,"org.easymock.tests2.SerializationTest.testClass":333,"org.easymock.tests.LimitationsTest.mockNativeMethod":256,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":46,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":69,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":351,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":414,"org.easymock.tests2.NameTest.nameForMocksControl":372,"org.easymock.tests2.MockedExceptionTest.testMockedException":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":302,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":137,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":467,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":169,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":21,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":261,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":386,"org.easymock.tests.MockingTest.testNicePartialClassMocking":167,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":266,"org.easymock.tests2.CompareToTest.testNotComparable":491,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":480,"org.easymock.tests2.CaptureTest.testCaptureLast":285,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":349,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":259,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":446,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":367,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":460,"org.easymock.tests.MockingTest.testTwoMocks":165,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":25,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":404,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":464,"org.easymock.samples.ExampleTest.removeNonExistingDocument":7,"org.easymock.tests.UsageStrictMockTest.differentMethods":160,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":224,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":427,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":85,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":294,"org.easymock.tests2.MockBuilderTest.testCreateMockString":390,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":102,"org.easymock.tests.UsageExpectAndThrowTest.floatType":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":304,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":455,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":299,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":495,"org.easymock.tests.UsageVerifyTest.twoThrows":124,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":313,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":184,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":37,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":274,"org.easymock.tests.LimitationsTest.privateConstructor":255,"org.easymock.tests2.UsageConstraintsTest.testNotNull":463,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":117,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":323,"org.easymock.tests2.UsageTest.defaultResetToNice":403,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":185,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":65,"org.easymock.tests.UsageVarargTest.differentLength":246,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":350,"org.easymock.tests2.CallbackTest.callback":322,"org.easymock.tests2.UsageConstraintsTest.equals":441,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":270,"org.easymock.tests.UsageTest.openCallCountByLastCall":136,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":437,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":120,"org.easymock.tests.UsageCallCountTest.tooFewCalls":200,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":364,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":93,"org.easymock.tests.UsageThrowableTest.throwCheckedException":114,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":484,"org.easymock.tests.MockingTest.testStrictClassMocking":163,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":75,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":366,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":355,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":363,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":365,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":332,"org.easymock.tests.ObjectMethodsTest.testHashCode":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":481,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":296,"org.easymock.tests2.NameTest.nameForNiceMock":371,"org.easymock.tests2.DependencyTest.testInterfaceMocking":421,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":476,"org.easymock.samples.ExampleTest.addDocument":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":320,"org.easymock.tests2.DelegateToTest.testStubDelegate":375,"org.easymock.tests2.AnswerTest.stubAnswer":331,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":157,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":494,"org.easymock.tests.UsageVarargTest.varargLongAccepted":248,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":182,"org.easymock.tests.UsageExpectAndReturnTest.floatType":52,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":469,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":13,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":457,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":434,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":151,"org.easymock.tests.UsageThrowableTest.noUpperLimit":111,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":438,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":391,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":283,"org.easymock.tests2.SerializationTest.test":334,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":490,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":84,"org.easymock.tests2.UsageConstraintsTest.testSame":444,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":51,"org.easymock.samples.SupportTest.addDocument":9,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":305,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":177,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":433,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":170,"org.easymock.tests2.NameTest.nameForMock":369,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":62,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":473,"org.easymock.tests2.UsageStrictMockTest.differentMethods":413,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":271,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":54,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":31,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":73,"org.easymock.tests2.MockedExceptionTest.testRealException":326,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":131,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":187,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":186,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":119,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":231,"org.easymock.tests2.NameTest.nameForStrictMock":370,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":382,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":466,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":265,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":392,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":497,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":458,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":86,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":380,"org.easymock.tests2.UsageStrictMockTest.range":412,"org.easymock.tests2.UsageConstraintsTest.lessThan":465,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":429,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":181,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":337,"org.easymock.tests2.CaptureTest.testCaptureRightOne":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":309,"org.easymock.tests2.UsageConstraintsTest.testOr":445,"org.easymock.tests.UsageRangeTest.combination":70,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":262,"org.easymock.tests.UsageTest.wrongArguments":135,"org.easymock.tests2.MockBuilderTest.testWithConstructor":471,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":306,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":174,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":63,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":88,"org.easymock.tests.UsageVarargTest.varargShortAccepted":247,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":203,"org.easymock.tests2.UsageConstraintsTest.cmpTo":450,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":176,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":402,"org.easymock.tests2.CaptureTest.testCaptureFromStub":289,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":221,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":381,"org.easymock.tests.UsageTest.unexpectedCallWithArray":134,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":156,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":201,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":472,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":64,"org.easymock.tests2.CaptureTest.testCapture":496,"org.easymock.tests2.UsageConstraintsTest.constraints":439,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":158,"org.easymock.samples.ExampleTest.addAndChangeDocument":8,"org.easymock.tests.UsageStrictMockTest.testVerify":162,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":11,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":155,"org.easymock.tests2.CompareToTest.testGreateThan":492,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":95,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":284,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":234,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":56,"org.easymock.tests.LimitationsTest.abstractClass":254,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":235,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":498,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":241,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":342}}]

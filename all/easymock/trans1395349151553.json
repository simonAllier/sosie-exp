[{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[0,1],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Null:35","failures":[2,3,4,5],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[21,22,23,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1249","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:959","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[26,27,28,29],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[30,31,32,33,34],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[35],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[36,37,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[39,40,7,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,2,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,21,75,76,77,78,79,80,81,36,37,38,82,8,83,84,85,86,87,9,88,89,90,91,92,10,93,94,95,11,96,12,97,98,99,100,101,102,103,104,105,106,107,108,109,110,13,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,14,133,134,135,136,137,15,138,139,140,141,142,16,143,144,145,17,146,18,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,178,179,179,180,22,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,3,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,23,35,24,266,25,267,268,269,270,271,272,273,274,275,276,277,26,278,279,4,280,281,27,282,283,284,285,28,286,287,288,34,289,290,29,291,292,5,293,294,295,296,297,298,299,300,301,302,303,304,305,19,306,307,308,309,310,311,312,20,313,314,315],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[188,205,206,207,316],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[317,42,45,46,318,319,109,110,13,149,152,194,200,201,273],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"position":"org.easymock.internal.Range:36","failures":[320,321,322,323,324,325,326,327,39,40,6,7,41,317,42,43,44,45,46,47,48,49,50,328,51,52,53,54,55,56,57,2,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,329,330,331,332,333,334,335,336,73,74,21,75,76,77,318,78,79,80,337,81,338,339,340,341,342,343,36,37,38,344,345,346,347,348,349,82,8,83,84,85,86,87,9,88,89,90,91,92,10,93,94,95,11,96,12,97,350,98,99,100,101,351,102,103,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,104,368,369,370,371,372,105,373,106,374,375,107,376,108,109,110,13,111,112,113,114,115,116,117,118,119,120,377,378,121,122,123,379,124,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,125,126,395,396,397,398,399,127,128,129,130,131,132,14,133,134,135,136,137,15,138,139,140,141,142,16,143,144,145,17,146,18,147,148,149,150,151,152,153,154,155,400,401,402,403,404,405,406,407,408,156,157,158,159,160,161,162,163,164,165,166,167,168,0,169,170,171,1,409,172,173,174,175,176,177,178,179,180,22,181,182,183,184,410,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,411,412,413,414,415,416,417,418,419,204,420,421,422,205,423,206,424,207,425,426,427,208,428,429,209,210,211,212,430,213,214,215,431,216,217,218,219,220,221,432,433,222,434,435,436,223,224,225,437,438,439,440,441,442,443,226,444,445,446,447,448,449,450,451,452,227,453,454,228,455,456,457,458,459,460,461,462,463,229,464,465,466,467,468,230,469,470,471,472,473,474,475,231,476,477,478,479,480,481,482,483,484,485,232,233,234,235,236,237,486,238,487,488,239,240,241,3,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,489,261,262,263,264,265,23,35,24,266,25,267,268,269,270,271,272,273,274,275,276,277,26,278,490,279,4,280,281,27,282,283,284,285,28,286,287,288,34,289,290,29,291,292,5,293,294,295,296,491,492,297,298,299,300,301,302,303,304,305,19,306,307,308,309,310,311,312,20,313,314,493,315],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"((\"isA(\" + (java.lang.Class<?>.getName())) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[317,149,150,152,153,155,217,219,221,436,225,271,273,274],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[79,80,37,38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[195],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[494,282,287,296],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[178,179,495,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[320,325,330,107,121,122,123,124,169,170,171,175,178,178,179,179,186,187,188,418,496,204,420,205,423,206,207,427,208,316,429,209,210,211,212,214,215,216,217,219,220,221,432,222,436,223,224,225,497,498,499,227,228,229,230,238,245,299,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[500,400,407],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[320,325,171,188,418,496,204,420,205,423,206,207,427,208,316,429,432,498,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":278,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":7,"org.easymock.tests2.UsageTest.argumentsOrdered":201,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":257,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":362,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":196,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":190,"org.easymock.tests2.DelegateToTest.testReturnException":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":68,"org.easymock.tests.MockingTest.testPartialClassMocking":122,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":489,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":81,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":370,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":458,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":132,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":228,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":298,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":282,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":58,"org.easymock.tests2.UsageTest.wrongArguments":194,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":449,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":397,"org.easymock.samples.ExampleTest.answerVsDelegate":22,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":325,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":381,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":219,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":256,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":336,"org.easymock.tests2.CaptureTest.testPrimitive":305,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":62,"org.easymock.tests.UsageTest.moreThanOneArgument":41,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":18,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":218,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":115,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":127,"org.easymock.tests.UsageTest.argumentsOrdered":46,"org.easymock.tests.UsageVarargTest.varargIntAccepted":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":367,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":164,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":418,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":480,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":413,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":423,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":354,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":168,"org.easymock.tests.ReplayStateInvalidUsageTest.times":391,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":226,"org.easymock.tests2.DependencyTest.testClassMocking":491,"org.easymock.tests2.AnswerTest.answer":232,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":368,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":485,"org.easymock.tests2.CaptureTest.testAnd":302,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":322,"org.easymock.tests2.UsageTest.strictResetToDefault":192,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":436,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":421,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":114,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":251,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":131,"org.easymock.tests2.DelegateToTest.testDelegate":25,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":144,"org.easymock.tests.LimitationsTest.mockFinalMethod":376,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":71,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":343,"org.easymock.tests2.DependencyTest.testClassMockingSupport":492,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":39,"org.easymock.tests2.CaptureTest.testCapture1_2446744":19,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":433,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":16,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":483,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":385,"org.easymock.tests.UsageThrowableTest.throwError":156,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":324,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":481,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":409,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":117,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":470,"org.easymock.samples.PartialClassMockTest.testGetArea":188,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":386,"org.easymock.tests.MockingTest.testInterfaceMocking":379,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":165,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":459,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":14,"org.easymock.tests2.UsageTest.niceToStrict":195,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":352,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":205,"org.easymock.tests2.MockBuilderTest.testCreateMock":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":466,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":446,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":139,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":32,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":252,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":321,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":38,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":97,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":395,"org.easymock.tests.UsageOverloadedMethodTest.overloading":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":463,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":75,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":287,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":118,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":91,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":286,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":310,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":328,"org.easymock.tests2.EasyMockSupportClassTest.testAll":227,"org.easymock.tests.MockClassControlTest.testEquals":335,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":170,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":17,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":497,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":484,"org.easymock.tests2.CaptureTest.testCaptureAll":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":341,"org.easymock.tests.MockNameTest.defaultName":399,"org.easymock.tests2.UsageConstraintsTest.testMatches":288,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":116,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":383,"org.easymock.samples.ExampleTest.voteForRemovals":184,"org.easymock.tests.UsageVarargTest.allKinds":2,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":108,"org.easymock.samples.BasicClassMockTest.testPrintContent":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":342,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":162,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":269,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":477,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":72,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":266,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":407,"org.easymock.tests2.UsageConstraintsTest.greaterThan":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":453,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":64,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":225,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":408,"org.easymock.samples.ExampleTest.voteForRemoval":181,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":437,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":240,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":414,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":432,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":191,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":175,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":249,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":451,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":67,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":265,"org.easymock.tests2.CaptureTest.testCaptureFirst":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":358,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":250,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":203,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":9,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":3,"org.easymock.tests2.CaptureTest.testCapture2_2446744":20,"org.easymock.tests2.UsageTest.moreThanOneArgument":193,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":369,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":57,"org.easymock.tests.GenericTest.testBridgedEquals":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":102,"org.easymock.tests.UsageExpectAndReturnTest.longType":84,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":247,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":339,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":146,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":316,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":106,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":5,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":145,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":113,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":79,"org.easymock.tests.UsageCallCountTest.tooManyCalls":103,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":467,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":448,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":161,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":210,"org.easymock.tests.MockingTest.testNiceClassMocking":382,"org.easymock.tests.MockingTest.testClassMocking":378,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":496,"org.easymock.tests2.UsageConstraintsTest.testContains":28,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":350,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":245,"org.easymock.tests2.UsageConstraintsTest.testFind":279,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":120,"org.easymock.tests.MockTypeTest.fromEasyMockClass":323,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":147,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":315,"org.easymock.tests.UsageExpectAndReturnTest.object":90,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":222,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":447,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":255,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":52,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":347,"org.easymock.tests.UsageTest.exactCallCountByLastCall":47,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":357,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":128,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":337,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":487,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":48,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":95,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":21,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":472,"org.easymock.tests.MockClassControlTest.testHashCode":334,"org.easymock.tests2.EasyMockSupportTest.testVerify":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":461,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":129,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":37,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":73,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":482,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":486,"org.easymock.tests.UsageVarargTest.varargCharAccepted":51,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":400,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":373,"org.easymock.tests2.UsageTest.openCallCountByLastCall":197,"org.easymock.tests.DefaultClassInstantiatorTest.object":401,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":258,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":36,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":345,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":462,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":442,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":471,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":223,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":137,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":11,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":230,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests2.UsageTest.resumeIfFailure":202,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":320,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":412,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":70,"org.easymock.tests2.StubTest.stubWithReturnValue":268,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":424,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":89,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":293,"org.easymock.tests2.SerializationTest.testAllMockedMethod":301,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":104,"org.easymock.samples.SupportTest.voteForRemovals":177,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":33,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":474,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":142,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":105,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":233,"org.easymock.tests.UsageExpectAndThrowTest.object":140,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":338,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":291,"org.easymock.tests2.DelegateToTest.testWrongClass":24,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":111,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":112,"org.easymock.samples.ConstructorCalledMockTest.testTax":178,"org.easymock.tests.UsageStrictMockTest.range":152,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":416,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":254,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":209,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":141,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":450,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":393,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":45,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":396,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":174,"org.easymock.tests2.CaptureTest.testCaptureNone":309,"org.easymock.tests.UsageUnorderedTest.message":13,"org.easymock.tests.UsageVerifyTest.twoReturns":110,"org.easymock.tests.UsageVarargTest.varargByteAccepted":56,"org.easymock.tests2.ThreadingTest.testThreadSafe":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":464,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":101,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":186,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":348,"org.easymock.tests2.CaptureTest.testCapture_2617107":304,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":6,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":371,"org.easymock.tests2.UsageConstraintsTest.any":284,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":390,"org.easymock.tests2.StubTest.stub":267,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":80,"org.easymock.tests.UsageExpectAndThrowTest.longType":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":372,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":405,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":389,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":272,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":231,"org.easymock.tests2.SerializationTest.testClass":299,"org.easymock.tests.LimitationsTest.mockNativeMethod":107,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":171,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":12,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":499,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":441,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":275,"org.easymock.tests2.NameTest.nameForMocksControl":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":443,"org.easymock.tests2.MockedExceptionTest.testMockedException":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":454,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":44,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":493,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":135,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":124,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":216,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":207,"org.easymock.tests.MockingTest.testNicePartialClassMocking":123,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":221,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":439,"org.easymock.tests2.CaptureTest.testCaptureLast":308,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":40,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":27,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":215,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":292,"org.easymock.tests.MockingTest.testTwoMocks":121,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":431,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":82,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":138,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":200,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":295,"org.easymock.samples.ExampleTest.removeNonExistingDocument":410,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":445,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":387,"org.easymock.tests.UsageStrictMockTest.differentMethods":153,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":473,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":403,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":241,"org.easymock.tests2.MockBuilderTest.testCreateMockString":429,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":455,"org.easymock.tests.UsageExpectAndThrowTest.floatType":133,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":452,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":235,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":488,"org.easymock.tests.UsageVerifyTest.twoThrows":109,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":229,"org.easymock.samples.ExampleTest.voteAgainstRemoval":182,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":363,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":224,"org.easymock.tests.LimitationsTest.privateConstructor":375,"org.easymock.tests2.UsageConstraintsTest.testNotNull":294,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":163,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":243,"org.easymock.tests2.UsageTest.defaultResetToNice":199,"org.easymock.samples.ExampleTest.voteAgainstRemovals":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":364,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":440,"org.easymock.tests.UsageVarargTest.differentLength":53,"org.easymock.tests2.CallbackTest.callback":260,"org.easymock.tests2.UsageConstraintsTest.equals":490,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":434,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":31,"org.easymock.tests.UsageTest.openCallCountByLastCall":43,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":276,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":60,"org.easymock.tests.UsageCallCountTest.tooFewCalls":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":212,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":398,"org.easymock.tests.UsageThrowableTest.throwCheckedException":160,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":30,"org.easymock.tests.MockingTest.testStrictClassMocking":377,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":126,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":214,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":444,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":211,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":392,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":213,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":237,"org.easymock.tests2.CompareToTest.testGreateOrEqual":494,"org.easymock.tests.ObjectMethodsTest.testHashCode":346,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":242,"org.easymock.tests2.NameTest.nameForNiceMock":263,"org.easymock.tests2.DependencyTest.testInterfaceMocking":297,"org.easymock.samples.ExampleTest.addDocument":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.DelegateToTest.testStubDelegate":35,"org.easymock.tests2.AnswerTest.stubAnswer":236,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":150,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":425,"org.easymock.tests.UsageVarargTest.varargLongAccepted":55,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":361,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":96,"org.easymock.tests.UsageExpectAndReturnTest.floatType":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":238,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":179,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":479,"org.easymock.tests.UsageThrowableTest.noUpperLimit":157,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":76,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":290,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":277,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":411,"org.easymock.tests2.SerializationTest.test":300,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":306,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":402,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":8,"org.easymock.tests2.UsageConstraintsTest.testSame":280,"org.easymock.samples.SupportTest.addDocument":176,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":500,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":430,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":456,"org.easymock.tests.GenericTest.testPackageScope":169,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":130,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":478,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":380,"org.easymock.tests2.NameTest.nameForMock":261,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":92,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":428,"org.easymock.tests2.UsageStrictMockTest.differentMethods":274,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":435,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":85,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":143,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":344,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":66,"org.easymock.tests2.MockedExceptionTest.testRealException":246,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":327,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":366,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":365,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":394,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":59,"org.easymock.tests2.NameTest.nameForStrictMock":262,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":422,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":314,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":220,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":415,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":404,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":29,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":204,"org.easymock.tests2.UsageStrictMockTest.range":273,"org.easymock.tests2.UsageConstraintsTest.lessThan":296,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":475,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":460,"org.easymock.tests2.CaptureTest.testCaptureRightOne":311,"org.easymock.tests2.UsageConstraintsTest.testOr":281,"org.easymock.tests.UsageRangeTest.combination":63,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":217,"org.easymock.tests.UsageTest.wrongArguments":42,"org.easymock.tests2.MockBuilderTest.testWithConstructor":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":457,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":330,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":86,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":10,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":353,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":406,"org.easymock.tests.UsageVarargTest.varargShortAccepted":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":351,"org.easymock.tests2.UsageConstraintsTest.cmpTo":285,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":234,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":355,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":198,"org.easymock.tests2.CaptureTest.testCaptureFromStub":312,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":384,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":420,"org.easymock.tests.UsageTest.unexpectedCallWithArray":317,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":149,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":100,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":93,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":151,"org.easymock.tests2.UsageConstraintsTest.constraints":26,"org.easymock.samples.ExampleTest.addAndChangeDocument":185,"org.easymock.tests.UsageStrictMockTest.testVerify":155,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":189,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":340,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":307,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":498,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":166,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":87,"org.easymock.tests.LimitationsTest.abstractClass":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":167,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":77,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":49,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":253}}]

[{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:56","sourceCode":"return int","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"failures":[5,6,7,8,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[27,0,28],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[30,31],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[1,2,32,3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[33,29,34],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[12,35,19,20,21,26],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[36,37,1,38,39,40,41,42,2,43,44,45,32,46,47,48,33,49,50,3,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,12,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,13,111,29,112,113,114,14,15,115,116,117,118,119,120,121,122,123,124,125,126,4,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,34,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,17,201,202,203,204,205,206,207,208,209,18,210,211,19,212,213,214,215,20,21,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,22,23,235,236,24,25,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,26,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[36,37,1,38,39,40,41,42,2,43,44,45,32,46,47,48,33,49,50,3,51,52,54,55,56,57,58,64,65,66,67,68,69,70,71,12,72,73,74,75,77,78,79,80,94,95,96,97,98,99,101,102,106,107,108,109,110,13,111,29,112,113,114,14,15,115,116,117,118,119,120,121,122,123,124,125,126,4,127,128,129,130,131,132,133,134,135,136,137,138,342,140,141,142,145,146,147,148,149,150,151,152,153,154,155,156,34,157,159,160,162,164,165,166,167,172,179,184,192,193,195,196,200,201,202,203,204,205,206,207,208,209,18,210,211,19,212,213,214,215,20,21,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,22,23,235,236,24,25,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,256,257,258,259,260,262,263,264,265,266,267,268,269,270,271,26,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,343,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,326,327,328,329,330,331,333],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:187","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:62","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[60,61,62,63,97,100,101,103,104,106,118,124,140,141,142,143,144,145,146,153,155,156,157,179,216,217,218,268,341],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[108,113,20,233,236,317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[36,37,1,38,39,40,41,42,2,43,44,45,32,46,47,48,33,49,50,3,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,12,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,13,111,29,112,113,114,14,15,115,116,117,118,119,120,121,122,123,124,125,126,4,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,345,152,153,154,155,156,34,157,158,159,160,161,162,163,179,192,193,194,195,196,197,198,199,17,201,202,203,204,205,206,207,208,209,18,210,211,19,212,213,215,20,21,216,217,218,219,220,221,222,223,224,226,227,228,229,230,231,232,233,234,22,23,235,236,24,25,237,238,239,240,241,242,243,244,245,246,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,26,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,334,335,336,337,338,339,340,341],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[190,346,347,348,349],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[60,61,62,63,79,99,350,100,351,101,102,103,104,105,106,352,107,121,123,124,140,141,142,143,145,146,353,354,355,153,154,156,34,157,158,159,160,161,162,163,172,179,207,356,216,217,218,357,358,323,324,11,336,337,339,339,340,340,341],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:136","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[359],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[160],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[360,361,339,339,340,340],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[362,363],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":233,"org.easymock.tests2.UsageTest.argumentsOrdered":15,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":31,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":29,"org.easymock.tests2.StubTest.stubWithReturnValue":75,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":338,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":282,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":54,"org.easymock.tests2.SerializationTest.testAllMockedMethod":123,"org.easymock.tests2.DelegateToTest.testReturnException":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":202,"org.easymock.tests.MockingTest.testPartialClassMocking":216,"org.easymock.samples.SupportTest.voteForRemovals":335,"org.easymock.tests.MockClassControlTest.testToString":173,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":295,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":61,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":362,"org.easymock.tests.UsageExpectAndThrowTest.object":305,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":59,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":51,"org.easymock.tests2.DelegateToTest.testWrongClass":119,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":293,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":294,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":43,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":219,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.samples.ConstructorCalledMockTest.testTax":339,"org.easymock.tests.UsageStrictMockTest.range":19,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":240,"org.easymock.samples.ExampleTest.answerVsDelegate":327,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":358,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":140,"org.easymock.tests2.UsageConstraintsTest.testNull":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":306,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":156,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":90,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":103,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":178,"org.easymock.tests2.CaptureTest.testPrimitive":127,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":223,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":314,"org.easymock.tests.UsageTest.moreThanOneArgument":234,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":190,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":239,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":244,"org.easymock.tests2.CaptureTest.testCaptureNone":132,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":6,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":21,"org.easymock.tests.UsageVarargTest.varargByteAccepted":264,"org.easymock.tests2.ThreadingTest.testThreadSafe":94,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.UsageVarargTest.varargIntAccepted":258,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":252,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":336,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":267,"org.easymock.tests2.CaptureTest.testCapture_2617107":4,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":99,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":222,"org.easymock.tests2.UsageConstraintsTest.any":44,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":102,"org.easymock.tests2.StubTest.stub":74,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":187,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":349,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":271,"org.easymock.tests.UsageExpectAndThrowTest.longType":298,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":203,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":27,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":186,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":71,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":76,"org.easymock.tests2.SerializationTest.testClass":121,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":139,"org.easymock.tests.LimitationsTest.mockNativeMethod":179,"org.easymock.tests.ReplayStateInvalidUsageTest.times":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":292,"org.easymock.tests2.AnswerTest.answer":64,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":11,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":150,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":355,"org.easymock.tests2.CaptureTest.testAnd":125,"org.easymock.tests2.UsageTest.strictResetToDefault":109,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":73,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":160,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":7,"org.easymock.tests2.NameTest.nameForMocksControl":167,"org.easymock.tests2.MockedExceptionTest.testMockedException":78,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":243,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":85,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":236,"org.easymock.tests2.DelegateToTest.testDelegate":120,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":345,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":299,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":218,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":153,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":104,"org.easymock.tests.MockingTest.testNicePartialClassMocking":217,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":310,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":157,"org.easymock.tests2.CaptureTest.testCaptureLast":131,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":205,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":343,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":2,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":232,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":52,"org.easymock.tests.MockingTest.testTwoMocks":356,"org.easymock.tests2.CaptureTest.testCapture1_2446744":128,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":273,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":308,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":303,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":148,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":56,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":10,"org.easymock.tests.UsageThrowableTest.throwError":315,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":182,"org.easymock.samples.ExampleTest.removeNonExistingDocument":332,"org.easymock.tests.UsageStrictMockTest.differentMethods":212,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":184,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":9,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":96,"org.easymock.tests2.MockBuilderTest.testCreateMockString":107,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":171,"org.easymock.tests.UsageExpectAndThrowTest.floatType":297,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":246,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":33,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":65,"org.easymock.tests.UsageVerifyTest.twoThrows":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":62,"org.easymock.samples.PartialClassMockTest.testGetArea":341,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":183,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":268,"org.easymock.samples.ExampleTest.voteAgainstRemoval":329,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":162,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":296,"org.easymock.tests2.UsageTest.niceToStrict":111,"org.easymock.tests2.UsageConstraintsTest.testNotNull":55,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":322,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":77,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":101,"org.easymock.tests2.MockBuilderTest.testCreateMock":105,"org.easymock.tests2.UsageTest.defaultResetToNice":114,"org.easymock.samples.ExampleTest.voteAgainstRemovals":326,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":288,"org.easymock.tests.UsageVarargTest.differentLength":261,"org.easymock.tests2.CallbackTest.callback":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":361,"org.easymock.tests.UsageTest.openCallCountByLastCall":235,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":304,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":86,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":36,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":247,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":221,"org.easymock.tests.UsageCallCountTest.tooFewCalls":250,"org.easymock.tests.UsageOverloadedMethodTest.overloading":195,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":199,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":284,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":143,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":0,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":46,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":133,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":241,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":8,"org.easymock.tests.UsageThrowableTest.throwCheckedException":319,"org.easymock.tests2.EasyMockSupportClassTest.testAll":60,"org.easymock.tests.MockClassControlTest.testEquals":177,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":324,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":312,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":353,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":230,"org.easymock.tests2.CaptureTest.testCaptureAll":126,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":149,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":193,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":142,"org.easymock.tests2.UsageConstraintsTest.testMatches":48,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":189,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":144,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":67,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":245,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":180,"org.easymock.tests.ObjectMethodsTest.testHashCode":169,"org.easymock.samples.ExampleTest.voteForRemovals":331,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":98,"org.easymock.tests2.NameTest.nameForNiceMock":166,"org.easymock.tests.UsageVarargTest.allKinds":266,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":215,"org.easymock.tests2.DependencyTest.testInterfaceMocking":58,"org.easymock.samples.BasicClassMockTest.testPrintContent":337,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":231,"org.easymock.samples.ExampleTest.addDocument":330,"org.easymock.tests2.DelegateToTest.testStubDelegate":118,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":321,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":68,"org.easymock.tests2.AnswerTest.stubAnswer":66,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":206,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":210,"org.easymock.tests2.UsageConstraintsTest.greaterThan":49,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":225,"org.easymock.tests.UsageVarargTest.varargLongAccepted":263,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":163,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":213,"org.easymock.samples.ExampleTest.voteForRemoval":328,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":95,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":291,"org.easymock.tests.UsageExpectAndReturnTest.floatType":275,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":124,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":158,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":340,"org.easymock.tests.UsageThrowableTest.noUpperLimit":316,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":50,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":207,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":37,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":108,"org.easymock.tests2.SerializationTest.test":122,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":346,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":28,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":83,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":317,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":274,"org.easymock.tests2.UsageConstraintsTest.testSame":41,"org.easymock.samples.SupportTest.addDocument":334,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":201,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":30,"org.easymock.tests2.CaptureTest.testCaptureFirst":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":84,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":116,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":17,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":185,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":280,"org.easymock.tests.GenericTest.testPackageScope":323,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":97,"org.easymock.tests2.UsageTest.moreThanOneArgument":110,"org.easymock.tests2.CaptureTest.testCapture2_2446744":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":106,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":265,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":254,"org.easymock.tests2.NameTest.nameForMock":164,"org.easymock.tests.UsageExpectAndReturnTest.longType":276,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":228,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":81,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":352,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":313,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":285,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":53,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":311,"org.easymock.tests2.UsageStrictMockTest.differentMethods":72,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":348,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":242,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":277,"org.easymock.tests.UsageCallCountTest.tooManyCalls":255,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":309,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":227,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":249,"org.easymock.tests2.MockedExceptionTest.testRealException":80,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":281,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":300,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":320,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":220,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":191,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":141,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":350,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":248,"org.easymock.tests2.UsageConstraintsTest.testContains":32,"org.easymock.tests2.NameTest.nameForStrictMock":165,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":79,"org.easymock.tests2.UsageConstraintsTest.testFind":39,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":196,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":151,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":152,"org.easymock.tests.UsageExpectAndReturnTest.object":283,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":3,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":159,"org.easymock.tests.ErrorMessageTest.testGetters":35,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":100,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":57,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":89,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":260,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":170,"org.easymock.tests.UsageTest.exactCallCountByLastCall":237,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":192,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":82,"org.easymock.tests2.CaptureTest.testCaptureRightOne":134,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":5,"org.easymock.tests2.UsageConstraintsTest.testOr":42,"org.easymock.tests.UsageRangeTest.combination":224,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":289,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":256,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":154,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":198,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests.MockClassControlTest.testHashCode":176,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":172,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":278,"org.easymock.tests2.EasyMockSupportTest.testVerify":93,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":286,"org.easymock.tests.UsageVarargTest.varargShortAccepted":262,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":197,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":253,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":147,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":342,"org.easymock.tests2.UsageConstraintsTest.cmpTo":45,"org.easymock.tests.UsageVarargTest.varargCharAccepted":259,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":69,"org.easymock.tests2.UsageTest.openCallCountByLastCall":112,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":113,"org.easymock.tests.DefaultClassInstantiatorTest.object":272,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":92,"org.easymock.tests2.CaptureTest.testCaptureFromStub":135,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":181,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":351,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":168,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":16,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":302,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":318,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":18,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":251,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":360,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":287,"org.easymock.tests2.CaptureTest.testCapture":359,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":211,"org.easymock.tests2.UsageConstraintsTest.constraints":1,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":161,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":175,"org.easymock.samples.ExampleTest.addAndChangeDocument":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":301,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":290,"org.easymock.tests.UsageStrictMockTest.testVerify":214,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":347,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":325,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":63,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":174,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":229,"org.easymock.tests2.UsageTest.resumeIfFailure":115,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":354,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":269,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":357,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":279,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":270,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":200,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":257,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":87}}]

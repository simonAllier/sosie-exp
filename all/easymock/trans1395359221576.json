[{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"captured"}},{"position":"org.easymock.internal.MockBuilder:89","failures":[3,4,5,6,7],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[9,10],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[11,12,0,13,14,15,1,2,16,17,18],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[19,20,11,12,21,22,0,23,13,14,24,15,25,26,27,28,29,30,31,9,32,1,33,34,35,36,2,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,5,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,16,157,17,158,159,160,161,162,163,164,18,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,6,7,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[28],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[209],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[387,465,467,468,470,474],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[4,481],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[482,483,484,485,207,478,479],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[486,487,488],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[86,99,100,101,102,133,140,250,253,257,261,262,263,264,265,266,278,301,302,337,342,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,453,454,455,456,457,458],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[39,40,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,99,100,101,121,122,123,124,5,125,126,127,129,130,131,132,152,154,155,156,182,183,184,185,188,189,198,199,201,202,203,204,206,207,208,209,6,7,210,211,212,223,224,225,226,227,228,229,230,231,232,233,234,235,267,286,287,288,289,290,292,295,365,370,391,392,393,394,395,396,397,459,460,461,462,463,475,476,478,478,479,479,480],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[11,14,16,17,18],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[199],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[87,88,89,91,93,94,95,98,169,170,171,173,175,176,177,180,464,477],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:61","sourceCode":"org.easymock.internal.EasyMockProperties.getClassLoader()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[82,136,142,143,489,260,270,273,278,279,339,340,343,344,390],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[490,491,492,493],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[19,11,9,36,494],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[490,491,72,495,492,249,270,271,339,340,341,342,343,344,345,346],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[19,20,11,12,22,0,23,13,14,24,15,25,26,27,28,29,30,31,9,32,1,33,34,35,36,2,37,38,80,16,157,17,158,159,160,161,162,163,164,18,165,166,167,181,195,197,206,249,250,265,270,271,299,300,301,302,303,384,385,386,387,388,389,390,418,419],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[1,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":12,"org.easymock.tests2.UsageTest.argumentsOrdered":143,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":337,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":113,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":318,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":138,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":477,"org.easymock.tests2.DelegateToTest.testReturnException":147,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":262,"org.easymock.tests.MockingTest.testPartialClassMocking":289,"org.easymock.tests.MockClassControlTest.testToString":226,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":213,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":57,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":431,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":53,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":46,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":24,"org.easymock.tests2.UsageTest.wrongArguments":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":299,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":180,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":348,"org.easymock.samples.ExampleTest.answerVsDelegate":466,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":370,"org.easymock.tests2.UsageConstraintsTest.testNull":0,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":294,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":201,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":112,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":231,"org.easymock.tests2.CaptureTest.testPrimitive":158,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":303,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":450,"org.easymock.tests.UsageTest.moreThanOneArgument":338,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":200,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":352,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":426,"org.easymock.tests.UsageTest.argumentsOrdered":344,"org.easymock.tests.UsageVarargTest.varargIntAccepted":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":323,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":385,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":488,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":121,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":97,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":310,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":389,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":174,"org.easymock.tests.ReplayStateInvalidUsageTest.times":244,"org.easymock.tests2.DependencyTest.testClassMocking":43,"org.easymock.tests2.AnswerTest.answer":72,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":325,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":194,"org.easymock.tests2.CaptureTest.testAnd":16,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":367,"org.easymock.tests2.UsageTest.strictResetToDefault":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":209,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":107,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":306,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":430,"org.easymock.tests2.DelegateToTest.testDelegate":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":446,"org.easymock.tests.LimitationsTest.mockFinalMethod":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":265,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":336,"org.easymock.tests2.DependencyTest.testClassMockingSupport":44,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":420,"org.easymock.tests2.CaptureTest.testCapture1_2446744":159,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":444,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":192,"org.easymock.tests.UsageThrowableTest.throwError":451,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":238,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":369,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":71,"org.easymock.samples.PartialClassMockTest.testGetArea":480,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":239,"org.easymock.tests.MockingTest.testInterfaceMocking":291,"org.easymock.tests2.CompareToTest.testLessOrEqual":494,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":386,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":432,"org.easymock.tests2.UsageTest.niceToStrict":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":58,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":308,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":5,"org.easymock.tests2.MockBuilderTest.testCreateMock":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":66,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":177,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":490,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":440,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":108,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":285,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":346,"org.easymock.tests.UsageOverloadedMethodTest.overloading":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":68,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":29,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":257,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":409,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":251,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":28,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":164,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":376,"org.easymock.tests2.EasyMockSupportClassTest.testAll":50,"org.easymock.tests.MockClassControlTest.testEquals":230,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":461,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":448,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":484,"org.easymock.tests2.CaptureTest.testCaptureAll":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":334,"org.easymock.tests.MockNameTest.defaultName":248,"org.easymock.tests2.UsageConstraintsTest.testMatches":30,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":353,"org.easymock.samples.ExampleTest.voteForRemovals":470,"org.easymock.tests.UsageVarargTest.allKinds":384,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":277,"org.easymock.samples.BasicClassMockTest.testPrintContent":476,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":335,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":457,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":78,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":150,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":94,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":266,"org.easymock.tests2.UsageConstraintsTest.greaterThan":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":51,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":305,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":210,"org.easymock.samples.ExampleTest.voteForRemoval":467,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":397,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":211,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":371,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":204,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":133,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":267,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":105,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":48,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":261,"org.easymock.tests2.CaptureTest.testCaptureFirst":167,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":314,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":106,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":145,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":260,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":405,"org.easymock.tests2.CaptureTest.testCapture2_2446744":166,"org.easymock.tests2.UsageTest.moreThanOneArgument":135,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":119,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":326,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":383,"org.easymock.tests.GenericTest.testBridgedEquals":463,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":362,"org.easymock.tests.UsageExpectAndReturnTest.longType":401,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":332,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":481,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":449,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":35,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":364,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":447,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":424,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":350,"org.easymock.tests.UsageCallCountTest.tooManyCalls":363,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":406,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":436,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":456,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":183,"org.easymock.tests.MockingTest.testNiceClassMocking":295,"org.easymock.tests.MockingTest.testClassMocking":287,"org.easymock.tests2.UsageConstraintsTest.testContains":27,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":4,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":356,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":101,"org.easymock.tests2.UsageConstraintsTest.testFind":22,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":253,"org.easymock.tests.MockTypeTest.fromEasyMockClass":368,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":197,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":268,"org.easymock.tests.UsageExpectAndReturnTest.object":408,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":206,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":111,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":378,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":221,"org.easymock.tests.UsageTest.exactCallCountByLastCall":345,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":313,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":427,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":296,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":156,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":414,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":373,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":256,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":88,"org.easymock.tests.MockClassControlTest.testHashCode":229,"org.easymock.tests2.EasyMockSupportTest.testVerify":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":60,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":428,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":254,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":284,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":191,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":181,"org.easymock.tests.UsageVarargTest.varargCharAccepted":377,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":331,"org.easymock.tests2.UsageTest.openCallCountByLastCall":139,"org.easymock.tests.DefaultClassInstantiatorTest.object":391,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":114,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":283,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":219,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":489,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":61,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":454,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":172,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":87,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":6,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":228,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":437,"org.easymock.tests.CapturesMatcherTest.test":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":415,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":69,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":227,"org.easymock.tests2.UsageTest.resumeIfFailure":144,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":365,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":264,"org.easymock.tests2.StubTest.stubWithReturnValue":86,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":407,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":36,"org.easymock.tests2.SerializationTest.testAllMockedMethod":154,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":324,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":491,"org.easymock.samples.SupportTest.voteForRemovals":474,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":459,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":90,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":443,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":330,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":73,"org.easymock.tests.UsageExpectAndThrowTest.object":441,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":298,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":33,"org.easymock.tests2.DelegateToTest.testWrongClass":149,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":418,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":419,"org.easymock.samples.ConstructorCalledMockTest.testTax":478,"org.easymock.tests.UsageStrictMockTest.range":273,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":41,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":110,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":182,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":442,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":47,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":246,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":343,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":347,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":495,"org.easymock.tests2.CaptureTest.testCaptureNone":163,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":282,"org.easymock.tests.UsageUnorderedTest.message":390,"org.easymock.tests.UsageVerifyTest.twoReturns":279,"org.easymock.tests.UsageVarargTest.varargByteAccepted":382,"org.easymock.tests2.ThreadingTest.testThreadSafe":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":64,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":360,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":475,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":222,"org.easymock.tests2.CaptureTest.testCapture_2617107":17,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":422,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":328,"org.easymock.tests2.UsageConstraintsTest.any":25,"org.easymock.tests2.StubTest.stub":85,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":425,"org.easymock.tests.UsageExpectAndThrowTest.longType":434,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":329,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":395,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":242,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":81,"org.easymock.tests2.SerializationTest.testClass":152,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":92,"org.easymock.tests.LimitationsTest.mockNativeMethod":234,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":462,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":417,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":171,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":84,"org.easymock.tests2.NameTest.nameForMocksControl":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":173,"org.easymock.tests2.MockedExceptionTest.testMockedException":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":52,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":435,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":196,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":292,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":198,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":127,"org.easymock.tests.MockingTest.testNicePartialClassMocking":290,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":486,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":169,"org.easymock.tests2.CaptureTest.testCaptureLast":162,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":421,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":189,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":14,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":34,"org.easymock.tests.MockingTest.testTwoMocks":288,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":190,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":398,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":439,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":142,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":37,"org.easymock.samples.ExampleTest.removeNonExistingDocument":471,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":176,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":240,"org.easymock.tests.UsageStrictMockTest.differentMethods":274,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":89,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":393,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":118,"org.easymock.tests2.MockBuilderTest.testCreateMockString":132,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":224,"org.easymock.tests.UsageExpectAndThrowTest.floatType":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":54,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":49,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":75,"org.easymock.tests.UsageVerifyTest.twoThrows":278,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":63,"org.easymock.samples.ExampleTest.voteAgainstRemoval":468,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":319,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":7,"org.easymock.tests.LimitationsTest.privateConstructor":233,"org.easymock.tests2.UsageConstraintsTest.testNotNull":2,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":458,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":99,"org.easymock.tests2.UsageTest.defaultResetToNice":141,"org.easymock.samples.ExampleTest.voteAgainstRemovals":465,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":320,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":170,"org.easymock.tests.UsageVarargTest.differentLength":379,"org.easymock.tests2.CallbackTest.callback":168,"org.easymock.tests2.UsageConstraintsTest.equals":21,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":493,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":207,"org.easymock.tests.UsageTest.openCallCountByLastCall":341,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":301,"org.easymock.tests.UsageCallCountTest.tooFewCalls":358,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":185,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":349,"org.easymock.tests.UsageThrowableTest.throwCheckedException":455,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":492,"org.easymock.tests.MockingTest.testStrictClassMocking":286,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":188,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":250,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":184,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":175,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":245,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":187,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":77,"org.easymock.tests.ObjectMethodsTest.testHashCode":220,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":487,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":120,"org.easymock.tests2.NameTest.nameForNiceMock":216,"org.easymock.tests2.DependencyTest.testInterfaceMocking":45,"org.easymock.samples.ExampleTest.addDocument":469,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":65,"org.easymock.tests2.DelegateToTest.testStubDelegate":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":70,"org.easymock.tests2.AnswerTest.stubAnswer":76,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":271,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":128,"org.easymock.tests.UsageVarargTest.varargLongAccepted":381,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":317,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":416,"org.easymock.tests.UsageExpectAndReturnTest.floatType":400,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":155,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":479,"org.easymock.tests.UsageThrowableTest.noUpperLimit":452,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":96,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":32,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":258,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":20,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":39,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":160,"org.easymock.tests2.SerializationTest.test":153,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":399,"org.easymock.tests2.UsageConstraintsTest.testSame":23,"org.easymock.samples.SupportTest.addDocument":473,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":186,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":55,"org.easymock.tests.GenericTest.testPackageScope":460,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":429,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":312,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":95,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":293,"org.easymock.tests2.NameTest.nameForMock":214,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":410,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":485,"org.easymock.tests2.UsageStrictMockTest.differentMethods":83,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":402,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":445,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":218,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":307,"org.easymock.tests2.MockedExceptionTest.testRealException":102,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":372,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":322,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":321,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":247,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":300,"org.easymock.tests2.NameTest.nameForStrictMock":215,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":124,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":195,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":202,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":40,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":394,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":1,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":122,"org.easymock.tests2.UsageStrictMockTest.range":82,"org.easymock.tests2.UsageConstraintsTest.lessThan":38,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":91,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":3,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":316,"org.easymock.tests2.CaptureTest.testCaptureRightOne":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":59,"org.easymock.tests2.UsageConstraintsTest.testOr":13,"org.easymock.tests.UsageRangeTest.combination":304,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":199,"org.easymock.tests.UsageTest.wrongArguments":340,"org.easymock.tests2.MockBuilderTest.testWithConstructor":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":56,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":225,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":403,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":309,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":396,"org.easymock.tests.UsageVarargTest.varargShortAccepted":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":361,"org.easymock.tests2.UsageConstraintsTest.cmpTo":26,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":74,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":311,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":140,"org.easymock.tests2.CaptureTest.testCaptureFromStub":165,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":237,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":123,"org.easymock.tests.UsageTest.unexpectedCallWithArray":339,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":270,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":359,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":483,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":412,"org.easymock.tests2.UsageConstraintsTest.constraints":11,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":272,"org.easymock.samples.ExampleTest.addAndChangeDocument":472,"org.easymock.tests.UsageStrictMockTest.testVerify":276,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":464,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":269,"org.easymock.tests2.CompareToTest.testGreateThan":10,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":333,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":161,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":404,"org.easymock.tests.LimitationsTest.abstractClass":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":388,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":259,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":109,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":374}}]

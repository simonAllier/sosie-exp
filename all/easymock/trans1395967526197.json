[{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:385","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \")","name":"math","position":"org.easymock.internal.MocksBehavior:200","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (this.org.easymock.internal.Invocation.equals(org.easymock.internal.ExpectedInvocation.org.easymock.internal.Invocation)) && ((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","position":"org.easymock.internal.ExpectedInvocation:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:422","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.RecordState:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1660","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","position":"org.easymock.EasyMock:1763","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0];\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.lang.reflect.Type = java.lang.reflect.Type;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:352","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","position":"org.easymock.internal.MocksControl:142","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.InjectionTarget:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"status":-2},{"failures":[11,12,13,15,240,241,242,243,244,245,246,62,63,64,97,98,247,248,157,170,193,194,195,196,198,199,249,202,250,203,204,205,206,251,207,208,210,211,212,213,252,214,215,216,253,217,218,219,220],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:97","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-2},{"failures":[254,255],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.Invocation:209","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:183","type":"CtReturnImpl"},"status":-2},{"failures":[256,257,258,259],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","position":"org.easymock.internal.RecordState:161","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","position":"org.easymock.internal.RecordState:98","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n        return true;\n    } \n}","position":"org.easymock.internal.RecordState:322","type":"CtForEachImpl"},"status":-2},{"failures":[0,260,261,1,2,3,4,5,6,7,8,9,10,11,12,13,262,263,264,265,15,16,17,18,19,20,266,267,268,269,21,270,22,23,271,24,272,273,25,26,27,274,275,276,277,278,279,280,281,282,28,283,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,284,60,61,62,63,64,65,66,67,68,69,285,286,287,288,289,70,71,72,73,74,75,76,77,78,80,81,82,83,84,86,87,88,89,290,90,91,92,93,94,291,95,96,292,293,294,295,296,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,297,142,143,144,145,146,147,148,149,150,151,298,299,300,152,153,154,155,156,301,302,157,303,304,305,306,307,158,159,160,161,308,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,309,179,180,181,182,183,184,310,311,185,186,187,312,188,189,190,191,192,193,194,195,196,197,198,199,200,201,249,202,203,313,204,205,314,206,251,207,208,209,210,211,212,315,213,252,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,316,231,232,233,234,235],"variableMapping":{"lock":"lock"},"name":"add","transplant":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","position":"org.easymock.internal.ReplayState:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","position":"org.easymock.internal.ReplayState:44","type":"CtInvocationImpl"},"status":-1},{"failures":[240,317,318,319,320,321,322,323,324,156,325,326,327,328,329,330,331,332,333,334,335,174,336,337,338,339,340,341,193,194,199,249,250,205,206,251,208,252,216,253,342,343,344,345,346,347,348,349,350,227,230,231,236,237,238,239],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:204","type":"CtReturnImpl"},"status":-1},{"failures":[0,260,261,1,2,3,11,12,13,156,174,201,204,205,217,218,219,220,224,225,226,227,228,229,230,231,232,233,234,235],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.reset();\n}","position":"org.easymock.EasyMockSupport:551","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"status":-1},{"failures":[351,352],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:34","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:52","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"in":"in"},"name":"add","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Properties.load(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:65","type":"CtInvocationImpl"},"status":0},{"failures":[353],"variableMapping":{"result":"result","i":"i"},"name":"add","transplant":{"sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.easymock.internal.ArgumentToString:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidClassProxyFactory.MockHandler org.easymock.internal.AndroidClassProxyFactory.MockHandler = com.google.dexmaker.stock.ProxyBuilder.((org.easymock.internal.AndroidClassProxyFactory.MockHandler)(com.google.dexmaker.stock.ProxyBuilder.getInvocationHandler(java.lang.Object)))","position":"org.easymock.internal.AndroidClassProxyFactory:63","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.BridgeMethodResolver:132","type":"CtInvocationImpl"},"status":-2},{"failures":[354,355],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","position":"org.easymock.internal.ClassInstantiatorFactory:52","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1531","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-2},{"failures":[254,255],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:411","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":0},{"failures":[181,183],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.easymock.internal.ClassProxyFactory:216","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Compare:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:500","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new (\"<=\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int <= 0;\n    }\n}","position":"org.easymock.LogicalOperator:30","type":"CtNewClassImpl"},"status":-2},{"failures":[19,356,357,358,221],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Float.java.lang.Class<java.lang.Float>.getName(), java.lang.Float.java.lang.Class<java.lang.Float>)","position":"org.easymock.internal.MethodSerializationWrapper:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","position":"org.easymock.EasyMock:1802","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"No visible constructors in class \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"mutation","status":-2},{"failures":[],"variableMapping":{"tv":"typeVariableArgument","typeVariableMap":"typeVariableMap"},"name":"replace","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:222","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14,23,70,73,75,76,77,78,82,83,84,136,148,150,151,163,165,167,168,169,173,206,225,229,230,232],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n    return false;\n} ","position":"org.easymock.internal.UnorderedBehavior:75","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"builder":"builder","constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","position":"org.easymock.internal.ReplayState:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","position":"org.easymock.internal.InjectionPlan:60","type":"CtIfImpl"},"status":-2},{"failures":[359],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.ReflectionUtils:39","type":"CtInvocationImpl"},"status":-1},{"failures":[360,361],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.asStub()","position":"org.easymock.internal.MocksControl:326","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"status":-2},{"failures":[150],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:132","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","position":"org.easymock.internal.ReflectionUtils:188","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:134","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-3483500330975410177L","position":"org.easymock.internal.RuntimeExceptionWrapper:23","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>.getName(), java.lang.Character.java.lang.Class<java.lang.Character>)","position":"org.easymock.internal.MethodSerializationWrapper:36","type":"CtInvocationImpl"},"status":-2},{"failures":[362,363,364,365,366,367],"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[181,183],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.BridgeMethodResolver:434","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","position":"org.easymock.internal.MocksControl:334","type":"CtInvocationImpl"},"status":-2},{"failures":[264,303],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.Result.answer()","position":"org.easymock.internal.ReplayState:60","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","position":"org.easymock.internal.ReplayState:59","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{"returnedType":"type"},"name":"add","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:259","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"lastResult":"lastResult"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","position":"org.easymock.internal.RecordState:102","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Or:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock))","position":"org.easymock.internal.Injector:138","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"math","position":"org.easymock.internal.matchers.Matches:40","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","position":"org.easymock.internal.RecordState:275","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:840","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":0},{"failures":[170,171,172],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","position":"org.easymock.EasyMock:1776","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[122,123,127,128,368,139,175,177,184],"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","position":"org.easymock.EasyMock:1470","type":"CtInvocationImpl"},"status":-2},{"failures":[139,140],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:166","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","position":"org.easymock.EasyMock:1607","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual"},"name":"add","transplant":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","position":"org.easymock.internal.Injector:224","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","position":"org.easymock.internal.matchers.CompareTo:45","type":"CtReturnImpl"},"status":-2},{"failures":[26,83,92,153],"variableMapping":{"thisListMessages":"messages","messages":"messages"},"name":"add","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[])","position":"org.easymock.internal.DefaultClassInstantiator:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new (\"<\") {\n    @java.lang.Override\n    public boolean matchResult(final int result) {\n        return int < 0;\n    }\n}","position":"org.easymock.LogicalOperator:24","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.ReflectionUtils:94","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:113","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:203","type":"CtReturnImpl"},"status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":292,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":74,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":213,"org.easymock.tests2.MockedExceptionTest.testRealException":303,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":333,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":345,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":44,"org.easymock.tests.UsageVarargTest.varargIntAccepted":51,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":323,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":120,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":0,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":223,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":243,"org.easymock.tests2.UsageConstraintsTest.testContains":132,"org.easymock.tests.UsageCallCountTest.tooManyCalls":91,"org.easymock.tests2.UsageConstraintsTest.testFind":124,"org.easymock.tests.UsageVarargTest.allKinds":59,"org.easymock.tests2.StubTest.stubWithReturnValue":222,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":179,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":269,"org.easymock.tests2.CaptureTest.testCaptureAll":176,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":93,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":365,"org.easymock.samples.ExampleTest.addAndChangeDocument":10,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":249,"org.easymock.tests.UsageVarargTest.varargCharAccepted":52,"org.easymock.tests2.CaptureTest.testCaptureFromStub":310,"org.easymock.tests.UsageVerifyTest.twoThrows":83,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":341,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":17,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":53,"org.easymock.tests2.DelegateToTest.testReturnException":160,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":151,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":136,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":234,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":164,"org.easymock.tests2.CaptureTest.testAnd":175,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":366,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":37,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":183,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":263,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":41,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":240,"org.easymock.tests2.UsageConstraintsTest.testMatches":135,"org.easymock.tests.MockClassControlTest.testToString":242,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":275,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":357,"org.easymock.tests2.UsageConstraintsTest.testNull":125,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":193,"org.easymock.tests2.EasyMockSupportClassTest.testAll":217,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":229,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":45,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":113,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":359,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":15,"org.easymock.tests.UsageThrowableTest.throwError":291,"org.easymock.tests2.UsageConstraintsTest.greaterThan":137,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":49,"org.easymock.samples.SupportTest.addDocument":2,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":20,"org.easymock.tests2.StubTest.stub":221,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":331,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":16,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":327,"org.easymock.tests.UsageExpectAndReturnTest.object":110,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":119,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":253,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":361,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":58,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.tests.UsageExpectAndThrowTest.object":39,"org.easymock.tests2.DelegateToTest.testWrongClass":308,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":350,"org.easymock.tests2.UsageTest.moreThanOneArgument":148,"org.easymock.tests.UsageVarargTest.varargByteAccepted":57,"org.easymock.tests.MockClassControlTest.testEquals":245,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":36,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.UsageTest.wrongArguments":24,"org.easymock.tests.CapturesMatcherTest.test":254,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":277,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":295,"org.easymock.tests.UsageVarargTest.varargShortAccepted":55,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":335,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":40,"org.easymock.tests2.UsageTest.defaultResetToNice":300,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":329,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":157,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":67,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":1,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":312,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":343,"org.easymock.tests2.MockBuilderTest.testCreateMock":314,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":188,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":332,"org.easymock.tests2.SerializationTest.testAllMockedMethod":172,"org.easymock.tests2.NameTest.nameForMocksControl":239,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":163,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":19,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":284,"org.easymock.tests2.CaptureTest.testCapture1_2446744":309,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":346,"org.easymock.tests.LimitationsTest.mockNativeMethod":97,"org.easymock.tests2.DelegateToTest.testStubDelegate":161,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":257,"org.easymock.tests.UsageUnorderedTest.message":92,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":352,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests.UsageCallCountTest.tooFewCalls":87,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":109,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":89,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":190,"org.easymock.tests.UsageVerifyTest.twoReturns":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":349,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":104,"org.easymock.tests2.DependencyTest.testInterfaceMocking":200,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":224,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":356,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":227,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":258,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":307,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":128,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":77,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":266,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":106,"org.easymock.tests2.CaptureTest.testCaptureRightOne":184,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":86,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":267,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":301,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":212,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":79,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":358,"org.easymock.tests2.UsageConstraintsTest.cmpTo":131,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":111,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":354,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":195,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":339,"org.easymock.tests2.MockedExceptionTest.testMockedException":302,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":338,"org.easymock.tests.UsageThrowableTest.throwCheckedException":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":48,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":142,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":287,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":317,"org.easymock.samples.PartialClassMockTest.testGetArea":11,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":82,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":96,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":61,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":134,"org.easymock.samples.ConstructorCalledMockTest.testTax":260,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":282,"org.easymock.tests2.UsageTest.argumentsOrdered":153,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":211,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":22,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":192,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":364,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":274,"org.easymock.tests2.AnswerTest.answer":189,"org.easymock.tests.MockingTest.testNicePartialClassMocking":63,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":340,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":73,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":101,"org.easymock.tests2.UsageConstraintsTest.any":130,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":322,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":69,"org.easymock.tests2.CaptureTest.testCapture":255,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":289,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":233,"org.easymock.tests.UsageExpectAndThrowTest.longType":32,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":46,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":159,"org.easymock.tests2.CallbackTest.callback":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":219,"org.easymock.tests2.NameTest.nameForMock":236,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":316,"org.easymock.tests.UsageTest.argumentsOrdered":26,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":123,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":204,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":133,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":118,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":18,"org.easymock.tests2.NameTest.nameForStrictMock":237,"org.easymock.tests2.MockBuilderTest.testCreateMockString":251,"org.easymock.tests2.CaptureTest.testCaptureNone":182,"org.easymock.tests2.SerializationTest.test":171,"org.easymock.tests.UsageExpectAndReturnTest.longType":103,"org.easymock.tests2.SerializationTest.testClass":170,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":180,"org.easymock.tests2.CaptureTest.testCaptureFirst":185,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":140,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":12,"org.easymock.tests2.UsageTest.niceToStrict":150,"org.easymock.tests2.EasyMockSupportTest.testVerify":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":279,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":337,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":259,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":313,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":70,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":34,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":297,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":146,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":42,"org.easymock.tests2.UsageTest.strictResetToDefault":147,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":117,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":206,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":215,"org.easymock.tests.GenericTest.testBridgedEquals":248,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":353,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":270,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":29,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":129,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":107,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":197,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":304,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":315,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":50,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":138,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":210,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":283,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":64,"org.easymock.tests2.UsageConstraintsTest.testOr":127,"org.easymock.tests2.DelegateToTest.testDelegate":162,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":187,"org.easymock.tests2.UsageConstraintsTest.testNotNull":143,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":166,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.CaptureTest.testCapture_2617107":177,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":321,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":94,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":112,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":241,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":326,"org.easymock.tests2.ThreadingTest.testThreadSafe":186,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":299,"org.easymock.tests.UsageThrowableTest.noUpperLimit":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":286,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":194,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":196,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":232,"org.easymock.tests.UsageExpectAndReturnTest.floatType":102,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":225,"org.easymock.tests2.UsageTest.wrongArguments":149,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":344,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":306,"org.easymock.tests2.UsageConstraintsTest.testSame":126,"org.easymock.tests2.UsageTest.resumeIfFailure":154,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":244,"org.easymock.tests.UsageOverloadedMethodTest.overloading":60,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":198,"org.easymock.samples.SupportTest.voteForRemovals":3,"org.easymock.tests.UsageRangeTest.combination":78,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":318,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":294,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":325,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":261,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":144,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":347,"org.easymock.tests.UsageTest.openCallCountByLastCall":272,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":35,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":319,"org.easymock.tests2.NameTest.nameForNiceMock":238,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":336,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":81,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":285,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":330,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":165,"org.easymock.tests2.CaptureTest.testPrimitive":178,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":209,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":114,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":43,"org.easymock.samples.BasicClassMockTest.testPrintContent":13,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":268,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":65,"org.easymock.tests.UsageExpectAndThrowTest.floatType":31,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":252,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":348,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":115,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":208,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":320,"org.easymock.tests2.UsageStrictMockTest.differentMethods":168,"org.easymock.tests.UsageTest.exactCallCountByLastCall":27,"org.easymock.tests2.AnswerTest.stubAnswer":191,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":230,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":247,"org.easymock.tests2.CaptureTest.testCaptureLast":181,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":30,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":290,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":88,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":201,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":218,"org.easymock.tests.UsageStrictMockTest.range":75,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":273,"org.easymock.tests.UsageTest.unexpectedCallWithArray":271,"org.easymock.tests.MockingTest.testPartialClassMocking":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":116,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":152,"org.easymock.tests2.UsageConstraintsTest.constraints":122,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.UsageConstraintsTest.lessThan":145,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":265,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":305,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":262,"org.easymock.tests.UsageVarargTest.varargLongAccepted":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":288,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":355,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":214,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":216,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":351,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":367,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":220,"org.easymock.tests2.UsageStrictMockTest.range":167,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":199,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":250,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":276,"org.easymock.tests.UsageTest.moreThanOneArgument":23,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":66,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":246,"org.easymock.tests2.UsageTest.openCallCountByLastCall":298,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":202,"org.easymock.tests.UsageStrictMockTest.differentMethods":76,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":363,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":328,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":228,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":121,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":33,"org.easymock.tests.DefaultClassInstantiatorTest.object":362,"org.easymock.tests.UsageVarargTest.differentLength":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":256,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":28,"org.easymock.tests2.CaptureTest.testCapture2_2446744":311,"org.easymock.tests.GenericTest.testPackageScope":98}}]

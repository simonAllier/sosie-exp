[{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[1,2,3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[5,6,7,8,9,10],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[14],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[15,16,17],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"finalizeMethod"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,30,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,14,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,5,6,7,8,100,9,10,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,1,187,188,189,11,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,2,323,324,3,4,15,16,17,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,12,352,13,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,0,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,92,123,127,128,131,132,140,145,149,150,151,152,153,154,158,214,318,319,320,321,367,374,394],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[441,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[442,443,444,445,446,447,448,449],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[66,450,135,136,142,143,146,147,161,164,167,370,376,377,384],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[282,284,292,409,410,415,416,418,427],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:29","sourceCode":"new org.easymock.internal.matchers.Any()","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[317,324,436,438],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[61,64],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.internal.MockBuilder:223","failures":[273,451,304,318,452,359],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[201],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[268,277],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[453,434],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[454],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,14,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,5,6,7,8,100,9,10,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,455,137,456,138,457,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,1,187,188,189,11,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,458,274,275,276,277,278,279,280,281,451,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,459,460,302,461,303,304,462,305,306,463,464,307,308,309,310,311,465,312,466,467,313,314,315,316,317,318,319,320,321,322,2,323,324,3,4,15,16,17,325,326,327,468,328,329,469,330,470,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,471,472,347,348,349,350,473,351,474,475,476,477,12,352,13,353,354,355,452,356,478,357,358,359,360,479,361,362,480,481,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,482,483,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,0,422,423,424,425,426,427,428,429,430,431,432,433,434,436,437,438,439,440],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[484,417,422,434],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[20,157,183,352,353,354,355],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[485,407,409,425,431],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,92,121,123,124,125,126,127,128,131,132,135,140,145,149,150,151,152,153,154,158,214,318,319,320,321,367,374,394],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[19,20,21,22,23,24,26,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,104,105,106,107,108,109,114,122,123,129,130,133,134,135,136,141,149,150,151,152,153,154,160,163,165,168,169,170,174,175,177,203,204,205,206,207,208,213,214,215,216,217,218,219,238,239,240,241,242,246,247,248,250,251,253,254,255,256,257,258,259,262,267,269,270,271,272,274,277,279,282,283,284,285,287,288,289,290,291,292,295,296,297,300,317,318,319,320,321,322,324,3,4,15,16,17,472,347,350,473,474,475,476,477,352,13,355,452,358,359,368,369,371,372,375,378,381,382,385,386,387,388,389,390,391,393,394,407,408,409,410,412,413,414,415,416,417,419,420,421,0,422,423,424,425,426,427,428,429,431,432,433,434,436,438,439],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:90","sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[20,66,123,134,135,136,140,141,143,144,145,146,147,148,164,165,168,206,208,211,214,246,257,258,322,474,475,476,477,355,367,369,370,373,374,376,377,379,382,385,413,414,419,420,432,433],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:557","failures":[18,19,20,21,22,24,26,28,30,30,31,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,14,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,144,145,148,149,150,151,152,153,154,155,157,158,160,165,167,168,174,175,177,195,201,205,212,213,214,215,216,217,218,219,231,238,239,240,241,242,243,244,245,258,259,262,265,267,268,269,270,271,272,274,278,279,280,282,283,285,286,289,290,291,292,293,294,295,296,297,298,299,300,302,304,311,314,317,318,319,320,321,322,2,323,324,3,4,15,16,325,326,327,468,328,329,469,330,470,331,332,333,340,471,472,347,348,349,350,473,12,352,13,353,354,355,356,358,360,479,480,367,368,369,371,373,374,375,378,379,382,384,385,391,392,393,394,400,407,408,409,410,412,413,414,415,416,417,419,420,421,0,422,423,424,425,426,427,428,429,431,432,433,434,436,438,439],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:45","sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24,26,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,95,96,99,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,143,144,145,146,147,148,153,155,157,158,160,162,163,164,165,166,167,168,169,174,175,177,203,205,207,208,210,211,212,213,214,238,239,240,241,242,246,247,248,250,251,252,253,254,255,256,257,258,259,262,267,268,269,270,271,272,274,278,279,280,282,283,284,285,286,287,288,289,290,291,292,294,295,296,297,298,299,300,302,304,311,314,317,320,322,324,3,4,15,16,17,325,326,327,468,328,329,469,470,331,332,333,334,340,471,472,347,348,349,350,473,474,475,476,477,352,13,353,355,356,358,360,479,480,367,368,369,370,371,372,373,374,376,377,378,379,380,381,382,383,384,385,386,391,392,393,394,400,407,408,409,410,412,413,414,415,416,417,419,420,421,0,422,423,424,425,426,427,428,429,430,431,432,433,434,436,438,439],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[486,487,488,489,490,491,440],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":410,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":140,"org.easymock.tests2.UsageTest.argumentsOrdered":377,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":11,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":372,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":34,"org.easymock.tests2.DelegateToTest.testReturnException":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":150,"org.easymock.tests.MockingTest.testPartialClassMocking":174,"org.easymock.tests.MockClassControlTest.testToString":115,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":351,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":463,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":35,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":304,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":392,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":486,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":417,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":129,"org.easymock.tests2.UsageTest.wrongArguments":370,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":103,"org.easymock.samples.ExampleTest.answerVsDelegate":20,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":138,"org.easymock.tests2.UsageConstraintsTest.testNull":413,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":179,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":270,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":120,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":331,"org.easymock.tests2.CaptureTest.testPrimitive":285,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":133,"org.easymock.tests.UsageTest.moreThanOneArgument":141,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":54,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":217,"org.easymock.tests.UsageTest.argumentsOrdered":147,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":94,"org.easymock.tests.UsageVarargTest.varargIntAccepted":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":238,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":490,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":452,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":405,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":183,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":242,"org.easymock.tests.ReplayStateInvalidUsageTest.times":234,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":340,"org.easymock.tests2.DependencyTest.testClassMocking":482,"org.easymock.tests2.AnswerTest.answer":322,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":196,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":390,"org.easymock.tests2.CaptureTest.testAnd":282,"org.easymock.tests2.UsageTest.strictResetToDefault":368,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":277,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":216,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":89,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":328,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":98,"org.easymock.tests2.DelegateToTest.testDelegate":355,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":50,"org.easymock.tests.LimitationsTest.mockFinalMethod":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":153,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":109,"org.easymock.tests2.DependencyTest.testClassMockingSupport":483,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":264,"org.easymock.tests2.CaptureTest.testCapture1_2446744":286,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":458,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":48,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":388,"org.easymock.tests.UsageThrowableTest.throwError":121,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":228,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":456,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":406,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":316,"org.easymock.samples.PartialClassMockTest.testGetArea":18,"org.easymock.tests.MockingTest.testInterfaceMocking":176,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":229,"org.easymock.tests2.CompareToTest.testLessOrEqual":485,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":239,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":464,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":36,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":225,"org.easymock.tests2.UsageTest.niceToStrict":371,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":181,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":358,"org.easymock.tests2.MockBuilderTest.testCreateMock":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":466,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":343,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":44,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":329,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":245,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":203,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":101,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":444,"org.easymock.tests.UsageOverloadedMethodTest.overloading":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":313,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":422,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":78,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":212,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":291,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":249,"org.easymock.tests.MockClassControlTest.testEquals":119,"org.easymock.tests2.EasyMockSupportClassTest.testAll":302,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":52,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":389,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":107,"org.easymock.tests2.CaptureTest.testCaptureAll":283,"org.easymock.tests.MockNameTest.defaultName":65,"org.easymock.tests2.UsageConstraintsTest.testMatches":423,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":218,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":226,"org.easymock.samples.ExampleTest.voteForRemovals":24,"org.easymock.tests.UsageVarargTest.allKinds":257,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":108,"org.easymock.samples.BasicClassMockTest.testPrintContent":33,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":127,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":380,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":402,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":154,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":354,"org.easymock.tests2.UsageConstraintsTest.greaterThan":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":461,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":88,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":280,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":10,"org.easymock.samples.ExampleTest.voteForRemoval":21,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":281,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":297,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":457,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":273,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":99,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":367,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":327,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":149,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":12,"org.easymock.tests2.CaptureTest.testCaptureFirst":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":468,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":379,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":161,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":74,"org.easymock.tests2.CaptureTest.testCapture2_2446744":294,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":299,"org.easymock.tests2.UsageTest.moreThanOneArgument":369,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":197,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":256,"org.easymock.tests.GenericTest.testBridgedEquals":64,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":445,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":442,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":210,"org.easymock.tests.UsageExpectAndReturnTest.longType":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":105,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":325,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":53,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":430,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":93,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":51,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":111,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":215,"org.easymock.tests.UsageCallCountTest.tooManyCalls":211,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":467,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":345,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":40,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":472,"org.easymock.tests.MockingTest.testNiceClassMocking":180,"org.easymock.tests.MockingTest.testClassMocking":172,"org.easymock.tests2.UsageConstraintsTest.testContains":421,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":204,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":320,"org.easymock.tests2.UsageConstraintsTest.testFind":412,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":214,"org.easymock.tests.MockTypeTest.fromEasyMockClass":137,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":438,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":162,"org.easymock.tests.UsageExpectAndReturnTest.object":77,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":274,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":470,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":487,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":251,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":223,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":446,"org.easymock.tests.UsageTest.exactCallCountByLastCall":148,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":186,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":58,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":95,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":440,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":83,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":246,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":157,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":396,"org.easymock.tests.MockClassControlTest.testHashCode":118,"org.easymock.tests2.EasyMockSupportTest.testVerify":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":308,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":96,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":155,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":387,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":435,"org.easymock.tests.UsageVarargTest.varargCharAccepted":250,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":202,"org.easymock.tests2.UsageTest.openCallCountByLastCall":373,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":448,"org.easymock.tests.DefaultClassInstantiatorTest.object":5,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":333,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":243,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":221,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":450,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":309,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":124,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":338,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":395,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":117,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":41,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":84,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":110,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":314,"org.easymock.tests2.UsageTest.resumeIfFailure":378,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":455,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":152,"org.easymock.tests2.StubTest.stubWithReturnValue":394,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":491,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":431,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":76,"org.easymock.tests2.SerializationTest.testAllMockedMethod":17,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":195,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":454,"org.easymock.samples.SupportTest.voteForRemovals":28,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":61,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":398,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":47,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":441,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":201,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":2,"org.easymock.tests.UsageExpectAndThrowTest.object":45,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":60,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":428,"org.easymock.tests2.DelegateToTest.testWrongClass":353,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.tests.UsageStrictMockTest.range":167,"org.easymock.samples.ConstructorCalledMockTest.testTax":30,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":365,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":330,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":471,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":443,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":46,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":360,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":146,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":301,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":102,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":57,"org.easymock.tests2.CaptureTest.testCaptureNone":290,"org.easymock.tests.UsageUnorderedTest.message":66,"org.easymock.tests.UsageVerifyTest.twoReturns":136,"org.easymock.tests.UsageVarargTest.varargByteAccepted":255,"org.easymock.tests2.ThreadingTest.testThreadSafe":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":465,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":208,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":32,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":224,"org.easymock.tests2.CaptureTest.testCapture_2617107":284,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":266,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":199,"org.easymock.tests2.UsageConstraintsTest.any":419,"org.easymock.tests2.StubTest.stub":393,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":112,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":151,"org.easymock.tests.UsageExpectAndThrowTest.longType":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":200,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":100,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":232,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":383,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":400,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests.LimitationsTest.mockNativeMethod":262,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":14,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":86,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":337,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":386,"org.easymock.tests2.NameTest.nameForMocksControl":477,"org.easymock.tests2.MockedExceptionTest.testMockedException":319,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":303,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":145,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":437,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":177,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":39,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":267,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":479,"org.easymock.tests.MockingTest.testNicePartialClassMocking":175,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":272,"org.easymock.tests2.CaptureTest.testCaptureLast":289,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":335,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":265,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":473,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":416,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":429,"org.easymock.tests.MockingTest.testTwoMocks":173,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":67,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":43,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":376,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":433,"org.easymock.samples.ExampleTest.removeNonExistingDocument":25,"org.easymock.tests.UsageStrictMockTest.differentMethods":168,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":230,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":342,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":397,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":7,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":298,"org.easymock.tests2.MockBuilderTest.testCreateMockString":481,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":462,"org.easymock.tests.UsageExpectAndThrowTest.floatType":37,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":460,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":324,"org.easymock.tests.UsageVerifyTest.twoThrows":135,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":311,"org.easymock.samples.ExampleTest.voteAgainstRemoval":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":190,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":55,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":279,"org.easymock.tests.LimitationsTest.privateConstructor":261,"org.easymock.tests2.UsageConstraintsTest.testNotNull":432,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":128,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":318,"org.easymock.tests2.UsageTest.defaultResetToNice":375,"org.easymock.samples.ExampleTest.voteAgainstRemovals":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":191,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":82,"org.easymock.tests.UsageVarargTest.differentLength":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":336,"org.easymock.tests2.CallbackTest.callback":317,"org.easymock.tests2.UsageConstraintsTest.equals":411,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":275,"org.easymock.tests.UsageTest.openCallCountByLastCall":144,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":407,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":131,"org.easymock.tests.UsageCallCountTest.tooFewCalls":206,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":104,"org.easymock.tests.UsageThrowableTest.throwCheckedException":125,"org.easymock.tests.MockingTest.testStrictClassMocking":171,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":92,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":341,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":347,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":235,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":349,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests2.CompareToTest.testGreateOrEqual":484,"org.easymock.tests.ObjectMethodsTest.testHashCode":222,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":489,"org.easymock.tests2.NameTest.nameForNiceMock":476,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":300,"org.easymock.tests2.DependencyTest.testInterfaceMocking":391,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":488,"org.easymock.samples.ExampleTest.addDocument":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":312,"org.easymock.tests2.DelegateToTest.testStubDelegate":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":315,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":165,"org.easymock.tests.UsageVarargTest.varargLongAccepted":254,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":189,"org.easymock.tests.UsageExpectAndReturnTest.floatType":69,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":85,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":439,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":31,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":426,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":404,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":159,"org.easymock.tests.UsageThrowableTest.noUpperLimit":122,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":408,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":363,"org.easymock.tests2.SerializationTest.test":16,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":287,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":6,"org.easymock.tests2.UsageConstraintsTest.testSame":414,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":68,"org.easymock.samples.SupportTest.addDocument":27,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":305,"org.easymock.tests.GenericTest.testPackageScope":62,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":185,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":403,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":178,"org.easymock.tests2.NameTest.nameForMock":474,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":79,"org.easymock.tests2.UsageStrictMockTest.differentMethods":385,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":276,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":49,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":220,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":90,"org.easymock.tests2.MockedExceptionTest.testRealException":321,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":193,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":192,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":382,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":130,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":237,"org.easymock.tests2.NameTest.nameForStrictMock":475,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":357,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":449,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":436,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":271,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":364,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":427,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":8,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":356,"org.easymock.tests2.UsageStrictMockTest.range":384,"org.easymock.tests2.UsageConstraintsTest.lessThan":434,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":326,"org.easymock.tests2.CaptureTest.testCaptureRightOne":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":307,"org.easymock.tests2.UsageConstraintsTest.testOr":415,"org.easymock.tests.UsageRangeTest.combination":87,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":268,"org.easymock.tests.UsageTest.wrongArguments":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":306,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":114,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":80,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":9,"org.easymock.tests.UsageVarargTest.varargShortAccepted":253,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":209,"org.easymock.tests2.UsageConstraintsTest.cmpTo":420,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":323,"org.easymock.tests2.CompareToTest.testLessThan":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":184,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":374,"org.easymock.tests2.CaptureTest.testCaptureFromStub":293,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":227,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":478,"org.easymock.tests.UsageTest.unexpectedCallWithArray":142,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":164,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":207,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":81,"org.easymock.tests2.UsageConstraintsTest.constraints":409,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":166,"org.easymock.samples.ExampleTest.addAndChangeDocument":26,"org.easymock.tests.UsageStrictMockTest.testVerify":170,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":29,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":163,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":106,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":288,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":240,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":73,"org.easymock.tests.LimitationsTest.abstractClass":260,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":241,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":469,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":247}}]

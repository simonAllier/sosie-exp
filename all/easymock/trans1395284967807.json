[{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:89","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","type":"CtForImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[15,16,17,18,19,20,21,22,23,24],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,12,90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[91,92,93,94,95,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[16,98,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.Range:40","failures":[99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,15,155,156,16,157,158,159,160,17,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,51,222,223,224,225,23,24,226,227,228,229,230,0,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,25,26,27,28,29,30,31,32,33,34,35,36,52,258,259,1,260,261,262,53,263,2,3,264,265,266,267,268,269,270,271,37,38,39,40,41,42,43,44,45,46,47,48,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,49,289,50,290,291,292,293,294,295,296,297,298,299,54,300,55,56,57,58,59,60,301,302,303,304,305,306,307,308,97,309,310,61,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,62,338,339,340,341,342,343,344,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,83,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,84,85,86,5,419,420,421,422,423,424,425,6,426,427,7,428,429,430,431,87,432,8,9,433,88,10,11,434,435,436,437,438,439,440,441,89,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,12,13,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,90,499,500,14],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[501],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[119,120,125,126,128,138,195,197,205],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[132,322,6],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:67","sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","type":"CtForImpl"},"failures":[17,161,162,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:43","sourceCode":"org.easymock.Capture<T>.this(org.easymock.CaptureType.org.easymock.CaptureType)","type":"CtInvocationImpl"},"failures":[195,197,198,199,200,201,204,503,205],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[129],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[119,120,123,125,126,128,138,143,195,197,205],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[190,192,193,194,498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"delegateTo","this":"this"}},{"position":"org.easymock.EasyMock:557","failures":[104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,148,152,154,155,158,17,161,163,164,165,166,167,168,171,175,176,177,184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,202,203,204,205,206,207,208,219,220,221,51,222,223,224,225,23,229,0,231,236,239,249,255,30,52,258,259,260,262,53,263,264,265,266,267,268,269,270,271,42,272,274,275,276,277,278,279,281,282,283,287,287,288,288,289,291,292,293,294,295,297,299,54,300,55,56,57,58,59,60,301,302,303,304,305,307,97,309,310,61,324,326,329,330,331,332,333,334,335,336,337,62,338,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,355,370,371,372,373,374,375,376,391,393,394,395,411,417,84,85,86,5,426,7,428,431,87,432,433,88,434,435,436,437,438,439,440,441,89,442,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,477,479,12,13,480,481,482,483,484,489,490,492,496,498,90,500],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[28,40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[17,161,162,502],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[100,101,102,103,117,118,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,146,152,153,158,160,17,161,162,163,164,165,166,167,168,171,174,176,180,181,182,183,184,185,186,187,188,190,191,192,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,216,219,221,51,222,223,224,225,23,227,228,229,230,0,231,232,52,258,259,1,260,261,262,53,263,2,3,264,265,266,269,270,271,272,274,275,277,278,282,283,292,293,294,295,296,297,299,54,300,55,56,57,58,59,60,301,302,303,304,305,310,61,311,312,313,315,316,318,319,320,321,322,324,325,329,330,331,332,333,334,335,336,337,62,338,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,346,353,354,355,356,357,358,370,371,381,391,5,419,420,421,422,423,424,425,6,426,427,7,428,429,430,431,87,432,8,9,433,88,10,11,434,438,439,440,441,89,442,443,444,445,446,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,477,479,12,13,480,481,482,483,484,489,490,492,500],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:129","sourceCode":"this.org.easymock.internal.Result = org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult","delegateTo":"value","this":"lastResult"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[15,18,19,20,504,505,24],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[119,120,123,125,126,128,138,143,195,197,205],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[506],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,15,155,16,157,158,159,160,17,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,213,214,215,216,217,218,219,220,221,51,222,223,224,225,23,24,226,227,228,229,230,0,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,25,26,27,28,29,30,31,32,33,34,35,36,52,258,259,1,260,261,262,53,263,2,3,264,265,266,267,268,269,270,271,37,38,39,40,41,42,43,44,45,46,47,48,272,273,274,275,276,277,278,279,281,282,283,285,286,287,287,288,288,49,289,50,290,291,292,293,294,295,296,297,298,299,54,300,55,56,57,58,59,60,301,302,303,304,305,306,307,308,97,309,310,61,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,329,330,331,332,333,334,335,336,337,62,338,339,340,341,342,343,344,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,83,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,84,85,86,5,419,420,421,422,423,424,425,6,426,427,7,428,429,430,431,87,432,8,9,433,88,10,11,434,435,436,437,438,439,440,441,89,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,12,13,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,90,499,500,14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[266,267,268,269,270,271,272,274,275,293,496],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[104,105,106,107,108,109,110,112,113,114,115,116,120,126,127,129,130,132,135,138,139,140,141,142,152,154,155,17,161,162,163,164,165,166,167,168,171,176,187,188,190,192,194,195,196,197,198,200,201,202,203,204,205,208,219,220,224,23,228,230,0,231,232,236,239,249,255,30,258,1,260,261,2,3,269,42,275,276,277,278,279,281,282,283,285,286,49,289,50,290,291,292,294,295,296,297,299,54,300,56,57,58,59,60,309,310,311,312,313,315,316,318,319,320,321,322,324,325,329,335,336,337,62,65,66,68,73,78,356,357,358,360,361,391,5,425,6,427,7,428,429,431,9,10,11,458,459,461,466,471,476,477,12,489,490,492,496,498,90,500],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.reportLastControl(this.org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"control":"control","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[25,26,27,29,31,32,33,36,37,38,39,41,43,44,45,48,49,50],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,157,158,160,17,161,162,163,164,165,166,167,168,169,171,174,175,176,177,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,216,219,220,221,51,222,223,224,225,23,227,228,229,230,0,231,232,236,239,249,255,30,52,258,259,1,260,261,262,53,263,2,3,264,265,266,267,268,269,270,271,42,272,274,275,276,277,278,279,281,282,283,285,286,287,287,288,288,49,289,50,290,291,292,293,294,295,296,297,298,299,54,300,55,56,57,58,59,60,301,302,303,304,305,307,97,309,310,61,311,312,313,315,316,317,318,319,320,321,322,324,325,326,329,330,331,332,333,334,335,336,337,62,338,340,341,342,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,391,393,394,395,411,417,84,85,86,5,419,420,421,422,423,424,425,6,426,427,7,428,429,430,431,87,432,8,9,433,88,10,11,434,435,436,437,438,439,440,441,89,442,443,444,445,446,448,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,479,12,13,480,481,482,483,484,488,489,490,492,496,497,498,90,499,500,14],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[15,16,507,17,508,18,19,20,21,504,22,23,24],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[264,330,332,384,412],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[152,509],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[54,56],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[148,152,154,155,158,163,164,165,166,167,168,171,175,176,177,187,191,219,220,23,229,0,231,236,239,249,255,276,277,278,279,281,282,283,289,291,292,294,295,297,301,302,303,304,305,329,330,331,332,335,370,371,391,426,7,428,456,457,458,459,460,461,464,465,467,468,469,471,472,473,474,475,480,481,482,483,489,490,492],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[270,271],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[510,447,454],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":120,"org.easymock.tests2.UsageTest.argumentsOrdered":3,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":114,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":405,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":261,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":49,"org.easymock.tests2.DelegateToTest.testReturnException":190,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":439,"org.easymock.tests.MockingTest.testPartialClassMocking":489,"org.easymock.tests.MockClassControlTest.testToString":347,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":99,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":414,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":63,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":239,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":220,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":18,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":127,"org.easymock.tests2.UsageTest.wrongArguments":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":335,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":445,"org.easymock.samples.ExampleTest.answerVsDelegate":293,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":367,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":494,"org.easymock.tests2.UsageConstraintsTest.testNull":123,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":166,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":113,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":352,"org.easymock.tests2.CaptureTest.testPrimitive":198,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":338,"org.easymock.tests.UsageTest.moreThanOneArgument":432,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":82,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":482,"org.easymock.tests.UsageTest.argumentsOrdered":11,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":372,"org.easymock.tests.UsageVarargTest.varargIntAccepted":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":301,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":505,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":146,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":47,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":211,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":398,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":305,"org.easymock.tests.ReplayStateInvalidUsageTest.times":385,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":30,"org.easymock.tests2.DependencyTest.testClassMocking":217,"org.easymock.tests2.AnswerTest.answer":266,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":412,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":183,"org.easymock.tests2.CaptureTest.testAnd":195,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":364,"org.easymock.tests2.UsageTest.strictResetToDefault":258,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":174,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":481,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":108,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":331,"org.easymock.tests2.DelegateToTest.testDelegate":194,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":376,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":78,"org.easymock.tests.LimitationsTest.mockFinalMethod":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":89,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":423,"org.easymock.tests2.DependencyTest.testClassMockingSupport":218,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":476,"org.easymock.tests2.CaptureTest.testCapture1_2446744":199,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":170,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":76,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":181,"org.easymock.tests.UsageThrowableTest.throwError":54,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":379,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":366,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":48,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":328,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":257,"org.easymock.samples.PartialClassMockTest.testGetArea":289,"org.easymock.tests.MockingTest.testInterfaceMocking":491,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":302,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":394,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":244,"org.easymock.tests2.UsageTest.niceToStrict":260,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":396,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":152,"org.easymock.tests2.MockBuilderTest.testCreateMock":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":252,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":33,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":72,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":109,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":363,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":86,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":353,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":443,"org.easymock.tests.UsageOverloadedMethodTest.overloading":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":254,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":133,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":467,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":309,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":132,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":204,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":314,"org.easymock.tests2.EasyMockSupportClassTest.testAll":236,"org.easymock.tests.MockClassControlTest.testEquals":351,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":325,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":421,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":182,"org.easymock.tests2.CaptureTest.testCaptureAll":196,"org.easymock.tests.MockNameTest.defaultName":485,"org.easymock.tests2.UsageConstraintsTest.testMatches":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":483,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":377,"org.easymock.samples.ExampleTest.voteForRemovals":297,"org.easymock.tests.UsageVarargTest.allKinds":322,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":479,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":422,"org.easymock.samples.BasicClassMockTest.testPrintContent":286,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":59,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":227,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":442,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":44,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":193,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":454,"org.easymock.tests2.UsageConstraintsTest.greaterThan":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":237,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":330,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":177,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":455,"org.easymock.samples.ExampleTest.voteForRemoval":294,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":178,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":368,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":169,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":431,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":52,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":106,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":438,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":189,"org.easymock.tests2.CaptureTest.testCaptureFirst":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":107,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":265,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":14,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":463,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":187,"org.easymock.tests2.CaptureTest.testCapture2_2446744":207,"org.easymock.tests2.UsageTest.moreThanOneArgument":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":413,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":158,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":321,"org.easymock.tests.GenericTest.testBridgedEquals":327,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":360,"org.easymock.tests.UsageExpectAndReturnTest.longType":459,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":419,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":104,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":509,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":81,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":141,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":97,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":79,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":480,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":436,"org.easymock.tests.UsageCallCountTest.tooManyCalls":361,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":253,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":464,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":35,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":68,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":58,"org.easymock.tests.MockingTest.testNiceClassMocking":495,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":277,"org.easymock.tests.MockingTest.testClassMocking":487,"org.easymock.tests2.UsageConstraintsTest.testContains":131,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":354,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":224,"org.easymock.tests2.UsageConstraintsTest.testFind":122,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":61,"org.easymock.tests.MockTypeTest.fromEasyMockClass":365,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":424,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":274,"org.easymock.tests.UsageExpectAndReturnTest.object":466,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":171,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":34,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":506,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":112,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":19,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":316,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":342,"org.easymock.tests.UsageTest.exactCallCountByLastCall":434,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":306,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":373,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":472,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":311,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":498,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":38,"org.easymock.tests.MockClassControlTest.testHashCode":350,"org.easymock.tests2.EasyMockSupportTest.testVerify":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":246,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":374,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":496,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":85,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":180,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":216,"org.easymock.tests.UsageVarargTest.varargCharAccepted":315,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":447,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":418,"org.easymock.tests2.UsageTest.openCallCountByLastCall":262,"org.easymock.tests.DefaultClassInstantiatorTest.object":448,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":115,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":84,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":340,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":4,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":56,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":28,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":37,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":175,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":349,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":69,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":473,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":255,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":348,"org.easymock.tests2.UsageTest.resumeIfFailure":264,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":362,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":210,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":441,"org.easymock.tests2.StubTest.stubWithReturnValue":51,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":15,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":465,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":142,"org.easymock.tests2.SerializationTest.testAllMockedMethod":162,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":411,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":98,"org.easymock.samples.SupportTest.voteForRemovals":291,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":323,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":40,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":75,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":502,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":417,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":267,"org.easymock.tests.UsageExpectAndThrowTest.object":73,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":308,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":139,"org.easymock.tests2.DelegateToTest.testWrongClass":192,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":370,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":371,"org.easymock.tests.UsageStrictMockTest.range":7,"org.easymock.samples.ConstructorCalledMockTest.testTax":287,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":214,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":111,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":276,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":501,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":74,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":154,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":387,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":233,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":444,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":395,"org.easymock.tests2.CaptureTest.testCaptureNone":203,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":92,"org.easymock.tests.UsageUnorderedTest.message":5,"org.easymock.tests.UsageVerifyTest.twoReturns":13,"org.easymock.tests.UsageVarargTest.varargByteAccepted":320,"org.easymock.tests2.ThreadingTest.testThreadSafe":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":250,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":358,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":285,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":343,"org.easymock.tests2.CaptureTest.testCapture_2617107":197,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":62,"org.easymock.tests2.UsageConstraintsTest.any":129,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":384,"org.easymock.tests2.StubTest.stub":221,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":437,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":416,"org.easymock.tests.UsageExpectAndThrowTest.longType":66,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":452,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":383,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":230,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":42,"org.easymock.tests2.SerializationTest.testClass":17,"org.easymock.tests.LimitationsTest.mockNativeMethod":391,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":475,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":326,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":27,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":232,"org.easymock.tests2.NameTest.nameForMocksControl":103,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":93,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":29,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":238,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":88,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":67,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":273,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":163,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":155,"org.easymock.tests.MockingTest.testNicePartialClassMocking":490,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":508,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":25,"org.easymock.tests2.CaptureTest.testCaptureLast":202,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":477,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":283,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":140,"org.easymock.tests.MockingTest.testTwoMocks":488,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":284,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":456,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":71,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":144,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":96,"org.easymock.samples.ExampleTest.removeNonExistingDocument":298,"org.easymock.tests.UsageStrictMockTest.differentMethods":428,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":32,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":381,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":39,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":450,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":95,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":186,"org.easymock.tests2.MockBuilderTest.testCreateMockString":160,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":345,"org.easymock.tests.UsageExpectAndThrowTest.floatType":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":240,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":235,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":269,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":226,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":497,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":249,"org.easymock.samples.ExampleTest.voteAgainstRemoval":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":406,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":393,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":176,"org.easymock.tests.LimitationsTest.privateConstructor":390,"org.easymock.tests2.UsageConstraintsTest.testNotNull":143,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":60,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests2.UsageTest.defaultResetToNice":263,"org.easymock.samples.ExampleTest.voteAgainstRemovals":292,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":407,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":26,"org.easymock.tests.UsageVarargTest.differentLength":317,"org.easymock.tests2.CallbackTest.callback":275,"org.easymock.tests2.UsageConstraintsTest.equals":121,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":172,"org.easymock.tests.UsageTest.openCallCountByLastCall":433,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":337,"org.easymock.tests.UsageCallCountTest.tooFewCalls":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":279,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":446,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":94,"org.easymock.tests.UsageThrowableTest.throwCheckedException":57,"org.easymock.tests.MockingTest.testStrictClassMocking":486,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":282,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":334,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":31,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":278,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":386,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":281,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":271,"org.easymock.tests.ObjectMethodsTest.testHashCode":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":504,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":188,"org.easymock.tests2.NameTest.nameForNiceMock":102,"org.easymock.tests2.DependencyTest.testInterfaceMocking":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":20,"org.easymock.samples.ExampleTest.addDocument":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":251,"org.easymock.tests2.DelegateToTest.testStubDelegate":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":256,"org.easymock.tests2.AnswerTest.stubAnswer":270,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":426,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":156,"org.easymock.tests.UsageVarargTest.varargLongAccepted":319,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":429,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":474,"org.easymock.tests.UsageExpectAndReturnTest.floatType":458,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":23,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":288,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":499,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":137,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":46,"org.easymock.tests.UsageThrowableTest.noUpperLimit":300,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":118,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":209,"org.easymock.tests2.SerializationTest.test":161,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":200,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":449,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":457,"org.easymock.tests2.UsageConstraintsTest.testSame":124,"org.easymock.samples.SupportTest.addDocument":290,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":510,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":280,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":241,"org.easymock.tests.GenericTest.testPackageScope":324,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":45,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":493,"org.easymock.tests2.NameTest.nameForMock":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":468,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":159,"org.easymock.tests2.UsageStrictMockTest.differentMethods":231,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":460,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":77,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":339,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":332,"org.easymock.tests2.MockedExceptionTest.testRealException":225,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":409,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":215,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":408,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":229,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":388,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":336,"org.easymock.tests2.NameTest.nameForStrictMock":101,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":151,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":272,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":167,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":213,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":451,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":138,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":148,"org.easymock.tests2.UsageStrictMockTest.range":0,"org.easymock.tests2.UsageConstraintsTest.lessThan":145,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":105,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":21,"org.easymock.tests2.CaptureTest.testCaptureRightOne":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":245,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":91,"org.easymock.tests2.UsageConstraintsTest.testOr":125,"org.easymock.tests.UsageRangeTest.combination":329,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":164,"org.easymock.tests.UsageTest.wrongArguments":9,"org.easymock.tests2.MockBuilderTest.testWithConstructor":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":242,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":346,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":397,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":453,"org.easymock.tests.UsageVarargTest.varargShortAccepted":318,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":359,"org.easymock.tests2.UsageConstraintsTest.cmpTo":130,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":83,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":53,"org.easymock.tests2.CaptureTest.testCaptureFromStub":206,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":378,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":149,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":357,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":470,"org.easymock.tests2.CaptureTest.testCapture":503,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":427,"org.easymock.tests2.UsageConstraintsTest.constraints":119,"org.easymock.samples.ExampleTest.addAndChangeDocument":299,"org.easymock.tests.UsageStrictMockTest.testVerify":430,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":50,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":425,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":420,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":303,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":462,"org.easymock.tests.LimitationsTest.abstractClass":389,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":500,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":304,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":110,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":312}}]

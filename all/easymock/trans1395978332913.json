[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"<any>\")","position":"org.easymock.internal.matchers.Any:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += 1","position":"org.easymock.internal.Results:73","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","position":"org.easymock.internal.MocksBehavior:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type != null) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} ","position":"org.easymock.internal.BridgeMethodResolver:338","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","position":"org.easymock.ConstructorArgs:64","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()))","position":"org.easymock.internal.ClassProxyFactory:108","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    if (org.easymock.internal.ErrorMessage.isMatching()) {\n        int++;\n    } \n}","position":"org.easymock.internal.MocksBehavior:130","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"paramTypes":"paramTypes","name":"name","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ReflectionUtils:227","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.ReflectionUtils:228","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{"otherArgument":"actual","myArgument":"actual"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-1},{"failures":[1,2,3,4,5],"variableMapping":{"values":"values"},"name":"add","transplant":{"sourceCode":"java.util.List<T>.clear()","position":"org.easymock.Capture:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((boolean && boolean) && (!boolean)) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","position":"org.easymock.EasyMock:1831","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments())","position":"org.easymock.internal.Result:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","position":"org.easymock.EasyMock:1530","type":"CtInvocationImpl"},"status":-2},{"failures":[6],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1318","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","position":"org.easymock.internal.matchers.InstanceOf:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","position":"org.easymock.internal.Range:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.internal.LastControl:117","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[7],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1832","type":"CtReturnImpl"},"status":-2},{"failures":[8],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:112","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Class<?> java.lang.Class<?> : java.lang.Class<?>[]) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:168","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"expected":"o"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","position":"org.easymock.internal.RecordState:213","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IAnswer<?>.toString()","position":"org.easymock.internal.Result:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:121","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.LogicalOperator:33","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Or:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Result org.easymock.internal.Result = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).addActual(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:41","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","position":"org.easymock.internal.MocksBehavior:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0)","position":"org.easymock.internal.MocksBehavior:169","type":"CtInvocationImpl"},"status":-1},{"failures":[22],"variableMapping":{"actual":"invocation"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.IArgumentMatcher>.size()) != (org.easymock.internal.Invocation.getArguments().int)) {\n    throw new java.lang.IllegalStateException((((((((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\") + \"This exception usually occurs when matchers are mixed with raw values when recording a method:\\n\") + \"\\tfoo(5, eq(6));\\t// wrong\\n\") + \"You need to use no matcher at all or a matcher for every single param:\\n\") + \"\\tfoo(eq(5), eq(6));\\t// right\\n\") + \"\\tfoo(5, 6);\\t// also right\"));\n} ","position":"org.easymock.internal.ExpectedInvocation:46","type":"CtIfImpl"},"status":-1},{"failures":[23,24,25,26,9,27,28,29,30,31,32,16,18,20,33,34,35,36],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:64","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.easymock.IArgumentMatcher.matches(java.lang.Object))","position":"org.easymock.internal.matchers.Not:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1726","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":-2},{"failures":[37,38,39,40,41,42],"variableMapping":{"this":"this","buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:44","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","position":"org.easymock.internal.EasyMockProperties:49","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"f":"f"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:159","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:81","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:50","type":"CtInvocationImpl"},"status":-2},{"failures":[43],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String)","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","position":"org.easymock.EasyMock:1776","type":"CtInvocationImpl"},"status":-1},{"failures":[44,45,46,46,47,47],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:167","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:415","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ReflectionUtils:184","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:336","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","position":"org.easymock.internal.EasyMockProperties:128","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:116","type":"CtInvocationImpl"},"status":-2},{"failures":[48],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:181","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1148","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : org.easymock.internal.InjectionPlan.getQualifiedInjections()) {\n    if (!(org.easymock.internal.Injection.isMatched())) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n    } \n}","position":"org.easymock.internal.Injector:88","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:251","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[49,50,43,24,51,52,53,54,22,25,55,56,26,57,58,2,59,60,61,62],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (this.java.lang.Object[].int) ; int++) {\n    final java.lang.Object java.lang.Object = this.java.lang.Object[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (org.easymock.internal.Invocation.isPrimitiveParameter(int)) {\n        if (!(java.lang.Object.equals(java.lang.Object))) {\n            return false;\n        } \n    } else {\n        if (java.lang.Object != java.lang.Object) {\n            return false;\n        } \n    }\n}","position":"org.easymock.internal.Invocation:117","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1121","type":"CtReturnImpl"},"status":0},{"failures":[63,64],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.Results org.easymock.internal.Results = new org.easymock.internal.Results()","position":"org.easymock.internal.UnorderedBehavior:44","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"status":0},{"failures":[65,66,67,68,69,70,23,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,49,50,117,43,24,51,52,53,54,22,25,118,119,120,121,122,0,123,124,55,56,6,125,8,26,57,126,127,128,9,129,130,10,131,132,133,134,135,136,137,138,48,139,44,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,58,2,59,60,173,174,175,176,177,178,61,62,3,4,179,180,181,182,183,184,185,186,187,188,189,190,191,192,63,64,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,11,12,13,14,27,239,15,240,241,7,28,29,242,243,244,245,30,246,247,248,249,250,251,252,253,254,255,46,47,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,31,343,344,345,346,347,348,349,32,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,41,16,401,402,17,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,18,19,20,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,33,21,42,491,34,35,492,493,36,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.util.List<java.lang.reflect.Field>) {\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget);\n    if (org.easymock.internal.Injection == null) {\n        continue;\n    } \n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n}","position":"org.easymock.internal.Injector:181","type":"CtForEachImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"ObjectStreamClass.\" + java.lang.String)","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","position":"org.easymock.internal.BridgeMethodResolver:246","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).startsWith(java.lang.String))","position":"org.easymock.internal.matchers.StartsWith:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"methodArgs":"org.easymock.internal.Invocation.NO_ARGS"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.DefaultClassInstantiator:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","position":"org.easymock.internal.MocksControl:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2722051869610289637L","position":"org.easymock.internal.Results:28","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","position":"org.easymock.internal.RecordState:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field)","position":"org.easymock.internal.Injector:183","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:261","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","buffer":"buffer","value":"value"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[248,253,258,503,504,505,507,508,510,511,512,513,514],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:54","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:103","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-6743402320315331536L","position":"org.easymock.internal.Range:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1634","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MocksControl:225","type":"CtLocalVariableImpl"},"status":-2},{"failures":[25,418],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:622","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":343,"org.easymock.tests2.MockedExceptionTest.testRealException":153,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":83,"org.easymock.tests.UsageVarargTest.varargIntAccepted":505,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":470,"org.easymock.tests.LimitationsTest.mockFinalMethod":384,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":115,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":413,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":94,"org.easymock.tests.UsageCallCountTest.tooManyCalls":272,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":390,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":237,"org.easymock.tests2.StubTest.stubWithReturnValue":104,"org.easymock.tests.UsageVarargTest.allKinds":514,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":432,"org.easymock.tests2.CaptureTest.testCaptureAll":2,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":360,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.CaptureTest.testAnd":58,"org.easymock.tests.UsageStrictMockTest.testVerify":404,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":446,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":309,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":298,"org.easymock.tests.MockClassControlTest.testToString":412,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":229,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":397,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":159,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":464,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":291,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":454,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":205,"org.easymock.tests.UsageThrowableTest.throwError":341,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":479,"org.easymock.samples.SupportTest.addDocument":257,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":380,"org.easymock.tests2.StubTest.stub":103,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":434,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":391,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":200,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":48,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":368,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":482,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":376,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":338,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":340,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":145,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":513,"org.easymock.tests.UsageExpectAndThrowTest.object":448,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":372,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests.UsageVarargTest.varargByteAccepted":512,"org.easymock.tests.MockClassControlTest.testEquals":416,"org.easymock.tests.UsageTest.wrongArguments":491,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":462,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":276,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":423,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":204,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":449,"org.easymock.tests2.UsageTest.defaultResetToNice":242,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":40,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":37,"org.easymock.tests.MockingTest.testNiceClassMocking":359,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":152,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":193,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":223,"org.easymock.tests2.MockBuilderTest.testCreateMock":226,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":194,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":387,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":392,"org.easymock.samples.ExampleTest.voteAgainstRemovals":248,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":127,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":203,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":308,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":496,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":348,"org.easymock.tests2.CaptureTest.testCapture1_2446744":173,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":109,"org.easymock.samples.ExampleTest.voteForRemoval":250,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":69,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":269,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":312,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":364,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":403,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":429,"org.easymock.tests2.CaptureTest.testCaptureRightOne":61,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":284,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":388,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":72,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":495,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":389,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":436,"org.easymock.tests2.UsageConstraintsTest.cmpTo":118,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":171,"org.easymock.tests.MockTypeTest.fromEasyMockClass":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":488,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":209,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":224,"org.easymock.tests2.MockedExceptionTest.testMockedException":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":8,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":407,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":457,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":18,"org.easymock.samples.PartialClassMockTest.testGetArea":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":324,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":32,"org.easymock.samples.ConstructorCalledMockTest.testTax":46,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":233,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":66,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":71,"org.easymock.tests2.UsageTest.argumentsOrdered":244,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":299,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":70,"org.easymock.samples.ExampleTest.removeNonExistingDocument":254,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":75,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":486,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":386,"org.easymock.tests2.CaptureTest.testCaptureMultiple":1,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":283,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":273,"org.easymock.tests2.AnswerTest.answer":23,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":210,"org.easymock.tests.MockingTest.testNicePartialClassMocking":354,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":369,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":409,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":435,"org.easymock.tests.UsageExpectAndThrowTest.longType":441,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":455,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":92,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":161,"org.easymock.tests.UsageTest.argumentsOrdered":493,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":50,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":222,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":296,"org.easymock.tests2.NameTest.nameForStrictMock":12,"org.easymock.tests2.MockBuilderTest.testCreateMockString":228,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":378,"org.easymock.tests2.CaptureTest.testCaptureNone":177,"org.easymock.tests2.SerializationTest.testClass":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":337,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":425,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":246,"org.easymock.tests.MockingTest.testInterfaceMocking":355,"org.easymock.tests2.EasyMockSupportTest.testVerify":166,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":421,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":207,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":221,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":443,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":358,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":125,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":27,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":227,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":295,"org.easymock.tests.GenericTest.testBridgedEquals":502,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":234,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":132,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":63,"org.easymock.tests.MockClassControlTest.testHashCode":415,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":180,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":290,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":303,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":347,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":361,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":99,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":230,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":232,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":168,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.tests2.UsageTest.resumeIfFailure":245,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":465,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":262,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":235,"org.easymock.tests.UsageOverloadedMethodTest.overloading":349,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":44,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":304,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":183,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":88,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":316,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":47,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":87,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":500,"org.easymock.tests.UsageTest.openCallCountByLastCall":34,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":444,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":315,"org.easymock.tests2.NameTest.nameForNiceMock":13,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":394,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":206,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":497,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":405,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":469,"org.easymock.tests2.CaptureTest.testPrimitive":60,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":134,"org.easymock.samples.BasicClassMockTest.testPrintContent":247,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":365,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":141,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":147,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":271,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":265,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":89,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":156,"org.easymock.tests.MockingTest.testClassMocking":351,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":501,"org.easymock.tests2.CaptureTest.testCaptureLast":176,"org.easymock.tests2.UsageConstraintsTest.equals":117,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":270,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":439,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":268,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":215,"org.easymock.tests.UsageStrictMockTest.range":402,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":35,"org.easymock.tests.UsageTest.unexpectedCallWithArray":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":320,"org.easymock.samples.ExampleTest.addDocument":252,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":357,"org.easymock.tests2.UsageConstraintsTest.lessThan":126,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":313,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":492,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":307,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":433,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":329,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":65,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":490,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":38,"org.easymock.tests2.UsageStrictMockTest.range":130,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":275,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":322,"org.easymock.tests.UsageTest.moreThanOneArgument":21,"org.easymock.tests2.UsageTest.openCallCountByLastCall":28,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":217,"org.easymock.tests.UsageStrictMockTest.differentMethods":17,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":68,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":442,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":362,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":278,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":81,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":167,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":139,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":202,"org.easymock.tests2.DependencyTest.testClassMockingSupport":213,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":401,"org.easymock.tests.ReplayStateInvalidCallsTest.times":475,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":453,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":418,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":182,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":260,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":426,"org.easymock.tests2.UsageConstraintsTest.testContains":119,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":477,"org.easymock.tests2.UsageConstraintsTest.testFind":43,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":45,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":174,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":487,"org.easymock.samples.ExampleTest.addAndChangeDocument":255,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":216,"org.easymock.tests.UsageVarargTest.varargCharAccepted":507,"org.easymock.tests2.CaptureTest.testCaptureFromStub":62,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":211,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":300,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":377,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":508,"org.easymock.tests2.DelegateToTest.testReturnException":106,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":102,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":165,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":128,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":148,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":498,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":398,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":489,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":178,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":450,"org.easymock.tests2.UsageConstraintsTest.testMatches":122,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":328,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":339,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests.LimitationsTest.abstractClass":381,"org.easymock.tests2.EasyMockSupportClassTest.testAll":79,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":306,"org.easymock.tests2.UsageConstraintsTest.greaterThan":123,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":503,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":393,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":55,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":162,"org.easymock.tests.UsageExpectAndReturnTest.object":288,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":131,"org.easymock.tests2.DelegateToTest.testWrongClass":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":319,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":476,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":39,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":445,"org.easymock.samples.ExampleTest.voteAgainstRemoval":251,"org.easymock.tests.CapturesMatcherTest.test":5,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":346,"org.easymock.tests.UsageVarargTest.varargShortAccepted":510,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":437,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":189,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":367,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":78,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":410,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":201,"org.easymock.tests2.NameTest.nameForMocksControl":14,"org.easymock.tests2.SerializationTest.testAllMockedMethod":114,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":467,"org.easymock.tests.MockingTest.testStrictClassMocking":350,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":379,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":86,"org.easymock.tests2.DelegateToTest.testStubDelegate":107,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":363,"org.easymock.tests.LimitationsTest.mockNativeMethod":383,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":331,"org.easymock.tests.UsageUnorderedTest.message":461,"org.easymock.samples.ExampleTest.answerVsDelegate":249,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":428,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":481,"org.easymock.tests.UsageCallCountTest.tooFewCalls":267,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":287,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":73,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":95,"org.easymock.tests2.ThreadingTest.testChangeDefault":192,"org.easymock.tests2.DependencyTest.testInterfaceMocking":214,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":330,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":447,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":199,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":53,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":169,"org.easymock.tests.MockingTest.testTwoMocks":352,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":266,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":430,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":150,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":84,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":289,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":336,"org.easymock.tests.UsageThrowableTest.throwCheckedException":344,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":302,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":31,"org.easymock.samples.ExampleTest.voteForRemovals":253,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":121,"org.easymock.tests.ReplayStateInvalidUsageTest.times":395,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":483,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":85,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":373,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":136,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":317,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":279,"org.easymock.tests2.UsageConstraintsTest.any":25,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":318,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":321,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":164,"org.easymock.tests.LimitationsTest.privateConstructor":382,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":149,"org.easymock.tests2.CallbackTest.callback":195,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":472,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":478,"org.easymock.tests2.NameTest.nameForMock":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":325,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":120,"org.easymock.tests.MockNameTest.defaultName":385,"org.easymock.tests2.SerializationTest.test":113,"org.easymock.tests.UsageExpectAndReturnTest.longType":281,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":175,"org.easymock.tests2.CaptureTest.testCaptureFirst":4,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":471,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":460,"org.easymock.tests2.UsageTest.niceToStrict":241,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":370,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":277,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":427,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":76,"org.easymock.tests2.UsageTest.strictResetToDefault":239,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":451,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":143,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":419,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":438,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":285,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":196,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":138,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":219,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":124,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":135,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":504,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":375,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":356,"org.easymock.tests2.DelegateToTest.testDelegate":110,"org.easymock.tests2.UsageConstraintsTest.testNotNull":26,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":129,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":184,"org.easymock.tests2.CaptureTest.testCapture_2617107":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":334,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":186,"org.easymock.tests2.ThreadingTest.testThreadSafe":191,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":335,"org.easymock.tests.UsageThrowableTest.noUpperLimit":342,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":506,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":155,"org.easymock.tests.UsageExpectAndReturnTest.floatType":280,"org.easymock.tests2.UsageTest.wrongArguments":240,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":22,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":198,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":414,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":225,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":473,"org.easymock.samples.SupportTest.voteForRemovals":258,"org.easymock.tests.UsageRangeTest.combination":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":91,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":345,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":57,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":97,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":190,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":292,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":452,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":431,"org.easymock.tests.UsageExpectAndThrowTest.floatType":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":93,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":133,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":172,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":293,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":179,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":140,"org.easymock.tests.UsageTest.exactCallCountByLastCall":36,"org.easymock.tests2.AnswerTest.stubAnswer":74,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":160,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":463,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":474,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":82,"org.easymock.tests.MockingTest.testPartialClassMocking":353,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":294,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":243,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":197,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":111,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":468,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":408,"org.easymock.tests.UsageVarargTest.varargLongAccepted":511,"org.easymock.tests.ObjectMethodsTest.testHashCode":422,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":142,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":144,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":41,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":98,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":314,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":218,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":459,"org.easymock.tests2.DependencyTest.testClassMocking":212,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":366,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":417,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":420,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":188,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":158,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":116,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":411,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":220,"org.easymock.tests.DefaultClassInstantiatorTest.object":484,"org.easymock.tests.UsageVarargTest.differentLength":509,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":333,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":480,"org.easymock.tests2.CaptureTest.testCapture2_2446744":3,"org.easymock.tests.GenericTest.testPackageScope":499}}]

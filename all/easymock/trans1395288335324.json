[{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:196","sourceCode":"if ((java.lang.Thread) == null) {\n    java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread();\n} else if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","type":"CtIfImpl"},"failures":[0,1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18,19,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,1,2,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[89],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[359,111,112,113,114,115,116,117,118,119,120,360,121,122,123,124,361],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"value","capture":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[362,363,200,209,364,365],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,11,20,21,22,23,24,26,29,30,33,34,37,38,41,42,44,45,46,47,48,50,51,53,54,57,60,62,63,68,1,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,106,107,110,111,112,113,114,116,117,118,119,120,121,124,138,139,140,141,144,145,146,147,149,150,156,158,159,160,161,163,164,166,169,170,171,172,173,174,175,176,177,178,182,183,185,186,187,188,189,190,191,193,194,195,199,201,204,205,206,208,216,217,218,219,220,221,222,223,244,246,247,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,281,283,284,285,286,287,289,290,291,292,293,295,296,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,327,328,329,330,331,332,333,334,335,340,348,349,350,351,352],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:759","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[73,80,86,98],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[366],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:114","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,1,2,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,103,104,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,178,182,183,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,361,361,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,239,241,242,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,327,328,329,332,333,334,335,336,337,338,348,349,350,351,352],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:59","sourceCode":"return org.easymock.Mock","type":"CtReturnImpl"},"failures":[3,12,367,368,369,370,371,25,372,373,374,375,376,377,378,379,380,381,382,35,383,384,385,386,387,388],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:50","failures":[18,19,24,389,30,34,390,391,392,393,394,395,64,396,397,65,398,399,400,401,402,403,404,405,406,66,407,408,409,410,411,67,412,413,138,414,415,416,417,418,419],"status":-1,"binaryOperator":"(java.lang.Object[].int) != (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[4,6,7,9,16,17,18,18,19,19,22,24,25,26,27,28,29,30,31,32,33,34,35,38,40,41,49,50,51,53,55,56,57,60,61,63,64,65,66,67,68,1,2,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,107,111,112,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,141,145,148,149,151,152,154,156,157,158,159,160,161,163,165,166,167,168,169,170,175,176,177,178,182,184,190,191,193,195,196,197,201,203,204,207,208,211,212,215,216,244,246,247,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,281,294,296,297,298,299,300,301,302,324,325,327,328,329,347,348,349,350,351,352,357,358],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[138,139,140,420],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterTypeNames":"parameterTypeNames","i":"i","parameterTypes":"parameterTypes"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[13,14,17,18,18,19,19,22,24,28,29,30,31,33,34,64,65,66,67,138,140,421,147,148,422,149,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,182,183,184,216,223,326,327,328,329],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[423],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[111,113,114,115,116,117,118,120,360,121,122,124],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[28,31,156,159,160,161,163,424,346],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[20,21,22,23,63,425,217,218,219,220,221,222,237,248,282,353,354,355],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:52","sourceCode":"final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[426],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[179,353],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,1,2,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,103,427,104,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,178,182,183,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,239,241,242,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,327,328,329,332,333,334,335,336,337,338,348,349,350,351,352],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[428],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"control":"control","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:62","sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[429],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[430,431,432],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[60,176,178,433,234],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[389,138,434,435,436,437,438,439,440,416],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[441],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[359,111,112,113,114,115,116,117,118,120,360,121,122,123,124,361],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[362,363,200,209,364,365],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[4,6,7,9,16,17,22,24,25,26,27,28,29,30,31,32,33,34,35,38,40,41,49,50,51,53,55,56,57,60,61,63,64,65,66,67,68,1,2,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,111,112,113,114,115,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,141,145,148,149,151,152,154,156,157,158,159,160,161,163,165,166,167,168,169,170,175,176,177,178,182,190,191,192,193,195,201,203,204,207,208,211,212,215,216,244,246,247,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,281,282,294,296,297,298,299,300,301,327,328,329],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[442,0,443],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":74,"org.easymock.tests2.UsageTest.argumentsOrdered":59,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":207,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":54,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":3,"org.easymock.tests2.DelegateToTest.testReturnException":106,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":218,"org.easymock.tests.MockingTest.testPartialClassMocking":327,"org.easymock.tests.MockClassControlTest.testToString":341,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":401,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":303,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":27,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":435,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":80,"org.easymock.tests2.UsageTest.wrongArguments":52,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":246,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":377,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":173,"org.easymock.samples.ExampleTest.answerVsDelegate":5,"org.easymock.tests2.UsageConstraintsTest.testNull":76,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":159,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":134,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":346,"org.easymock.tests2.CaptureTest.testPrimitive":114,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":250,"org.easymock.tests.UsageTest.moreThanOneArgument":208,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":322,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":158,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":350,"org.easymock.tests.UsageTest.argumentsOrdered":214,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":276,"org.easymock.tests.UsageVarargTest.varargIntAccepted":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":439,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":147,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":387,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":150,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":255,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests.ReplayStateInvalidUsageTest.times":235,"org.easymock.tests2.AnswerTest.answer":141,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":433,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":47,"org.easymock.tests2.CaptureTest.testAnd":111,"org.easymock.tests2.UsageTest.strictResetToDefault":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":415,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":349,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":177,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":129,"org.easymock.tests2.DelegateToTest.testDelegate":110,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":280,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":221,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":189,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":357,"org.easymock.tests2.CaptureTest.testCapture1_2446744":115,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":443,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":45,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":229,"org.easymock.tests.UsageThrowableTest.throwError":294,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":352,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":413,"org.easymock.samples.PartialClassMockTest.testGetArea":17,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":252,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":402,"org.easymock.tests2.UsageTest.niceToStrict":53,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":304,"org.easymock.tests2.ThreadingTest.testChangeDefault":0,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":432,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":149,"org.easymock.tests2.MockBuilderTest.testCreateMock":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":409,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":374,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":312,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":362,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":130,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":181,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":171,"org.easymock.tests.UsageOverloadedMethodTest.overloading":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":406,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":86,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":242,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":267,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":85,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":120,"org.easymock.tests2.EasyMockSupportClassTest.testAll":64,"org.easymock.tests.MockClassControlTest.testEquals":345,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":183,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":320,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":421,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":441,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":187,"org.easymock.tests2.CaptureTest.testCaptureAll":112,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":46,"org.easymock.tests2.UsageConstraintsTest.testMatches":87,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":227,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":351,"org.easymock.samples.ExampleTest.voteForRemovals":9,"org.easymock.tests.UsageVarargTest.allKinds":293,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":193,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":188,"org.easymock.samples.BasicClassMockTest.testPrintContent":14,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":300,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":36,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":222,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":440,"org.easymock.tests2.UsageConstraintsTest.greaterThan":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":396,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":176,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":167,"org.easymock.samples.ExampleTest.voteForRemoval":6,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":162,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":49,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":223,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":425,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":127,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":394,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":217,"org.easymock.tests2.CaptureTest.testCaptureFirst":124,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":105,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":128,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":61,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":245,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":263,"org.easymock.tests2.CaptureTest.testCapture2_2446744":123,"org.easymock.tests2.UsageTest.moreThanOneArgument":51,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":69,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":154,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":292,"org.easymock.tests.GenericTest.testBridgedEquals":424,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":337,"org.easymock.tests.UsageExpectAndReturnTest.longType":259,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":185,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":125,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":321,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":94,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":302,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":319,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":354,"org.easymock.tests.UsageCallCountTest.tooManyCalls":338,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":410,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":376,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":308,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":299,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":29,"org.easymock.tests2.UsageConstraintsTest.testContains":84,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":331,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":22,"org.easymock.tests2.UsageConstraintsTest.testFind":75,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":170,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":104,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":198,"org.easymock.tests.UsageExpectAndReturnTest.object":266,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":163,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":375,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":428,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":133,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":436,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":287,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":226,"org.easymock.tests.UsageTest.exactCallCountByLastCall":215,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":281,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":277,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":389,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":272,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":283,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":241,"org.easymock.tests.MockClassControlTest.testHashCode":344,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":379,"org.easymock.tests2.EasyMockSupportTest.testVerify":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":404,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":278,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":180,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":239,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":44,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":43,"org.easymock.tests.UsageVarargTest.varargCharAccepted":286,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":429,"org.easymock.tests2.CaptureTest.testCaptureMultiple":359,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":37,"org.easymock.tests2.UsageTest.openCallCountByLastCall":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":430,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":136,"org.easymock.tests.DefaultClassInstantiatorTest.object":356,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":179,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":405,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":310,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":297,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":370,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":378,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":165,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":343,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":309,"org.easymock.tests.CapturesMatcherTest.test":361,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":273,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":67,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":342,"org.easymock.tests2.UsageTest.resumeIfFailure":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":220,"org.easymock.tests2.StubTest.stubWithReturnValue":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":416,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":95,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":265,"org.easymock.tests2.SerializationTest.testAllMockedMethod":140,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":196,"org.easymock.samples.SupportTest.voteForRemovals":16,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":363,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":426,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":381,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":315,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":420,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":197,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":142,"org.easymock.tests.UsageExpectAndThrowTest.object":313,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":92,"org.easymock.tests2.DelegateToTest.testWrongClass":108,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":190,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":191,"org.easymock.samples.ConstructorCalledMockTest.testTax":18,"org.easymock.tests.UsageStrictMockTest.range":203,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":132,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":28,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":314,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":393,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":213,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":237,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":172,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":364,"org.easymock.tests2.CaptureTest.testCaptureNone":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":325,"org.easymock.tests.UsageUnorderedTest.message":192,"org.easymock.tests.UsageVerifyTest.twoReturns":195,"org.easymock.tests.UsageVarargTest.varargByteAccepted":291,"org.easymock.tests2.ThreadingTest.testThreadSafe":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":407,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":335,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":13,"org.easymock.tests2.CaptureTest.testCapture_2617107":113,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":249,"org.easymock.tests2.UsageConstraintsTest.any":82,"org.easymock.tests2.StubTest.stub":62,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":234,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":355,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":219,"org.easymock.tests.UsageExpectAndThrowTest.longType":306,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":233,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":39,"org.easymock.tests2.SerializationTest.testClass":138,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":35,"org.easymock.tests.LimitationsTest.mockNativeMethod":216,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":184,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":275,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":369,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":42,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":423,"org.easymock.tests2.NameTest.nameForMocksControl":102,"org.easymock.tests2.MockedExceptionTest.testMockedException":21,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":397,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":212,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":427,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":307,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":329,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":156,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":152,"org.easymock.tests.MockingTest.testNicePartialClassMocking":328,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":434,"org.easymock.tests2.CaptureTest.testCaptureLast":118,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":367,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":358,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":34,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":79,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":93,"org.easymock.tests.MockingTest.testTwoMocks":326,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":390,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":256,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":311,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":58,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":97,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":442,"org.easymock.samples.ExampleTest.removeNonExistingDocument":10,"org.easymock.tests.UsageStrictMockTest.differentMethods":204,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":231,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":373,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":380,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":2,"org.easymock.tests2.MockBuilderTest.testCreateMockString":155,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":398,"org.easymock.tests.UsageExpectAndThrowTest.floatType":305,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":88,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":144,"org.easymock.tests.UsageVerifyTest.twoThrows":194,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":66,"org.easymock.samples.ExampleTest.voteAgainstRemoval":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":323,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":166,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":392,"org.easymock.tests2.UsageConstraintsTest.testNotNull":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":20,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":301,"org.easymock.tests2.UsageTest.defaultResetToNice":57,"org.easymock.samples.ExampleTest.voteAgainstRemovals":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":271,"org.easymock.tests.UsageVarargTest.differentLength":288,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":368,"org.easymock.tests2.CallbackTest.callback":48,"org.easymock.tests.UsageTest.openCallCountByLastCall":211,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":71,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":248,"org.easymock.tests.UsageCallCountTest.tooFewCalls":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":31,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":174,"org.easymock.tests.UsageThrowableTest.throwCheckedException":298,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":365,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":33,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":282,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":372,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":236,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":32,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":146,"org.easymock.tests.ObjectMethodsTest.testHashCode":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":438,"org.easymock.tests2.NameTest.nameForNiceMock":101,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":70,"org.easymock.tests2.DependencyTest.testInterfaceMocking":26,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":437,"org.easymock.samples.ExampleTest.addDocument":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":412,"org.easymock.tests2.DelegateToTest.testStubDelegate":107,"org.easymock.tests2.AnswerTest.stubAnswer":145,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":201,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":366,"org.easymock.tests.UsageVarargTest.varargLongAccepted":290,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":205,"org.easymock.tests.UsageExpectAndReturnTest.floatType":258,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":274,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":24,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":386,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":90,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":243,"org.easymock.tests.UsageThrowableTest.noUpperLimit":295,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":72,"org.easymock.tests2.SerializationTest.test":139,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":116,"org.easymock.tests2.UsageConstraintsTest.testSame":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":257,"org.easymock.samples.SupportTest.addDocument":15,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":399,"org.easymock.tests.GenericTest.testPackageScope":182,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":279,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests2.NameTest.nameForMock":99,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":268,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":419,"org.easymock.tests2.UsageStrictMockTest.differentMethods":41,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":260,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":178,"org.easymock.tests2.MockedExceptionTest.testRealException":23,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":38,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":247,"org.easymock.tests2.NameTest.nameForStrictMock":100,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":431,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":103,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":160,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":148,"org.easymock.tests2.UsageStrictMockTest.range":40,"org.easymock.tests2.UsageConstraintsTest.lessThan":98,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":403,"org.easymock.tests2.CaptureTest.testCaptureRightOne":121,"org.easymock.tests2.UsageConstraintsTest.testOr":78,"org.easymock.tests.UsageRangeTest.combination":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":157,"org.easymock.tests.UsageTest.wrongArguments":210,"org.easymock.tests2.MockBuilderTest.testWithConstructor":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":400,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":340,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":261,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":269,"org.easymock.tests.UsageVarargTest.varargShortAccepted":289,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":336,"org.easymock.tests2.UsageConstraintsTest.cmpTo":83,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":143,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":56,"org.easymock.tests2.CaptureTest.testCaptureFromStub":122,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":228,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":422,"org.easymock.tests.UsageTest.unexpectedCallWithArray":209,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":200,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":334,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":418,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":270,"org.easymock.tests2.CaptureTest.testCapture":360,"org.easymock.tests2.UsageConstraintsTest.constraints":73,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":202,"org.easymock.samples.ExampleTest.addAndChangeDocument":11,"org.easymock.tests.UsageStrictMockTest.testVerify":206,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":12,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":199,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":186,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":253,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":262,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":244,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":131,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":284}}]

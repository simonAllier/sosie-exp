[{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[5,6],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Results:64","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"m"}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,1,2,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,4,150,151,3,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,7,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,299,300,300,301],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[23],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[12,13,15,17,18,302,29,33,104,106,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[77,303,304,305,82,100,103,306,307,142,308,309,310],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[54,83,90,156,311,162,175,312,313,314,193,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,278,279,280,281,282,283],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[50,51,69,316,305,81,82,86,92,93,94,317,318,319,167,170,171,175,176,184,320,321,195,196,199,200,322,323,324,232],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"this.org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[151],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[303],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[38,39,40,41,58,76,316,325,77,78,79,80,305,81,82,100,102,103,121,122,123,124,126,127,134,135,137,138,139,326,140,141,327,142,328,308,329,330,147,331,332,333,334,335,336,148,164,337,177,178,179,338,339,284,285,310,340,296,297,299,299,300,300,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[341,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[343,344,345],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,302,20,21,22,23,24,25,26,27,28,29,30,31,346,32,33,34,35,36,37,38,39,40,41,42,347,348,43,44,45,46,48,49,50,51,52,53,54,55,349,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,1,2,74,75,76,316,325,77,78,79,80,305,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,8,96,97,98,9,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,350,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,326,140,141,327,142,328,308,351,352,353,329,330,331,332,333,334,148,354,153,154,355,155,156,356,357,358,311,359,157,319,158,159,160,161,162,163,164,165,167,168,169,170,171,172,174,175,176,360,361,362,312,313,314,337,177,178,179,363,180,181,7,182,183,184,185,186,187,364,365,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,213,366,338,367,368,339,369,370,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,0,255,371,372,373,374,342,375,376,377,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,310,287,288,289,290,292,293,295,299,299,300,300,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[309],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[91],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:79","sourceCode":"return (int <= int) && (int <= int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:39","sourceCode":"return int == 0","type":"CtReturnImpl"},"failures":[378],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"count":"result","minimum":"result","maximum":"result"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[74,379,380,381],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[99],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[56,57,58,59,154,158,159,160,161,162,163,382,371,372,373],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":193,"org.easymock.tests2.UsageTest.argumentsOrdered":93,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":70,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":161,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":88,"org.easymock.tests2.StubTest.stubWithReturnValue":54,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":298,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":242,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":32,"org.easymock.tests2.SerializationTest.testAllMockedMethod":102,"org.easymock.tests2.DelegateToTest.testReturnException":96,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":364,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":159,"org.easymock.tests.MockingTest.testPartialClassMocking":177,"org.easymock.samples.SupportTest.voteForRemovals":295,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":309,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":315,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":363,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":268,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":365,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":256,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":39,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":347,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":381,"org.easymock.tests.UsageExpectAndThrowTest.object":266,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":30,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":37,"org.easymock.tests2.DelegateToTest.testWrongClass":98,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":253,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":254,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":19,"org.easymock.tests2.UsageTest.wrongArguments":86,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":180,"org.easymock.samples.ConstructorCalledMockTest.testTax":299,"org.easymock.tests.UsageStrictMockTest.range":170,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":204,"org.easymock.samples.ExampleTest.answerVsDelegate":288,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":67,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":339,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":121,"org.easymock.tests2.UsageConstraintsTest.testNull":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":267,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":137,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":336,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":79,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":69,"org.easymock.tests2.CaptureTest.testPrimitive":107,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":183,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":275,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":199,"org.easymock.tests.UsageTest.moreThanOneArgument":194,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":203,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":136,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":208,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":362,"org.easymock.tests2.CaptureTest.testCaptureNone":112,"org.easymock.tests.UsageUnorderedTest.message":232,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":320,"org.easymock.tests.UsageVerifyTest.twoReturns":176,"org.easymock.tests.UsageVarargTest.varargByteAccepted":224,"org.easymock.tests2.ThreadingTest.testThreadSafe":73,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":374,"org.easymock.tests.UsageTest.argumentsOrdered":200,"org.easymock.tests.UsageVarargTest.varargIntAccepted":219,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":216,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":353,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":296,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":227,"org.easymock.tests2.CaptureTest.testCapture_2617107":106,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":182,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":78,"org.easymock.tests2.UsageConstraintsTest.any":20,"org.easymock.tests2.StubTest.stub":53,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":231,"org.easymock.tests.UsageExpectAndThrowTest.longType":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":160,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":344,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":151,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":55,"org.easymock.tests2.SerializationTest.testClass":100,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":119,"org.easymock.tests.LimitationsTest.mockNativeMethod":148,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":310,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":252,"org.easymock.tests2.AnswerTest.answer":42,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":131,"org.easymock.tests2.CaptureTest.testAnd":104,"org.easymock.tests2.UsageTest.strictResetToDefault":84,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":141,"org.easymock.tests2.NameTest.nameForMocksControl":146,"org.easymock.tests2.MockedExceptionTest.testMockedException":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":207,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":64,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":186,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":198,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":377,"org.easymock.tests2.DelegateToTest.testDelegate":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":260,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":179,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":134,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":80,"org.easymock.tests.MockingTest.testNicePartialClassMocking":178,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":271,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":139,"org.easymock.tests2.CompareToTest.testCompareEqual":378,"org.easymock.tests2.CaptureTest.testCaptureLast":111,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":162,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":255,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":18,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":127,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":192,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":31,"org.easymock.tests.MockingTest.testTwoMocks":337,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":0,"org.easymock.tests2.CaptureTest.testCapture1_2446744":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":269,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":264,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":129,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":92,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":34,"org.easymock.tests.UsageThrowableTest.throwError":276,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":150,"org.easymock.tests.UsageStrictMockTest.differentMethods":171,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":368,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":2,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":321,"org.easymock.tests2.MockBuilderTest.testCreateMockString":82,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":330,"org.easymock.tests.UsageExpectAndThrowTest.floatType":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":210,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":26,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":43,"org.easymock.tests.UsageVerifyTest.twoThrows":175,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":40,"org.easymock.samples.PartialClassMockTest.testGetArea":301,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":228,"org.easymock.samples.ExampleTest.voteAgainstRemoval":290,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":361,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":360,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":142,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":257,"org.easymock.tests2.UsageTest.niceToStrict":87,"org.easymock.tests2.UsageConstraintsTest.testNotNull":33,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":283,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":77,"org.easymock.tests2.MockBuilderTest.testCreateMock":305,"org.easymock.tests2.UsageTest.defaultResetToNice":91,"org.easymock.samples.ExampleTest.voteAgainstRemovals":287,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":248,"org.easymock.tests2.CallbackTest.callback":118,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":307,"org.easymock.tests.UsageTest.openCallCountByLastCall":197,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":265,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":65,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":10,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":314,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":211,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":202,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":7,"org.easymock.tests.UsageCallCountTest.tooFewCalls":214,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":311,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":24,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":355,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":244,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":124,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":23,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":205,"org.easymock.tests.UsageThrowableTest.throwCheckedException":280,"org.easymock.tests.MockClassControlTest.testEquals":335,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":273,"org.easymock.tests2.CaptureTest.testCaptureAll":105,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":130,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":190,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":126,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":154,"org.easymock.tests.MockNameTest.defaultName":354,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":350,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":123,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":3,"org.easymock.tests2.UsageConstraintsTest.testMatches":25,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":125,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":45,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":209,"org.easymock.tests.ObjectMethodsTest.testHashCode":352,"org.easymock.samples.ExampleTest.voteForRemovals":292,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":75,"org.easymock.tests2.NameTest.nameForNiceMock":145,"org.easymock.tests.UsageVarargTest.allKinds":226,"org.easymock.tests2.DependencyTest.testInterfaceMocking":36,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":174,"org.easymock.samples.BasicClassMockTest.testPrintContent":297,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":191,"org.easymock.samples.ExampleTest.addDocument":291,"org.easymock.tests2.DelegateToTest.testStubDelegate":97,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":282,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":46,"org.easymock.tests2.AnswerTest.stubAnswer":44,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":163,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":168,"org.easymock.tests2.UsageConstraintsTest.greaterThan":27,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":303,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":185,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":328,"org.easymock.tests.UsageVarargTest.varargLongAccepted":223,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":172,"org.easymock.samples.ExampleTest.voteForRemoval":289,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":1,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":251,"org.easymock.tests.UsageExpectAndReturnTest.floatType":235,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":369,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":326,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":103,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":300,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":359,"org.easymock.tests.UsageThrowableTest.noUpperLimit":277,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":28,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":83,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":11,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":164,"org.easymock.tests2.SerializationTest.test":101,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":109,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":304,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":382,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":62,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":278,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":234,"org.easymock.tests2.UsageConstraintsTest.testSame":16,"org.easymock.samples.SupportTest.addDocument":294,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":158,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":8,"org.easymock.tests2.CaptureTest.testCaptureFirst":117,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":63,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":95,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":379,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":319,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":240,"org.easymock.tests.GenericTest.testPackageScope":284,"org.easymock.tests2.UsageTest.moreThanOneArgument":85,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":74,"org.easymock.tests2.CaptureTest.testCapture2_2446744":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":376,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":81,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":225,"org.easymock.tests.GenericTest.testBridgedEquals":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":323,"org.easymock.tests2.NameTest.nameForMock":143,"org.easymock.tests.UsageExpectAndReturnTest.longType":236,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":60,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":274,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":245,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":366,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":272,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":372,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":206,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":237,"org.easymock.tests.UsageCallCountTest.tooManyCalls":324,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":345,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":270,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":187,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":213,"org.easymock.tests2.MockedExceptionTest.testRealException":59,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":370,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":241,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":261,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":281,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":152,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":181,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":122,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":212,"org.easymock.tests2.UsageConstraintsTest.testContains":22,"org.easymock.tests2.NameTest.nameForStrictMock":144,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":58,"org.easymock.tests2.UsageConstraintsTest.testFind":14,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":156,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":132,"org.easymock.tests.MockTypeTest.fromEasyMockClass":367,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":138,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":133,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":165,"org.easymock.tests.UsageExpectAndReturnTest.object":243,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":29,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":140,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":316,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":68,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":221,"org.easymock.tests.UsageTest.exactCallCountByLastCall":201,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":153,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":61,"org.easymock.tests2.CaptureTest.testCaptureRightOne":114,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":380,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":342,"org.easymock.tests2.UsageConstraintsTest.testOr":17,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":306,"org.easymock.tests.UsageRangeTest.combination":184,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":249,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":135,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":358,"org.easymock.tests.UsageTest.wrongArguments":196,"org.easymock.tests.MockClassControlTest.testHashCode":334,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":147,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":238,"org.easymock.tests2.EasyMockSupportTest.testVerify":72,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":246,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":343,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":375,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":356,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":313,"org.easymock.tests.UsageVarargTest.varargShortAccepted":222,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":322,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":128,"org.easymock.tests2.UsageConstraintsTest.cmpTo":21,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":120,"org.easymock.tests.UsageVarargTest.varargCharAccepted":220,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":348,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests2.UsageTest.openCallCountByLastCall":89,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":90,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":71,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":312,"org.easymock.tests2.CaptureTest.testCaptureFromStub":115,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":149,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":325,"org.easymock.tests.UsageTest.unexpectedCallWithArray":195,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":351,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":318,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":263,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":279,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":167,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":215,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":247,"org.easymock.tests2.CaptureTest.testCapture":5,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":327,"org.easymock.tests2.UsageConstraintsTest.constraints":12,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":169,"org.easymock.samples.ExampleTest.addAndChangeDocument":293,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":262,"org.easymock.tests.CapturesMatcherTest.test":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":250,"org.easymock.tests.UsageStrictMockTest.testVerify":173,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":371,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":286,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":41,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":166,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":189,"org.easymock.tests2.UsageTest.resumeIfFailure":94,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":110,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":229,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":338,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":239,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":230,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":157,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":66}}]

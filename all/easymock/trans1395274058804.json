[{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[0,1,2,3],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:231","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[4,5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[7,8],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:372","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[9],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:198","sourceCode":"return true","type":"CtReturnImpl"},"failures":[10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[20],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:183","failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,10,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,0,116,117,118,119,1,120,121,122,12,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:946","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[48,50,51,56,144,145,146,147,149,151,152,155,239,240,241,242],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[243],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[244,245,246,247,248,249,250,251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MocksControl:189","failures":[253,49,50,51,54,254,58,255,256,61,73,4,257,144,146,147,258,259,150,151,152,154,260,261,262,263,158],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[264,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:945","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[266,267,268],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[56,254,255,256,269,270,271,272,259,155,260,261,262,263,273,274,275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[276,101,277],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:71","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[278,279,280],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[50,254,255,256,144,146,147,259,151,260,261,262,263,281,282],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[283],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[284,285,286,287,288,129,289,290],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[291,292,293,294,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[50,51,295,151,152],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:255","failures":[296],"status":-1,"binaryOperator":"java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[50,254,255,256,144,146,147,259,151,260,261,262,263,281],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":74,"org.easymock.tests2.UsageTest.argumentsOrdered":256,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":154,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":120,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":279,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":277,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":58,"org.easymock.tests2.StubTest.stubWithReturnValue":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":18,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":94,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":21,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":180,"org.easymock.tests2.SerializationTest.testAllMockedMethod":124,"org.easymock.tests2.DelegateToTest.testReturnException":100,"org.easymock.tests.MockingTest.testPartialClassMocking":230,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":271,"org.easymock.samples.SupportTest.voteForRemovals":33,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":283,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":222,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":5,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":210,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":64,"org.easymock.tests.UsageExpectAndThrowTest.object":220,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":239,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":91,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":13,"org.easymock.tests2.DelegateToTest.testWrongClass":102,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":142,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":143,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":80,"org.easymock.tests2.UsageTest.wrongArguments":254,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":161,"org.easymock.tests.UsageStrictMockTest.range":151,"org.easymock.samples.ExampleTest.answerVsDelegate":23,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":39,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":247,"org.easymock.tests2.UsageConstraintsTest.testNull":76,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":221,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":134,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":1,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":130,"org.easymock.tests2.CaptureTest.testPrimitive":107,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":165,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":229,"org.easymock.tests.UsageTest.moreThanOneArgument":155,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":133,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":273,"org.easymock.tests2.CaptureTest.testCaptureNone":111,"org.easymock.tests.UsageUnorderedTest.message":144,"org.easymock.tests.UsageVerifyTest.twoReturns":147,"org.easymock.tests.UsageVarargTest.varargByteAccepted":199,"org.easymock.tests2.ThreadingTest.testThreadSafe":67,"org.easymock.tests.UsageTest.argumentsOrdered":263,"org.easymock.tests.UsageVarargTest.varargIntAccepted":194,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":236,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":30,"org.easymock.tests2.CaptureTest.testCapture_2617107":106,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":166,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":272,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":292,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":164,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":293,"org.easymock.tests2.UsageConstraintsTest.any":81,"org.easymock.tests2.StubTest.stub":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":170,"org.easymock.tests.UsageExpectAndThrowTest.longType":213,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":20,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":49,"org.easymock.tests2.SerializationTest.testClass":12,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":46,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":36,"org.easymock.tests.LimitationsTest.mockNativeMethod":159,"org.easymock.tests2.AnswerTest.answer":125,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":190,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":243,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":285,"org.easymock.tests2.CaptureTest.testAnd":104,"org.easymock.tests2.UsageTest.strictResetToDefault":55,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":295,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":117,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":139,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":157,"org.easymock.tests2.DelegateToTest.testDelegate":103,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":232,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":214,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":132,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":131,"org.easymock.tests.MockingTest.testNicePartialClassMocking":231,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":225,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests2.CaptureTest.testCaptureLast":110,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":79,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":45,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":92,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":268,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":218,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":255,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":96,"org.easymock.tests.UsageThrowableTest.throwError":202,"org.easymock.tests.UsageStrictMockTest.differentMethods":152,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":280,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":68,"org.easymock.tests2.MockBuilderTest.testCreateMockString":257,"org.easymock.tests.UsageExpectAndThrowTest.floatType":212,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":87,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":126,"org.easymock.tests.UsageVerifyTest.twoThrows":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":65,"org.easymock.samples.PartialClassMockTest.testGetArea":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":167,"org.easymock.samples.ExampleTest.voteAgainstRemoval":25,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":290,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":211,"org.easymock.tests2.UsageTest.niceToStrict":57,"org.easymock.tests2.UsageConstraintsTest.testNotNull":95,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":291,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":209,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":251,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":129,"org.easymock.samples.ExampleTest.voteAgainstRemovals":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":186,"org.easymock.tests2.CallbackTest.callback":53,"org.easymock.tests2.UsageConstraintsTest.equals":6,"org.easymock.tests.UsageTest.openCallCountByLastCall":156,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":269,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":219,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":118,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":71,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":163,"org.easymock.tests.UsageCallCountTest.tooFewCalls":234,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":248,"org.easymock.tests.UsageOverloadedMethodTest.overloading":136,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":85,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":42,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":84,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":112,"org.easymock.tests.UsageThrowableTest.throwCheckedException":206,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":141,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":274,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":270,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":227,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":284,"org.easymock.tests2.CaptureTest.testCaptureAll":105,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":278,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":41,"org.easymock.tests2.UsageConstraintsTest.testMatches":86,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":43,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":128,"org.easymock.samples.ExampleTest.voteForRemovals":27,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":70,"org.easymock.tests.UsageVarargTest.allKinds":201,"org.easymock.tests2.DependencyTest.testInterfaceMocking":37,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":15,"org.easymock.samples.BasicClassMockTest.testPrintContent":31,"org.easymock.samples.ExampleTest.addDocument":26,"org.easymock.tests2.DelegateToTest.testStubDelegate":101,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":208,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":253,"org.easymock.tests2.AnswerTest.stubAnswer":127,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":149,"org.easymock.tests2.UsageConstraintsTest.greaterThan":88,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":17,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":252,"org.easymock.tests.UsageVarargTest.varargLongAccepted":198,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":153,"org.easymock.samples.ExampleTest.voteForRemoval":24,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":189,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":294,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":10,"org.easymock.tests.UsageThrowableTest.noUpperLimit":203,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":89,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":72,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":54,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":160,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":108,"org.easymock.tests2.SerializationTest.test":123,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":19,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":266,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":0,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":204,"org.easymock.tests2.UsageConstraintsTest.testSame":77,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.samples.SupportTest.addDocument":32,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":276,"org.easymock.tests2.CaptureTest.testCaptureFirst":114,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":116,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":61,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":178,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":69,"org.easymock.tests2.UsageTest.moreThanOneArgument":56,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":9,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":4,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":200,"org.easymock.tests.GenericTest.testBridgedEquals":296,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":249,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":237,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":115,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":228,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":183,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":93,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":226,"org.easymock.tests2.UsageStrictMockTest.differentMethods":51,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":175,"org.easymock.tests.UsageCallCountTest.tooManyCalls":238,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":224,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":2,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":140,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":233,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":215,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":207,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":162,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":40,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":288,"org.easymock.tests2.UsageConstraintsTest.testContains":83,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":35,"org.easymock.tests2.UsageConstraintsTest.testFind":75,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":137,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":245,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":98,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":258,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":99,"org.easymock.tests.UsageExpectAndReturnTest.object":181,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":240,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":90,"org.easymock.tests.ErrorMessageTest.testGetters":241,"org.easymock.tests2.UsageStrictMockTest.range":50,"org.easymock.tests2.UsageConstraintsTest.lessThan":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":119,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":196,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":14,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":3,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":250,"org.easymock.tests.UsageTest.exactCallCountByLastCall":158,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":287,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":191,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":16,"org.easymock.tests2.CaptureTest.testCaptureRightOne":113,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":275,"org.easymock.tests2.UsageConstraintsTest.testOr":78,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":11,"org.easymock.tests.UsageRangeTest.combination":138,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":192,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":187,"org.easymock.tests.UsageTest.wrongArguments":261,"org.easymock.tests2.EasyMockSupportTest.testVerify":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":184,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":267,"org.easymock.tests.UsageVarargTest.varargShortAccepted":197,"org.easymock.tests2.UsageConstraintsTest.cmpTo":82,"org.easymock.tests.UsageVarargTest.varargCharAccepted":195,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":47,"org.easymock.tests2.UsageTest.openCallCountByLastCall":59,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":60,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":244,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":121,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":264,"org.easymock.tests.UsageTest.unexpectedCallWithArray":260,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":281,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":217,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":286,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":259,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":205,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":235,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":185,"org.easymock.tests2.CaptureTest.testCapture":7,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":289,"org.easymock.tests2.UsageConstraintsTest.constraints":73,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":150,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":216,"org.easymock.samples.ExampleTest.addAndChangeDocument":28,"org.easymock.tests.CapturesMatcherTest.test":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":265,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":66,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":148,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":109,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":168,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":169,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":242,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":193}}]

[{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Same:37","failures":[4],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[5,5,6,6,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[8],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[9,10,11,12,13,14],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:153","failures":[15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[32,33,34,35,36,37,38,27,39,40,41,42,43,44,45,29,17,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,30,89,90,91,92,93,7,0,1,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,4,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:319","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[198,199,38,27,40,41,42,43,200,28,29,201,202,16,17,87,89,203,204,2,205,95,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,171,234,235,236,237,173,238],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[27,44,29,239,240,47,48,60,241,63,242,243,244,67,68,70,74,75,78,81,245,85,246,247,108,121,248,11,249,138,139,250,251,252,145,12,253,254,255,149,150,256,257,258,259,260,261,262,158],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[50,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[5,5,6,6,32,198,199,38,27,40,41,42,263,43,28,44,45,29,17,264,265,81,266,82,267,83,84,245,85,268,246,269,86,87,88,30,89,91,92,0,2,95,96,97,98,216,134,135,136,270,271,219,233,171,234,272,173],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[5,5,6,6,46,273,99,106,107,110,111,4,112,117,119,120,122,123,128,129,130,137,140,141,142,143,144,274,275,276,277,278,279,280,281,282,283,284,285,166,167,168,169,170,177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.Injector:132","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.EasyMock:1531","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[286,287,288,289,290,291,292,293,294,295,86,296,0],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[43,28,46,240,49,50,297,51,52,298,299,53,54,55,56,273,57,58,59,300,0,104,106,107,108,109,110,111,4,112,113,114,301,115,116,117,118,119,120,121,122,123,124,125,126,302,127,128,129,130,303,304,305,11,137,140,141,19,306,142,143,144,307,308,261,157,166,167,168,169,170,24,25,177,26,178],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[109,112,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[32,33,34,35,36,37,38,27,39,40,41,42,43,44,45,29,17,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,30,89,90,91,92,7,0,1,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,4,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,272,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[309],"status":-1,"binaryOperator":"(\"contains(\\\"\" + (java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[310],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[311,312,313],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.InjectionPlan:51","failures":[314,315,316,317,318,319,320,59,321,322,323,324,325,326,327,328,329,330,331,94,332,333,334,335,336,337],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[200,66],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[319,330],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"this","key":"qualifier"}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[29],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[103],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:480","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:497","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","type":"CtReturnImpl"},"failures":[5,6,32,83,84,96,97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[286,287,288,338,289,290,291,292,294,339,295,86,296,0],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[340],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[5,5,6,6,32,198,199,38,27,40,41,42,263,43,341,200,28,44,45,29,201,202,15,16,17,264,265,81,266,342,82,267,83,84,287,245,85,268,246,343,344,269,345,346,86,296,87,88,30,89,91,92,203,204,0,2,205,347,348,95,349,206,96,207,208,350,351,209,352,353,210,354,97,211,212,355,356,213,98,357,358,214,215,216,134,135,136,217,270,271,218,219,220,221,222,223,224,225,359,226,227,228,229,230,231,232,233,340,171,234,272,235,236,237,173,238],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"method","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[83,271],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":109,"org.easymock.tests2.UsageTest.argumentsOrdered":244,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":332,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":23,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":242,"org.easymock.tests2.StubTest.stubWithReturnValue":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":286,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":314,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":127,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":187,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":21,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":338,"org.easymock.tests.MockingTest.testPartialClassMocking":134,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":10,"org.easymock.samples.SupportTest.voteForRemovals":37,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":340,"org.easymock.tests.MockClassControlTest.testToString":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":330,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":280,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":351,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":96,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":125,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":132,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":290,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":144,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":114,"org.easymock.tests2.UsageTest.wrongArguments":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":140,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":326,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests.UsageStrictMockTest.range":138,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":76,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":271,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":87,"org.easymock.tests2.UsageConstraintsTest.testNull":111,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":40,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":225,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":83,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":78,"org.easymock.tests2.CaptureTest.testPrimitive":51,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":142,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":205,"org.easymock.tests.UsageTest.moreThanOneArgument":146,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":39,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":283,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":13,"org.easymock.tests2.CaptureTest.testCaptureNone":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":176,"org.easymock.tests.UsageUnorderedTest.message":261,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":259,"org.easymock.tests.UsageVerifyTest.twoReturns":158,"org.easymock.tests2.ThreadingTest.testThreadSafe":101,"org.easymock.tests.UsageTest.argumentsOrdered":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":211,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":198,"org.easymock.tests2.CaptureTest.testCapture_2617107":297,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":166,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":339,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":264,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":336,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":306,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":267,"org.easymock.tests2.UsageConstraintsTest.any":115,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":22,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":230,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":240,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":94,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":59,"org.easymock.tests.LimitationsTest.mockNativeMethod":173,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":8,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":272,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":197,"org.easymock.tests2.AnswerTest.answer":93,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":301,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":345,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":318,"org.easymock.tests2.CaptureTest.testAnd":49,"org.easymock.tests2.UsageTest.strictResetToDefault":61,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":28,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":320,"org.easymock.tests2.MockedExceptionTest.testMockedException":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":206,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":73,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":152,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":148,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":136,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":84,"org.easymock.tests.MockingTest.testNicePartialClassMocking":135,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":42,"org.easymock.tests.LimitationsTest.mockFinalMethod":238,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":316,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":289,"org.easymock.tests2.CaptureTest.testCaptureLast":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":92,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":113,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":126,"org.easymock.tests.MockingTest.testTwoMocks":216,"org.easymock.tests2.CaptureTest.testCapture1_2446744":52,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":31,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":178,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":243,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":129,"org.easymock.tests.UsageThrowableTest.throwError":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":322,"org.easymock.tests.UsageStrictMockTest.differentMethods":139,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":329,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":228,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":103,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":337,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":260,"org.easymock.tests2.MockBuilderTest.testCreateMockString":246,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":218,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":207,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":348,"org.easymock.tests.ResultTest.createReturnResultToString":312,"org.easymock.tests.UsageVerifyTest.twoThrows":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":97,"org.easymock.samples.PartialClassMockTest.testGetArea":32,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":310,"org.easymock.tests.ResultTest.createDelegateResultToString":311,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":167,"org.easymock.samples.ExampleTest.voteAgainstRemoval":35,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":174,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":175,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":45,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":209,"org.easymock.tests2.UsageTest.niceToStrict":63,"org.easymock.tests.LimitationsTest.privateConstructor":237,"org.easymock.tests2.UsageConstraintsTest.testNotNull":128,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":276,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":82,"org.easymock.tests2.MockBuilderTest.testCreateMock":245,"org.easymock.tests2.UsageTest.defaultResetToNice":66,"org.easymock.samples.ExampleTest.voteAgainstRemovals":33,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":355,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":317,"org.easymock.tests.UsageVarargTest.differentLength":256,"org.easymock.tests2.CallbackTest.callback":247,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":341,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":323,"org.easymock.tests.UsageTest.openCallCountByLastCall":147,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":74,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":19,"org.easymock.tests.UsageOverloadedMethodTest.overloading":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":213,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":89,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":154,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":189,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":118,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":55,"org.easymock.tests.UsageThrowableTest.throwCheckedException":162,"org.easymock.tests.MockClassControlTest.testEquals":224,"org.easymock.tests2.EasyMockSupportClassTest.testAll":95,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":234,"org.easymock.tests.MockingTest.testStrictClassMocking":214,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":343,"org.easymock.tests2.CaptureTest.testCaptureAll":50,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":26,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":321,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests2.UsageConstraintsTest.testMatches":120,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":90,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":284,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":274,"org.easymock.samples.ExampleTest.voteForRemovals":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":294,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":105,"org.easymock.tests.UsageVarargTest.allKinds":307,"org.easymock.tests2.DependencyTest.testInterfaceMocking":131,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":292,"org.easymock.samples.BasicClassMockTest.testPrintContent":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.DelegateToTest.testStubDelegate":100,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":164,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":239,"org.easymock.tests2.AnswerTest.stubAnswer":7,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":333,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":25,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":137,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":295,"org.easymock.tests2.UsageConstraintsTest.greaterThan":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":349,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":151,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":232,"org.easymock.samples.ExampleTest.voteForRemoval":34,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":201,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":196,"org.easymock.tests.UsageExpectAndReturnTest.floatType":180,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":263,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":86,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":335,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":123,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":233,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":107,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":203,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":298,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":287,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":227,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":71,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":160,"org.easymock.tests2.UsageConstraintsTest.testSame":4,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":347,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":20,"org.easymock.tests2.CaptureTest.testCaptureFirst":58,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":72,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":68,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":208,"org.easymock.tests.GenericTest.testPackageScope":171,"org.easymock.tests2.UsageTest.moreThanOneArgument":62,"org.easymock.tests2.CaptureTest.testCapture2_2446744":57,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":104,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":277,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":334,"org.easymock.tests.GenericTest.testBridgedEquals":235,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":251,"org.easymock.tests.UsageExpectAndReturnTest.longType":181,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":69,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":268,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":190,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":302,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":275,"org.easymock.tests2.UsageStrictMockTest.differentMethods":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":182,"org.easymock.tests.UsageCallCountTest.tooManyCalls":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":153,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":356,"org.easymock.tests2.MockedExceptionTest.testRealException":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":279,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":325,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":288,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":46,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":141,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":163,"org.easymock.tests.MockingTest.testNiceClassMocking":217,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":88,"org.easymock.tests.MockingTest.testClassMocking":215,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":265,"org.easymock.tests2.UsageConstraintsTest.testContains":117,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":17,"org.easymock.tests2.UsageConstraintsTest.testFind":110,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":156,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":342,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":41,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":304,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":248,"org.easymock.tests.UsageExpectAndReturnTest.object":188,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":204,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":229,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":124,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":43,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":81,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":324,"org.easymock.tests2.UsageStrictMockTest.range":47,"org.easymock.tests2.UsageConstraintsTest.lessThan":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":344,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":291,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":331,"org.easymock.tests.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":177,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":293,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":352,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests2.UsageConstraintsTest.testOr":112,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":296,"org.easymock.tests.UsageRangeTest.combination":150,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":194,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":27,"org.easymock.tests.UsageTest.wrongArguments":253,"org.easymock.tests.ResultTest.createThrowResultToString":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":328,"org.easymock.tests.MockClassControlTest.testHashCode":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":350,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":183,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":353,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":305,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":231,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":257,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":250,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":300,"org.easymock.tests2.UsageConstraintsTest.cmpTo":116,"org.easymock.tests2.UsageTest.openCallCountByLastCall":64,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":65,"org.easymock.tests.DefaultClassInstantiatorTest.object":226,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":80,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":308,"org.easymock.tests2.CaptureTest.testCaptureFromStub":273,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":266,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":210,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":346,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":11,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":161,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":327,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":192,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":249,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":222,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":44,"org.easymock.tests2.UsageConstraintsTest.constraints":108,"org.easymock.tests2.ConstraintsToStringTest.containsToString":309,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":195,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":315,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":98,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":299,"org.easymock.tests2.UsageTest.resumeIfFailure":67,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":168,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":270,"org.easymock.tests.LimitationsTest.abstractClass":236,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":184,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":133,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":75}}]

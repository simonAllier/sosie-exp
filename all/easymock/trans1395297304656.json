[{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[41,42,43,44,45,46],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[47,48,49,50,51,52,53,0,1,54,55,56,4,57,58,59,5,60,61,62,63,6,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,9,10,11,12,13,14,15,158,159,160,161,37,162,163,38,164,165,166,39,167,168,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,191,192,193,194,195,196,197,198,199,200],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[201,202],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[203,204,205],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[67,69,75,80,81,83,85,86,206,97,102],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[207,208],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[209],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"type"}},{"position":"org.easymock.internal.RecordState:274","failures":[210,211,212,123,213,124,214,215,216],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[217],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[51,0,106,107,108,218,109,219,110,111,112,113,220,221,150,151,205,222,217,223],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:266","sourceCode":"return ","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[224,225,51,226,226,227,227,0,2,228,105,106,107,108,218,109,219,110,229,111,112,230,113,220,115,116,117,118,119,121,122,125,143,144,146,147,148,221,149,204,150,151,152,231,158,232,222,191,233,196,197,198],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[47,210,48,49,234,50,235,236,52,237,238,239,240,53,241,242,243,1,54,55,56,244,245,4,211,212,246,247,248,249,250,251,57,252,58,59,253,5,60,61,254,62,255,63,6,64,256,257,65,66,67,68,69,70,71,258,259,72,73,74,75,260,76,77,78,79,80,81,82,83,84,85,86,87,206,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,261,262,263,115,264,265,266,203,267,120,123,268,269,213,124,214,215,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,270,143,145,216,271,272,7,273,153,274,207,275,276,154,155,277,8,156,157,278,279,280,9,281,10,11,12,13,14,15,208,282,283,284,285,286,287,288,289,41,290,291,292,293,294,295,296,16,297,298,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,159,319,160,161,320,321,322,323,324,325,326,37,162,327,328,163,38,329,330,164,331,332,333,334,335,336,337,338,339,340,341,165,166,39,342,343,167,168,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,192,40,193,344,345,346,347,348,194,195,233,199,200,349],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[47,210,48,49,234,50,350,235,224,225,51,236,52,237,226,227,238,239,240,53,241,242,243,0,1,2,351,352,54,55,353,354,355,356,357,56,244,358,359,360,361,362,363,364,365,366,367,368,245,4,211,369,212,370,371,372,373,374,246,247,248,249,250,251,57,252,58,59,253,5,60,61,254,62,255,63,6,64,256,257,65,66,67,68,69,70,71,258,259,72,73,74,75,260,76,77,78,79,80,81,375,82,83,84,85,86,87,206,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,376,377,378,105,379,380,106,381,382,383,384,385,386,387,388,389,107,390,391,392,393,394,108,395,396,397,218,109,219,398,110,229,111,112,399,400,230,113,220,401,402,403,404,405,114,261,406,407,408,409,410,262,263,115,264,411,265,266,203,267,116,117,118,119,412,120,121,122,413,123,268,269,213,124,214,125,414,215,126,415,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,270,143,144,145,146,147,148,221,416,149,417,418,204,150,151,152,419,205,216,271,272,7,273,153,274,207,275,276,154,155,277,8,156,157,278,279,280,9,281,10,11,12,13,14,15,208,282,283,284,285,420,286,287,288,289,41,290,291,292,231,293,294,295,296,16,297,298,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,299,300,301,421,302,303,304,305,306,307,308,309,310,311,312,313,314,315,422,423,424,425,426,427,428,429,201,430,431,432,202,433,434,158,232,222,209,316,317,318,159,319,160,161,320,321,435,436,437,438,439,440,441,442,443,444,445,446,322,217,447,448,323,324,223,325,326,37,162,327,328,163,38,329,330,164,331,449,332,333,334,335,336,337,338,339,450,340,451,452,341,453,165,166,39,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,342,470,471,472,473,474,343,475,167,168,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,476,477,191,478,192,40,193,344,345,346,347,348,194,195,479,480,233,196,197,481,198,482,483,484,199,200,485,349,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[315,426,451],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[509],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[67,69,75,86],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:117","failures":[210,211,212,123,213,214,215,216],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[0,1,2,3],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[224,225,51,226,226,227,227,0,2,363,366,510,228,511,512,513,514,376,377,378,105,379,380,106,381,382,383,384,385,386,387,388,389,107,390,391,392,393,394,108,395,396,515,218,516,109,219,398,110,229,111,112,400,230,113,517,518,220,262,263,115,116,117,118,119,121,122,125,414,143,144,146,147,148,221,149,417,418,204,150,151,152,419,205,231,315,422,423,424,425,426,427,428,429,201,430,431,432,202,433,434,158,232,222,209,217,223,453,476,477,191,478,479,480,233,196,197,198,484],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[224,225,51,226,226,227,227,0,2,228,512,513,105,106,107,108,218,516,109,219,110,229,111,112,230,113,518,220,115,116,117,118,119,121,122,125,143,144,146,147,148,221,149,204,150,151,152,231,422,158,232,222,217,223,191,233,196,197,198],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[58,519,520,160,339,40,193],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[210,211,212,123,269,213,214,215,216,467],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[47,210,48,49,234,50,235,224,225,51,236,52,237,226,227,238,240,53,241,243,0,1,2,54,55,56,245,4,211,212,246,247,248,249,250,251,57,252,58,59,253,5,60,61,254,62,255,63,6,64,256,257,65,66,67,68,69,70,71,258,259,72,73,74,75,260,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,218,109,110,229,111,112,230,113,220,114,262,263,115,264,116,117,118,119,120,121,122,123,213,124,214,125,215,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,270,143,144,145,146,147,148,221,149,204,150,151,152,216,272,7,274,154,155,277,8,156,157,278,279,280,9,281,10,11,12,13,14,15,289,41,290,291,292,231,293,294,295,296,16,297,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,299,300,301,302,303,304,305,306,307,308,309,158,232,316,317,318,159,319,160,161,320,37,162,327,328,163,38,329,330,164,332,333,334,335,336,337,338,339,165,166,39,167,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,191,192,40,193,344,345,346,347,348,194,195,196,197,198,199,200],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[370,373],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[4,262,263,115,264,207,275,276,277,293,294,295,296,16,297,461,195],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[47,48,49,50,52,226,226,227,227,289,41,291,171,172,173,42,174,178,43,184,44,45,185,186,187,189,46,199,200],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[47,210,48,49,234,50,350,235,224,225,51,236,52,237,226,226,227,227,238,239,240,53,241,242,243,0,1,2,351,352,54,55,353,354,355,356,357,56,244,358,359,360,361,362,363,366,367,368,245,4,211,369,212,246,247,248,249,250,251,57,252,58,59,253,5,60,61,254,62,255,63,6,64,256,257,65,66,67,68,69,70,71,258,259,72,73,74,75,260,76,77,78,79,80,81,375,82,83,84,85,86,87,206,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,376,377,378,105,379,380,106,381,382,383,384,385,386,387,388,389,107,390,391,392,393,394,108,395,396,218,109,219,398,110,229,111,112,400,230,113,220,401,402,403,404,405,114,261,406,407,408,409,410,262,263,115,264,411,265,266,203,267,116,117,118,119,120,121,122,123,268,269,213,124,214,125,414,215,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,270,143,144,145,146,147,148,221,416,149,417,418,204,150,151,152,419,205,216,271,272,7,273,153,274,207,275,276,154,155,277,8,156,157,278,279,280,9,281,10,11,12,13,14,15,208,282,283,284,285,420,286,287,288,289,41,290,291,292,231,293,294,295,296,16,297,298,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,299,300,301,421,302,303,304,305,306,307,308,309,310,311,312,313,314,315,422,423,424,425,426,427,428,429,201,430,431,432,202,433,434,158,232,222,209,316,317,318,159,319,160,161,320,321,435,436,437,438,439,440,441,442,443,444,445,446,322,217,323,324,223,325,326,37,162,327,328,163,38,329,330,164,331,449,332,333,334,335,336,337,338,339,450,340,451,452,341,453,165,166,39,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,342,470,471,472,473,474,343,475,167,168,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,476,477,191,478,192,40,193,344,345,346,347,348,194,195,479,480,233,196,197,481,198,482,483,484,199,200,485,349,486],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:40","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>.getName(), java.lang.Double.java.lang.Class<java.lang.Double>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[255,94,147,441],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[47,210,48,49,50,235,51,52,226,226,227,227,239,240,53,241,242,243,0,1,54,55,56,245,4,211,212,57,58,59,5,60,61,62,63,6,64,65,66,67,68,70,71,72,73,74,75,260,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,262,263,115,264,116,117,118,119,120,121,122,123,268,269,213,124,214,125,215,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,216,272,7,153,207,275,276,154,155,277,8,156,9,281,10,11,12,13,14,15,208,282,283,285,286,287,288,289,41,290,291,292,231,293,294,295,296,16,297,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,310,311,312,313,314,158,222,159,160,161,322,37,162,163,38,164,332,339,165,166,39,342,343,167,168,169,170,171,172,173,42,174,175,176,177,178,43,179,180,181,182,183,184,44,45,185,186,187,188,189,190,46,191,192,40,193,194,195,196,197,198,199,200,349],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[158],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"expected"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[521],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[112,217],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[315,426,451],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":81,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":37,"org.easymock.tests2.UsageTest.argumentsOrdered":257,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":141,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":464,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":255,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":238,"org.easymock.tests2.DelegateToTest.testReturnException":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":294,"org.easymock.tests.MockingTest.testPartialClassMocking":196,"org.easymock.tests.MockClassControlTest.testToString":423,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":411,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":384,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":17,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":55,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":508,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":87,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":154,"org.easymock.tests2.UsageTest.wrongArguments":254,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":279,"org.easymock.samples.ExampleTest.answerVsDelegate":210,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":223,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":483,"org.easymock.tests2.UsageConstraintsTest.testNull":83,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":146,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":428,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":510,"org.easymock.tests2.CaptureTest.testPrimitive":70,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":156,"org.easymock.tests.UsageTest.moreThanOneArgument":162,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":36,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":145,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":290,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":310,"org.easymock.tests.UsageTest.argumentsOrdered":330,"org.easymock.tests.UsageVarargTest.varargIntAccepted":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":469,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":218,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":409,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":365,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":456,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":46,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":492,"org.easymock.tests.ReplayStateInvalidUsageTest.times":443,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":56,"org.easymock.tests2.DependencyTest.testClassMocking":351,"org.easymock.tests2.AnswerTest.answer":123,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":470,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":249,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":448,"org.easymock.tests2.CaptureTest.testAnd":67,"org.easymock.tests2.UsageTest.strictResetToDefault":60,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":41,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":135,"org.easymock.tests2.DelegateToTest.testDelegate":243,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":314,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":491,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":32,"org.easymock.tests.LimitationsTest.mockFinalMethod":478,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":348,"org.easymock.tests2.DependencyTest.testClassMockingSupport":352,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":284,"org.easymock.tests2.CaptureTest.testCapture1_2446744":71,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":416,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":30,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":247,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":437,"org.easymock.tests.UsageThrowableTest.throwError":9,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":324,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":410,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":396,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":495,"org.easymock.samples.PartialClassMockTest.testGetArea":51,"org.easymock.tests.MockingTest.testInterfaceMocking":481,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":438,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":188,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":287,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":453,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":18,"org.easymock.tests2.UsageTest.niceToStrict":62,"org.easymock.tests2.ThreadingTest.testChangeDefault":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":110,"org.easymock.tests2.MockBuilderTest.testCreateMock":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":392,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":26,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":136,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":447,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":283,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":331,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":157,"org.easymock.tests.UsageOverloadedMethodTest.overloading":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":389,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":180,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":165,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":91,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":74,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":421,"org.easymock.tests.MockClassControlTest.testEquals":427,"org.easymock.tests2.EasyMockSupportClassTest.testAll":105,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":232,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":34,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":228,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":509,"org.easymock.tests2.CaptureTest.testCaptureAll":68,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":248,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":346,"org.easymock.tests.MockNameTest.defaultName":298,"org.easymock.tests2.UsageConstraintsTest.testMatches":93,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":435,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":291,"org.easymock.samples.ExampleTest.voteForRemovals":50,"org.easymock.tests.UsageVarargTest.allKinds":309,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":192,"org.easymock.samples.BasicClassMockTest.testPrintContent":225,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":347,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":14,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":250,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":406,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":297,"org.easymock.tests2.UsageConstraintsTest.greaterThan":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":168,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":152,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":496,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":433,"org.easymock.samples.ExampleTest.voteForRemoval":48,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":419,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":127,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":517,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":325,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":221,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":488,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":5,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":231,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":133,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":293,"org.easymock.tests2.CaptureTest.testCaptureFirst":77,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":460,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":134,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":66,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":274,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":177,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":129,"org.easymock.tests2.UsageTest.moreThanOneArgument":61,"org.easymock.tests2.CaptureTest.testCapture2_2446744":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":471,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":113,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":308,"org.easymock.tests.GenericTest.testBridgedEquals":209,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":337,"org.easymock.tests.UsageExpectAndReturnTest.longType":42,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":344,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":518,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":35,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":100,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":322,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":33,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":275,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":289,"org.easymock.tests.UsageCallCountTest.tooManyCalls":338,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":178,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":13,"org.easymock.tests.MockingTest.testNiceClassMocking":484,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":117,"org.easymock.tests.MockingTest.testClassMocking":480,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":516,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":449,"org.easymock.tests2.UsageConstraintsTest.testContains":90,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.UsageConstraintsTest.testFind":82,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":39,"org.easymock.tests.MockTypeTest.fromEasyMockClass":323,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":212,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":316,"org.easymock.tests.UsageExpectAndReturnTest.object":179,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":149,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":139,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":303,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":452,"org.easymock.tests.UsageTest.exactCallCountByLastCall":164,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":194,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":485,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":311,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":414,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":44,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":299,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":272,"org.easymock.tests.MockClassControlTest.testHashCode":426,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":402,"org.easymock.tests2.EasyMockSupportTest.testVerify":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":312,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":216,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":282,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":246,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":397,"org.easymock.tests.UsageVarargTest.varargCharAccepted":302,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":475,"org.easymock.tests2.UsageTest.openCallCountByLastCall":63,"org.easymock.tests.DefaultClassInstantiatorTest.object":429,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":142,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":208,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":24,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":514,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":11,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":356,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":401,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":494,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":425,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":150,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":23,"org.easymock.tests.ReplayStateInvalidCallsTest.times":500,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":45,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":207,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":501,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":108,"org.easymock.tests2.UsageTest.resumeIfFailure":65,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":217,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":364,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":296,"org.easymock.tests2.StubTest.stubWithReturnValue":4,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":101,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":43,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":342,"org.easymock.samples.SupportTest.voteForRemovals":52,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":434,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":404,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":29,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":343,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":268,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":486,"org.easymock.tests.UsageExpectAndThrowTest.object":27,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":98,"org.easymock.tests2.DelegateToTest.testWrongClass":241,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":498,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":199,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":200,"org.easymock.tests.UsageStrictMockTest.range":160,"org.easymock.samples.ConstructorCalledMockTest.testTax":226,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":367,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":138,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":116,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":111,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":445,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":278,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":490,"org.easymock.tests2.CaptureTest.testCaptureNone":73,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":288,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":371,"org.easymock.tests.UsageUnorderedTest.message":339,"org.easymock.tests.UsageVerifyTest.twoReturns":193,"org.easymock.tests.UsageVarargTest.varargByteAccepted":307,"org.easymock.tests2.ThreadingTest.testThreadSafe":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":390,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":335,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":224,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":341,"org.easymock.tests2.CaptureTest.testCapture_2617107":69,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":8,"org.easymock.tests2.UsageConstraintsTest.any":88,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":442,"org.easymock.tests2.StubTest.stub":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndThrowTest.longType":20,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":295,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":432,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":441,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":252,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":114,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":191,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":186,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":222,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":513,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":355,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":506,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":253,"org.easymock.tests2.NameTest.nameForMocksControl":267,"org.easymock.tests2.MockedExceptionTest.testMockedException":263,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":380,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":21,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":198,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":143,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":112,"org.easymock.tests.MockingTest.testNicePartialClassMocking":197,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":148,"org.easymock.tests2.CaptureTest.testCaptureLast":72,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":353,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":285,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":505,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":122,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":86,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":99,"org.easymock.tests.MockingTest.testTwoMocks":233,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":502,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":413,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":25,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":256,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":103,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":374,"org.easymock.samples.ExampleTest.removeNonExistingDocument":350,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":439,"org.easymock.tests.UsageStrictMockTest.differentMethods":161,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":403,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":430,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":373,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":128,"org.easymock.tests2.MockBuilderTest.testCreateMockString":220,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":315,"org.easymock.tests.UsageExpectAndThrowTest.floatType":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":381,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":213,"org.easymock.tests.UsageVerifyTest.twoThrows":40,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":107,"org.easymock.samples.ExampleTest.voteAgainstRemoval":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":286,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":151,"org.easymock.tests.LimitationsTest.privateConstructor":477,"org.easymock.tests2.UsageConstraintsTest.testNotNull":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":15,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":262,"org.easymock.tests2.UsageTest.defaultResetToNice":64,"org.easymock.samples.ExampleTest.voteAgainstRemovals":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":184,"org.easymock.tests.UsageVarargTest.differentLength":304,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":354,"org.easymock.tests2.CallbackTest.callback":215,"org.easymock.tests2.UsageConstraintsTest.equals":375,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":417,"org.easymock.tests.UsageTest.openCallCountByLastCall":163,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":78,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":277,"org.easymock.tests.UsageCallCountTest.tooFewCalls":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":119,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":280,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":372,"org.easymock.tests.UsageThrowableTest.throwCheckedException":12,"org.easymock.tests.MockingTest.testStrictClassMocking":479,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":121,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":195,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":118,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":244,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":444,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":120,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":214,"org.easymock.tests.ObjectMethodsTest.testHashCode":451,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":504,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":130,"org.easymock.tests2.NameTest.nameForNiceMock":203,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":499,"org.easymock.tests2.DependencyTest.testInterfaceMocking":54,"org.easymock.samples.ExampleTest.addDocument":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.DelegateToTest.testStubDelegate":53,"org.easymock.tests2.AnswerTest.stubAnswer":124,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":159,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":399,"org.easymock.tests.UsageVarargTest.varargLongAccepted":306,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":463,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":185,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":125,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":227,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":408,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":96,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":273,"org.easymock.tests.UsageThrowableTest.noUpperLimit":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":79,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":363,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":258,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":201,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.tests2.UsageConstraintsTest.testSame":84,"org.easymock.samples.SupportTest.addDocument":236,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":412,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":489,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":382,"org.easymock.tests.GenericTest.testPackageScope":158,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":407,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":482,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":487,"org.easymock.tests2.NameTest.nameForMock":265,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":181,"org.easymock.tests2.UsageStrictMockTest.differentMethods":59,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":418,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":174,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":31,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":450,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":170,"org.easymock.tests2.MockedExceptionTest.testRealException":264,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":467,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":57,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":446,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":155,"org.easymock.tests2.NameTest.nameForStrictMock":266,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":398,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":211,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":147,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":366,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":519,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":431,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":97,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":109,"org.easymock.tests2.UsageStrictMockTest.range":58,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":493,"org.easymock.tests2.UsageConstraintsTest.lessThan":104,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":511,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":405,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":515,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":521,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":386,"org.easymock.tests2.CaptureTest.testCaptureRightOne":75,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":370,"org.easymock.tests2.UsageConstraintsTest.testOr":85,"org.easymock.tests.UsageRangeTest.combination":167,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":144,"org.easymock.tests.UsageTest.wrongArguments":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":383,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":422,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":182,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":202,"org.easymock.tests.UsageVarargTest.varargShortAccepted":305,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":336,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":507,"org.easymock.tests2.UsageConstraintsTest.cmpTo":89,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":269,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":497,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":457,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":6,"org.easymock.tests2.CaptureTest.testCaptureFromStub":260,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":436,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":219,"org.easymock.tests.UsageTest.unexpectedCallWithArray":327,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":503,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":318,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":334,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":183,"org.easymock.tests2.UsageConstraintsTest.constraints":80,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":319,"org.easymock.samples.ExampleTest.addAndChangeDocument":235,"org.easymock.tests.UsageStrictMockTest.testVerify":321,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":237,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":317,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":345,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":259,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":512,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":189,"org.easymock.tests.LimitationsTest.abstractClass":476,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":190,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":153,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":520,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":137,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":300}}]

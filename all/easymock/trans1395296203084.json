[{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[0,1,2,3,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:222","failures":[57,58,59,60],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[61,62,63,64,65],"status":-1,"binaryOperator":"((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[5,66,6,67],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[5,66,6,67],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[68],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[69],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[5,66,6,67],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[71,72,73,74,75,1,3,3,76,77,78,79,80,81,82,5,6,83,84,7,85,86,87,88,89,90,68,91,92,93,94,95,96,8,10,97,13,98,99,100,15,17,101,102,103,104,105,106,107,108,19,109,21,22,24,25,27,28,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,32,33,37,40,42,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,51,155,156,157,158,159,160,161,162,163,164,165,55,166,167,168,169,170,171,57,58,172,173,174,175,176,177,178,179,180,181,182,183,184],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[102,185,107,113,186,187,188,149,189,151,163,190,191,171,192],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[51],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[193,194,195],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:105","sourceCode":"if ((java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)) {\n    throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\");\n} ","type":"CtIfImpl"},"failures":[196],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[197],"status":-1,"binaryOperator":"(int >= 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:114","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[102,185,107,113,186,187,188,149,189,151,163,190,191,171],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[198,53,54,55,199],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[0,71,200,72,201,73,202,203,204,75,205,1,2,206,3,3,4,4,76,207,77,208,78,209,79,210,80,211,81,212,82,213,5,66,6,214,215,216,83,217,69,84,218,7,219,85,220,86,221,87,70,88,222,89,223,224,90,225,68,226,91,227,92,228,93,229,94,230,95,231,96,232,8,9,10,11,97,12,13,233,98,234,235,99,236,100,14,15,16,17,237,101,238,102,103,104,105,239,106,185,107,240,108,18,19,109,20,21,22,24,26,27,28,241,242,110,243,244,111,245,112,246,113,247,114,248,249,250,115,251,116,252,117,253,118,254,119,255,120,121,256,257,258,259,260,261,124,262,32,263,35,37,39,40,42,125,264,126,265,266,267,268,127,269,128,270,129,271,272,130,273,274,131,275,132,276,133,277,134,278,135,279,136,280,137,186,47,139,281,282,283,284,140,285,286,287,288,141,289,142,290,143,291,144,292,145,293,146,294,147,295,296,148,149,297,150,189,151,298,49,50,51,52,155,299,300,156,301,159,302,160,303,161,304,305,306,307,162,308,309,163,310,164,190,165,311,312,53,54,55,56,313,314,166,197,315,316,317,318,319,320,167,321,168,169,322,170,191,171,323,57,324,325,58,326,172,327,328,329,330,331,59,60,332,333,173,334,174,335,175,336,337,338,176,339,177,340,178,341,342,179,343,344,180,345,181,346,182,347,183,348],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[106],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[55],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[3,3,4,4,212,219,85,221,87,70,88,225,226,91,92,228,93,231,96,232,112,292,145,293,146,294,301,159,302,160,303,307,310,332,333,174,347,183],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[101,349],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[238,102,185,107,350,351,352,353,354,355,356,357,358,359,360,112,113,247,186,361,362,363,364,365,366,187,148,188,149,189,151,163,310,190,165,170,191,171,57,58,326,192,59,60],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:317","failures":[304,305,330,331],"status":-1,"binaryOperator":"java.lang.Throwable instanceof java.lang.Error","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[87,223,93,231],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.internal.ArgumentToString:40","failures":[238,350,351,352,355,357,358,359,112,113,247,186,361,363,365,187,148,188,163,310,190,165,170,191,171,59,60],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.Character","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[3,4,367,368,369,370,371],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:332","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","value":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[27],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[5,66,6,67],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[238,102,185,107,112,113,247,256,257,258,259,186,148,149,189,151,163,310,190,165,170,191,171],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[214],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.InjectionPlan:51","failures":[71,206,372,373,374,375,376,100,377,378,379,380,381,382,383,384,385,386,387,261,388,389,390,391,392,393],"status":-1,"binaryOperator":"(java.lang.String.length()) != 0","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":86,"org.easymock.tests2.UsageTest.argumentsOrdered":107,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":296,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":255,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":388,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":104,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":71,"org.easymock.tests2.DelegateToTest.testReturnException":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":142,"org.easymock.tests.MockingTest.testPartialClassMocking":50,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":306,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":335,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":249,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":89,"org.easymock.tests2.UsageTest.wrongArguments":102,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":332,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":382,"org.easymock.samples.ExampleTest.answerVsDelegate":72,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":46,"org.easymock.tests2.UsageConstraintsTest.testNull":87,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":20,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":119,"org.easymock.tests2.CaptureTest.testPrimitive":208,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":174,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":182,"org.easymock.tests.UsageTest.moreThanOneArgument":148,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":109,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":293,"org.easymock.tests.UsageTest.argumentsOrdered":151,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":197,"org.easymock.tests.UsageVarargTest.varargIntAccepted":282,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":359,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":301,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":33,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":392,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":303,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":354,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":100,"org.easymock.tests2.AnswerTest.answer":233,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":223,"org.easymock.tests2.CaptureTest.testAnd":76,"org.easymock.tests2.UsageTest.strictResetToDefault":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":145,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":252,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":300,"org.easymock.tests2.DelegateToTest.testDelegate":69,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":318,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":291,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":154,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":59,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":343,"org.easymock.tests.UsageThrowableTest.throwError":277,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":393,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":294,"org.easymock.samples.PartialClassMockTest.testGetArea":0,"org.easymock.tests2.CompareToTest.testLessOrEqual":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":327,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":175,"org.easymock.tests2.UsageTest.niceToStrict":103,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":37,"org.easymock.tests2.MockBuilderTest.testCreateMock":41,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":379,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":178,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":351,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":117,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":331,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":319,"org.easymock.tests.UsageOverloadedMethodTest.overloading":314,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":226,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":325,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":272,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":313,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":68,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":211,"org.easymock.tests2.EasyMockSupportClassTest.testAll":14,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":54,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":181,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":356,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":29,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":153,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":123,"org.easymock.tests2.CaptureTest.testCaptureAll":207,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":370,"org.easymock.tests2.UsageConstraintsTest.testMatches":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":146,"org.easymock.samples.ExampleTest.voteForRemovals":203,"org.easymock.tests.UsageVarargTest.allKinds":141,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":170,"org.easymock.samples.BasicClassMockTest.testPrintContent":2,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":280,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":111,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":389,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":144,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":217,"org.easymock.tests2.UsageConstraintsTest.greaterThan":92,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":28,"org.easymock.samples.ExampleTest.voteForRemoval":201,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":23,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":56,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":251,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":278,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":289,"org.easymock.tests2.CaptureTest.testCaptureFirst":213,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":214,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":116,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":108,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":192,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":128,"org.easymock.tests2.CaptureTest.testCapture2_2446744":82,"org.easymock.tests2.UsageTest.moreThanOneArgument":238,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":243,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":42,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":288,"org.easymock.tests.GenericTest.testBridgedEquals":199,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":169,"org.easymock.tests.UsageExpectAndReturnTest.longType":267,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":152,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":250,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":346,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":230,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":304,"org.easymock.tests.UsageCallCountTest.tooManyCalls":322,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":362,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":320,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":381,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":136,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":9,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":34,"org.easymock.tests2.UsageConstraintsTest.testContains":225,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":32,"org.easymock.tests2.UsageConstraintsTest.testFind":221,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":166,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":264,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":308,"org.easymock.tests.UsageExpectAndReturnTest.object":271,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":380,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":254,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":284,"org.easymock.tests.UsageTest.exactCallCountByLastCall":298,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":307,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":315,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":366,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":139,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":275,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":324,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":384,"org.easymock.tests2.EasyMockSupportTest.testVerify":121,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":353,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":316,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":323,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":330,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":122,"org.easymock.tests.UsageVarargTest.varargCharAccepted":283,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":245,"org.easymock.tests2.UsageTest.openCallCountByLastCall":105,"org.easymock.tests.DefaultClassInstantiatorTest.object":138,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":120,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":329,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":184,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":187,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":135,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":375,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":383,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":26,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":339,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":132,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":17,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":355,"org.easymock.tests2.UsageTest.resumeIfFailure":240,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":45,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":143,"org.easymock.tests2.StubTest.stubWithReturnValue":218,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":129,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":95,"org.easymock.tests2.SerializationTest.testAllMockedMethod":6,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":147,"org.easymock.samples.SupportTest.voteForRemovals":205,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":358,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":198,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":386,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":179,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":67,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":295,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":98,"org.easymock.tests.UsageExpectAndThrowTest.object":341,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":229,"org.easymock.tests2.DelegateToTest.testWrongClass":83,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":347,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":183,"org.easymock.tests.UsageStrictMockTest.range":190,"org.easymock.samples.ConstructorCalledMockTest.testTax":3,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":118,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":8,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":342,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":39,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":189,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":157,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":361,"org.easymock.tests2.CaptureTest.testCaptureNone":80,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":328,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":193,"org.easymock.tests.UsageUnorderedTest.message":186,"org.easymock.tests.UsageVerifyTest.twoReturns":171,"org.easymock.tests.UsageVarargTest.varargByteAccepted":287,"org.easymock.tests2.ThreadingTest.testThreadSafe":241,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":168,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":1,"org.easymock.tests2.CaptureTest.testCapture_2617107":77,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":360,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":334,"org.easymock.tests2.UsageConstraintsTest.any":224,"org.easymock.tests2.StubTest.stub":84,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":305,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":290,"org.easymock.tests.UsageExpectAndThrowTest.longType":337,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":246,"org.easymock.tests2.SerializationTest.testClass":5,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":261,"org.easymock.tests.LimitationsTest.mockNativeMethod":47,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":133,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":55,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":31,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":374,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":114,"org.easymock.tests2.NameTest.nameForMocksControl":259,"org.easymock.tests2.MockedExceptionTest.testMockedException":262,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":376,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":150,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":52,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":338,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":18,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":40,"org.easymock.tests.MockingTest.testNicePartialClassMocking":51,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":22,"org.easymock.tests2.CompareToTest.testCompareEqual":63,"org.easymock.tests2.CaptureTest.testCaptureLast":210,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":372,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":60,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":13,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":222,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":94,"org.easymock.tests.MockingTest.testTwoMocks":49,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":340,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":185,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":96,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":195,"org.easymock.samples.ExampleTest.removeNonExistingDocument":74,"org.easymock.tests.UsageStrictMockTest.differentMethods":165,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":385,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":194,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":110,"org.easymock.tests2.ConstraintsToStringTest.andToString":357,"org.easymock.tests2.MockBuilderTest.testCreateMockString":44,"org.easymock.tests.UsageExpectAndThrowTest.floatType":336,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":227,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":235,"org.easymock.tests.UsageVerifyTest.twoThrows":191,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":16,"org.easymock.samples.ExampleTest.voteAgainstRemoval":73,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":172,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":27,"org.easymock.tests2.UsageConstraintsTest.testNotNull":231,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":137,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":124,"org.easymock.tests2.UsageTest.defaultResetToNice":106,"org.easymock.samples.ExampleTest.voteAgainstRemovals":200,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":131,"org.easymock.tests.UsageVarargTest.differentLength":140,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":373,"org.easymock.tests2.CallbackTest.callback":260,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":364,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":367,"org.easymock.tests.UsageTest.openCallCountByLastCall":297,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":219,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":173,"org.easymock.tests.UsageCallCountTest.tooFewCalls":167,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":158,"org.easymock.tests.UsageThrowableTest.throwCheckedException":279,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":363,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":162,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":12,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":10,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":377,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":97,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":236,"org.easymock.tests2.CompareToTest.testGreateOrEqual":64,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":244,"org.easymock.tests2.NameTest.nameForNiceMock":258,"org.easymock.tests2.DependencyTest.testInterfaceMocking":248,"org.easymock.samples.ExampleTest.addDocument":202,"org.easymock.tests2.DelegateToTest.testStubDelegate":216,"org.easymock.tests2.AnswerTest.stubAnswer":99,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":310,"org.easymock.tests.UsageVarargTest.varargLongAccepted":286,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":311,"org.easymock.tests.UsageExpectAndReturnTest.floatType":266,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":276,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":7,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":4,"org.easymock.tests2.ConstraintsToStringTest.orToString":350,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":391,"org.easymock.tests.UsageThrowableTest.noUpperLimit":134,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":228,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":85,"org.easymock.tests2.SerializationTest.test":66,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":209,"org.easymock.tests2.UsageConstraintsTest.testSame":70,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":265,"org.easymock.samples.SupportTest.addDocument":75,"org.easymock.tests.GenericTest.testPackageScope":53,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":317,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":390,"org.easymock.tests2.NameTest.nameForMock":256,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":130,"org.easymock.tests2.UsageStrictMockTest.differentMethods":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":371,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":349,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":268,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":344,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":156,"org.easymock.tests2.MockedExceptionTest.testRealException":263,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":365,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":333,"org.easymock.tests2.NameTest.nameForStrictMock":257,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":125,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":21,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":93,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":35,"org.easymock.tests2.UsageStrictMockTest.range":113,"org.easymock.tests2.UsageConstraintsTest.lessThan":232,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":387,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":115,"org.easymock.tests2.CaptureTest.testCaptureRightOne":81,"org.easymock.tests2.UsageConstraintsTest.testOr":88,"org.easymock.tests.UsageRangeTest.combination":155,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":19,"org.easymock.tests.UsageTest.wrongArguments":149,"org.easymock.tests2.MockBuilderTest.testWithConstructor":368,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":48,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":273,"org.easymock.tests.UsageVarargTest.varargShortAccepted":285,"org.easymock.tests2.UsageConstraintsTest.cmpTo":90,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":234,"org.easymock.tests2.CompareToTest.testLessThan":61,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":239,"org.easymock.tests2.CaptureTest.testCaptureFromStub":212,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":36,"org.easymock.tests.UsageTest.unexpectedCallWithArray":188,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":163,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":321,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":369,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":274,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":164,"org.easymock.tests2.UsageConstraintsTest.constraints":220,"org.easymock.samples.ExampleTest.addAndChangeDocument":204,"org.easymock.tests2.ConstraintsToStringTest.notToString":352,"org.easymock.tests.UsageStrictMockTest.testVerify":312,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":206,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":309,"org.easymock.tests2.CompareToTest.testGreateThan":62,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":79,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":269,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":160,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":253,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":281}}]

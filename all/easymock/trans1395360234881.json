[{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:152","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:166","sourceCode":"throw new java.lang.NoSuchMethodException((\"Couldn\\'t find constructor for class \" + (java.lang.Class<T>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[59,60,61,62],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[63],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,40,83,84,85,86,87,88,89,59,90,91,92,93,60,94,95,96,97,98,99,100,101,102,61,103,104,105,106,62,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:225","sourceCode":"net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[125,98,104,108],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:193","sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[126,127],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[128,129,68,70,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[128,163,164,129,165,65,66,69,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,13,191,192,72,73,193,194,132,195,196,197,74,75,77,198,199,153,154,155,156,157,158,159,78,79,80,81,82,26,200,201,202,203,204,205,160,206,207,208,209,161,210,211,212,213,214,215,216,217,33,218,219,34,220,221,222,35,36,223,37,38,39,40,224,225,43,226,47,227,228,229,230,231,232,233,234,235,236,237,238,57,239,240,241,242,243,244,245,246,247,248,249,250,251,162,84,252,253,85,86,87,88,89,59,90,91,92,93,94,95,96,97,98,99,100,101,102,61,103,104,105,106,62,107,108,254,255,256,257,109,110,111,112,113,116,117,118,119,121,122,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[258,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[259,260,4,5,6,7,261,13,17,195,196,197,26,27,262,28,263,263,264,264,29,30,205,265,213,266,214,267,215,216,268,217,269,33,218,219,34,221,222,35,36,37,38,39,270,40,42,224,225,43,45,47,227,228,229,233,57,256,58],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"failures":[271,262,214,272,273,268,269,274,225,45,233,275,256],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[276],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[109,111,113,114,115,118,119,120,121],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[259,260,4,13,17,195,196,197,26,27,262,28,263,263,264,264,29,30,205,265,277,213,266,214,267,215,216,268,217,278,269,33,218,219,34,221,222,35,36,37,38,39,270,40,42,224,225,43,279,280,281,47,227,228,229,233,57,256,58],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[233,275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[282,256,257,58],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[13,195,196,197,26,262,28,263,263,264,264,205,283,265,213,266,214,215,216,217,284,269,36,270,224,225,43,285,279,280,281,286,47,227,228,229,233,256],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":88,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":128,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":249,"org.easymock.tests2.StubTest.stubWithReturnValue":162,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":180,"org.easymock.tests2.SerializationTest.testAllMockedMethod":58,"org.easymock.tests.MockingTest.testPartialClassMocking":195,"org.easymock.samples.SupportTest.voteForRemovals":200,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":271,"org.easymock.tests.MockClassControlTest.testToString":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":127,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":145,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":282,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":227,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":0,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":133,"org.easymock.tests.UsageExpectAndThrowTest.object":143,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":255,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":103,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":72,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":73,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":65,"org.easymock.samples.ConstructorCalledMockTest.testTax":263,"org.easymock.tests.UsageStrictMockTest.range":198,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":246,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":260,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":33,"org.easymock.tests2.UsageConstraintsTest.testNull":59,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":37,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":144,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":248,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":215,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":10,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":285,"org.easymock.tests2.CaptureTest.testPrimitive":112,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":46,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":152,"org.easymock.tests.UsageTest.moreThanOneArgument":163,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":223,"org.easymock.tests2.CaptureTest.testCaptureNone":117,"org.easymock.tests.UsageUnorderedTest.message":71,"org.easymock.tests.UsageVerifyTest.twoReturns":192,"org.easymock.tests2.ThreadingTest.testThreadSafe":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":53,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":78,"org.easymock.tests2.CaptureTest.testCapture_2617107":111,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":68,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":267,"org.easymock.tests2.UsageConstraintsTest.any":94,"org.easymock.tests2.StubTest.stub":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":82,"org.easymock.tests.UsageExpectAndThrowTest.longType":136,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":23,"org.easymock.tests2.SerializationTest.testClass":256,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":230,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":226,"org.easymock.tests.LimitationsTest.mockNativeMethod":13,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":262,"org.easymock.tests2.AnswerTest.answer":231,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":190,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":60,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":281,"org.easymock.tests2.CaptureTest.testAnd":109,"org.easymock.tests2.UsageTest.strictResetToDefault":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests2.MockedExceptionTest.testMockedException":56,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":48,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":168,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":129,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":197,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":137,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":216,"org.easymock.tests.MockingTest.testNicePartialClassMocking":196,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":148,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":39,"org.easymock.tests.LimitationsTest.mockFinalMethod":14,"org.easymock.tests2.CaptureTest.testCaptureLast":116,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":70,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":222,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":92,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":104,"org.easymock.tests.MockingTest.testTwoMocks":17,"org.easymock.tests2.CaptureTest.testCapture1_2446744":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":146,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":141,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.tests.UsageThrowableTest.throwError":153,"org.easymock.tests.UsageStrictMockTest.differentMethods":199,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":21,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":236,"org.easymock.tests2.MockBuilderTest.testCreateMockString":269,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":135,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":100,"org.easymock.tests.UsageVerifyTest.twoThrows":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":228,"org.easymock.samples.PartialClassMockTest.testGetArea":205,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":79,"org.easymock.samples.ExampleTest.voteAgainstRemoval":203,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":225,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":261,"org.easymock.tests2.UsageTest.niceToStrict":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":134,"org.easymock.tests.LimitationsTest.privateConstructor":12,"org.easymock.tests2.UsageConstraintsTest.testNotNull":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":159,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":214,"org.easymock.tests2.MockBuilderTest.testCreateMock":268,"org.easymock.tests2.UsageTest.defaultResetToNice":210,"org.easymock.samples.ExampleTest.voteAgainstRemovals":201,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":186,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":274,"org.easymock.tests.UsageTest.openCallCountByLastCall":164,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":142,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":244,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":67,"org.easymock.tests.UsageOverloadedMethodTest.overloading":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":55,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":98,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":130,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":34,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":97,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":118,"org.easymock.tests.UsageThrowableTest.throwCheckedException":156,"org.easymock.tests.MockClassControlTest.testEquals":9,"org.easymock.tests2.EasyMockSupportClassTest.testAll":47,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":27,"org.easymock.tests.MockingTest.testStrictClassMocking":15,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":150,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":279,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":63,"org.easymock.tests2.CaptureTest.testCaptureAll":110,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":221,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":75,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":219,"org.easymock.tests2.UsageConstraintsTest.testMatches":99,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":220,"org.easymock.samples.ExampleTest.voteForRemovals":204,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":238,"org.easymock.tests.UsageVarargTest.allKinds":64,"org.easymock.tests2.DependencyTest.testInterfaceMocking":254,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":191,"org.easymock.samples.BasicClassMockTest.testPrintContent":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":54,"org.easymock.tests2.DelegateToTest.testStubDelegate":251,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":158,"org.easymock.tests2.AnswerTest.stubAnswer":232,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":77,"org.easymock.tests2.UsageConstraintsTest.greaterThan":101,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":272,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":167,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":43,"org.easymock.samples.ExampleTest.voteForRemoval":202,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":25,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":235,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":44,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":284,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":270,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":233,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":264,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":102,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":86,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":28,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":160,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":31,"org.easymock.tests2.SerializationTest.test":257,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":114,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":273,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":241,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":20,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":154,"org.easymock.tests2.UsageConstraintsTest.testSame":90,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.tests2.CaptureTest.testCaptureFirst":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":242,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":212,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":50,"org.easymock.tests.GenericTest.testPackageScope":26,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":237,"org.easymock.tests2.UsageTest.moreThanOneArgument":207,"org.easymock.tests2.CaptureTest.testCapture2_2446744":121,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":217,"org.easymock.tests.GenericTest.testBridgedEquals":2,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":239,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":278,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":183,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":105,"org.easymock.tests2.UsageStrictMockTest.differentMethods":253,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":149,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":41,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":147,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":138,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":66,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":157,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":218,"org.easymock.tests.MockingTest.testNiceClassMocking":18,"org.easymock.tests.MockingTest.testClassMocking":16,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":277,"org.easymock.tests2.UsageConstraintsTest.testContains":96,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":57,"org.easymock.tests2.UsageConstraintsTest.testFind":89,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":132,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":123,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":38,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":124,"org.easymock.tests.UsageExpectAndReturnTest.object":181,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":32,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":61,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":22,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":40,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":213,"org.easymock.tests2.UsageStrictMockTest.range":252,"org.easymock.tests2.UsageConstraintsTest.lessThan":108,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":247,"org.easymock.tests.UsageTest.exactCallCountByLastCall":165,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":283,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":74,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":240,"org.easymock.tests2.CaptureTest.testCaptureRightOne":119,"org.easymock.tests2.UsageConstraintsTest.testOr":91,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":275,"org.easymock.tests.UsageRangeTest.combination":166,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":36,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":187,"org.easymock.tests.MockClassControlTest.testHashCode":8,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":4,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":176,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":184,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":24,"org.easymock.tests2.UsageConstraintsTest.cmpTo":95,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":83,"org.easymock.tests2.CompareToTest.testLessThan":125,"org.easymock.tests2.UsageTest.openCallCountByLastCall":209,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":161,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":250,"org.easymock.tests.DefaultClassInstantiatorTest.object":19,"org.easymock.tests2.CaptureTest.testCaptureFromStub":120,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":52,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":286,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":76,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":155,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":126,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":185,"org.easymock.tests2.CaptureTest.testCapture":276,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":224,"org.easymock.tests2.UsageConstraintsTest.constraints":87,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":7,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":139,"org.easymock.tests.CapturesMatcherTest.test":258,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":229,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":6,"org.easymock.tests2.UsageTest.resumeIfFailure":211,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":115,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":280,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":80,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":259,"org.easymock.tests.LimitationsTest.abstractClass":11,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":81,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":170,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":245}}]

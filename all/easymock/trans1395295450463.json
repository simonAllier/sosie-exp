[{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:130","sourceCode":"throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[58,59],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = this.org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"lastInvocation":"lastInvocation"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[60,61,62,63,64,65,66,67,68,69,18,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.internal.RecordState:173","failures":[71],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,60,92,93,61,62,63,64,65,66,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,8,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,67,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,68,69,18,70,257,258,259,260,261,262,263,264,265,266,267,268,30,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,71,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,38,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,54,350,351,352,353,354,355,356,357],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[302,309,315,327,358],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[360,22,317,340],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[113,114,361,362,192,217,218,219,220,221,222,223,224,363,364,50],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[318,365],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[308],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Same:37","failures":[306],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[116,117,26,278,279],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[366,367],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:182","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[368],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:173","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","type":"CtThrowImpl"},"failures":[105,106,107,114,117,118,176,178,179,216,260,261,262,263,276,279,280,337],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,60,92,93,61,62,63,64,65,66,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,8,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,67,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,68,69,18,70,257,258,259,260,261,262,263,264,265,266,267,268,30,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,71,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,38,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,54,350,351,352,353,354,355,356,357],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:60","failures":[369,370,32,35,371,372,359,373,374,375,376],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[377,106,107,116,278],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[366,367],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[314],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[378,379,380,381,382,360,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[410,243,244,245,246,247,248,249,250,252,253,254,255,256],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[71],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:324","failures":[106,128,129],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:360","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[79,80,411,105,110,116,117,120,125,178,219,220,278,279,301,302,304,306,307,313,316,319,326,341,342],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[303],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[83,84,85,86,87,88,89,90,91,93,65,98,105,106,107,108,109,110,114,116,117,120,121,122,123,4,124,126,127,128,129,130,131,8,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,165,166,170,67,185,187,188,190,10,11,12,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,220,223,17,234,235,236,237,239,242,243,244,245,246,247,250,251,252,253,255,256,68,18,258,19,20,259,21,22,23,25,27,28,29,264,265,266,267,268,30,31,32,33,269,34,35,276,278,279,36,281,282,283,284,285,286,287,288,289,290,291,292,293,296,71,297,299,300,301,302,303,304,305,306,307,308,309,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,40,42,44,45,47,330,50,51,52,53,332,333,334,335,336,337,339,341,342,343,346,347,54,352,356,357],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[36,373,412,54,376,413,414,415,416,417],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,16,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":303,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":215,"org.easymock.tests2.UsageTest.argumentsOrdered":345,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":292,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":329,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":340,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":233,"org.easymock.tests2.DelegateToTest.testReturnException":296,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":62,"org.easymock.tests.MockingTest.testPartialClassMocking":10,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":77,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":134,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":51,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":333,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":409,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":413,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":309,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":90,"org.easymock.tests2.UsageTest.wrongArguments":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":226,"org.easymock.samples.ExampleTest.answerVsDelegate":235,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":2,"org.easymock.tests2.UsageConstraintsTest.testNull":305,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":21,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":291,"org.easymock.tests2.CaptureTest.testPrimitive":246,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":153,"org.easymock.tests.UsageTest.moreThanOneArgument":216,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":259,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":173,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":78,"org.easymock.tests.UsageTest.argumentsOrdered":222,"org.easymock.tests.UsageVarargTest.varargIntAccepted":156,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":351,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":83,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":38,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":87,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":393,"org.easymock.tests.ReplayStateInvalidUsageTest.times":384,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":330,"org.easymock.tests2.AnswerTest.answer":352,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":273,"org.easymock.tests2.CaptureTest.testAnd":243,"org.easymock.tests2.UsageTest.strictResetToDefault":336,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":26,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":359,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":122,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":286,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":82,"org.easymock.tests2.DelegateToTest.testDelegate":299,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":392,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":149,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":65,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":104,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":88,"org.easymock.tests2.CaptureTest.testCapture1_2446744":247,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":147,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":271,"org.easymock.tests.UsageThrowableTest.throwError":124,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":380,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":175,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":369,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":396,"org.easymock.samples.PartialClassMockTest.testGetArea":17,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":381,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":84,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":193,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":135,"org.easymock.tests2.UsageTest.niceToStrict":339,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":42,"org.easymock.tests2.MockBuilderTest.testCreateMock":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":143,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":363,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":287,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":230,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":176,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":224,"org.easymock.tests.UsageOverloadedMethodTest.overloading":109,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":188,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":315,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":206,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":314,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":252,"org.easymock.tests2.EasyMockSupportClassTest.testAll":50,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":5,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":151,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":102,"org.easymock.tests2.CaptureTest.testCaptureAll":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":272,"org.easymock.tests.MockNameTest.defaultName":133,"org.easymock.tests2.UsageConstraintsTest.testMatches":316,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":174,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":378,"org.easymock.samples.ExampleTest.voteForRemovals":239,"org.easymock.tests.UsageVarargTest.allKinds":164,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":103,"org.easymock.samples.BasicClassMockTest.testPrintContent":14,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":130,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":66,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":298,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":417,"org.easymock.tests2.UsageConstraintsTest.greaterThan":318,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":121,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":397,"org.easymock.samples.ExampleTest.voteForRemoval":236,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":265,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":96,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":24,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":389,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":3,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":335,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":412,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":284,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":126,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":61,"org.easymock.tests2.CaptureTest.testCaptureFirst":256,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":295,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":285,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":347,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":191,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":202,"org.easymock.tests2.CaptureTest.testCapture2_2446744":255,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":267,"org.easymock.tests2.UsageTest.moreThanOneArgument":337,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":47,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":163,"org.easymock.tests.GenericTest.testBridgedEquals":367,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":183,"org.easymock.tests.UsageExpectAndReturnTest.longType":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":100,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":282,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":152,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":48,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":231,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":323,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":171,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":168,"org.easymock.tests.UsageCallCountTest.tooManyCalls":184,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":178,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":139,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":129,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":31,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":177,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":39,"org.easymock.tests2.UsageConstraintsTest.testContains":313,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":18,"org.easymock.tests2.UsageConstraintsTest.testFind":304,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":110,"org.easymock.tests.MockTypeTest.fromEasyMockClass":94,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":111,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":349,"org.easymock.tests.UsageExpectAndReturnTest.object":205,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":25,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":290,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":414,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":158,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":75,"org.easymock.tests.UsageTest.exactCallCountByLastCall":223,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":170,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":79,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":376,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":211,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":187,"org.easymock.tests2.EasyMockSupportTest.testVerify":294,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":80,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":185,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":229,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":270,"org.easymock.tests.UsageVarargTest.varargCharAccepted":157,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":350,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":275,"org.easymock.tests2.UsageTest.openCallCountByLastCall":341,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":293,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":228,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":73,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":141,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":127,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":395,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":27,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":140,"org.easymock.tests.CapturesMatcherTest.test":410,"org.easymock.tests.ReplayStateInvalidCallsTest.times":401,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":212,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":167,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":53,"org.easymock.tests2.UsageTest.resumeIfFailure":346,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":64,"org.easymock.tests2.StubTest.stubWithReturnValue":258,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":373,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":204,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":324,"org.easymock.tests2.SerializationTest.testAllMockedMethod":37,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":98,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":0,"org.easymock.samples.SupportTest.voteForRemovals":242,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":364,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":366,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":146,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":99,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":353,"org.easymock.tests.UsageExpectAndThrowTest.object":144,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":321,"org.easymock.tests2.DelegateToTest.testWrongClass":297,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":399,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":165,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":166,"org.easymock.tests.UsageStrictMockTest.range":116,"org.easymock.samples.ConstructorCalledMockTest.testTax":15,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":289,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":145,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":44,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":386,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":221,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":225,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":361,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":391,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":194,"org.easymock.tests2.CaptureTest.testCaptureNone":251,"org.easymock.tests.UsageUnorderedTest.message":132,"org.easymock.tests.UsageVerifyTest.twoReturns":107,"org.easymock.tests.UsageVarargTest.varargByteAccepted":162,"org.easymock.tests2.ThreadingTest.testThreadSafe":264,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":181,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":13,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":76,"org.easymock.tests2.CaptureTest.testCapture_2617107":245,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":368,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":92,"org.easymock.tests2.UsageConstraintsTest.any":311,"org.easymock.tests2.StubTest.stub":257,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":383,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":169,"org.easymock.tests.UsageExpectAndThrowTest.longType":137,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":63,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":360,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":277,"org.easymock.tests2.SerializationTest.testClass":36,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":328,"org.easymock.tests.LimitationsTest.mockNativeMethod":8,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":6,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":214,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":57,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":407,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":280,"org.easymock.tests2.NameTest.nameForMocksControl":263,"org.easymock.tests2.MockedExceptionTest.testMockedException":69,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":220,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":138,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":12,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":19,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":45,"org.easymock.tests.MockingTest.testNicePartialClassMocking":11,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":23,"org.easymock.tests2.CaptureTest.testCaptureLast":250,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":89,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":406,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":35,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":308,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":322,"org.easymock.tests.MockingTest.testTwoMocks":9,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":403,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":371,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":195,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":142,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":344,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":326,"org.easymock.tests.UsageStrictMockTest.differentMethods":117,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":382,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":266,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests.UsageExpectAndThrowTest.floatType":136,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":317,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":355,"org.easymock.tests.UsageVerifyTest.twoThrows":106,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":52,"org.easymock.samples.ExampleTest.voteAgainstRemoval":237,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":192,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":28,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":370,"org.easymock.tests2.UsageConstraintsTest.testNotNull":325,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":131,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":68,"org.easymock.tests2.UsageTest.defaultResetToNice":343,"org.easymock.samples.ExampleTest.voteAgainstRemovals":234,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":210,"org.easymock.tests.UsageVarargTest.differentLength":159,"org.easymock.tests2.CallbackTest.callback":334,"org.easymock.tests.UsageTest.openCallCountByLastCall":219,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":300,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":60,"org.easymock.tests.UsageCallCountTest.tooFewCalls":179,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":33,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":227,"org.easymock.tests.UsageThrowableTest.throwCheckedException":128,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":362,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":34,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":67,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":331,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":385,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":269,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":357,"org.easymock.tests.ObjectMethodsTest.testHashCode":74,"org.easymock.tests2.CompareToTest.testGreateOrEqual":358,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":405,"org.easymock.tests2.NameTest.nameForNiceMock":262,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":268,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":400,"org.easymock.tests2.DependencyTest.testInterfaceMocking":332,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":415,"org.easymock.samples.ExampleTest.addDocument":238,"org.easymock.tests2.DelegateToTest.testStubDelegate":71,"org.easymock.tests2.AnswerTest.stubAnswer":356,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":114,"org.easymock.tests.UsageVarargTest.varargLongAccepted":161,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests.UsageExpectAndReturnTest.floatType":197,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":213,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":16,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":189,"org.easymock.tests.UsageThrowableTest.noUpperLimit":125,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":319,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":301,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":248,"org.easymock.tests2.SerializationTest.test":281,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":196,"org.easymock.tests2.UsageConstraintsTest.testSame":306,"org.easymock.samples.SupportTest.addDocument":241,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":390,"org.easymock.tests.GenericTest.testPackageScope":4,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":81,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":388,"org.easymock.tests2.NameTest.nameForMock":260,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":207,"org.easymock.tests2.UsageStrictMockTest.differentMethods":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":375,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":199,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":148,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":72,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":123,"org.easymock.tests2.MockedExceptionTest.testRealException":70,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":97,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":276,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":387,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":91,"org.easymock.tests2.NameTest.nameForStrictMock":261,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":348,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":320,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":278,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":394,"org.easymock.tests2.UsageConstraintsTest.lessThan":327,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":416,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":283,"org.easymock.tests2.CaptureTest.testCaptureRightOne":253,"org.easymock.tests2.UsageConstraintsTest.testOr":307,"org.easymock.tests.UsageRangeTest.combination":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":20,"org.easymock.tests.UsageTest.wrongArguments":218,"org.easymock.tests2.MockBuilderTest.testWithConstructor":372,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":7,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":411,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":208,"org.easymock.tests.UsageVarargTest.varargShortAccepted":160,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":59,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":182,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":408,"org.easymock.tests2.UsageConstraintsTest.cmpTo":312,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":354,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":398,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":342,"org.easymock.tests2.CaptureTest.testCaptureFromStub":254,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":379,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":41,"org.easymock.tests.UsageTest.unexpectedCallWithArray":217,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":404,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":180,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":374,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":209,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":115,"org.easymock.tests2.UsageConstraintsTest.constraints":302,"org.easymock.samples.ExampleTest.addAndChangeDocument":240,"org.easymock.tests.UsageStrictMockTest.testVerify":119,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":232,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":112,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":101,"org.easymock.tests2.CompareToTest.testGreateThan":365,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":249,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":85,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":201,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":86,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":155,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":288,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":377}}]

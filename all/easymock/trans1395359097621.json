[{"position":"org.easymock.Capture:83","failures":[0],"status":-1,"binaryOperator":"(\"More than one value captured: \" + org.easymock.Capture<T>.(getValues()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[19,20,21,22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[10,23,24,25,26,27,28,29],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:123","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[33,34],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:65","sourceCode":"java.util.Properties.load(java.io.InputStream)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[38,39,40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[41,42,43,44,45,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[47],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[50,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:47","sourceCode":"org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[52,53,54,55,56,57,58,59,60,61,62,23,63,64,65,66,67,68,68,69,69,70,27,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[86],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[87],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[0,88,89,90,91,92,93,94,95,96,97,85,98],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:382","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[99,100,101],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[102,5,6,103,104,105,106,107,108,109,110,111,112,52,53,113,114,54,115,116,117,118,119,120,121,55,56,122,62,123,124,23,125,24,25,126,127,128,129,130,131,132,133,63,64,65,66,67,134,135,136,137,138,139,140,141,1,142,143,13,14,144,145,48,146,147,21,148,149,150,151,152,153,154,155,156,157,37,158,34,70,159,160,27,161,28,29,162,71,72,163,73,74,75,76,51,164,165,77,166,78,79,167,80,81,47,168,169,170,171,82,83,84,172,89,90,91,92,93,94,173,95,97,174,98],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[175,176,177,178,179],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"leafClass"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[180,181,116,182,183,184,185,186,120,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,127,208,129,130,131,132,133,209,210,70],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[163,73,76,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"failures":[211],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:148","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"failures":[212],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[213,214,215],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":163,"org.easymock.tests2.UsageTest.argumentsOrdered":14,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":180,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":35,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":143,"org.easymock.tests2.StubTest.stubWithReturnValue":70,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":171,"org.easymock.tests2.SerializationTest.testAllMockedMethod":32,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":17,"org.easymock.samples.SupportTest.voteForRemovals":134,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":175,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":38,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":200,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":33,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":188,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":20,"org.easymock.tests.UsageExpectAndThrowTest.object":198,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":168,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":55,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":56,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":164,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":52,"org.easymock.tests2.UsageTest.wrongArguments":12,"org.easymock.samples.ConstructorCalledMockTest.testTax":68,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.samples.ExampleTest.answerVsDelegate":136,"org.easymock.tests2.UsageConstraintsTest.testNull":74,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":199,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":154,"org.easymock.tests2.CaptureTest.testPrimitive":90,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":54,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":207,"org.easymock.tests.UsageTest.moreThanOneArgument":2,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":59,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":86,"org.easymock.tests2.CaptureTest.testCaptureNone":173,"org.easymock.tests.UsageUnorderedTest.message":121,"org.easymock.tests.UsageVarargTest.varargByteAccepted":110,"org.easymock.tests.UsageTest.argumentsOrdered":6,"org.easymock.tests.UsageVarargTest.varargIntAccepted":105,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":87,"org.easymock.tests2.CaptureTest.testCapture_2617107":89,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":63,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":18,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":214,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":114,"org.easymock.tests2.UsageConstraintsTest.any":165,"org.easymock.tests2.StubTest.stub":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":67,"org.easymock.tests.UsageExpectAndThrowTest.longType":191,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.SerializationTest.testClass":30,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":212,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":178,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.UsageTest.strictResetToDefault":1,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":162,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":58,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":181,"org.easymock.tests2.DelegateToTest.testDelegate":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":192,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":203,"org.easymock.tests2.CaptureTest.testCaptureLast":94,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":116,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":51,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":169,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":102,"org.easymock.tests2.CaptureTest.testCapture1_2446744":91,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":100,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":201,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":196,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":83,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":99,"org.easymock.tests.UsageThrowableTest.throwError":127,"org.easymock.tests.UsageStrictMockTest.differentMethods":25,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":43,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":61,"org.easymock.tests.UsageExpectAndThrowTest.floatType":190,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":167,"org.easymock.tests.UsageVerifyTest.twoThrows":120,"org.easymock.samples.PartialClassMockTest.testGetArea":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":64,"org.easymock.samples.ExampleTest.voteAgainstRemoval":138,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":40,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":147,"org.easymock.tests2.UsageTest.niceToStrict":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":189,"org.easymock.tests2.ThreadingTest.testChangeDefault":101,"org.easymock.tests2.UsageConstraintsTest.testNotNull":82,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":133,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":144,"org.easymock.samples.ExampleTest.voteAgainstRemovals":135,"org.easymock.tests2.CallbackTest.callback":157,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":197,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":15,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":71,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":113,"org.easymock.tests.UsageCallCountTest.tooFewCalls":117,"org.easymock.tests.UsageOverloadedMethodTest.overloading":122,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":78,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":166,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":95,"org.easymock.tests.UsageThrowableTest.throwCheckedException":130,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":177,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":205,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":16,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests2.CaptureTest.testCaptureAll":172,"org.easymock.tests2.UsageConstraintsTest.testMatches":79,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":60,"org.easymock.tests2.CompareToTest.testGreateOrEqual":211,"org.easymock.samples.ExampleTest.voteForRemovals":139,"org.easymock.tests.UsageVarargTest.allKinds":112,"org.easymock.tests2.DelegateToTest.testStubDelegate":37,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":132,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":159,"org.easymock.tests2.AnswerTest.stubAnswer":21,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":23,"org.easymock.tests2.UsageConstraintsTest.greaterThan":80,"org.easymock.tests.UsageVarargTest.varargLongAccepted":109,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":126,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":46,"org.easymock.samples.ExampleTest.voteForRemoval":137,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":215,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":69,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":81,"org.easymock.tests.UsageThrowableTest.noUpperLimit":128,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":209,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":72,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":92,"org.easymock.tests2.SerializationTest.test":31,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":150,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":208,"org.easymock.tests2.UsageConstraintsTest.testSame":75,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":36,"org.easymock.tests2.CaptureTest.testCaptureFirst":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":19,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":151,"org.easymock.tests.GenericTest.testPackageScope":176,"org.easymock.tests2.UsageTest.moreThanOneArgument":11,"org.easymock.tests2.CaptureTest.testCapture2_2446744":174,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":49,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":145,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":111,"org.easymock.tests.GenericTest.testBridgedEquals":179,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":206,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":39,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":170,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":204,"org.easymock.tests2.UsageStrictMockTest.differentMethods":29,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":57,"org.easymock.tests.UsageCallCountTest.tooManyCalls":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":202,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":193,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":53,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":131,"org.easymock.tests2.UsageConstraintsTest.testContains":77,"org.easymock.tests2.UsageConstraintsTest.testFind":73,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":187,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":146,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":123,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":44,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":47,"org.easymock.tests2.UsageStrictMockTest.range":28,"org.easymock.tests2.UsageConstraintsTest.lessThan":84,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":107,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":62,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":149,"org.easymock.tests2.CaptureTest.testCaptureRightOne":97,"org.easymock.tests2.UsageConstraintsTest.testOr":76,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":9,"org.easymock.tests.UsageRangeTest.combination":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":48,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":103,"org.easymock.tests.UsageTest.wrongArguments":4,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":45,"org.easymock.tests.UsageVarargTest.varargShortAccepted":108,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":184,"org.easymock.tests.UsageVarargTest.varargCharAccepted":106,"org.easymock.tests2.CaptureTest.testCaptureMultiple":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":186,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":210,"org.easymock.tests.DefaultClassInstantiatorTest.object":41,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":156,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":183,"org.easymock.tests2.CaptureTest.testCaptureFromStub":85,"org.easymock.tests.UsageTest.unexpectedCallWithArray":3,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":195,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":129,"org.easymock.tests2.CaptureTest.testCapture":96,"org.easymock.tests2.UsageConstraintsTest.constraints":50,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":194,"org.easymock.samples.ExampleTest.addAndChangeDocument":140,"org.easymock.tests.UsageStrictMockTest.testVerify":26,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":124,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":65,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":66,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":104,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":153,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":213}}]

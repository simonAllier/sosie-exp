[{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[106,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:35","sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[108],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[109,110],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,0,1,1,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[151],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,0,1,1,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"failures":[0,1,14,152,153,154],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[155,156,157],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"expected"}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[158,159,160,161,162,163,164,165,166,167,168,111,169,170,171,172,173,174,112,113,155,175,114,115,116,117,176,177,178,179,118,180,119,120,181,121,122,182,183,184,185,123,124,125,186,187,156,188,189,190,191,192,193,157,194,195,196,197,198,7,199,9,10,11,13,16,18,22,200,109,201,24,28,29,202,203,204,205,206,207,36,37,38,208,40,41,43,44,45,209,46,210,211,212,213,214,215,216,217,218,127,219,220,221,222,73,74,128,129,130,131,132,223,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,134,87,88,89,260,261,95,262,263,264,265,266,267,98,268,269,270,271,272,273,274,275,276,277,278,140,141,142,143,144,105,146,147,148,149,150,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[106,215,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[307],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[308,309],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:188","sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","type":"CtTryImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,310,200,24,152,25,26,311,27,28,29,30,312,31,32,33,34,154,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,313,77,78,79,80,81,82,314,83,84,85,86,87,88,89,90,91,92,93,95,97,98,99,100,101,102,103,104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[115,315,182,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[316,317,318,319,320,321,258,259,322,323,324,325,326,309,327],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[316,317,318,319,320,321,258,259,322,323,324,325,326,309],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:157","sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","type":"CtReturnImpl"},"failures":[37,38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[328,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[106,330],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,331,25,26,27,28,29,30,31,32,33,34,332,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,333,334,335,336,337,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,338,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[23,152,311,312,153,154,339,340,341,41,44,342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[108],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[343],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[27],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[158,159,160,161,163,2,344,165,345,166,167,346,111,347,316,169,170,348,112,113,155,175,114,115,116,117,176,177,178,179,118,180,119,120,181,121,122,182,183,184,185,123,124,125,186,187,156,188,349,189,190,193,157,195,196,197,198,7,199,9,11,22,200,110,350,201,351,352,353,354,355,356,357,358,28,30,31,34,359,202,203,317,204,205,360,361,318,319,362,38,363,39,40,41,42,364,43,44,45,209,53,63,69,214,215,365,216,217,127,366,320,133,367,321,224,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,253,255,256,257,258,259,134,87,88,89,260,261,95,368,268,324,369,370,325,326,371,140,141,142,143,144,146,147,372,148,149,150,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,309,373,305,374,375,376,377,378,379,380,306],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:85","failures":[158,159,160,161,162,163,381,164,0,0,1,1,382,2,383,384,344,3,4,165,345,166,167,346,168,111,347,316,169,170,171,172,173,174,348,112,113,155,175,114,115,116,117,176,177,178,179,118,180,119,120,181,121,122,182,183,184,385,185,123,124,125,186,187,156,188,349,189,190,191,192,193,157,126,386,194,195,196,197,198,7,8,199,9,10,11,12,13,16,17,18,19,22,200,109,110,350,201,351,387,352,353,354,355,388,389,356,390,357,358,391,24,25,28,29,30,31,33,34,35,359,202,203,317,204,205,360,361,206,318,319,207,362,36,37,38,208,363,39,40,41,42,364,43,44,45,209,46,50,53,63,69,210,211,212,213,214,215,365,216,217,218,127,219,220,221,222,73,74,128,129,130,131,132,77,366,223,320,133,367,321,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,134,392,87,88,89,393,260,261,394,395,396,95,262,263,264,265,266,267,397,398,399,400,401,402,108,403,404,405,406,407,408,409,410,97,98,99,100,101,102,103,104,368,268,323,324,369,370,325,326,371,269,270,271,272,273,411,274,275,276,277,278,140,141,142,143,144,105,146,147,412,372,148,149,150,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,309,373,304,305,374,375,376,377,378,413,414,415,306,327],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[111,169,203,317,318,319,210,211,212,213,320,133,224,258,259,268,324,325,326,309],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":175,"org.easymock.tests2.UsageTest.argumentsOrdered":319,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":368,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":107,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":205,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":383,"org.easymock.tests2.DelegateToTest.testReturnException":214,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":248,"org.easymock.tests.MockingTest.testPartialClassMocking":87,"org.easymock.tests.MockClassControlTest.testToString":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":139,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":57,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":53,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":284,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":345,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":146,"org.easymock.tests2.UsageTest.wrongArguments":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":221,"org.easymock.samples.ExampleTest.answerVsDelegate":159,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":92,"org.easymock.tests2.UsageConstraintsTest.testNull":115,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":9,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":390,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":104,"org.easymock.tests2.CaptureTest.testPrimitive":188,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":148,"org.easymock.tests.UsageTest.moreThanOneArgument":268,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":303,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":130,"org.easymock.tests.UsageTest.argumentsOrdered":326,"org.easymock.tests.UsageVarargTest.varargIntAccepted":271,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":140,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":24,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":144,"org.easymock.tests.ReplayStateInvalidUsageTest.times":407,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":348,"org.easymock.tests2.DependencyTest.testClassMocking":328,"org.easymock.tests2.AnswerTest.answer":195,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":174,"org.easymock.tests2.CaptureTest.testAnd":186,"org.easymock.tests2.UsageTest.strictResetToDefault":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":16,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":129,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":255,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":354,"org.easymock.tests2.DelegateToTest.testDelegate":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":299,"org.easymock.tests.LimitationsTest.mockFinalMethod":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":251,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":283,"org.easymock.tests2.DependencyTest.testClassMockingSupport":329,"org.easymock.tests2.CaptureTest.testCapture1_2446744":349,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":297,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":172,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":402,"org.easymock.tests.UsageThrowableTest.throwError":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":132,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":71,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":58,"org.easymock.tests2.UsageTest.niceToStrict":204,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":285,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":135,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":28,"org.easymock.tests2.MockBuilderTest.testCreateMock":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":66,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":293,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":355,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":262,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":219,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":68,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":415,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":119,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":393,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":238,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":180,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":151,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":193,"org.easymock.tests.MockClassControlTest.testEquals":103,"org.easymock.tests2.EasyMockSupportClassTest.testAll":50,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":74,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":301,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":333,"org.easymock.tests2.CaptureTest.testCaptureAll":187,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":281,"org.easymock.tests2.UsageConstraintsTest.testMatches":120,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":400,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":131,"org.easymock.samples.ExampleTest.voteForRemovals":163,"org.easymock.tests.UsageVarargTest.allKinds":278,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":257,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":282,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":377,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":346,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":252,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":330,"org.easymock.tests2.UsageConstraintsTest.greaterThan":121,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":51,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":254,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":19,"org.easymock.samples.ExampleTest.voteForRemoval":160,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":83,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":109,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":12,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":105,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":359,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":32,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":352,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":48,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":247,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":106,"org.easymock.tests2.CaptureTest.testCaptureFirst":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":353,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":362,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":327,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":234,"org.easymock.tests2.CaptureTest.testCapture2_2446744":386,"org.easymock.tests2.UsageTest.moreThanOneArgument":203,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":350,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":34,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":277,"org.easymock.tests.GenericTest.testBridgedEquals":76,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":398,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":341,"org.easymock.tests.UsageExpectAndReturnTest.longType":230,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":279,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":351,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":302,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":332,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":385,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":300,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":128,"org.easymock.tests.UsageCallCountTest.tooManyCalls":399,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":235,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":289,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":376,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":40,"org.easymock.tests.MockingTest.testNiceClassMocking":90,"org.easymock.tests.MockingTest.testClassMocking":85,"org.easymock.tests2.UsageConstraintsTest.testContains":118,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":263,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":331,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":38,"org.easymock.tests2.UsageConstraintsTest.testFind":114,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":261,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":167,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":366,"org.easymock.tests.UsageExpectAndReturnTest.object":237,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":13,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":356,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":273,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":396,"org.easymock.tests.UsageTest.exactCallCountByLastCall":371,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":134,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":137,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":379,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":23,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":243,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":269,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":414,"org.easymock.tests.MockClassControlTest.testHashCode":102,"org.easymock.tests2.EasyMockSupportTest.testVerify":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":60,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":380,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":413,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":171,"org.easymock.tests.UsageVarargTest.varargCharAccepted":272,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":313,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":168,"org.easymock.tests2.UsageTest.openCallCountByLastCall":360,"org.easymock.tests.DefaultClassInstantiatorTest.object":77,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":358,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":394,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":61,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":291,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":337,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":374,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":101,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":17,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":290,"org.easymock.tests.CapturesMatcherTest.test":307,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":244,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":69,"org.easymock.tests2.UsageTest.resumeIfFailure":207,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":91,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":250,"org.easymock.tests2.StubTest.stubWithReturnValue":127,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":312,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":185,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":236,"org.easymock.tests2.SerializationTest.testAllMockedMethod":46,"org.easymock.samples.SupportTest.voteForRemovals":344,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":296,"org.easymock.tests.UsageExpectAndThrowTest.object":294,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":183,"org.easymock.tests2.DelegateToTest.testWrongClass":365,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":149,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":150,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":321,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":389,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":39,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":295,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":30,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":47,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":325,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":220,"org.easymock.tests2.CaptureTest.testCaptureNone":192,"org.easymock.tests.UsageUnorderedTest.message":309,"org.easymock.tests.UsageVerifyTest.twoReturns":259,"org.easymock.tests.UsageVarargTest.varargByteAccepted":276,"org.easymock.tests2.ThreadingTest.testThreadSafe":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":64,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":267,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":156,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":372,"org.easymock.tests2.UsageConstraintsTest.any":178,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":406,"org.easymock.tests2.StubTest.stub":218,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":249,"org.easymock.tests.UsageExpectAndThrowTest.longType":287,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":81,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":405,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":347,"org.easymock.tests2.SerializationTest.testClass":45,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":363,"org.easymock.tests.LimitationsTest.mockNativeMethod":95,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":75,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":246,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":336,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":170,"org.easymock.tests2.NameTest.nameForMocksControl":213,"org.easymock.tests2.MockedExceptionTest.testMockedException":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":52,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":370,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":89,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":288,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":7,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":31,"org.easymock.tests.MockingTest.testNicePartialClassMocking":88,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":11,"org.easymock.tests2.CaptureTest.testCaptureLast":191,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":44,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":184,"org.easymock.tests.MockingTest.testTwoMocks":86,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":342,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":292,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":318,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":124,"org.easymock.samples.ExampleTest.removeNonExistingDocument":381,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":403,"org.easymock.tests.UsageStrictMockTest.differentMethods":224,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":79,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":110,"org.easymock.tests2.MockBuilderTest.testCreateMockString":35,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":54,"org.easymock.tests.UsageExpectAndThrowTest.floatType":286,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":49,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests.UsageVerifyTest.twoThrows":258,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":63,"org.easymock.samples.ExampleTest.voteAgainstRemoval":161,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":18,"org.easymock.tests.LimitationsTest.privateConstructor":94,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":340,"org.easymock.tests2.UsageConstraintsTest.testNotNull":123,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":378,"org.easymock.tests2.UsageTest.defaultResetToNice":206,"org.easymock.samples.ExampleTest.voteAgainstRemovals":158,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":242,"org.easymock.tests.UsageVarargTest.differentLength":411,"org.easymock.tests2.CallbackTest.callback":217,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":14,"org.easymock.tests.UsageTest.openCallCountByLastCall":369,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":412,"org.easymock.tests.UsageCallCountTest.tooFewCalls":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":42,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":222,"org.easymock.tests.UsageThrowableTest.throwCheckedException":375,"org.easymock.tests.MockingTest.testStrictClassMocking":84,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":392,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":43,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":41,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":408,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":364,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":198,"org.easymock.tests.ObjectMethodsTest.testHashCode":395,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":201,"org.easymock.tests2.NameTest.nameForNiceMock":212,"org.easymock.tests2.DependencyTest.testInterfaceMocking":165,"org.easymock.samples.ExampleTest.addDocument":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":70,"org.easymock.tests2.DelegateToTest.testStubDelegate":215,"org.easymock.tests2.AnswerTest.stubAnswer":197,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":133,"org.easymock.tests.UsageVarargTest.varargLongAccepted":275,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":225,"org.easymock.tests.UsageExpectAndReturnTest.floatType":229,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":245,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":22,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":122,"org.easymock.tests.UsageThrowableTest.noUpperLimit":304,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":113,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":5,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":189,"org.easymock.tests2.SerializationTest.test":209,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":78,"org.easymock.tests2.UsageConstraintsTest.testSame":116,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":228,"org.easymock.samples.SupportTest.addDocument":384,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":55,"org.easymock.tests.GenericTest.testPackageScope":73,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":136,"org.easymock.tests2.NameTest.nameForMock":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":239,"org.easymock.tests2.UsageStrictMockTest.differentMethods":169,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":154,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":15,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":231,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":298,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":256,"org.easymock.tests2.MockedExceptionTest.testRealException":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":138,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":111,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":410,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":147,"org.easymock.tests2.NameTest.nameForStrictMock":211,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":27,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":166,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":10,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":6,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":182,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":80,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":308,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":25,"org.easymock.tests2.UsageStrictMockTest.range":316,"org.easymock.tests2.UsageConstraintsTest.lessThan":125,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":334,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":387,"org.easymock.tests2.CaptureTest.testCaptureRightOne":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":59,"org.easymock.tests2.UsageConstraintsTest.testOr":117,"org.easymock.tests.UsageRangeTest.combination":253,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":8,"org.easymock.tests.UsageTest.wrongArguments":324,"org.easymock.tests2.MockBuilderTest.testWithConstructor":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":56,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":98,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":232,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":240,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":82,"org.easymock.tests.UsageVarargTest.varargShortAccepted":274,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":397,"org.easymock.tests2.UsageConstraintsTest.cmpTo":179,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":361,"org.easymock.tests2.CaptureTest.testCaptureFromStub":126,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":401,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":26,"org.easymock.tests.UsageTest.unexpectedCallWithArray":323,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":320,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":266,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":153,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":241,"org.easymock.tests2.UsageConstraintsTest.constraints":155,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":367,"org.easymock.samples.ExampleTest.addAndChangeDocument":164,"org.easymock.tests.UsageStrictMockTest.testVerify":226,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":382,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":280,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":142,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":335,"org.easymock.tests.LimitationsTest.abstractClass":93,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":233,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":143,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":388,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":270}}]

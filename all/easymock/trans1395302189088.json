[{"position":"org.easymock.internal.ArgumentToString:90","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:69","failures":[14,15,16,17],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[18,19,20,21,22,23,24,25],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1964","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[26],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[27,28,29,30,31,32,33,34,35,26,36],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[37,38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:201","failures":[40,18,41,42,43,44,45,46,47,48,49,50,51,52,53,19,54,55,56,57,58,59,14,60,61,62,63,24,24,25,25,64],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[65,66,67,68,69,41,70,48,71,55,56,72,73,30,74,75,0,76,77,1,2,78,79,80,81,3,82,83,84,85,86,4,5,87,7,8,9,10,88,11,89,90,12,91,13,92],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[54,14],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[44,94,95,96,97,75,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,87,132,133],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[45,46,134,54,135,136,137,138,139,14],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[14,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:159","failures":[18,140,20,141,21,24,25],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[142,143,144,145],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[146,147,148,149,122,127],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:199","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[27,28,29,30,31,32,33,34,35,26,36],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:140","sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>)","type":"CtInvocationImpl"},"failures":[14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[150,151,152,153,154,69,155,156,157,158,159,160,42,44,94,95,96,161,162,163,164,165,45,47,51,166,55,56,167,168,169,170,171,172,173,174,175,72,176,177,27,178,28,179,180,181,182,183,184,185,29,186,187,188,189,190,191,192,193,194,73,195,196,197,97,14,15,16,198,199,30,31,200,32,201,33,34,202,146,203,204,205,206,207,74,208,209,26,210,211,212,36,213,214,75,145,215,0,76,77,216,98,217,1,2,78,79,80,218,219,81,3,82,220,221,147,99,100,148,222,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,223,224,225,226,83,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,149,122,260,261,262,263,264,265,266,123,124,125,126,127,128,267,268,129,269,270,271,130,131,272,4,5,273,274,275,276,277,87,278,7,8,279,132,9,10,88,11,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,90,298,12,299,91,13,92,300,301,302,303,304,305,133,306,307,308,309,310,311,312],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[159,313,203],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[314,315,316],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[52,317,190,191,318,319,320,321,61,322],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[209,219,323,324,325,326,327,328,38,299],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:176","sourceCode":"return false","type":"CtReturnImpl"},"failures":[45,329,135,136,137,330,331,139],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[40,47,332,48,49,51,166,52,53,71,55,333,56,14,60,61,63,64],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[334,335,336],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[45,46,134,54,135,136,137,138,139,14],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:36","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","type":"CtInvocationImpl"},"failures":[135,136,137,138,330,331,139],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[150,151,152,153,215,0,1,2,219,3,82,272,4,5,278,8,9,10,337,12,299,13,92],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":31,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":87,"org.easymock.tests2.UsageTest.argumentsOrdered":2,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":126,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":77,"org.easymock.tests2.StubTest.stubWithReturnValue":97,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":134,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":239,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":212,"org.easymock.tests2.SerializationTest.testAllMockedMethod":16,"org.easymock.tests2.DelegateToTest.testReturnException":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":124,"org.easymock.tests.MockingTest.testPartialClassMocking":302,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":62,"org.easymock.tests.MockClassControlTest.testToString":319,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":327,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":113,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":17,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":57,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":101,"org.easymock.tests.UsageExpectAndThrowTest.object":111,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":337,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":135,"org.easymock.tests2.DelegateToTest.testWrongClass":163,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":255,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":256,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":202,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":221,"org.easymock.tests2.UsageTest.wrongArguments":0,"org.easymock.tests.UsageStrictMockTest.range":13,"org.easymock.samples.ConstructorCalledMockTest.testTax":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":225,"org.easymock.samples.ExampleTest.answerVsDelegate":307,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":61,"org.easymock.tests2.UsageConstraintsTest.testNull":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":112,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":156,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":52,"org.easymock.tests2.CaptureTest.testPrimitive":179,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":148,"org.easymock.tests.UsageTest.moreThanOneArgument":278,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":120,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":224,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":295,"org.easymock.tests2.CaptureTest.testCaptureNone":184,"org.easymock.tests.UsageUnorderedTest.message":11,"org.easymock.tests.UsageVerifyTest.twoReturns":5,"org.easymock.tests.UsageVarargTest.varargByteAccepted":287,"org.easymock.tests2.ThreadingTest.testThreadSafe":193,"org.easymock.tests.UsageTest.argumentsOrdered":10,"org.easymock.tests.UsageVarargTest.varargIntAccepted":282,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":265,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":250,"org.easymock.tests2.CaptureTest.testCapture_2617107":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":331,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":100,"org.easymock.tests2.UsageConstraintsTest.any":146,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":166,"org.easymock.tests2.StubTest.stub":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":254,"org.easymock.tests.UsageExpectAndThrowTest.longType":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":125,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":314,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":81,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests.LimitationsTest.mockNativeMethod":258,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":23,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":249,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":63,"org.easymock.tests2.AnswerTest.answer":168,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":35,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":175,"org.easymock.tests2.CaptureTest.testAnd":27,"org.easymock.tests2.UsageTest.strictResetToDefault":145,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":220,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":160,"org.easymock.tests2.NameTest.nameForMocksControl":153,"org.easymock.tests2.MockedExceptionTest.testMockedException":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":294,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":228,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":132,"org.easymock.tests2.DelegateToTest.testDelegate":164,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":304,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":105,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":154,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":53,"org.easymock.tests.MockingTest.testNicePartialClassMocking":303,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":116,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":329,"org.easymock.tests2.CompareToTest.testCompareEqual":313,"org.easymock.tests2.CaptureTest.testCaptureLast":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":127,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":266,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":192,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":34,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":277,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":211,"org.easymock.tests2.CaptureTest.testCapture1_2446744":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":230,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":114,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":109,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":173,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":1,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":213,"org.easymock.tests.UsageThrowableTest.throwError":267,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":222,"org.easymock.tests.UsageStrictMockTest.differentMethods":92,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":73,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":322,"org.easymock.tests2.MockBuilderTest.testCreateMockString":56,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":297,"org.easymock.tests.UsageExpectAndThrowTest.floatType":103,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":74,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":169,"org.easymock.tests.UsageVerifyTest.twoThrows":4,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":58,"org.easymock.samples.PartialClassMockTest.testGetArea":64,"org.easymock.tests.ResultTest.createDelegateResultToString":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":251,"org.easymock.samples.ExampleTest.voteAgainstRemoval":309,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":37,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":42,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":318,"org.easymock.tests2.UsageTest.niceToStrict":76,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":102,"org.easymock.tests2.UsageConstraintsTest.testNotNull":36,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":44,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":323,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":51,"org.easymock.tests2.UsageTest.defaultResetToNice":217,"org.easymock.tests2.MockBuilderTest.testCreateMock":71,"org.easymock.samples.ExampleTest.voteAgainstRemovals":306,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":245,"org.easymock.tests.UsageVarargTest.differentLength":89,"org.easymock.tests2.CallbackTest.callback":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":18,"org.easymock.tests.UsageTest.openCallCountByLastCall":279,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":110,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":66,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":198,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":260,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":223,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":99,"org.easymock.tests.UsageCallCountTest.tooFewCalls":263,"org.easymock.tests.UsageOverloadedMethodTest.overloading":305,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":206,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":121,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":241,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":315,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":205,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":185,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":226,"org.easymock.tests.UsageThrowableTest.throwCheckedException":270,"org.easymock.tests2.EasyMockSupportClassTest.testAll":144,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":291,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":275,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":141,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":174,"org.easymock.tests2.CaptureTest.testCaptureAll":178,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":122,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":191,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.testMatches":207,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":171,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":328,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":296,"org.easymock.samples.ExampleTest.voteForRemovals":311,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":330,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":196,"org.easymock.tests2.NameTest.nameForNiceMock":152,"org.easymock.tests.UsageVarargTest.allKinds":289,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":272,"org.easymock.tests2.DependencyTest.testInterfaceMocking":167,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":276,"org.easymock.samples.ExampleTest.addDocument":310,"org.easymock.tests2.DelegateToTest.testStubDelegate":162,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":130,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":80,"org.easymock.tests2.AnswerTest.stubAnswer":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":128,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":299,"org.easymock.tests2.UsageConstraintsTest.greaterThan":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":139,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":19,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":227,"org.easymock.tests.UsageVarargTest.varargLongAccepted":286,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":70,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":300,"org.easymock.samples.ExampleTest.voteForRemoval":308,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":194,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":248,"org.easymock.tests.UsageExpectAndReturnTest.floatType":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":40,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":45,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":25,"org.easymock.tests.UsageThrowableTest.noUpperLimit":268,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":209,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":292,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":199,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":75,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":317,"org.easymock.tests2.SerializationTest.test":15,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":181,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":54,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":316,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":335,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":129,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":231,"org.easymock.tests2.UsageConstraintsTest.testSame":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":123,"org.easymock.tests2.CaptureTest.testCaptureFirst":188,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":237,"org.easymock.tests.GenericTest.testPackageScope":290,"org.easymock.tests2.UsageTest.moreThanOneArgument":215,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":195,"org.easymock.tests2.CaptureTest.testCapture2_2446744":187,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":324,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":288,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":85,"org.easymock.tests2.NameTest.nameForMock":150,"org.easymock.tests.UsageExpectAndReturnTest.longType":233,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":273,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":142,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":333,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":242,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":119,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":38,"org.easymock.tests2.UsageStrictMockTest.differentMethods":82,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":117,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":293,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":143,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":234,"org.easymock.tests.UsageCallCountTest.tooManyCalls":86,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":115,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":229,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":262,"org.easymock.tests2.MockedExceptionTest.testRealException":96,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":326,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":219,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":106,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":271,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":147,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":332,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":261,"org.easymock.tests2.UsageConstraintsTest.testContains":204,"org.easymock.tests2.NameTest.nameForStrictMock":151,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":95,"org.easymock.tests2.UsageConstraintsTest.testFind":200,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":133,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":50,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":176,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":157,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":90,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":177,"org.easymock.tests.UsageExpectAndReturnTest.object":240,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":26,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":159,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":48,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":214,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":284,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":136,"org.easymock.tests.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":325,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":138,"org.easymock.tests2.CaptureTest.testCaptureRightOne":29,"org.easymock.tests2.UsageConstraintsTest.testOr":33,"org.easymock.tests.UsageRangeTest.combination":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":46,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":280,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":69,"org.easymock.tests.UsageTest.wrongArguments":8,"org.easymock.tests2.MockBuilderTest.testWithConstructor":140,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":235,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":243,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":336,"org.easymock.tests.UsageVarargTest.varargShortAccepted":285,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":84,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":172,"org.easymock.tests2.UsageConstraintsTest.cmpTo":203,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":165,"org.easymock.tests.UsageVarargTest.varargCharAccepted":283,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":218,"org.easymock.tests2.UsageTest.openCallCountByLastCall":216,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests.DefaultClassInstantiatorTest.object":334,"org.easymock.tests2.CaptureTest.testCaptureFromStub":186,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":49,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":6,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":108,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":269,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":264,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":20,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":244,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":321,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":91,"org.easymock.tests2.UsageConstraintsTest.constraints":30,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":41,"org.easymock.samples.ExampleTest.addAndChangeDocument":312,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":107,"org.easymock.tests.UsageStrictMockTest.testVerify":301,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":247,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":320,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":59,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":274,"org.easymock.tests2.UsageTest.resumeIfFailure":78,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":252,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":236,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":60,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":253,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":281,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":67}}]

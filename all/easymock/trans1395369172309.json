[{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:249","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[7],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[104,105],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:45","sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[107,108,109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[111,112,113,114,115,116,117,118,119,120],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[121,122,123,124,125,126,127,128,8,9,129,130,131,132,133,34,35,134,135,136],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[128,137,138,139],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[140],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[141,142,143,144,145,146,147],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[15,18,19,148,44,45,46,47,52,55,56,149,150,151,152,68,69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[153,154,155,156,51,157],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[158,121,123,125,126,159,160,161,132,17,18,20,162,163,54,55,149,164,165,166,167,69,90],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[9,168],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:327","failures":[169,170,171,172],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[121,35,135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[173,174,175,150,104,169,170,59,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:109","sourceCode":"org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"f"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:122","sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:36","sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[202],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":122,"org.easymock.tests2.UsageTest.argumentsOrdered":32,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":23,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":30,"org.easymock.tests2.StubTest.stubWithReturnValue":173,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":11,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":103,"org.easymock.tests2.SerializationTest.testAllMockedMethod":33,"org.easymock.tests2.DelegateToTest.testReturnException":141,"org.easymock.samples.SupportTest.voteForRemovals":100,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":154,"org.easymock.tests.MockClassControlTest.testToString":116,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":5,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":188,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":176,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":110,"org.easymock.tests.UsageExpectAndThrowTest.object":186,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":130,"org.easymock.tests2.DelegateToTest.testWrongClass":142,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":128,"org.easymock.tests2.UsageTest.wrongArguments":29,"org.easymock.tests.UsageStrictMockTest.range":54,"org.easymock.samples.ExampleTest.answerVsDelegate":147,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":120,"org.easymock.tests2.UsageConstraintsTest.testNull":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":187,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":22,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":112,"org.easymock.tests2.CaptureTest.testPrimitive":134,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":195,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":66,"org.easymock.tests.UsageTest.moreThanOneArgument":152,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":155,"org.easymock.tests2.CaptureTest.testCaptureNone":39,"org.easymock.tests.UsageUnorderedTest.message":87,"org.easymock.tests.UsageVerifyTest.twoReturns":151,"org.easymock.tests.UsageVarargTest.varargByteAccepted":83,"org.easymock.tests.UsageTest.argumentsOrdered":67,"org.easymock.tests.UsageVarargTest.varargIntAccepted":77,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":72,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":86,"org.easymock.tests2.CaptureTest.testCapture_2617107":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":59,"org.easymock.tests2.UsageConstraintsTest.any":9,"org.easymock.tests2.StubTest.stub":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":146,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":172,"org.easymock.tests.UsageExpectAndThrowTest.longType":179,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":1,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":16,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":63,"org.easymock.tests2.CaptureTest.testAnd":133,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":19,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":202,"org.easymock.tests2.NameTest.nameForMocksControl":47,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":166,"org.easymock.tests2.DelegateToTest.testDelegate":144,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":180,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":191,"org.easymock.tests2.CompareToTest.testNotComparable":140,"org.easymock.tests2.CaptureTest.testCaptureLast":38,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":175,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":127,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":189,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":184,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":132,"org.easymock.tests.UsageThrowableTest.throwError":196,"org.easymock.tests.UsageStrictMockTest.differentMethods":55,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":119,"org.easymock.tests.UsageExpectAndThrowTest.floatType":178,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":12,"org.easymock.tests.UsageVerifyTest.twoThrows":150,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":106,"org.easymock.samples.ExampleTest.voteAgainstRemoval":95,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":115,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":177,"org.easymock.tests2.UsageConstraintsTest.testNotNull":131,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":201,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":27,"org.easymock.samples.ExampleTest.voteAgainstRemovals":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":62,"org.easymock.tests.UsageVarargTest.differentLength":80,"org.easymock.tests2.CallbackTest.callback":41,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":153,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":185,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":68,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":58,"org.easymock.tests.UsageCallCountTest.tooFewCalls":70,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":137,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":174,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":6,"org.easymock.tests.UsageThrowableTest.throwCheckedException":198,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":91,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":193,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":156,"org.easymock.tests2.CaptureTest.testCaptureAll":34,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":114,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":113,"org.easymock.tests2.UsageConstraintsTest.testMatches":160,"org.easymock.tests2.CompareToTest.testGreateOrEqual":139,"org.easymock.samples.ExampleTest.voteForRemovals":97,"org.easymock.tests2.NameTest.nameForNiceMock":46,"org.easymock.tests.UsageVarargTest.allKinds":85,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":149,"org.easymock.samples.BasicClassMockTest.testPrintContent":102,"org.easymock.samples.ExampleTest.addDocument":96,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":200,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":13,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":143,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":52,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":165,"org.easymock.tests.UsageVarargTest.varargLongAccepted":82,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":56,"org.easymock.samples.ExampleTest.voteForRemoval":94,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":161,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":48,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":158,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":111,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":36,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":3,"org.easymock.tests2.UsageConstraintsTest.testSame":125,"org.easymock.samples.SupportTest.addDocument":99,"org.easymock.tests2.CaptureTest.testCaptureFirst":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":21,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":108,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":107,"org.easymock.tests2.UsageTest.moreThanOneArgument":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":64,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":28,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":84,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":73,"org.easymock.tests2.NameTest.nameForMock":44,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":194,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":10,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":192,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":171,"org.easymock.tests.UsageCallCountTest.tooManyCalls":74,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":2,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":190,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":167,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":69,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":181,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":199,"org.easymock.tests2.NameTest.nameForStrictMock":45,"org.easymock.tests2.UsageConstraintsTest.testContains":159,"org.easymock.tests2.UsageConstraintsTest.testFind":123,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":42,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":49,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":43,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":129,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":26,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":138,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":79,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":61,"org.easymock.tests2.CaptureTest.testCaptureRightOne":135,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":88,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":109,"org.easymock.tests2.UsageConstraintsTest.testOr":126,"org.easymock.tests.UsageRangeTest.combination":164,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":75,"org.easymock.tests.UsageTest.wrongArguments":65,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":145,"org.easymock.tests2.EasyMockSupportTest.testVerify":25,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":60,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":0,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":89,"org.easymock.tests.UsageVarargTest.varargShortAccepted":81,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":4,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":169,"org.easymock.tests.UsageVarargTest.varargCharAccepted":78,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":14,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":24,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":104,"org.easymock.tests2.CaptureTest.testCaptureFromStub":136,"org.easymock.tests.UsageTest.unexpectedCallWithArray":157,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":183,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":197,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":51,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":71,"org.easymock.tests2.CaptureTest.testCapture":7,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":53,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":118,"org.easymock.tests2.UsageConstraintsTest.constraints":121,"org.easymock.samples.ExampleTest.addAndChangeDocument":98,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":182,"org.easymock.tests.UsageStrictMockTest.testVerify":57,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":105,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":92,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":50,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":117,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":37,"org.easymock.tests2.UsageTest.resumeIfFailure":162,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":76}}]

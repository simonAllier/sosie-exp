[{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1815","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[144],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"suffix","key":"suffix"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[145,146,147],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[148],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[173],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[174,175,176,177],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[178],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,14,18,19,20,21,31,32,33,34,35,36,36,37,37,38,39,40,44,46,47,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,76,77,79,89,92,102,108,111,115,116,117],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[1,179,180,181,182,2,183,184,185,186,187,188,118,189,119,190,191,120,121,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,3,4,5,6,7,8,9,10,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,145,146,147,238,239,240,241,242,11,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,174,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,12,13,14,15,122,123,124,125,296,297,298,299,300,301,302,303,304,305,16,17,18,19,20,306,21,307,308,22,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,126,127,355,128,129,356,357,358,23,24,25,26,27,28,359,29,360,361,362,363,364,365,366,367,368,369,370,371,372,30,31,32,33,34,373,374,375,376,35,377,378,36,37,379,380,381,382,383,384,385,386,38,39,40,149,150,387,388,133,134,389,390,391,392,393,135,136,394,395,41,396,397,398,42,399,400,44,401,46,47,402,48,49,50,51,403,52,404,53,54,55,405,58,59,60,61,62,406,407,63,64,0,65,66,408,67,68,69,70,409,71,72,73,74,75,76,77,78,79,151,152,153,154,155,410,156,157,158,159,160,161,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,162,163,164,165,166,411,167,168,169,170,171,172,412,413,414,415,416,175,417,418,176,177,419,111,112,420,421,422,173,423,424,113,114,115,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,137,138,139,140,441,442,443,444,445,446,447,448,449,450,141,451,142,143,452,453,144,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,116,485,117,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:178","failures":[1,52],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,181,182,2,183,184,185,186,187,188,118,189,119,190,191,120,121,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,3,4,5,6,7,8,9,10,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,145,146,147,238,239,240,241,242,11,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,174,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,12,13,14,15,122,123,124,125,296,297,298,299,300,301,302,303,304,305,16,17,18,19,20,306,21,307,308,22,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,126,127,355,128,129,356,357,358,23,24,25,26,27,28,359,29,360,361,362,363,364,365,366,367,368,369,370,371,372,30,31,32,33,34,374,375,376,35,377,378,36,36,37,37,379,380,381,382,383,384,385,386,38,39,40,149,150,387,388,133,134,389,390,391,392,393,135,136,394,395,41,42,399,400,44,401,46,47,402,48,49,50,51,403,52,53,54,55,405,58,59,60,61,62,407,63,64,65,66,408,67,68,69,70,409,71,72,73,74,75,76,77,78,79,151,152,153,154,155,410,156,157,158,159,160,161,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,162,163,164,165,166,411,167,168,169,170,171,172,412,413,414,415,416,175,417,418,176,177,419,111,112,420,421,422,173,423,424,113,114,115,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,137,138,139,140,441,442,443,444,445,446,447,448,449,450,141,451,142,143,452,453,144,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,116,485,117,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[1,181,182,2,183,184,185,186,187,188,118,189,119,190,191,120,121,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,3,4,5,6,7,8,9,10,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,145,146,147,238,239,240,241,242,11,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,174,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,12,13,14,15,122,123,124,125,296,297,298,299,300,301,302,303,304,305,16,17,18,19,20,306,21,307,308,22,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,126,127,355,128,129,356,357,23,24,25,26,27,28,29,360,361,362,363,364,365,366,367,368,369,370,371,372,30,31,32,33,34,374,375,376,35,377,378,36,37,379,380,381,382,383,384,385,386,38,39,40,149,150,387,388,133,134,389,390,391,392,393,135,136,394,395,41,42,399,400,44,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,407,63,64,65,66,408,67,68,69,70,409,71,72,73,74,75,76,77,78,79,151,152,153,154,155,410,156,157,158,159,160,161,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,162,163,164,165,166,411,167,168,169,170,171,172,412,413,414,415,416,175,417,418,176,177,111,112,421,422,173,423,424,113,114,115,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,137,138,139,140,441,442,443,444,445,446,447,448,449,450,141,451,142,143,452,453,144,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,116,485,117,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:551","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[503,504,505],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[506],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[507,508,509,510,511,71,453,454,462,465,468,471,474,475,477,480],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[315],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[293],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[188,118,189,119,190,191,120,121,192,193,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,212,213,214,215,216,217,218,219,220,222,223,226,233,234,235,236,237,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,265,266,267,268,269,270,271,14,122,123,124,125,296,297,298,299,300,301,302,303,304,305,19,20,21,321,322,323,324,325,326,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,126,127,355,128,129,356,360,361,362,363,364,365,366,367,368,369,370,371,372,31,32,35,377,378,36,37,379,380,381,382,383,384,386,38,39,40,149,150,387,388,133,134,389,390,391,392,393,135,136,394,395,44,46,49,50,51,52,54,55,58,59,60,61,62,407,63,64,65,66,408,67,68,69,70,71,74,75,76,77,410,89,92,102,108,411,412,413,414,415,416,418,176,177,111,421,422,173,423,424,113,114,115,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,442,443,444,446,447,448,449,450,141,451,142,143,452,453,144,454,455,457,458,459,460,461,462,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,483,484,116,485,117,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,502],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[445],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[36,37,401,402,403,405,61,64,0,512,506,513,514,515,516,517,518,111,112,519],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[185,186,119,120,121,193,194,195,197,198,200,201,202,203,204,207,266,267,268,270,271,125,354,126,355,128,129,356,361,32,35,377,378,379,381,382,383,384,386,38,39,149,150,134,390,135,136,49,429,435,436,437,438,450,451,142,143,452,476,117,487,488,491,492,493,494,499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[173],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"threadSafe","this":"this"}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[189,119,120,121,520,521,123,124,125,126,128,134,135,136,142],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[4,14,18,19,20,21,31,32,33,35,36,36,37,37,38,39,40,44,46,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,76,77,89,92,102,108,111,115,116,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:194","sourceCode":"return false","type":"CtReturnImpl"},"failures":[403,522,523,524,525,526,112],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[188,191,208,218,223,123,305,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,360,362,363,364,365,366,367,387,392,448],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"substring"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[518,527,519],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":455,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":188,"org.easymock.tests2.UsageTest.argumentsOrdered":136,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":436,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":281,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":390,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":150,"org.easymock.tests2.DelegateToTest.testReturnException":442,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":215,"org.easymock.tests.MockingTest.testPartialClassMocking":19,"org.easymock.tests.MockClassControlTest.testToString":5,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":440,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":231,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":96,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":92,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":333,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":130,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":484,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":522,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":462,"org.easymock.tests2.UsageTest.wrongArguments":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":205,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":161,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":325,"org.easymock.samples.ExampleTest.answerVsDelegate":380,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":2,"org.easymock.tests2.UsageConstraintsTest.testNull":458,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":308,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":67,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":435,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":10,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":80,"org.easymock.tests2.CaptureTest.testPrimitive":489,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":209,"org.easymock.tests.UsageTest.moreThanOneArgument":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":352,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":408,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":300,"org.easymock.tests.UsageTest.argumentsOrdered":121,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":328,"org.easymock.tests.UsageVarargTest.varargIntAccepted":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":286,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":368,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":526,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":44,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":397,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":171,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":274,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":372,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":410,"org.easymock.tests.ReplayStateInvalidUsageTest.times":317,"org.easymock.tests2.DependencyTest.testClassMocking":481,"org.easymock.tests2.AnswerTest.answer":416,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":288,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":415,"org.easymock.tests2.CaptureTest.testAnd":486,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":180,"org.easymock.tests2.UsageTest.strictResetToDefault":388,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":402,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":299,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":430,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":212,"org.easymock.tests2.DelegateToTest.testDelegate":446,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":332,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":348,"org.easymock.tests.LimitationsTest.mockFinalMethod":15,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":218,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":237,"org.easymock.tests2.DependencyTest.testClassMockingSupport":482,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":185,"org.easymock.tests2.CaptureTest.testCapture1_2446744":490,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":409,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":346,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":413,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":311,"org.easymock.tests.UsageThrowableTest.throwError":360,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":182,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":172,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":373,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":302,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":110,"org.easymock.samples.PartialClassMockTest.testGetArea":40,"org.easymock.tests.MockingTest.testInterfaceMocking":306,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":312,"org.easymock.tests2.CompareToTest.testLessOrEqual":511,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":369,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":375,"org.easymock.tests2.UsageTest.niceToStrict":389,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":97,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":11,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":334,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":518,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":272,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":49,"org.easymock.tests2.MockBuilderTest.testCreateMock":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":105,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":158,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":342,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":431,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":179,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":147,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":323,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":515,"org.easymock.tests.UsageOverloadedMethodTest.overloading":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":101,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":468,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":223,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":303,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":467,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":495,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":196,"org.easymock.tests.MockClassControlTest.testEquals":9,"org.easymock.tests2.EasyMockSupportClassTest.testAll":89,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":32,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":350,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":81,"org.easymock.tests2.CaptureTest.testCaptureAll":487,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":414,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":235,"org.easymock.tests.MockNameTest.defaultName":327,"org.easymock.tests2.UsageConstraintsTest.testMatches":469,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":301,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":309,"org.easymock.samples.ExampleTest.voteForRemovals":384,"org.easymock.tests.UsageVarargTest.allKinds":204,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":122,"org.easymock.samples.BasicClassMockTest.testPrintContent":39,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":236,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":366,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":449,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":445,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":168,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":219,"org.easymock.tests2.UsageConstraintsTest.greaterThan":471,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":90,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":211,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":77,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":29,"org.easymock.samples.ExampleTest.voteForRemoval":381,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":422,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":78,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":56,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":183,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":398,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":70,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":387,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":35,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":278,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":428,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":214,"org.easymock.tests2.CaptureTest.testCaptureFirst":499,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":429,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":395,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":226,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests2.CaptureTest.testCapture2_2446744":498,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":423,"org.easymock.tests2.UsageTest.moreThanOneArgument":133,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":55,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":289,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":203,"org.easymock.tests.GenericTest.testBridgedEquals":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":516,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":513,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":270,"org.easymock.tests.UsageExpectAndReturnTest.longType":246,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":233,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":57,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":351,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":476,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":295,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":349,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":228,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":298,"org.easymock.tests.UsageCallCountTest.tooManyCalls":271,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":106,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":160,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":338,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":365,"org.easymock.tests.MockingTest.testNiceClassMocking":22,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":60,"org.easymock.tests.MockingTest.testClassMocking":17,"org.easymock.tests2.UsageConstraintsTest.testContains":466,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":45,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":264,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":115,"org.easymock.tests2.UsageConstraintsTest.testFind":457,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":305,"org.easymock.tests.MockTypeTest.fromEasyMockClass":181,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":502,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":353,"org.easymock.tests.UsageExpectAndReturnTest.object":253,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":71,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":159,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":178,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":434,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":523,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":198,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":241,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":517,"org.easymock.tests.UsageTest.exactCallCountByLastCall":192,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":277,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":230,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":329,"org.easymock.tests2.ConstraintsToStringTest.findToString":148,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":112,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":193,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":222,"org.easymock.tests.ResultTest.createThrowResultToString":505,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":163,"org.easymock.tests.MockClassControlTest.testHashCode":8,"org.easymock.tests2.EasyMockSupportTest.testVerify":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":99,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":330,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":146,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":412,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":419,"org.easymock.tests.UsageVarargTest.varargCharAccepted":197,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":358,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":294,"org.easymock.tests2.UsageTest.openCallCountByLastCall":391,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":527,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":437,"org.easymock.tests.DefaultClassInstantiatorTest.object":23,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":145,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":239,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":521,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":100,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":340,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":85,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":363,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":154,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":162,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":7,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":75,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":339,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":260,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":108,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":6,"org.easymock.tests2.UsageTest.resumeIfFailure":394,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":1,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":396,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":217,"org.easymock.tests2.StubTest.stubWithReturnValue":448,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":403,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":477,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":252,"org.easymock.tests2.SerializationTest.testAllMockedMethod":117,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":287,"org.easymock.samples.SupportTest.voteForRemovals":378,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":30,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":345,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":293,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":175,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":232,"org.easymock.tests.UsageExpectAndThrowTest.object":343,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":474,"org.easymock.tests2.DelegateToTest.testWrongClass":444,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":297,"org.easymock.tests.UsageStrictMockTest.range":128,"org.easymock.samples.ConstructorCalledMockTest.testTax":36,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":399,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":433,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":59,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":514,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":344,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":51,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":86,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":324,"org.easymock.tests2.CaptureTest.testCaptureNone":494,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":376,"org.easymock.tests.UsageUnorderedTest.message":125,"org.easymock.tests.UsageVerifyTest.twoReturns":124,"org.easymock.tests.UsageVarargTest.varargByteAccepted":202,"org.easymock.tests2.ThreadingTest.testThreadSafe":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":103,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":268,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":38,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":242,"org.easymock.tests2.CaptureTest.testCapture_2617107":488,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":208,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":291,"org.easymock.tests2.UsageConstraintsTest.any":464,"org.easymock.tests2.StubTest.stub":447,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":316,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":229,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":292,"org.easymock.tests.UsageExpectAndThrowTest.longType":336,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":27,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":315,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":451,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":411,"org.easymock.tests2.SerializationTest.testClass":116,"org.easymock.tests.LimitationsTest.mockNativeMethod":14,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":33,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":262,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":84,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":452,"org.easymock.tests2.NameTest.nameForMocksControl":140,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":155,"org.easymock.tests2.MockedExceptionTest.testMockedException":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":91,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":191,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":501,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":21,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":337,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":65,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":52,"org.easymock.tests.MockingTest.testNicePartialClassMocking":20,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":69,"org.easymock.tests2.CompareToTest.testCompareEqual":509,"org.easymock.tests2.CaptureTest.testCaptureLast":493,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":151,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":186,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":461,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":64,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":475,"org.easymock.tests.MockingTest.testTwoMocks":18,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":243,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":341,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":135,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":479,"org.easymock.samples.ExampleTest.removeNonExistingDocument":385,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":157,"org.easymock.tests.UsageStrictMockTest.differentMethods":129,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":164,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":25,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":173,"org.easymock.tests2.MockBuilderTest.testCreateMockString":58,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":93,"org.easymock.tests.UsageExpectAndThrowTest.floatType":335,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":470,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":88,"org.easymock.tests.ResultTest.createReturnResultToString":504,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":418,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":420,"org.easymock.tests.UsageVerifyTest.twoThrows":123,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":102,"org.easymock.tests.ResultTest.createDelegateResultToString":503,"org.easymock.samples.ExampleTest.voteAgainstRemoval":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":282,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":374,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":76,"org.easymock.tests.LimitationsTest.privateConstructor":13,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":506,"org.easymock.tests2.UsageConstraintsTest.testNotNull":478,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":113,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":367,"org.easymock.tests2.UsageTest.defaultResetToNice":393,"org.easymock.samples.ExampleTest.voteAgainstRemovals":379,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":283,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":152,"org.easymock.tests.UsageVarargTest.differentLength":199,"org.easymock.tests2.CallbackTest.callback":439,"org.easymock.tests2.UsageConstraintsTest.equals":456,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":72,"org.easymock.tests.UsageTest.openCallCountByLastCall":190,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":453,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":207,"org.easymock.tests.UsageCallCountTest.tooFewCalls":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":326,"org.easymock.tests.UsageThrowableTest.throwCheckedException":364,"org.easymock.tests.MockingTest.testStrictClassMocking":16,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":63,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":322,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":156,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":61,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":318,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":407,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":177,"org.easymock.tests2.CompareToTest.testGreateOrEqual":510,"org.easymock.tests.ObjectMethodsTest.testHashCode":240,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":525,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":424,"org.easymock.tests2.NameTest.nameForNiceMock":139,"org.easymock.tests2.DependencyTest.testInterfaceMocking":483,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":524,"org.easymock.samples.ExampleTest.addDocument":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":104,"org.easymock.tests2.DelegateToTest.testStubDelegate":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":109,"org.easymock.tests2.AnswerTest.stubAnswer":176,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":127,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":404,"org.easymock.tests.UsageVarargTest.varargLongAccepted":201,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":280,"org.easymock.tests.UsageExpectAndReturnTest.floatType":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":261,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":111,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":37,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":472,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":170,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":224,"org.easymock.tests.UsageThrowableTest.noUpperLimit":361,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":144,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":41,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":491,"org.easymock.tests2.SerializationTest.test":485,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":24,"org.easymock.tests2.UsageConstraintsTest.testSame":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":244,"org.easymock.samples.SupportTest.addDocument":377,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":406,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":94,"org.easymock.tests.GenericTest.testPackageScope":31,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":276,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":169,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":307,"org.easymock.tests2.NameTest.nameForMock":137,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":405,"org.easymock.tests2.UsageStrictMockTest.differentMethods":143,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":73,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":247,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":347,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":238,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":213,"org.easymock.tests2.MockedExceptionTest.testRealException":425,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":184,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":400,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":285,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":520,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":284,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":206,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":320,"org.easymock.tests2.NameTest.nameForStrictMock":138,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":519,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":500,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":68,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":42,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":473,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":131,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":26,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":46,"org.easymock.tests2.UsageStrictMockTest.range":142,"org.easymock.tests2.UsageConstraintsTest.lessThan":480,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":82,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":166,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":43,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":279,"org.easymock.tests2.CaptureTest.testCaptureRightOne":496,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":98,"org.easymock.tests2.UsageConstraintsTest.testOr":460,"org.easymock.tests.UsageRangeTest.combination":210,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":66,"org.easymock.tests.UsageTest.wrongArguments":119,"org.easymock.tests2.MockBuilderTest.testWithConstructor":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":95,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":4,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":248,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":273,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":28,"org.easymock.tests.UsageVarargTest.varargShortAccepted":200,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":269,"org.easymock.tests2.UsageConstraintsTest.cmpTo":465,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":417,"org.easymock.tests2.CompareToTest.testLessThan":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":275,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":392,"org.easymock.tests2.CaptureTest.testCaptureFromStub":497,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":310,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":47,"org.easymock.tests.UsageTest.unexpectedCallWithArray":189,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":126,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":267,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests2.UsageConstraintsTest.constraints":454,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":355,"org.easymock.samples.ExampleTest.addAndChangeDocument":386,"org.easymock.tests.UsageStrictMockTest.testVerify":357,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":149,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":354,"org.easymock.tests2.CompareToTest.testGreateThan":508,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":234,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":492,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":370,"org.easymock.tests.LimitationsTest.abstractClass":12,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":225,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":371,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":432,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":132,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":194}}]

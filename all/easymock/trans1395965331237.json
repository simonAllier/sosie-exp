[{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:127","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\")","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.ClassProxyFactory.MockMethodInterceptor org.easymock.internal.ClassProxyFactory.MockMethodInterceptor = new org.easymock.internal.ClassProxyFactory.MockMethodInterceptor(java.lang.reflect.InvocationHandler)","position":"org.easymock.internal.ClassProxyFactory:167","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:327","type":"CtLocalVariableImpl"},"status":-2},{"failures":[0,1],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:89","type":"CtInvocationImpl"},"status":-1},{"failures":[2],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1262","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","position":"org.easymock.EasyMock:1776","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:249","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","position":"org.easymock.internal.MocksControl:147","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","position":"org.easymock.EasyMock:1518","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * See {@link EasyMock#cmp}\n * \n * @author Henri Tremblay\n */\npublic enum LogicalOperator {\nLESS_THAN(\"<\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int < 0;\n        }\n    }, LESS_OR_EQUAL(\"<=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int <= 0;\n        }\n    }, EQUAL(\"==\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int == 0;\n        }\n    }, GREATER_OR_EQUAL(\">=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int >= 0;\n        }\n    }, GREATER(\">\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int > 0;\n        }\n    };\n    private java.lang.String symbol;\n    private LogicalOperator(final java.lang.String symbol) {\n        this.java.lang.String = java.lang.String;\n    }\n    public java.lang.String getSymbol() {\n        return java.lang.String;\n    }\n\n    public abstract boolean matchResult(int result);\n}","position":"org.easymock.LogicalOperator:23","type":"CtEnumImpl"},"status":-2},{"failures":[3,4],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","position":"org.easymock.internal.MockBuilder:68","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"myArgument","expected":"myArgument"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","position":"org.easymock.internal.MockBuilder:128","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"lastThread","lastThread":"this"},"name":"add","transplant":{"sourceCode":"java.lang.Thread = java.lang.Thread.java.lang.Thread.currentThread()","position":"org.easymock.internal.MocksBehavior:197","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.Result:83","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1444","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.BridgeMethodResolver:434","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:118","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:53","type":"CtAssignmentImpl"},"status":-2},{"failures":[5,6],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"result":"length"},"name":"add","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>))","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:158","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream(java.io.ByteArrayOutputStream)","position":"org.easymock.internal.DefaultClassInstantiator:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"T T","position":"org.easymock.internal.ClassProxyFactory:203","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object)]","position":"org.easymock.internal.Invocation:72","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":0},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1276","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.easymock.internal.ArgumentToString:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:1038","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-7799769066534714634L","position":"org.easymock.internal.MockInvocationHandler:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.Capture:107","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{"parameterTypes":"paramTypes","i":"i"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.ReflectionUtils:185","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.ConstructorArgs:56","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Compare:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:79","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.ReflectionUtils:36","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1248","type":"CtInvocationImpl"},"status":-2},{"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"variableMapping":{"thisListMessages":"messages","messages":"messages"},"name":"replace","transplant":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>)","position":"org.easymock.internal.MocksBehavior:129","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage)","position":"org.easymock.internal.UnorderedBehavior:95","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"methods":"methods","mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        this.java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","position":"org.easymock.internal.ClassProxyFactory:136","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"actual":"actual","expected":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:592","type":"CtInvocationImpl"},"status":-2},{"failures":[61,6],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))))","position":"org.easymock.internal.MocksBehavior:199","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException","position":"org.easymock.internal.ClassProxyFactory:176","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-4859402739599754147L","position":"org.easymock.internal.matchers.Compare:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToControl":"org.easymock.internal.LastControl.threadToControl","control":"control"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","position":"org.easymock.internal.LastControl:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"pt":"pt","typeVariableMap":"typeVariableMap","this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:284","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"status":0},{"failures":[62],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1396","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:382","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.Capture<T>.setValue(T)","position":"org.easymock.internal.matchers.Captures:57","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:219","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range)","position":"org.easymock.internal.UnorderedBehavior:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.internal.BridgeMethodResolver:203","type":"mutation","return":"return false","status":0},{"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,42,43,49,81,82,83,84,85,86,87,2,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,62,104,105,106,107,108,109,110,111,112,113,114,54,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","position":"org.easymock.internal.LastControl:65","type":"CtInvocationImpl"},"status":-1},{"failures":[135,136],"variableMapping":{"result":"bridgeMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"status":-1},{"failures":[137],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Invocation:117","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:331","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"status":-2},{"failures":[138,139],"variableMapping":{"constructorArgs":"constructorArgs"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","position":"org.easymock.internal.MockBuilder:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","position":"org.easymock.internal.MockBuilder:143","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1361","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"interfaces":"interfaces","length":"length","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","position":"org.easymock.internal.RecordState:281","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"status":0},{"failures":[140],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","position":"org.easymock.internal.EasyMockProperties:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n    java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:384","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"pt":"pt","typeVariableMap":"typeVariableMap","this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:270","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Field[] java.lang.reflect.Field[] = java.lang.Class<?>.getDeclaredFields()","position":"org.easymock.internal.Injector:105","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5699326678580460103L","position":"org.easymock.internal.Result:77","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4214363692271370781L","position":"org.easymock.Capture:33","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Fail to instantiate mock for \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:174","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.InjectionTarget:56","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:170","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1964","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:354","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (boolean) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Injection org.easymock.internal.Injection : java.util.List<org.easymock.internal.Injection>) {\n    final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier());\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n        org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n        java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField());\n    } \n}","position":"org.easymock.internal.Injector:161","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","position":"org.easymock.internal.EasyMockProperties:64","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":-2},{"failures":[8,9,13,14,15,141,142,143,144,145,146,147,148,149,150,151,152,153,154,136,155,156,157,158,159,160,161,162,163,164,165,166,167,168,19,20,169,170,171,172,173,174,175,176,133,134,177,178,179,180,21,22,23,24,138],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n    return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:93","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:734","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.IArgumentMatcher>","position":"org.easymock.internal.ExpectedInvocation:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:101","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.any":95,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":133,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":68,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":85,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":138,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":145,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":35,"org.easymock.tests2.UsageConstraintsTest.testContains":97,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":113,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":23,"org.easymock.tests2.UsageConstraintsTest.testFind":88,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":32,"org.easymock.tests2.NameTest.nameForMock":57,"org.easymock.tests.UsageTest.argumentsOrdered":41,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":2,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":19,"org.easymock.tests.UsageVarargTest.allKinds":73,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":98,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":121,"org.easymock.tests2.NameTest.nameForStrictMock":58,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":65,"org.easymock.tests2.MockBuilderTest.testCreateMockString":170,"org.easymock.tests2.CaptureTest.testCaptureAll":117,"org.easymock.tests2.CaptureTest.testCaptureNone":124,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":81,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":165,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":122,"org.easymock.tests2.SerializationTest.testClass":158,"org.easymock.tests2.CaptureTest.testCaptureFromStub":127,"org.easymock.tests2.CaptureTest.testCaptureFirst":129,"org.easymock.tests.UsageVerifyTest.twoThrows":47,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":104,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":14,"org.easymock.tests2.EasyMockSupportTest.testVerify":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":64,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":139,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":101,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":36,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":106,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":153,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":111,"org.easymock.tests2.CaptureTest.testAnd":116,"org.easymock.tests.GenericTest.testBridgedEquals":155,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":169,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":178,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":69,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":93,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":176,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":142,"org.easymock.tests2.UsageConstraintsTest.testMatches":100,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":103,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":173,"org.easymock.tests.MockClassControlTest.testToString":144,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":72,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":151,"org.easymock.tests2.UsageConstraintsTest.testOr":91,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":5,"org.easymock.tests2.UsageConstraintsTest.testNotNull":108,"org.easymock.tests2.UsageConstraintsTest.testNull":89,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":115,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":159,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":16,"org.easymock.tests2.EasyMockSupportClassTest.testAll":21,"org.easymock.tests2.CaptureTest.testCapture_2617107":118,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":30,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":82,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":143,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":17,"org.easymock.tests2.ThreadingTest.testThreadSafe":130,"org.easymock.tests.UsageThrowableTest.throwError":83,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":141,"org.easymock.tests2.UsageConstraintsTest.greaterThan":102,"org.easymock.samples.SupportTest.addDocument":11,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":67,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":160,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":162,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":34,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":0,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":26,"org.easymock.tests2.UsageTest.wrongArguments":51,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":78,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":63,"org.easymock.tests2.UsageConstraintsTest.testSame":90,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":33,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":62,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":163,"org.easymock.samples.SupportTest.voteForRemovals":12,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":180,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":6,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":109,"org.easymock.tests2.UsageTest.moreThanOneArgument":50,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":135,"org.easymock.tests.MockClassControlTest.testEquals":147,"org.easymock.tests.UsageTest.wrongArguments":39,"org.easymock.tests2.NameTest.nameForNiceMock":59,"org.easymock.tests.CapturesMatcherTest.test":140,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":80,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":54,"org.easymock.tests2.CaptureTest.testPrimitive":119,"org.easymock.samples.BasicClassMockTest.testPrintContent":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":75,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":157,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":77,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":10,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":131,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":134,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":3,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":172,"org.easymock.tests2.NameTest.nameForMocksControl":60,"org.easymock.tests2.UsageStrictMockTest.differentMethods":56,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":27,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":31,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":136,"org.easymock.tests2.CaptureTest.testCaptureLast":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":66,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":74,"org.easymock.tests2.CaptureTest.testCapture1_2446744":120,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":4,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":18,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":22,"org.easymock.tests.UsageStrictMockTest.range":44,"org.easymock.tests.LimitationsTest.mockNativeMethod":152,"org.easymock.tests.InvocationTest.testEquals":137,"org.easymock.tests.UsageUnorderedTest.message":49,"org.easymock.tests.MockingTest.testPartialClassMocking":149,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":52,"org.easymock.tests2.UsageConstraintsTest.constraints":87,"org.easymock.tests.UsageVerifyTest.twoReturns":48,"org.easymock.tests2.ThreadingTest.testChangeDefault":61,"org.easymock.tests2.UsageConstraintsTest.lessThan":110,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":25,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":28,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":84,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":92,"org.easymock.tests2.CaptureTest.testCaptureRightOne":126,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":177,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":156,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":179,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":114,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":175,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":42,"org.easymock.tests2.UsageConstraintsTest.cmpTo":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":24,"org.easymock.tests2.UsageStrictMockTest.range":55,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":164,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":161,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":167,"org.easymock.tests.UsageTest.moreThanOneArgument":38,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":107,"org.easymock.samples.PartialClassMockTest.testGetArea":13,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":46,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":76,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":148,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":166,"org.easymock.tests.UsageStrictMockTest.differentMethods":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":29,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":86,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":99,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests2.UsageTest.argumentsOrdered":53,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":174,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":70,"org.easymock.tests2.AnswerTest.answer":132,"org.easymock.tests.MockingTest.testNicePartialClassMocking":150,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":71,"org.easymock.tests2.CaptureTest.testCapture2_2446744":128,"org.easymock.tests.GenericTest.testPackageScope":154}}]

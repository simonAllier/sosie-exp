[{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,169,170,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[331,332,333,334,335],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,25,27,28,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,104,109,110,113,114,117,119,120,121,137,139,141,142,144,152,153,154,156,157,158,159,160,161,162,166,174,175,176,177,178,180,182,183,184,185,186,187,190,191,192,193,195,196,197,198,199,200,201,202,204,206,207,208,210,217,219,220,222,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,262,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,290,291,292,294,296,297,298,301,302,305,306,307,308,309,310,311,313,314,316,317,319,323,325,329,330],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,25,27,28,51,52,55,76,77,78,79,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,109,110,113,114,117,119,120,121,144,152,154,156,157,158,159,160,161,162,166,174,175,177,178,180,183,184,186,187,190,191,192,193,195,196,197,198,199,200,201,202,204,206,207,208,210,217,219,220,222,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,245,246,247,248,249,250,251,252,253,254,256,257,258,259,262,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,290,291,292,294,296,297,298,301,302,305,306,307,308,309,310,311,313,314,316,317,319,323,325,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[336,146],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1051","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[254],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:42","sourceCode":"if (org.easymock.internal.IMocksBehavior.isThreadSafe()) {\n    java.util.concurrent.locks.ReentrantLock.lock();\n    try {\n        return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n    } finally {\n        java.util.concurrent.locks.ReentrantLock.unlock();\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[24,337,338,111,339,340],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[341,307,311,342,343,344,345,346,347,348,349,350],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[31,34,35,351],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,352,353,354,355,356,357,22,24,25,26,27,28,29,31,32,33,34,35,37,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,358,359,360,361,362,363,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,136,137,138,364,139,141,142,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,169,169,170,170,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,206,207,208,365,209,210,215,217,218,219,220,221,222,223,224,225,227,366,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,367,274,275,276,277,278,279,280,281,282,283,284,285,287,288,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,368,314,316,317,319,320,321,322,323,324,325,326,327,328,329,330],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"toStringMethod","finalizeMethod":"toStringMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[54,369,138,370,209],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[371,372,373],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[287,288,289],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[235,242],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:36","sourceCode":"return (java.lang.Object != null) && (java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))","type":"CtReturnImpl"},"failures":[234,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1964","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[374,375,0,376,79,80,377,378,379,361,362,363,380,381,382,383,384,118,385,386,387,388,389,371,390,391,155,167,168,197,198,200,201,202,204,392,205,208,393,365,394,228,395,396,397,398,399,400,401,402,289,403,404,305,308,322,323],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[405,406,394,407,408,228,409,395,229,396,397,410,411,398,412,413,399,414,230,400,401,415,416,402,231,417,418,287,419,350,420,421,422,423,424],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[169,170,222,341,394,407,408,228,409,395,229,396,397,410,411,398,412,413,399,414,230,400,401,415,416,402,231,417,418,287,307,311,342,343,344,345,419,346,347,348,349],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[22,27,28,82,182,215,219,220,275,279,280,283,294,319],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[336,425,27,146,153,154,219],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[426,201,249,295],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,25,27,28,51,52,55,76,77,78,79,81,82,84,85,86,87,88,89,91,92,93,94,95,96,97,109,110,113,114,117,119,120,121,427,428,429,430,431,152,154,156,157,158,159,160,161,162,166,174,175,177,178,180,183,184,186,187,190,191,192,193,195,196,197,198,199,200,201,202,204,207,210,217,219,220,222,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,245,246,247,248,249,250,251,252,253,254,256,257,258,259,262,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,282,283,284,285,287,288,290,291,292,294,296,297,301,302,305,306,307,308,309,310,311,314,316,317,325,329],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[0,352,355,79,80,81,379,118,119,120,121,155,166,167,168,169,169,170,170,197,198,200,201,202,203,204,205,206,207,208,222,432,433,228,229,230,231,287,289,305,306,307,308,310,311,312,434,313,368,314,315,316,317,318,319,435,320,323],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[436,287,288,289],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[405,406,394,407,408,228,409,395,229,396,397,410,411,398,412,413,399,414,230,400,401,415,416,402,231,417,418,287,419,350,420,421,422,423,424],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[247,254,259,331],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[341,437,438,439,440,345],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[183,185,193,234,235,237,239,240,242,252,257],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:121","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:130","sourceCode":"java.io.ObjectOutputStream.writeObject(null)","type":"CtInvocationImpl"},"failures":[289],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[34],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:124","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:157","sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","type":"CtLocalVariableImpl"},"failures":[373],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:152","failures":[],"status":0,"binaryOperator":"(\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName()))","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":235,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":109,"org.easymock.tests2.UsageTest.argumentsOrdered":300,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":284,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":367,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":295,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":172,"org.easymock.tests2.DelegateToTest.testReturnException":261,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":101,"org.easymock.tests.MockingTest.testPartialClassMocking":119,"org.easymock.tests.MockClassControlTest.testToString":361,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":1,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":411,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":56,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":229,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":267,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":437,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":241,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":51,"org.easymock.tests2.UsageTest.wrongArguments":293,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":124,"org.easymock.samples.ExampleTest.answerVsDelegate":176,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":355,"org.easymock.tests2.UsageConstraintsTest.testNull":237,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":200,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":283,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":382,"org.easymock.tests2.CaptureTest.testPrimitive":186,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":55,"org.easymock.tests.UsageTest.moreThanOneArgument":110,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":75,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":149,"org.easymock.tests.UsageTest.argumentsOrdered":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":31,"org.easymock.tests.UsageVarargTest.varargIntAccepted":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":312,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":315,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":162,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":227,"org.easymock.tests2.AnswerTest.answer":325,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":226,"org.easymock.tests2.CaptureTest.testAnd":183,"org.easymock.tests2.UsageTest.strictResetToDefault":291,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":205,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":344,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":148,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":278,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":35,"org.easymock.tests2.DelegateToTest.testDelegate":265,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":71,"org.easymock.tests.LimitationsTest.mockFinalMethod":376,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":104,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":48,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":49,"org.easymock.tests2.CaptureTest.testCapture1_2446744":187,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":69,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":224,"org.easymock.tests.UsageThrowableTest.throwError":89,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":370,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":354,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":151,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":418,"org.easymock.samples.PartialClassMockTest.testGetArea":166,"org.easymock.tests2.CompareToTest.testLessOrEqual":335,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":398,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":57,"org.easymock.tests2.UsageTest.niceToStrict":294,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":360,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":424,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":314,"org.easymock.tests2.MockBuilderTest.testCreateMock":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":415,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":65,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":339,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":279,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":108,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":36,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":122,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":421,"org.easymock.tests.UsageOverloadedMethodTest.overloading":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":402,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":142,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":247,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":13,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":86,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":246,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":372,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":192,"org.easymock.tests2.EasyMockSupportClassTest.testAll":228,"org.easymock.tests.MockClassControlTest.testEquals":381,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":80,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":73,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":432,"org.easymock.tests2.CaptureTest.testCaptureAll":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":46,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":225,"org.easymock.tests.MockNameTest.defaultName":364,"org.easymock.tests2.UsageConstraintsTest.testMatches":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":150,"org.easymock.samples.ExampleTest.voteForRemovals":180,"org.easymock.tests.UsageVarargTest.allKinds":136,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":152,"org.easymock.samples.BasicClassMockTest.testPrintContent":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":47,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":95,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":105,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":264,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":440,"org.easymock.tests2.UsageConstraintsTest.greaterThan":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":409,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":83,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":208,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":391,"org.easymock.samples.ExampleTest.voteForRemoval":177,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":393,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":269,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":356,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":203,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":155,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":290,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":419,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":276,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":100,"org.easymock.tests2.CaptureTest.testCaptureFirst":196,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":260,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":277,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":302,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":145,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":9,"org.easymock.tests2.CaptureTest.testCapture2_2446744":195,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":271,"org.easymock.tests2.UsageTest.moreThanOneArgument":292,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":319,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":135,"org.easymock.tests.GenericTest.testBridgedEquals":377,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":422,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":42,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":350,"org.easymock.tests.UsageExpectAndReturnTest.longType":5,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":44,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":274,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":435,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":74,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":99,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":255,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":72,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":147,"org.easymock.tests.UsageCallCountTest.tooManyCalls":43,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":61,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":94,"org.easymock.tests.MockingTest.testNiceClassMocking":385,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":306,"org.easymock.tests.MockingTest.testClassMocking":384,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":434,"org.easymock.tests2.UsageConstraintsTest.testContains":245,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":323,"org.easymock.tests2.UsageConstraintsTest.testFind":236,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":88,"org.easymock.tests.MockTypeTest.fromEasyMockClass":353,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":22,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":304,"org.easymock.tests.UsageExpectAndReturnTest.object":12,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":282,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":438,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":130,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":423,"org.easymock.tests.UsageTest.exactCallCountByLastCall":117,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":97,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":32,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":341,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":126,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":18,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":141,"org.easymock.tests.MockClassControlTest.testHashCode":380,"org.easymock.tests2.EasyMockSupportTest.testVerify":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":413,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":33,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":139,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":107,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":223,"org.easymock.tests.UsageVarargTest.varargCharAccepted":129,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":431,"org.easymock.tests2.UsageTest.openCallCountByLastCall":296,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":405,"org.easymock.tests.DefaultClassInstantiatorTest.object":386,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":285,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":106,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":399,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":63,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":92,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":206,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":363,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":19,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":231,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":362,"org.easymock.tests2.UsageTest.resumeIfFailure":301,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":103,"org.easymock.tests2.StubTest.stubWithReturnValue":210,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":11,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":256,"org.easymock.tests2.SerializationTest.testAllMockedMethod":289,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":137,"org.easymock.samples.SupportTest.voteForRemovals":174,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":340,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":68,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":436,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":138,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":326,"org.easymock.tests.UsageExpectAndThrowTest.object":66,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":253,"org.easymock.tests2.DelegateToTest.testWrongClass":263,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":156,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":157,"org.easymock.samples.ConstructorCalledMockTest.testTax":169,"org.easymock.tests.UsageStrictMockTest.range":27,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":305,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":420,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":67,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":394,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":115,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":123,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":337,"org.easymock.tests2.CaptureTest.testCaptureNone":191,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":78,"org.easymock.tests.UsageUnorderedTest.message":146,"org.easymock.tests.UsageVerifyTest.twoReturns":154,"org.easymock.tests.UsageVarargTest.varargByteAccepted":134,"org.easymock.tests2.ThreadingTest.testThreadSafe":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":400,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":40,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":167,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":359,"org.easymock.tests2.CaptureTest.testCapture_2617107":185,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":429,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":54,"org.easymock.tests2.UsageConstraintsTest.any":243,"org.easymock.tests2.StubTest.stub":209,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":430,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":102,"org.easymock.tests.UsageExpectAndThrowTest.longType":59,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":371,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":426,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":218,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":273,"org.easymock.tests2.SerializationTest.testClass":287,"org.easymock.tests.LimitationsTest.mockNativeMethod":0,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":21,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":81,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":221,"org.easymock.tests2.NameTest.nameForMocksControl":214,"org.easymock.tests2.MockedExceptionTest.testMockedException":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":395,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":114,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":60,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":197,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":317,"org.easymock.tests.MockingTest.testNicePartialClassMocking":120,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":202,"org.easymock.tests2.CaptureTest.testCaptureLast":190,"org.easymock.tests2.CompareToTest.testCompareEqual":333,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":50,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":240,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":311,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":254,"org.easymock.tests.MockingTest.testTwoMocks":118,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":342,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":2,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":64,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":299,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":258,"org.easymock.tests.UsageStrictMockTest.differentMethods":28,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":388,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests2.MockBuilderTest.testCreateMockString":320,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":396,"org.easymock.tests.UsageExpectAndThrowTest.floatType":58,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":408,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":328,"org.easymock.tests.UsageVerifyTest.twoThrows":153,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":230,"org.easymock.samples.ExampleTest.voteAgainstRemoval":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":428,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":76,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":207,"org.easymock.tests.LimitationsTest.privateConstructor":375,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":349,"org.easymock.tests2.UsageConstraintsTest.testNotNull":257,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":96,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":321,"org.easymock.tests2.UsageTest.defaultResetToNice":298,"org.easymock.samples.ExampleTest.voteAgainstRemovals":175,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":17,"org.easymock.tests.UsageVarargTest.differentLength":131,"org.easymock.tests2.CallbackTest.callback":182,"org.easymock.tests.UsageTest.openCallCountByLastCall":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":232,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":53,"org.easymock.tests.UsageCallCountTest.tooFewCalls":38,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":308,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":125,"org.easymock.tests.UsageThrowableTest.throwCheckedException":93,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":338,"org.easymock.tests.MockingTest.testStrictClassMocking":383,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":98,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":310,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":307,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":366,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":309,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":330,"org.easymock.tests2.CompareToTest.testGreateOrEqual":334,"org.easymock.tests2.NameTest.nameForNiceMock":213,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":272,"org.easymock.tests2.DependencyTest.testInterfaceMocking":266,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":439,"org.easymock.samples.ExampleTest.addDocument":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":417,"org.easymock.tests2.DelegateToTest.testStubDelegate":262,"org.easymock.tests2.AnswerTest.stubAnswer":329,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":25,"org.easymock.tests.UsageVarargTest.varargLongAccepted":133,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageExpectAndReturnTest.floatType":4,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":20,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":222,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":170,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests.UsageThrowableTest.noUpperLimit":90,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":251,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":233,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":403,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":188,"org.easymock.tests2.SerializationTest.test":288,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":373,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":387,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":3,"org.easymock.tests2.UsageConstraintsTest.testSame":238,"org.easymock.samples.SupportTest.addDocument":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":397,"org.easymock.tests.GenericTest.testPackageScope":79,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":34,"org.easymock.tests2.NameTest.nameForMock":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":14,"org.easymock.tests2.UsageStrictMockTest.differentMethods":220,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":347,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":392,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":6,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":70,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":85,"org.easymock.tests2.MockedExceptionTest.testRealException":324,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":357,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":217,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":52,"org.easymock.tests2.NameTest.nameForStrictMock":212,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":406,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":201,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":404,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":389,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":252,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":336,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":313,"org.easymock.tests2.UsageStrictMockTest.range":219,"org.easymock.tests2.UsageConstraintsTest.lessThan":259,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":412,"org.easymock.tests2.CaptureTest.testCaptureRightOne":193,"org.easymock.tests2.UsageConstraintsTest.testOr":239,"org.easymock.tests.UsageRangeTest.combination":82,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":198,"org.easymock.tests.UsageTest.wrongArguments":112,"org.easymock.tests2.MockBuilderTest.testWithConstructor":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":410,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":379,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":7,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":15,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":390,"org.easymock.tests.UsageVarargTest.varargShortAccepted":132,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":41,"org.easymock.tests2.UsageConstraintsTest.cmpTo":244,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":327,"org.easymock.tests2.CompareToTest.testLessThan":331,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":297,"org.easymock.tests2.CaptureTest.testCaptureFromStub":194,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":368,"org.easymock.tests.UsageTest.unexpectedCallWithArray":111,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":24,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":39,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":346,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":16,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":26,"org.easymock.tests2.UsageConstraintsTest.constraints":234,"org.easymock.samples.ExampleTest.addAndChangeDocument":181,"org.easymock.tests.UsageStrictMockTest.testVerify":30,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":171,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":45,"org.easymock.tests2.CompareToTest.testGreateThan":332,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":189,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":433,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":160,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":8,"org.easymock.tests.LimitationsTest.abstractClass":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":161,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":144,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":425,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":280}}]

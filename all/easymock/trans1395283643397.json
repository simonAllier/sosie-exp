[{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:233","failures":[17,18,19,20,21,22,23,24,25,26,27,28,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,0,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,2,3,107,108,5,109,110,6,7,111,112,113,114,115,116,117,118,119,120,121,122,123,9,124,125,10,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,11,279,280,281,282,283,12,13,284,285,286,287,288,289,14,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,15,16,317,318,319,320,321,322,323,324,325],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[326,57,58,59,327],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[328,329,330,331,332,333,334],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:314","failures":[91,92,177,178],"status":-1,"binaryOperator":"java.lang.Throwable instanceof java.lang.RuntimeException","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[17,18,19,20,21,23,24,26,28,28,29,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,0,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,335,87,88,336,337,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,2,3,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,10,126,129,130,131,148,154,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,190,191,192,338,193,194,195,196,197,198,199,200,201,202,203,204,206,207,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,241,242,243,244,245,246,247,248,249,250,251,253,254,255,256,257,258,259,260,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,281,282,283,284,285,288,14,290,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,314,315,316,15,16,317,319,320,321,322,323,324,325],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[326],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[232,233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[129,130,131,259,339],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:173","failures":[267],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[326],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[340,341,342],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[343,344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[345,346,4,9,347,348],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[345,346,4,9,347,348],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MocksControl:131","failures":[349],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[9,189,311],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:733","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[306],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:149","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[350,351,352],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[34,40,46,50,52,0,61,67,73,77,79,88,107,150,207,215],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[194],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[144,148,353],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[354,106,2,3,108,5,6,7,9,124,10,126,261,262,263,264,278,11,12,13,288,14,290],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:70","failures":[17,18,19,20,21,22,23,355,24,25,26,27,28,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,356,56,357,57,58,59,0,84,85,101,102,103,104,105,116,9,124,171,172,173,174,175,189,190,191,199,203,204,205,206,207,208,209,210,211,212,213,214,215,216,221,288,292,293,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,15,16,317,318,319,320,321,322,358,323,324],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[85,103,112,113,114,115,116,117,227,228,229,230,295],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[256,260,339,359,360,361,362,363,333,364,365,334],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[85,90,91,92,103,112,113,114,115,116,117,139,366,227,228,229,230,295],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[367,315],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[368,322],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[120,230],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[194,369,202,256,339],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[328,329,330,331,332,333,334],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":300,"org.easymock.tests2.UsageTest.argumentsOrdered":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":107,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":250,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":142,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":280,"org.easymock.tests2.StubTest.stubWithReturnValue":295,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":333,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":69,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":32,"org.easymock.tests2.SerializationTest.testAllMockedMethod":239,"org.easymock.tests2.DelegateToTest.testReturnException":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":113,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":148,"org.easymock.tests.MockingTest.testPartialClassMocking":129,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":348,"org.easymock.samples.SupportTest.voteForRemovals":26,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":326,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":56,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":151,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":33,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":154,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":232,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":357,"org.easymock.tests.UsageExpectAndThrowTest.object":43,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":354,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":293,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":328,"org.easymock.tests2.DelegateToTest.testWrongClass":268,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":190,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":191,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":306,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":101,"org.easymock.tests.UsageStrictMockTest.range":10,"org.easymock.samples.ConstructorCalledMockTest.testTax":28,"org.easymock.samples.ExampleTest.answerVsDelegate":19,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":247,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":254,"org.easymock.tests2.UsageConstraintsTest.testNull":302,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":196,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":44,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":273,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":249,"org.easymock.tests2.CaptureTest.testPrimitive":206,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":105,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":366,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":52,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":6,"org.easymock.tests.UsageTest.moreThanOneArgument":108,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":195,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":345,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":168,"org.easymock.tests2.CaptureTest.testCaptureNone":211,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":55,"org.easymock.tests.UsageUnorderedTest.message":0,"org.easymock.tests.UsageVerifyTest.twoReturns":3,"org.easymock.tests.UsageVarargTest.varargByteAccepted":187,"org.easymock.tests2.ThreadingTest.testThreadSafe":217,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":335,"org.easymock.tests.UsageTest.argumentsOrdered":7,"org.easymock.tests.UsageVarargTest.varargIntAccepted":181,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":160,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":147,"org.easymock.tests2.CaptureTest.testCapture_2617107":205,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":104,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":152,"org.easymock.tests2.UsageConstraintsTest.any":308,"org.easymock.tests2.StubTest.stub":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":134,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":92,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":175,"org.easymock.tests.UsageExpectAndThrowTest.longType":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":153,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":350,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":296,"org.easymock.tests2.SerializationTest.testClass":237,"org.easymock.tests.ReplayStateInvalidUsageTest.times":353,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":253,"org.easymock.tests.LimitationsTest.mockNativeMethod":192,"org.easymock.tests2.AnswerTest.answer":231,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":79,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":59,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":149,"org.easymock.tests2.CaptureTest.testAnd":203,"org.easymock.tests2.UsageTest.strictResetToDefault":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":369,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":363,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":291,"org.easymock.tests2.NameTest.nameForMocksControl":264,"org.easymock.tests2.MockedExceptionTest.testMockedException":228,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":167,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":244,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":82,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":110,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":337,"org.easymock.tests2.DelegateToTest.testDelegate":270,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":37,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":131,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":193,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":274,"org.easymock.tests.MockingTest.testNicePartialClassMocking":130,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":48,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":198,"org.easymock.tests2.CaptureTest.testCaptureLast":210,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":116,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":338,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":305,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":260,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":317,"org.easymock.tests2.CaptureTest.testCapture1_2446744":207,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":339,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":349,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":46,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":41,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":12,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":321,"org.easymock.tests.UsageThrowableTest.throwError":93,"org.easymock.samples.ExampleTest.removeNonExistingDocument":355,"org.easymock.tests.UsageStrictMockTest.differentMethods":126,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":219,"org.easymock.tests.UsageExpectAndThrowTest.floatType":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":170,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":314,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":234,"org.easymock.tests.UsageVerifyTest.twoThrows":2,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":224,"org.easymock.samples.PartialClassMockTest.testGetArea":17,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":172,"org.easymock.samples.ExampleTest.voteAgainstRemoval":21,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":143,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":201,"org.easymock.tests2.UsageTest.niceToStrict":279,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":360,"org.easymock.tests2.UsageConstraintsTest.testNotNull":320,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":227,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":132,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":272,"org.easymock.tests2.UsageTest.defaultResetToNice":283,"org.easymock.samples.ExampleTest.voteAgainstRemovals":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":144,"org.easymock.tests.UsageVarargTest.differentLength":184,"org.easymock.tests2.CallbackTest.callback":226,"org.easymock.tests.UsageTest.openCallCountByLastCall":109,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":347,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":42,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":245,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":297,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":178,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":156,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":103,"org.easymock.tests.UsageCallCountTest.tooFewCalls":158,"org.easymock.tests.UsageOverloadedMethodTest.overloading":164,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":312,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":120,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":257,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":71,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":163,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":351,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":311,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":212,"org.easymock.tests.UsageThrowableTest.throwCheckedException":97,"org.easymock.tests2.EasyMockSupportClassTest.testAll":222,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":58,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":346,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":342,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":50,"org.easymock.tests2.CaptureTest.testCaptureAll":204,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":259,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":85,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":256,"org.easymock.tests2.UsageConstraintsTest.testMatches":313,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":258,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":236,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":169,"org.easymock.samples.ExampleTest.voteForRemovals":23,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":331,"org.easymock.tests2.NameTest.nameForNiceMock":263,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":221,"org.easymock.tests.UsageVarargTest.allKinds":189,"org.easymock.tests2.DependencyTest.testInterfaceMocking":292,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":106,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":330,"org.easymock.samples.BasicClassMockTest.testPrintContent":31,"org.easymock.samples.ExampleTest.addDocument":22,"org.easymock.tests2.DelegateToTest.testStubDelegate":267,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":99,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":286,"org.easymock.tests2.AnswerTest.stubAnswer":235,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":117,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":124,"org.easymock.tests2.UsageConstraintsTest.greaterThan":315,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":81,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":202,"org.easymock.tests.UsageVarargTest.varargLongAccepted":186,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":127,"org.easymock.samples.ExampleTest.voteForRemoval":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":141,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":218,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":78,"org.easymock.tests.UsageExpectAndReturnTest.floatType":62,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":325,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":29,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":316,"org.easymock.tests.UsageThrowableTest.noUpperLimit":94,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":298,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":276,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":89,"org.easymock.tests2.SerializationTest.test":238,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":208,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":242,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":95,"org.easymock.tests2.UsageConstraintsTest.testSame":303,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":61,"org.easymock.samples.SupportTest.addDocument":25,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":112,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":265,"org.easymock.tests2.CaptureTest.testCaptureFirst":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":138,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":243,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":285,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":8,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":67,"org.easymock.tests.GenericTest.testPackageScope":57,"org.easymock.tests2.UsageTest.moreThanOneArgument":278,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":220,"org.easymock.tests2.CaptureTest.testCapture2_2446744":215,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":336,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":150,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":136,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":188,"org.easymock.tests.GenericTest.testBridgedEquals":327,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":361,"org.easymock.tests2.NameTest.nameForMock":261,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":161,"org.easymock.tests.UsageExpectAndReturnTest.longType":63,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":240,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":51,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":318,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":365,"org.easymock.tests2.UsageStrictMockTest.differentMethods":290,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":49,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":166,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":64,"org.easymock.tests.UsageCallCountTest.tooManyCalls":162,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":47,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":83,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":157,"org.easymock.tests2.MockedExceptionTest.testRealException":230,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":146,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":288,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":145,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":344,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":98,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":102,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":255,"org.easymock.tests2.UsageConstraintsTest.testContains":310,"org.easymock.tests2.NameTest.nameForStrictMock":262,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":229,"org.easymock.tests2.UsageConstraintsTest.testFind":301,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":165,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":323,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":197,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":324,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":122,"org.easymock.tests.UsageExpectAndReturnTest.object":70,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":15,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":199,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":271,"org.easymock.tests2.UsageStrictMockTest.range":14,"org.easymock.tests2.UsageConstraintsTest.lessThan":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":248,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":329,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":183,"org.easymock.tests.UsageTest.exactCallCountByLastCall":111,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":137,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":140,"org.easymock.tests2.CaptureTest.testCaptureRightOne":213,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":356,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":87,"org.easymock.tests2.UsageConstraintsTest.testOr":304,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":334,"org.easymock.tests.UsageRangeTest.combination":80,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":194,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":76,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":179,"org.easymock.tests.UsageTest.wrongArguments":5,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":119,"org.easymock.tests2.MockBuilderTest.testWithConstructor":362,"org.easymock.tests2.EasyMockSupportTest.testVerify":252,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":65,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":133,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":340,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":88,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":118,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":177,"org.easymock.tests.UsageVarargTest.varargShortAccepted":185,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":358,"org.easymock.tests2.UsageConstraintsTest.cmpTo":309,"org.easymock.tests.UsageVarargTest.varargCharAccepted":182,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":233,"org.easymock.tests2.CompareToTest.testLessThan":368,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":155,"org.easymock.tests2.UsageTest.openCallCountByLastCall":281,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":282,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":251,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":176,"org.easymock.tests2.CaptureTest.testCaptureFromStub":214,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":343,"org.easymock.tests.UsageTest.unexpectedCallWithArray":4,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":1,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":40,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":96,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":159,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":364,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":74,"org.easymock.tests2.UsageConstraintsTest.constraints":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":200,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":125,"org.easymock.samples.ExampleTest.addAndChangeDocument":24,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":39,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":77,"org.easymock.tests.UsageStrictMockTest.testVerify":128,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":90,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":27,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":225,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":123,"org.easymock.tests2.CompareToTest.testGreateThan":367,"org.easymock.tests2.UsageTest.resumeIfFailure":284,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":209,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":66,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":246,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":180}}]

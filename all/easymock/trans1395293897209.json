[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.matchers.Matches:40","failures":[0],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[4,5,6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:87","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"failures":[4,5,6],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"failures":[7,8,9,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[12,13,14,15],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:134","sourceCode":"final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size())","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[18,19,20,21,22,23,23,24,24,25],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[26,27,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,2,62,63,18,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,1,26,97,98,99,100,101,102,103,104,105,106,107,13,108,8,109,110,111,112,113,114,9,115,116,117,118,10,119,27,14,120,121,122,123,15,124,125,11,126,127,128,129,130,131,132,133,28,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,23,23,24,24,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:51","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","type":"CtInvocationImpl"},"failures":[29,30,31,32,309,310,33,34,35,311,312,36,37,38,39,40,41,42,43,44,45,313,314,315,316,317,46,318,319,320,321,322,323,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,2,62,63,18,19,324,64,65,325,66,67,68,69,70,71,72,73,74,75,326,76,77,78,327,328,329,330,331,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,1,26,97,98,99,100,101,102,103,16,104,105,106,332,107,333,13,108,8,109,334,110,111,112,113,114,9,335,115,116,117,118,10,119,27,14,120,121,122,123,336,15,124,125,11,337,126,127,128,129,130,131,132,133,28,134,338,339,135,20,340,136,341,137,342,3,343,138,344,345,346,347,348,139,140,141,349,142,21,22,350,143,351,144,352,353,354,355,356,145,357,358,359,360,361,362,146,147,148,149,363,364,365,150,366,367,151,368,369,370,371,372,373,374,375,376,152,377,378,379,380,381,153,382,383,154,155,156,157,158,159,160,161,162,384,163,23,24,164,165,166,167,385,386,387,388,389,390,391,392,393,394,395,4,396,397,398,168,399,169,400,170,171,401,172,402,403,173,404,174,405,406,407,175,176,177,178,179,408,409,410,25,180,181,411,412,413,182,414,415,416,417,418,419,183,184,185,186,187,188,189,190,191,420,421,422,192,193,194,195,196,197,423,424,425,426,427,428,429,430,431,432,433,434,435,17,436,437,438,439,440,441,442,443,444,445,446,447,448,198,199,200,201,202,449,450,451,452,453,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,454,455,223,456,457,458,459,460,224,225,461,226,462,463,464,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,465,466,467,257,258,259,260,261,262,263,264,265,266,267,268,269,468,270,271,469,272,273,274,275,276,277,278,279,280,281,282,283,470,471,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,472,473,474,475,476,477,478,479,480,481,482,299,300,483,484,485,486,487,301,488,302,303,304,305,306,307,308],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,18,64,67,68,69,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,92,93,94,96,1,26,99,100,101,103,104,106,107,109,111,114,9,115,116,118,27,121,122,123,336,15,124,126,127,128,129,130,131,132,133,28,134,135,341,137,342,345,139,141,142,143,145,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,180,181,183,184,185,186,187,188,189,190,191,192,195,196,197,424,425,198,199,200,201,202,205,206,208,213,218,223,224,225,226,227,228,229,230,231,232,233,234,237,238,240,245,250,255,262,263,264,265,266,267,268,269,270,271,469,272,273,274,275,276,277,282,283,471,284,289,292,293,294,472,473,299,300,483,484,485,486,487,301,302,307],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1902","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[25,180,181,411,412],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"invocation"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[33,34,37,41,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,2,62,63,18,67,68,71,72,73,74,75,76,77,78,79,80,82,83,86,87,88,89,91,92,93,94,95,1,97,98,99,102,103,105,13,108,8,109,110,111,112,113,114,9,115,116,117,118,10,119,27,14,120,121,122,123,15,124,125,11,130,131,132,133,28,134,135,341,137,342,345,139,141,142,143,145,148,150,151,152,153,157,159,160,162,165,167,180,411,186,188,189,421,422,198,199,202,223,224,225,226,227,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,466,262,263,264,265,266,277,278,279,280,281,283,471,284,285,286,287,290,291,294,299,300,301],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[114],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[41,43,44,95,96,100,101,126,127,128,129,168,185,186,188,189,489,490,491,281,282,283,287,289,292,293],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:118","sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:57","sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"initArgs","i":"i"}},{"position":"org.easymock.internal.Range:70","failures":[43,44,188,189],"status":-1,"binaryOperator":"(\"between \" + (int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[92],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:52","failures":[43,44,188,189,450,451,281],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[19,492,493,494,74,78,327,344,347,349,495,351],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[41,71,90,13,108,110,111,112,113,117,10,119,14,120,124,125,11,23,23,24,24,175,176,177,178,179,186,426,430,431,439,444,198,199,202,255,262,263,264,265,266,470,299,300],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":109,"org.easymock.tests2.UsageTest.argumentsOrdered":101,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":286,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":57,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":17,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":26,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":166,"org.easymock.tests2.DelegateToTest.testReturnException":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":304,"org.easymock.tests.MockingTest.testPartialClassMocking":224,"org.easymock.tests.MockClassControlTest.testToString":414,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":337,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":466,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":371,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":151,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":203,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":489,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":34,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":9,"org.easymock.tests2.UsageTest.wrongArguments":96,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":198,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":323,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":297,"org.easymock.samples.ExampleTest.answerVsDelegate":158,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":480,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":463,"org.easymock.tests2.UsageConstraintsTest.testNull":111,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":133,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":419,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":56,"org.easymock.tests2.CaptureTest.testPrimitive":82,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":222,"org.easymock.tests.UsageTest.moreThanOneArgument":287,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":132,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":177,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":449,"org.easymock.tests.UsageTest.argumentsOrdered":293,"org.easymock.tests.UsageVarargTest.varargIntAccepted":269,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":440,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":262,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":138,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":361,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":140,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":428,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":266,"org.easymock.tests.ReplayStateInvalidUsageTest.times":403,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":46,"org.easymock.tests2.DependencyTest.testClassMocking":309,"org.easymock.tests2.AnswerTest.answer":35,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":442,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":32,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":477,"org.easymock.tests2.CaptureTest.testAnd":79,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":136,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":347,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":176,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":51,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":279,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":453,"org.easymock.tests2.DelegateToTest.testDelegate":107,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":218,"org.easymock.tests.LimitationsTest.mockFinalMethod":456,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":307,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":261,"org.easymock.tests2.DependencyTest.testClassMockingSupport":310,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":472,"org.easymock.tests2.CaptureTest.testCapture1_2446744":83,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":216,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":30,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":400,"org.easymock.tests.UsageThrowableTest.throwError":227,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":479,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":362,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":179,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":383,"org.easymock.samples.PartialClassMockTest.testGetArea":167,"org.easymock.tests.MockingTest.testInterfaceMocking":461,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":170,"org.easymock.tests2.CompareToTest.testLessOrEqual":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":263,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":421,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":390,"org.easymock.tests2.UsageTest.niceToStrict":1,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":426,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":139,"org.easymock.tests2.MockBuilderTest.testCreateMock":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":379,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":320,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":212,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":52,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":476,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":407,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":192,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":295,"org.easymock.tests.UsageOverloadedMethodTest.overloading":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":381,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":486,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":10,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":471,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":246,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":118,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":5,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":88,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":468,"org.easymock.tests.MockClassControlTest.testEquals":418,"org.easymock.tests2.EasyMockSupportClassTest.testAll":150,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":181,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":31,"org.easymock.tests2.CaptureTest.testCaptureAll":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":259,"org.easymock.tests.MockNameTest.defaultName":457,"org.easymock.tests2.UsageConstraintsTest.testMatches":119,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":399,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":178,"org.easymock.samples.ExampleTest.voteForRemovals":162,"org.easymock.tests.UsageVarargTest.allKinds":276,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":281,"org.easymock.samples.BasicClassMockTest.testPrintContent":156,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":260,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":233,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":308,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":332,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":358,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":397,"org.easymock.tests2.UsageConstraintsTest.greaterThan":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":366,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":278,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":342,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":398,"org.easymock.samples.ExampleTest.voteForRemoval":159,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":3,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":61,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":481,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":338,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":302,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":433,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":49,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":364,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":303,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":16,"org.easymock.tests2.CaptureTest.testCaptureFirst":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":432,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":50,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":103,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":488,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":242,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":62,"org.easymock.tests2.CaptureTest.testCapture2_2446744":91,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":443,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":143,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":275,"org.easymock.tests.GenericTest.testBridgedEquals":412,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":494,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":424,"org.easymock.tests.UsageExpectAndReturnTest.longType":238,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":221,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":470,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":336,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":219,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":409,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":175,"org.easymock.tests.UsageCallCountTest.tooManyCalls":425,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":380,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":243,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":322,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":208,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":232,"org.easymock.tests.MockingTest.testNiceClassMocking":464,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":73,"org.easymock.tests.MockingTest.testClassMocking":459,"org.easymock.tests2.UsageConstraintsTest.testContains":117,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":193,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":148,"org.easymock.tests2.UsageConstraintsTest.testFind":110,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":285,"org.easymock.tests.MockTypeTest.fromEasyMockClass":478,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":183,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":66,"org.easymock.tests.UsageExpectAndReturnTest.object":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":135,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":55,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":271,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":388,"org.easymock.tests.UsageTest.exactCallCountByLastCall":294,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":431,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":450,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":19,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":251,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":267,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":485,"org.easymock.tests.MockClassControlTest.testHashCode":417,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":353,"org.easymock.tests2.EasyMockSupportTest.testVerify":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":374,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":451,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":483,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":406,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":29,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":333,"org.easymock.tests.UsageVarargTest.varargCharAccepted":270,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":391,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":448,"org.easymock.tests2.UsageTest.openCallCountByLastCall":97,"org.easymock.tests.DefaultClassInstantiatorTest.object":392,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":58,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":405,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":386,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":375,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":230,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":316,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":352,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":416,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":341,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":252,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":408,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":153,"org.easymock.tests2.UsageTest.resumeIfFailure":102,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":475,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":306,"org.easymock.tests2.StubTest.stubWithReturnValue":71,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":349,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":15,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":244,"org.easymock.tests2.SerializationTest.testAllMockedMethod":69,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":441,"org.easymock.samples.SupportTest.voteForRemovals":165,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":25,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":355,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":215,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":447,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":311,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":467,"org.easymock.tests.UsageExpectAndThrowTest.object":213,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":122,"org.easymock.tests2.DelegateToTest.testWrongClass":106,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":299,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":300,"org.easymock.tests.UsageStrictMockTest.range":188,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":330,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":214,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":141,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":404,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":363,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":296,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":422,"org.easymock.tests2.CaptureTest.testCaptureNone":87,"org.easymock.tests.UsageUnorderedTest.message":168,"org.easymock.tests.UsageVerifyTest.twoReturns":283,"org.easymock.tests.UsageVarargTest.varargByteAccepted":274,"org.easymock.tests2.ThreadingTest.testThreadSafe":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":377,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":197,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":389,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":155,"org.easymock.tests2.CaptureTest.testCapture_2617107":81,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":445,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":201,"org.easymock.tests2.UsageConstraintsTest.any":115,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":402,"org.easymock.tests2.StubTest.stub":70,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":446,"org.easymock.tests.UsageExpectAndThrowTest.longType":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":305,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":4,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":172,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":42,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":145,"org.easymock.tests2.SerializationTest.testClass":67,"org.easymock.tests.LimitationsTest.mockNativeMethod":223,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":411,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":254,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":315,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":45,"org.easymock.tests2.NameTest.nameForMocksControl":129,"org.easymock.tests2.MockedExceptionTest.testMockedException":147,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":367,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":291,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":207,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":226,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":325,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":130,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":142,"org.easymock.tests.MockingTest.testNicePartialClassMocking":225,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":134,"org.easymock.tests2.CaptureTest.testCaptureLast":86,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":313,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":473,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":114,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":78,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":123,"org.easymock.tests.MockingTest.testTwoMocks":460,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":327,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":211,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":100,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":125,"org.easymock.samples.ExampleTest.removeNonExistingDocument":384,"org.easymock.tests.UsageStrictMockTest.differentMethods":189,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":171,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":319,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":354,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":394,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":2,"org.easymock.tests2.MockBuilderTest.testCreateMockString":144,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":413,"org.easymock.tests.UsageExpectAndThrowTest.floatType":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":368,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":365,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":36,"org.easymock.tests.UsageVerifyTest.twoThrows":282,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":324,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":152,"org.easymock.samples.ExampleTest.voteAgainstRemoval":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":436,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":420,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":137,"org.easymock.tests.LimitationsTest.privateConstructor":455,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":493,"org.easymock.tests2.UsageConstraintsTest.testNotNull":124,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":146,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":234,"org.easymock.tests2.UsageTest.defaultResetToNice":99,"org.easymock.samples.ExampleTest.voteAgainstRemovals":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":437,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":250,"org.easymock.tests.UsageVarargTest.differentLength":469,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":314,"org.easymock.tests2.CallbackTest.callback":64,"org.easymock.tests2.UsageConstraintsTest.equals":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":20,"org.easymock.tests.UsageTest.openCallCountByLastCall":290,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":200,"org.easymock.tests.UsageCallCountTest.tooFewCalls":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":75,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":298,"org.easymock.tests.UsageThrowableTest.throwCheckedException":231,"org.easymock.tests.MockingTest.testStrictClassMocking":458,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":77,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":256,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":74,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":173,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":76,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":38,"org.easymock.tests.ObjectMethodsTest.testHashCode":387,"org.easymock.tests2.CompareToTest.testGreateOrEqual":7,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":0,"org.easymock.tests2.NameTest.nameForNiceMock":128,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":63,"org.easymock.tests2.DependencyTest.testInterfaceMocking":33,"org.easymock.samples.ExampleTest.addDocument":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":378,"org.easymock.tests2.DelegateToTest.testStubDelegate":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":382,"org.easymock.tests2.AnswerTest.stubAnswer":37,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":186,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":21,"org.easymock.tests.UsageVarargTest.varargLongAccepted":273,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.floatType":237,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":253,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":18,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":487,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":120,"org.easymock.tests.UsageThrowableTest.noUpperLimit":228,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":360,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":108,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":328,"org.easymock.tests2.SerializationTest.test":68,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":84,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":393,"org.easymock.tests2.UsageConstraintsTest.testSame":112,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":236,"org.easymock.samples.SupportTest.addDocument":164,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":326,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":369,"org.easymock.tests.GenericTest.testPackageScope":180,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":452,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":430,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":359,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":462,"org.easymock.tests2.NameTest.nameForMock":126,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":247,"org.easymock.tests2.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":351,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":340,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":239,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":217,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":385,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":280,"org.easymock.tests2.MockedExceptionTest.testRealException":149,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":438,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":41,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":174,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":199,"org.easymock.tests2.NameTest.nameForStrictMock":127,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":348,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":65,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":28,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":329,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":490,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":395,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":121,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":345,"org.easymock.tests2.UsageStrictMockTest.range":43,"org.easymock.tests2.UsageConstraintsTest.lessThan":11,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":434,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":48,"org.easymock.tests2.CaptureTest.testCaptureRightOne":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":373,"org.easymock.tests2.UsageConstraintsTest.testOr":113,"org.easymock.tests.UsageRangeTest.combination":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":131,"org.easymock.tests.UsageTest.wrongArguments":289,"org.easymock.tests2.MockBuilderTest.testWithConstructor":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":370,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":427,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":248,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":396,"org.easymock.tests.UsageVarargTest.varargShortAccepted":272,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":423,"org.easymock.tests2.UsageConstraintsTest.cmpTo":116,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":429,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests2.CaptureTest.testCaptureFromStub":90,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":169,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":346,"org.easymock.tests.UsageTest.unexpectedCallWithArray":288,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":185,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":196,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":495,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":249,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":187,"org.easymock.tests2.UsageConstraintsTest.constraints":8,"org.easymock.samples.ExampleTest.addAndChangeDocument":163,"org.easymock.tests.UsageStrictMockTest.testVerify":191,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":154,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":258,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":85,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":264,"org.easymock.tests.LimitationsTest.abstractClass":454,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":241,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":265,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":491,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":53,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":268}}]

[{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[84],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[85,86,87,88,29,89,90,91,92,93,94,74,95,96,97,98,99],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[100],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[101,17],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[102,103,104,105,106,107,108,109,110,111],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[112,113],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","failures":[15],"status":-1,"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:70","failures":[115,116,116,117,117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,102,131,132,133,134,1,2,3,4,5,135,6,7,8,9,136,137,138,139,140,10,11,12,13,141,14,15,142,143,144,145,146,147,16,17,148,18,19,149,20,21,150,22,23,151,152,153,24,25,154,155,156,157,158,159,77,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,99,176],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[177,178,179,180,181,182],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[115,116,117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,102,103,183,184,131,132,133,134,1,185,2,3,4,5,135,186,6,7,8,9,136,137,138,139,140,10,11,12,13,141,14,15,142,143,144,145,146,147,16,17,187,188,189,190,191,192,193,194,195,196,197,198,199,104,200,201,105,202,203,204,205,148,18,19,149,20,21,150,22,23,151,152,153,24,25,206,207,208,209,210,211,212,114,154,213,214,215,216,217,218,219,220,26,27,28,221,155,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,29,89,240,30,31,32,241,90,91,33,242,243,244,156,157,34,158,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,35,262,263,264,265,266,267,268,36,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,159,325,37,38,326,111,327,328,39,40,329,330,41,331,42,43,44,45,332,46,47,48,49,333,50,51,52,53,334,335,336,337,54,55,338,339,56,340,57,58,59,60,341,61,62,63,64,342,65,66,67,68,343,344,345,346,347,348,349,350,351,352,353,354,355,356,112,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,113,385,386,69,70,71,72,73,74,95,96,75,76,97,98,387,388,389,390,391,392,393,394,395,396,397,398,399,177,178,179,180,400,181,401,182,77,402,403,404,160,161,405,406,78,407,408,409,410,411,412,100,413,414,415,416,417,418,79,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,162,454,455,456,457,458,459,460,461,462,463,464,465,163,164,165,166,167,466,467,468,469,168,169,170,171,172,470,471,472,473,474,475,476,477,478,479,480,481,482,173,483,80,484,485,486,487,81,488,489,490,491,492,493,174,175,494,495,99,176,496,82,83,497,498,499,500,501],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[147],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"failures":[135,136,142],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:317","failures":[335,336,403,404],"status":-1,"binaryOperator":"java.lang.Throwable instanceof java.lang.Error","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[15,159,353,386,419,423,424,433,438,176],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[37,38,80,82,83],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[191,198,212,220,222,298],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[115,116,116,117,117,118,119,120,121,122,123,0,125,126,127,128,129,130,102,131,132,133,134,1,2,3,4,5,135,6,7,8,9,136,137,139,140,10,11,12,13,141,14,15,142,143,144,145,146,147,16,17,193,197,199,200,203,148,18,19,149,20,21,150,22,23,151,152,153,24,25,206,207,208,209,210,211,154,216,217,218,26,27,28,221,155,222,223,224,225,231,238,239,29,89,240,30,31,32,241,90,91,33,242,156,157,34,250,257,258,259,260,261,35,36,269,270,271,272,273,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,295,298,308,314,317,318,319,320,321,322,323,324,159,325,37,38,326,111,327,328,39,40,329,330,41,331,42,43,44,45,332,46,47,48,49,333,50,51,52,53,334,335,336,54,55,338,339,56,340,57,58,59,60,341,61,62,63,64,342,65,66,67,68,345,346,347,349,364,365,366,367,368,377,378,379,380,381,382,384,113,386,69,70,71,72,73,74,96,75,76,97,98,387,388,389,390,391,392,393,77,402,403,404,160,161,406,78,407,408,409,410,411,412,413,414,415,417,418,79,435,441,443,444,445,447,448,449,450,451,452,453,162,464,163,164,165,166,167,168,169,170,171,172,471,479,480,481,482,173,483,80,484,485,486,81,488,489,490,492,493,174,175,494,495,99,176,496,82,83,497,498,499,500,501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[502,503,504,114,505],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[85,87,92,93,95,99],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[111,327,328,506],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:190","failures":[3,4,5,135,6,7,8,9,136,137,139,140,10,11,12,13,141,14,15,142,143,144,146,147,16,17,197,148,18,149,20,22,23,151,152,153,24,25,207,210,154,216,217,218,26,27,28,155,224,231,238,239,29,240,31,32,241,33,242,156,157,250,269,279,280,281,282,283,284,285,286,287,288,289,290,317,159,37,38,111,327,340,57,58,341,61,62,63,64,366,368,382,386,69,70,71,72,73,74,75,76,387,160,406,407,408,409,410,411,412,418,79,163,164,167,171,471,80,485,176,82,83,500,501],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:223","failures":[191,198,212,220,222,298],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[199,262,272,276,337,374,456,457,458,478],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[142],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[37,507,508,77,484,485,82],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[111,327,328,506],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[142,143],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[118,119,120,121,122,123,0,102,131,132,133,134,1,2,3,4,5,135,6,7,8,9,136,137,139,140,10,11,12,13,141,14,15,142,143,144,146,147,16,17,187,188,189,190,191,197,198,148,18,19,149,21,150,22,23,151,152,25,206,208,209,210,211,154,215,217,26,27,155,222,223,224,225,239,29,240,30,241,33,156,34,258,259,35,36,269,271,272,276,277,317,320,321,322,324,159,38,326,111,327,328,39,40,329,330,41,331,42,43,44,45,332,46,47,48,49,333,50,51,52,53,54,55,338,339,56,340,57,58,59,60,341,61,62,63,64,342,65,66,67,68,346,347,349,364,365,366,367,368,382,69,70,71,72,74,388,394,395,396,397,398,160,78,407,413,414,418,79,443,444,445,447,448,450,451,452,453,162,455,464,163,164,167,466,467,468,469,168,169,170,171,172,479,480,481,482,173,483,80,484,485,486,487,81,488,489,490,174,175,495,176,83,497,498],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:213","failures":[100,416],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[115,118,119,120,121,123,130,102,3,4,5,135,6,7,8,9,136,137,139,140,10,11,12,13,141,14,15,142,143,144,145,146,147,16,17,193,197,199,200,203,148,18,19,149,20,22,23,151,152,24,25,206,207,208,209,210,211,154,216,217,218,26,27,28,221,155,224,231,238,239,29,240,31,32,241,33,242,156,157,34,250,258,259,260,35,269,270,271,272,273,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,295,298,308,314,317,321,322,159,37,38,111,327,39,40,329,330,41,331,42,43,44,45,332,46,47,48,49,333,50,51,52,53,54,55,338,339,56,340,57,58,59,60,341,61,62,63,64,342,65,66,67,68,346,347,349,377,379,380,382,69,70,71,72,73,74,75,76,387,160,161,406,407,408,409,410,411,412,413,417,418,79,420,427,431,436,437,464,163,164,167,466,168,169,170,171,172,173,80,484,485,174,175,494,176,82,83],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[115,116,116,117,117,126,127,102,103,191,509,193,194,196,197,198,199,200,105,202,203,510,205,206,207,209,210,211,212,154,213,214,215,216,217,218,219,220,222,223,224,262,266,270,271,272,273,276,277,511,512,513,514,515,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,111,328,343,344,345,346,347,349,352,369,374,388,177,178,179,180,400,181,182,100,413,414,415,416,454,455,456,457,458,459,460,461,462,463,464,465,478],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:185","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[115,116,116,117,117,118,119,120,121,122,123,124,0,125,126,127,128,129,130,102,103,183,184,131,132,133,134,1,185,2,3,4,5,135,186,6,7,8,9,136,137,138,139,140,10,11,12,13,141,14,15,142,143,144,145,146,147,16,17,187,188,189,190,191,192,193,194,195,196,197,198,199,104,200,105,202,203,204,205,148,18,19,149,20,21,150,22,23,151,152,153,24,25,206,207,208,209,210,211,212,114,154,213,214,215,216,217,218,219,220,26,27,28,221,155,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,29,89,240,30,31,32,241,90,91,33,242,243,244,156,157,34,158,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,35,262,266,267,268,36,269,270,271,272,273,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,159,325,37,38,326,111,327,328,39,40,329,330,41,331,42,43,44,45,332,46,47,48,49,333,50,51,52,53,334,335,336,54,55,338,339,56,340,57,58,59,60,341,61,62,63,64,342,65,66,67,68,343,344,345,346,347,348,349,350,351,352,353,354,355,356,112,357,358,359,360,361,362,363,364,365,366,367,368,369,372,373,374,375,376,377,378,379,380,381,382,383,384,113,385,386,69,70,71,72,73,74,95,96,75,76,97,98,387,388,389,390,391,392,393,394,395,396,397,398,399,177,178,179,180,400,181,401,182,77,402,403,404,160,161,405,406,78,407,408,409,410,411,412,100,413,414,415,416,417,418,79,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,162,454,455,456,457,458,459,460,461,462,463,464,465,163,164,165,166,167,466,467,468,469,168,169,170,171,172,470,471,472,473,474,475,476,477,478,479,480,481,482,173,483,80,484,485,486,487,81,488,489,490,491,492,493,174,175,494,495,99,176,496,82,83,497,498,499,500,501],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(this.java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"key","properties":"properties","key":"key"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[103,104,106,107,108,516,517],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:260","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:63","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[142],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":135,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":73,"org.easymock.tests2.UsageTest.argumentsOrdered":91,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":289,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":429,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":30,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":125,"org.easymock.tests2.DelegateToTest.testReturnException":258,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":480,"org.easymock.tests.MockingTest.testPartialClassMocking":346,"org.easymock.tests.MockClassControlTest.testToString":456,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":184,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":438,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":302,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":39,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":298,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":157,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":106,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":163,"org.easymock.tests2.UsageTest.wrongArguments":89,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":256,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":468,"org.easymock.samples.ExampleTest.answerVsDelegate":119,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":374,"org.easymock.tests2.UsageConstraintsTest.testNull":7,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":351,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":209,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":461,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":288,"org.easymock.tests2.CaptureTest.testPrimitive":149,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":167,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":53,"org.easymock.tests.UsageTest.moreThanOneArgument":74,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":208,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":366,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":389,"org.easymock.tests.UsageTest.argumentsOrdered":98,"org.easymock.tests.UsageVarargTest.varargIntAccepted":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":434,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":168,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":517,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":191,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":236,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":264,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":421,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":172,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":250,"org.easymock.tests.ReplayStateInvalidUsageTest.times":360,"org.easymock.tests2.DependencyTest.testClassMocking":243,"org.easymock.tests2.AnswerTest.answer":317,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":436,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":190,"org.easymock.tests2.CaptureTest.testAnd":148,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":371,"org.easymock.tests2.UsageTest.strictResetToDefault":239,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":215,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":365,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":71,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":283,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":393,"org.easymock.tests2.DelegateToTest.testDelegate":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":333,"org.easymock.tests.LimitationsTest.mockFinalMethod":465,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":398,"org.easymock.tests2.DependencyTest.testClassMockingSupport":244,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":384,"org.easymock.tests2.CaptureTest.testCapture1_2446744":20,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":114,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":48,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":188,"org.easymock.tests.UsageThrowableTest.throwError":406,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":355,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":373,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":237,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":316,"org.easymock.samples.PartialClassMockTest.testGetArea":115,"org.easymock.tests.MockingTest.testInterfaceMocking":348,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":169,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":500,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":478,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":40,"org.easymock.tests2.UsageTest.niceToStrict":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":303,"org.easymock.tests2.ThreadingTest.testChangeDefault":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":419,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":197,"org.easymock.tests2.MockBuilderTest.testCreateMock":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":311,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":253,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":45,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":85,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":284,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":370,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":404,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":486,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":466,"org.easymock.tests.UsageOverloadedMethodTest.overloading":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":313,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":12,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":380,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":417,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":61,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":11,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":151,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":446,"org.easymock.tests.MockClassControlTest.testEquals":460,"org.easymock.tests2.EasyMockSupportClassTest.testAll":295,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":414,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":51,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":86,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":511,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":396,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":189,"org.easymock.tests2.CaptureTest.testCaptureAll":18,"org.easymock.tests.MockNameTest.defaultName":405,"org.easymock.tests2.UsageConstraintsTest.testMatches":13,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":353,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":367,"org.easymock.samples.ExampleTest.voteForRemovals":123,"org.easymock.tests.UsageVarargTest.allKinds":162,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":397,"org.easymock.samples.BasicClassMockTest.testPrintContent":127,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":411,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":483,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":233,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":261,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":401,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":110,"org.easymock.tests2.UsageConstraintsTest.greaterThan":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":296,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":70,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":218,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":182,"org.easymock.samples.ExampleTest.voteForRemoval":120,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":27,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":219,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":375,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":265,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":212,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":388,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":238,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":426,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":281,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":479,"org.easymock.tests2.CaptureTest.testCaptureFirst":25,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":425,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":282,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":383,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":58,"org.easymock.tests2.UsageTest.moreThanOneArgument":29,"org.easymock.tests2.CaptureTest.testCapture2_2446744":24,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":437,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":203,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":453,"org.easymock.tests.GenericTest.testBridgedEquals":416,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":492,"org.easymock.tests.UsageExpectAndReturnTest.longType":339,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":394,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":279,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":510,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":52,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":386,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":50,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":335,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":364,"org.easymock.tests.UsageCallCountTest.tooManyCalls":493,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":312,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":255,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":331,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":410,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":271,"org.easymock.tests.MockingTest.testNiceClassMocking":352,"org.easymock.tests.MockingTest.testClassMocking":344,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":509,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":487,"org.easymock.tests2.UsageConstraintsTest.testContains":10,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":224,"org.easymock.tests2.UsageConstraintsTest.testFind":6,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":79,"org.easymock.tests.MockTypeTest.fromEasyMockClass":372,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":494,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":2,"org.easymock.tests.UsageExpectAndReturnTest.object":341,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":154,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":287,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":448,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":107,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":476,"org.easymock.tests.UsageTest.exactCallCountByLastCall":387,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":424,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":470,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":390,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":103,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":443,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":65,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":379,"org.easymock.tests.MockClassControlTest.testHashCode":459,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":227,"org.easymock.tests2.EasyMockSupportTest.testVerify":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":305,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":391,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":403,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":377,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":187,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":158,"org.easymock.tests.UsageVarargTest.varargCharAccepted":447,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":399,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":442,"org.easymock.tests2.UsageTest.openCallCountByLastCall":31,"org.easymock.tests.DefaultClassInstantiatorTest.object":177,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":290,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":402,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":474,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":306,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":515,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":408,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":248,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":226,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":458,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":216,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":42,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":66,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":334,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":314,"org.easymock.tests2.UsageTest.resumeIfFailure":33,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":369,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":482,"org.easymock.tests2.StubTest.stubWithReturnValue":269,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":104,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":146,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":60,"org.easymock.tests2.SerializationTest.testAllMockedMethod":328,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":435,"org.easymock.samples.SupportTest.voteForRemovals":130,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":87,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":100,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":47,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":506,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":441,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":318,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":472,"org.easymock.tests.UsageExpectAndThrowTest.object":332,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":143,"org.easymock.tests2.DelegateToTest.testWrongClass":260,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":174,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":175,"org.easymock.samples.ConstructorCalledMockTest.testTax":116,"org.easymock.tests.UsageStrictMockTest.range":82,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":267,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":286,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":270,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":46,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":199,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":292,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":467,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":92,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":501,"org.easymock.tests2.CaptureTest.testCaptureNone":23,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":502,"org.easymock.tests.UsageUnorderedTest.message":77,"org.easymock.tests.UsageVerifyTest.twoReturns":485,"org.easymock.tests.UsageVarargTest.varargByteAccepted":452,"org.easymock.tests2.ThreadingTest.testThreadSafe":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":309,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":490,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":477,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":126,"org.easymock.tests2.CaptureTest.testCapture_2617107":19,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":88,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":439,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":166,"org.easymock.tests2.UsageConstraintsTest.any":139,"org.easymock.tests2.StubTest.stub":36,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":359,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":336,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageExpectAndThrowTest.longType":330,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":400,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":358,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":325,"org.easymock.tests2.SerializationTest.testClass":111,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":231,"org.easymock.tests.LimitationsTest.mockNativeMethod":464,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":415,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":68,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":514,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":247,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":326,"org.easymock.tests2.NameTest.nameForMocksControl":134,"org.easymock.tests2.MockedExceptionTest.testMockedException":223,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":297,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":76,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":185,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":41,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":349,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":206,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":200,"org.easymock.tests.MockingTest.testNicePartialClassMocking":347,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":211,"org.easymock.tests2.CaptureTest.testCaptureLast":22,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":245,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":136,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":277,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":144,"org.easymock.tests.MockingTest.testTwoMocks":345,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":278,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":54,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":44,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":90,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":16,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":504,"org.easymock.samples.ExampleTest.removeNonExistingDocument":124,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":112,"org.easymock.tests.UsageStrictMockTest.differentMethods":83,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":252,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":228,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":503,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":179,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":28,"org.easymock.tests2.MockBuilderTest.testCreateMockString":205,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":454,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":299,"org.easymock.tests.UsageExpectAndThrowTest.floatType":329,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":141,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":294,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":320,"org.easymock.tests.UsageVerifyTest.twoThrows":484,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":183,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":378,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":308,"org.easymock.samples.ExampleTest.voteAgainstRemoval":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":499,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":430,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":217,"org.easymock.tests.LimitationsTest.privateConstructor":463,"org.easymock.tests2.UsageConstraintsTest.testNotNull":147,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":412,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":222,"org.easymock.tests2.UsageTest.defaultResetToNice":241,"org.easymock.samples.ExampleTest.voteAgainstRemovals":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":431,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":342,"org.easymock.tests.UsageVarargTest.differentLength":449,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":246,"org.easymock.tests2.CallbackTest.callback":34,"org.easymock.tests2.UsageConstraintsTest.equals":186,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":213,"org.easymock.tests.UsageTest.openCallCountByLastCall":75,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":3,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":165,"org.easymock.tests.UsageCallCountTest.tooFewCalls":488,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":469,"org.easymock.tests.UsageThrowableTest.throwCheckedException":409,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":93,"org.easymock.tests.MockingTest.testStrictClassMocking":343,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":161,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":276,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":251,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":272,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":361,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":275,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":322,"org.easymock.tests.ObjectMethodsTest.testHashCode":475,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":516,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":155,"org.easymock.tests2.NameTest.nameForNiceMock":133,"org.easymock.tests2.DependencyTest.testInterfaceMocking":156,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":108,"org.easymock.samples.ExampleTest.addDocument":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":310,"org.easymock.tests2.DelegateToTest.testStubDelegate":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":315,"org.easymock.tests2.AnswerTest.stubAnswer":321,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":176,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":201,"org.easymock.tests.UsageVarargTest.varargLongAccepted":451,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":497,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":428,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":67,"org.easymock.tests.UsageExpectAndReturnTest.floatType":338,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":102,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":117,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":15,"org.easymock.tests.UsageThrowableTest.noUpperLimit":78,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":235,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":381,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":4,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":262,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":21,"org.easymock.tests2.SerializationTest.test":327,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":178,"org.easymock.tests2.UsageConstraintsTest.testSame":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":55,"org.easymock.samples.SupportTest.addDocument":129,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":274,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":300,"org.easymock.tests.GenericTest.testPackageScope":413,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":234,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":350,"org.easymock.tests2.NameTest.nameForMock":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":62,"org.easymock.tests2.UsageStrictMockTest.differentMethods":38,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":204,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":214,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":56,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":49,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":473,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":72,"org.easymock.tests2.MockedExceptionTest.testRealException":225,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":433,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":268,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":432,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":159,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":164,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":363,"org.easymock.tests2.NameTest.nameForStrictMock":132,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":196,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":1,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":210,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":266,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":507,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":180,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":142,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":193,"org.easymock.tests2.UsageStrictMockTest.range":37,"org.easymock.tests2.UsageConstraintsTest.lessThan":17,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":512,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":427,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":280,"org.easymock.tests2.CaptureTest.testCaptureRightOne":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":304,"org.easymock.tests2.UsageConstraintsTest.testOr":9,"org.easymock.tests.UsageRangeTest.combination":69,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":207,"org.easymock.tests.UsageTest.wrongArguments":96,"org.easymock.tests2.MockBuilderTest.testWithConstructor":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":301,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":455,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":420,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":63,"org.easymock.tests.UsageVarargTest.varargShortAccepted":450,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":181,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":491,"org.easymock.tests2.UsageConstraintsTest.cmpTo":140,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":319,"org.easymock.tests2.CompareToTest.testLessThan":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":422,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":32,"org.easymock.tests2.CaptureTest.testCaptureFromStub":153,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":354,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":194,"org.easymock.tests.UsageTest.unexpectedCallWithArray":95,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":99,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":489,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":64,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":496,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.samples.ExampleTest.addAndChangeDocument":0,"org.easymock.tests.UsageStrictMockTest.testVerify":498,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":128,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":495,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":395,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":150,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":513,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":170,"org.easymock.tests.LimitationsTest.abstractClass":462,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":57,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":171,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":382,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":508,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":444,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":285}}]

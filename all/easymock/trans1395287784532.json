[{"position":"org.easymock.internal.ReflectionUtils:184","failures":[0,1,2,3,4,5,6,7,8],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[9,10,11,12,13,14,15,16,17,18,19],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[20,21,22,23,24,25],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[0,1,2,3,26,27,6,7,28,8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[29,30],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Invocation:195","failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[32],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[87,0,88,89],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[90,91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[0,1,2,3,26,27,6,7,28,8],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[110,111],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:81","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[112,113,51,52,53,55,57,58,59,62,75,76,77,79,81,82,83,86],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:94","failures":[],"status":0,"binaryOperator":"(\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[114],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:105","failures":[115,116,117,118,119,120,121,122,123,124,112,113,125,126,127,128,92,129,130,131,93,94,132,95,133,134,96,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,97,152,153,154,98,99,155,100,156,157,101,158,159,160,161,162,163,164,165,166,167,168,169,102,170,171,103,104,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,33,34,201,202,203,22,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,23,225,226,105,106,227,228,229,230,231,232,233,234,235,236,237,238,239,107,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,9,316,10,317,318,319,320,321,322,323,11,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,88,343,344,345,48,346,347,49,348,50,349,350,351,352,51,52,53,54,55,56,57,58,59,60,61,62,353,354,66,67,68,69,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,108,109,380,381,382,383,384,385,386,387,388,75,76,77,78,79,80,81,82,83,84,85,86,389,390,12,13,391,392,14,393,15,16,394,17,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,409,410,411,412],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[87,0,88,89],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[413,402],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[414],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[0,415,4,6,416,8],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[147,167,168,192,193,194,195,196,214,23,225,290,291,292,293,294,309,310,311,417,9,316,10,317,318,319,320,321,322,323,11,324,325,326,330,378,389,390,12,13,392,14,393,15,16,394,17,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,410,412],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[400],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"regex"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[418,419],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[419],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[115,116,117,118,119,120,122,123,124,112,113,125,126,127,128,92,129,130,131,93,94,132,95,133,134,96,135,136,137,138,139,140,141,142,144,146,147,148,149,150,151,97,152,153,154,98,99,155,100,156,157,101,158,159,160,161,162,163,164,165,166,167,168,169,102,170,171,103,104,420,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,33,34,201,202,203,22,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,23,225,226,105,106,227,228,247,253,255,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,290,291,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,309,310,311,421,312,313,315,9,316,10,317,318,319,320,321,322,323,11,324,325,326,327,328,329,330,331,422,332,333,334,335,336,337,338,339,340,341,342,88,343,344,345,48,346,347,49,348,50,349,350,351,352,56,57,353,66,67,68,69,355,356,357,358,359,360,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,108,109,380,381,382,383,384,385,386,387,388,80,81,389,390,12,13,392,14,393,15,16,394,17,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,410,412,28],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"genericParameters"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[423,424,425,426,427],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[428,115,116,117,118,119,120,121,122,123,124,112,429,429,430,430,431,432,113,125,126,127,128,92,129,130,131,93,94,132,95,133,134,96,135,136,137,138,139,140,141,142,143,144,145,418,433,434,435,419,146,147,148,149,150,151,97,152,153,154,98,99,155,100,156,157,101,158,159,160,161,162,163,164,165,166,167,168,169,102,170,171,103,104,420,436,437,423,424,425,438,426,439,427,172,173,174,175,176,177,178,179,180,181,182,183,440,441,442,443,444,445,446,447,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,32,200,33,448,34,201,202,203,22,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,23,225,226,105,106,227,228,449,450,451,452,453,229,454,230,231,455,232,233,234,235,236,237,238,239,107,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,456,457,421,458,312,313,314,459,35,315,460,461,462,29,463,417,464,465,36,466,467,37,468,38,9,316,10,317,318,319,320,321,322,323,11,324,325,326,327,328,329,330,331,469,39,40,422,41,470,471,42,472,473,43,44,474,475,476,477,478,45,479,46,47,480,481,482,483,332,333,334,335,336,337,338,339,340,341,342,0,88,89,343,344,345,48,346,347,49,348,50,349,350,351,352,51,52,53,54,55,56,57,58,59,60,61,62,63,64,484,485,353,486,65,354,66,67,68,69,355,356,357,358,359,360,70,487,488,71,489,490,491,30,492,6,72,7,493,73,494,74,495,496,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,108,109,380,381,382,383,384,497,498,385,386,387,388,75,76,77,78,79,80,81,82,83,84,85,86,389,390,12,13,391,392,14,393,15,16,394,17,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,409,410,411,412,28,8,499],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:105","failures":[115,116,117,118,119,120,121,122,123,124,112,113,125,126,127,128,92,129,130,131,93,94,132,95,133,134,96,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,97,152,153,154,98,99,155,100,156,157,101,158,159,160,161,162,163,164,165,166,167,168,169,102,170,171,103,104,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,33,34,201,202,203,22,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,23,225,226,105,106,227,228,229,230,231,232,233,234,235,236,237,238,239,107,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,9,316,10,317,318,319,320,321,322,323,11,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,88,343,344,345,48,346,347,49,348,50,349,350,351,352,51,52,53,54,55,56,57,58,59,60,61,62,353,500,354,66,67,68,69,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,108,109,380,381,382,383,384,385,386,387,388,75,76,77,78,79,80,81,82,83,84,85,86,389,390,12,13,391,392,14,393,15,16,394,17,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,409,410,411,412],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[428,115,116,117,118,120,122,124,429,429,430,430,125,126,127,128,92,129,130,131,93,94,132,95,133,134,96,135,136,137,138,139,140,141,142,144,433,435,147,148,149,150,151,97,152,153,154,98,99,155,100,156,157,101,158,159,160,161,162,163,164,165,166,167,168,169,102,170,171,103,104,420,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,205,206,207,208,209,210,211,212,213,214,215,216,218,219,221,223,224,225,226,105,106,227,452,453,454,247,253,257,258,260,263,264,265,266,267,268,269,270,271,290,291,292,293,294,295,296,297,298,299,300,302,303,305,306,307,308,309,310,311,421,312,313,459,35,315,460,461,462,417,466,467,37,9,316,10,317,318,319,320,321,322,323,11,324,325,326,327,328,329,330,331,422,471,478,481,332,333,334,335,336,337,338,339,340,341,342,0,88,343,344,345,48,346,347,49,348,50,349,350,351,56,63,64,484,485,353,486,65,355,356,357,358,359,360,488,491,492,72,73,363,364,365,367,368,369,370,371,372,373,374,375,376,377,378,379,108,109,380,385,386,387,388,80,389,390,12,13,392,14,393,15,16,394,395,396,397,398,399,400,401,402,403,18,404,405,406,114,19,407,408,410,412,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"control"}},{"transplant":{"position":"org.easymock.internal.Results:56","sourceCode":"if (int > int) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"currentPosition":"i","callCount":"i"}},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[20,21,501,203,22,204,207,208,23,24,502,25,503,365,366,372,373],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[147,148,20,504,21,505,506,501,507,192,197,198,199,203,22,204,205,207,208,210,217,218,219,220,221,222,224,23,225,105,106,227,228,305,312,313,459,35,315,467,37,333,345,49,349,508,24,509,510,511,512,502,513,25,514,503,355,364,365,366,368,372,373,376,378,379,108,109,380,381,13,402],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[468,329],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":202,"org.easymock.tests2.UsageTest.argumentsOrdered":373,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":350,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":241,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":368,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":113,"org.easymock.tests2.DelegateToTest.testReturnException":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":211,"org.easymock.tests.MockingTest.testPartialClassMocking":452,"org.easymock.tests.MockClassControlTest.testToString":442,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":354,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":144,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":43,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":471,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":125,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":386,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":1,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":394,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":192,"org.easymock.tests2.UsageTest.wrongArguments":366,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":174,"org.easymock.samples.ExampleTest.answerVsDelegate":116,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":448,"org.easymock.tests2.UsageConstraintsTest.testNull":14,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":231,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":460,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":447,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":349,"org.easymock.tests2.CaptureTest.testPrimitive":317,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":196,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":139,"org.easymock.tests.UsageTest.moreThanOneArgument":203,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":315,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":269,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":102,"org.easymock.tests.UsageTest.argumentsOrdered":208,"org.easymock.tests.UsageVarargTest.varargIntAccepted":300,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":514,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":246,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":290,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":5,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":70,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":85,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":234,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":294,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":511,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":56,"org.easymock.tests.ReplayStateInvalidUsageTest.times":286,"org.easymock.tests2.DependencyTest.testClassMocking":497,"org.easymock.tests2.AnswerTest.answer":337,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":248,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":384,"org.easymock.tests2.CaptureTest.testAnd":9,"org.easymock.tests2.UsageTest.strictResetToDefault":364,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":489,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":268,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":165,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":346,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":104,"org.easymock.tests2.DelegateToTest.testDelegate":360,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":135,"org.easymock.tests.LimitationsTest.mockFinalMethod":458,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":214,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":180,"org.easymock.tests2.DependencyTest.testClassMockingSupport":498,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":312,"org.easymock.tests2.CaptureTest.testCapture1_2446744":318,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":463,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":134,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":382,"org.easymock.tests.UsageThrowableTest.throwError":184,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":280,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":33,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":31,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":483,"org.easymock.samples.PartialClassMockTest.testGetArea":428,"org.easymock.tests.MockingTest.testInterfaceMocking":229,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":291,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":141,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":44,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":277,"org.easymock.tests2.UsageTest.niceToStrict":367,"org.easymock.tests2.ThreadingTest.testChangeDefault":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":232,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":491,"org.easymock.tests2.MockBuilderTest.testCreateMock":493,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":46,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":59,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":24,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":94,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":347,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":297,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":172,"org.easymock.tests.UsageOverloadedMethodTest.overloading":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":477,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":399,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":100,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":264,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":398,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":323,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":301,"org.easymock.tests.MockClassControlTest.testEquals":446,"org.easymock.tests2.EasyMockSupportClassTest.testAll":422,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":434,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":502,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":178,"org.easymock.tests2.CaptureTest.testCaptureAll":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":383,"org.easymock.tests.MockNameTest.defaultName":146,"org.easymock.tests2.UsageConstraintsTest.testMatches":400,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":270,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":278,"org.easymock.samples.ExampleTest.voteForRemovals":120,"org.easymock.tests.UsageVarargTest.allKinds":309,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":197,"org.easymock.samples.BasicClassMockTest.testPrintContent":432,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":179,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":190,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":376,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":82,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":215,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":359,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":439,"org.easymock.tests2.UsageConstraintsTest.greaterThan":402,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":41,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":164,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":37,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":427,"org.easymock.samples.ExampleTest.voteForRemoval":117,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":468,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":328,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":34,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":29,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":420,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":363,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":7,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":239,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":345,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":210,"org.easymock.tests2.CaptureTest.testCaptureFirst":326,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":238,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":48,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":375,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":154,"org.easymock.tests2.CaptureTest.testCapture2_2446744":325,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":330,"org.easymock.tests2.UsageTest.moreThanOneArgument":365,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":249,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":308,"org.easymock.tests.GenericTest.testBridgedEquals":419,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":262,"org.easymock.tests.UsageExpectAndReturnTest.longType":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":176,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":343,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":138,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":406,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":169,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":136,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":182,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":267,"org.easymock.tests.UsageCallCountTest.tooManyCalls":263,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":504,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":47,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":98,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":61,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":129,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":189,"org.easymock.tests.MockingTest.testNiceClassMocking":455,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":64,"org.easymock.tests.MockingTest.testClassMocking":450,"org.easymock.tests2.UsageConstraintsTest.testContains":397,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":256,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":335,"org.easymock.tests2.UsageConstraintsTest.testFind":392,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":266,"org.easymock.tests.MockTypeTest.fromEasyMockClass":200,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":412,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":223,"org.easymock.tests.UsageExpectAndReturnTest.object":155,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":417,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":60,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":414,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":2,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":303,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":275,"org.easymock.tests.UsageTest.exactCallCountByLastCall":209,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":237,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":170,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":143,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":501,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":8,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":159,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":298,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":218,"org.easymock.tests.MockClassControlTest.testHashCode":445,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":76,"org.easymock.tests2.EasyMockSupportTest.testVerify":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":475,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":510,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":171,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":216,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":296,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":381,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":409,"org.easymock.tests.UsageVarargTest.varargCharAccepted":302,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":436,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":254,"org.easymock.tests2.UsageTest.openCallCountByLastCall":369,"org.easymock.tests.DefaultClassInstantiatorTest.object":437,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":351,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":295,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":273,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":507,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":476,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":131,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":187,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":54,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":75,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":466,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":444,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":130,"org.easymock.tests.CapturesMatcherTest.test":110,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":160,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":181,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":481,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":443,"org.easymock.tests2.UsageTest.resumeIfFailure":374,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":32,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":213,"org.easymock.tests2.StubTest.stubWithReturnValue":388,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":6,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":114,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":99,"org.easymock.tests2.SerializationTest.testAllMockedMethod":89,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":247,"org.easymock.samples.SupportTest.voteForRemovals":124,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":25,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":418,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":78,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":133,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":87,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":253,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":338,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":145,"org.easymock.tests.UsageExpectAndThrowTest.object":132,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":404,"org.easymock.tests2.DelegateToTest.testWrongClass":358,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":310,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":311,"org.easymock.samples.ConstructorCalledMockTest.testTax":429,"org.easymock.tests.UsageStrictMockTest.range":105,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":361,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":348,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":63,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":95,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":492,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":469,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":207,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":173,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":20,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":142,"org.easymock.tests2.CaptureTest.testCaptureNone":322,"org.easymock.tests.UsageUnorderedTest.message":147,"org.easymock.tests.UsageVerifyTest.twoReturns":199,"org.easymock.tests.UsageVarargTest.varargByteAccepted":307,"org.easymock.tests2.ThreadingTest.testThreadSafe":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":45,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":260,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":431,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":276,"org.easymock.tests2.CaptureTest.testCapture_2617107":10,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":503,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":314,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":251,"org.easymock.tests2.UsageConstraintsTest.any":395,"org.easymock.tests2.StubTest.stub":387,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":285,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":183,"org.easymock.tests.UsageExpectAndThrowTest.longType":128,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":212,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":252,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":438,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":284,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":379,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":80,"org.easymock.tests.LimitationsTest.mockNativeMethod":421,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":435,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":162,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":53,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":380,"org.easymock.tests2.NameTest.nameForMocksControl":69,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":55,"org.easymock.tests2.MockedExceptionTest.testMockedException":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":470,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":206,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":454,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":411,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":92,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":459,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":72,"org.easymock.tests.MockingTest.testNicePartialClassMocking":453,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":462,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":415,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":51,"org.easymock.tests2.CaptureTest.testCaptureLast":321,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":313,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":16,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":65,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":405,"org.easymock.tests.MockingTest.testTwoMocks":451,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":500,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":93,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":372,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":407,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":90,"org.easymock.samples.ExampleTest.removeNonExistingDocument":121,"org.easymock.tests.UsageStrictMockTest.differentMethods":106,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":58,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":282,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":77,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":424,"org.easymock.tests2.ConstraintsToStringTest.andToString":513,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":329,"org.easymock.tests2.MockBuilderTest.testCreateMockString":74,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":440,"org.easymock.tests.UsageExpectAndThrowTest.floatType":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":42,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":40,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":340,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":499,"org.easymock.tests.UsageVerifyTest.twoThrows":198,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":478,"org.easymock.samples.ExampleTest.voteAgainstRemoval":118,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":140,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":242,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":467,"org.easymock.tests.LimitationsTest.privateConstructor":457,"org.easymock.tests2.UsageConstraintsTest.testNotNull":19,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":191,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":333,"org.easymock.tests2.UsageTest.defaultResetToNice":371,"org.easymock.samples.ExampleTest.voteAgainstRemovals":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":243,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":52,"org.easymock.tests.UsageVarargTest.differentLength":304,"org.easymock.tests2.CallbackTest.callback":332,"org.easymock.tests2.UsageConstraintsTest.equals":391,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":505,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":464,"org.easymock.tests.UsageTest.openCallCountByLastCall":205,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":389,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":194,"org.easymock.tests.UsageCallCountTest.tooFewCalls":258,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":485,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":175,"org.easymock.tests.UsageThrowableTest.throwCheckedException":188,"org.easymock.tests.MockingTest.testStrictClassMocking":449,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":21,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":486,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":168,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":484,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":57,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":287,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":353,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":342,"org.easymock.tests.ObjectMethodsTest.testHashCode":274,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":4,"org.easymock.tests2.NameTest.nameForNiceMock":68,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":331,"org.easymock.tests2.DependencyTest.testInterfaceMocking":385,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":3,"org.easymock.samples.ExampleTest.addDocument":119,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":482,"org.easymock.tests2.DelegateToTest.testStubDelegate":357,"org.easymock.tests2.AnswerTest.stubAnswer":341,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":225,"org.easymock.tests.UsageVarargTest.varargLongAccepted":306,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":240,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":161,"org.easymock.tests.UsageExpectAndReturnTest.floatType":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":28,"org.easymock.tests2.ConstraintsToStringTest.orToString":508,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":430,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":403,"org.easymock.tests.UsageThrowableTest.noUpperLimit":185,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":84,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":220,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":390,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":495,"org.easymock.tests2.SerializationTest.test":88,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":319,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":423,"org.easymock.tests2.UsageConstraintsTest.testSame":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":149,"org.easymock.samples.SupportTest.addDocument":123,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":472,"org.easymock.tests.GenericTest.testPackageScope":433,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":103,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":236,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":83,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":230,"org.easymock.tests2.NameTest.nameForMock":66,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":156,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":494,"org.easymock.tests2.UsageStrictMockTest.differentMethods":109,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":465,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":97,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":96,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":272,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":166,"org.easymock.tests2.MockedExceptionTest.testRealException":336,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":245,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":362,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":506,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":416,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":244,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":378,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":193,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":289,"org.easymock.tests2.NameTest.nameForStrictMock":67,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":490,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":410,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":461,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":496,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":425,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":18,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":488,"org.easymock.tests2.UsageStrictMockTest.range":108,"org.easymock.tests2.UsageConstraintsTest.lessThan":408,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":107,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":26,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":474,"org.easymock.tests2.CaptureTest.testCaptureRightOne":11,"org.easymock.tests2.UsageConstraintsTest.testOr":15,"org.easymock.tests.UsageRangeTest.combination":163,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":35,"org.easymock.tests.UsageTest.wrongArguments":204,"org.easymock.tests2.MockBuilderTest.testWithConstructor":487,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":473,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":441,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":152,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":233,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":426,"org.easymock.tests.UsageVarargTest.varargShortAccepted":305,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":261,"org.easymock.tests2.UsageConstraintsTest.cmpTo":396,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":235,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":370,"org.easymock.tests2.CaptureTest.testCaptureFromStub":324,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":279,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":71,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":23,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":259,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":101,"org.easymock.tests2.CaptureTest.testCapture":111,"org.easymock.tests2.UsageConstraintsTest.constraints":12,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.samples.ExampleTest.addAndChangeDocument":122,"org.easymock.tests2.ConstraintsToStringTest.notToString":509,"org.easymock.tests.UsageStrictMockTest.testVerify":228,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":112,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":224,"org.easymock.tests2.CompareToTest.testGreateThan":413,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":177,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":292,"org.easymock.tests.LimitationsTest.abstractClass":456,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":153,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":221,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":293,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":49,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":299}}]

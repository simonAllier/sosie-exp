[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,109,110,110,111],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"m":"result","methodName":"name"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[40,112,41],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[113,114,115,116,117,97,109,110],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[118,119],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[4,5,6,120,26,121,38,42,43,44,45,122,46,47,50,53,55,56,59,123,68,71,81,87,90,124,92,94,111],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:113","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[125],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:274","failures":[126,127,128,129,130,131,132,133,134],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return this.boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matching"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:159","failures":[157,114,158,115,97,109,110],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[160,161,162,163],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[164,165,166,3,4,5,6,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,8,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,120,217,218,219,220,221,222,223,224,16,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,18,19,20,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,26,299,300,301,302,303,304,305,306,307,28,29,30,31,32,33,34,35,308,126,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,121,338,339,340,38,127,341,342,343,344,345,346,347,348,40,112,41,349,350,351,352,353,354,355,356,357,161,358,359,360,361,362,162,363,364,365,366,367,368,369,370,371,372,373,163,374,375,376,377,378,379,380,381,382,383,384,385,386,42,43,44,45,122,46,47,387,388,389,390,48,50,53,54,55,56,58,59,61,62,63,64,391,392,128,129,393,394,395,396,397,398,399,400,401,402,403,404,405,130,406,407,131,132,133,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,125,425,426,427,428,429,123,430,68,71,81,87,90,91,124,92,93,94,95,96,99,100,101,102,431,432,433,434,107,108,435,109,109,110,110,111,436,134,437,438,439,440,441,442,443],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[410,99,104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[9,13],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[164,165,166,4,5,6,172,173,174,175,176,177,178,179,180,8,183,184,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,205,206,207,208,209,210,211,212,213,214,215,216,120,217,218,219,220,221,222,223,224,16,225,226,227,228,229,230,231,232,233,234,235,236,237,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,18,19,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,26,299,300,301,302,303,304,28,29,30,31,32,33,34,35,126,310,311,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,337,121,338,340,38,127,341,342,343,344,345,346,347,348,40,112,41,349,350,351,352,353,354,355,356,357,161,359,360,361,362,162,363,364,365,366,367,368,369,370,371,372,373,163,374,375,376,377,378,379,380,381,382,383,384,385,386,42,43,44,45,122,46,47,387,388,389,390,48,50,53,54,55,56,58,59,61,62,63,64,391,128,129,393,394,395,396,397,398,399,400,401,402,403,404,405,130,131,132,133,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,125,425,426,427,428,429,123,430,68,71,81,87,90,91,124,92,93,94,95,96,99,100,101,102,431,432,433,434,107,108,435,109,110,111,436,134,437,438,439,440,441,442,443],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[165,166,172,188,194,207,209,211,212,213,263,265,266,269,270,271,278,279,280,127,342,345,346,347,351,364,375,379,380,383,50,58,59,61,393,396,397,398,402,403,404,405,429,91,100,102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1688","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"invocation":"invocation","this":"this"}},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[164,165,166,172,188,194,204,444,15,207,209,210,211,212,213,214,445,241,242,263,264,265,266,269,270,271,272,274,275,278,279,280,446,23,447,30,31,32,309,312,313,314,335,127,341,342,344,345,346,347,348,351,364,375,379,383,44,46,50,55,58,393,395,396,397,398,402,403,404,405,91,102],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[114,115,116,97,109,110],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[413,424],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[448,449,209,265,450,451],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MocksControl:189","failures":[165,166,176,177,178,179,180,188,207,209,211,212,213,263,265,266,269,270,271,281,282,283,284,335,341,342,345,346,347,351,376,378,379,381,382,387,388,389,390,48,54,55,56,59,61,393,396,397,398,401,402,403,405,95,99],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[99],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[164,165,166,1,2,3,4,5,452,6,453,454,7,167,168,169,170,171,172,173,174,175,176,177,178,179,180,455,456,457,458,459,460,0,461,462,463,464,465,466,467,468,469,181,470,471,472,473,474,182,475,476,8,9,10,11,12,13,477,14,183,184,185,186,187,188,189,190,191,478,192,193,194,195,196,197,198,199,479,200,201,202,203,480,204,205,206,444,15,207,208,209,210,211,212,213,214,215,216,120,217,218,219,220,221,222,223,224,16,225,226,227,228,229,230,231,232,233,234,235,236,237,445,238,239,240,241,242,481,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,17,18,19,20,21,22,482,483,446,484,23,485,447,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,24,25,26,27,299,300,301,302,303,304,305,306,307,28,29,30,31,32,33,34,35,486,308,487,126,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,488,489,490,491,492,335,493,494,495,496,497,498,336,337,121,338,339,340,38,39,499,127,500,501,502,503,504,341,505,506,507,508,509,510,342,343,344,345,346,347,348,40,112,41,349,350,351,352,511,353,354,355,356,357,161,358,359,360,361,362,162,363,364,365,366,367,368,369,370,371,372,373,163,374,375,376,377,378,379,380,381,382,383,384,385,386,42,43,44,45,512,122,46,47,513,387,388,389,390,48,157,50,51,514,52,53,54,55,515,56,113,57,58,59,115,61,62,63,64,391,392,128,516,129,393,394,395,396,397,398,399,400,401,402,403,404,405,130,406,407,131,132,133,517,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,125,425,426,427,428,429,123,430,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,124,92,93,94,95,518,96,97,98,99,100,101,102,103,104,519,520,431,432,105,521,522,523,106,524,525,433,434,107,108,435,109,110,111,436,134,437,438,439,440,441,442,443],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[241,242,309,312],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[17,21],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Any:36","sourceCode":"return true","type":"CtReturnImpl"},"failures":[183,184,188,210,216,120,217,218,219,233,234,235,236,237,297,298,303,344,356,359,413,419,420,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[367,368],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[157,114,158,115,97,109,110],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[526,40,112,41],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[362],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:107","sourceCode":"java.io.ObjectInputStream.defaultReadObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[40,112,41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream"}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[526,40,112,41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"argType":"primitiveType","paramType":"primitiveType"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"failures":[290,486,487,123],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[526,40,112,41],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":352,"org.easymock.tests2.UsageTest.argumentsOrdered":403,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":263,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":384,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":464,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":398,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":435,"org.easymock.tests2.DelegateToTest.testReturnException":337,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":300,"org.easymock.tests.MockingTest.testPartialClassMocking":4,"org.easymock.tests.MockClassControlTest.testToString":30,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":517,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":75,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":243,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":432,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":156,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":161,"org.easymock.tests2.UsageTest.wrongArguments":396,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":233,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":510,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":283,"org.easymock.samples.ExampleTest.answerVsDelegate":134,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":23,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":454,"org.easymock.tests2.UsageConstraintsTest.testNull":354,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":92,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":35,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":383,"org.easymock.tests2.CaptureTest.testPrimitive":415,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":237,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":262,"org.easymock.tests.UsageTest.moreThanOneArgument":264,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":124,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":222,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":167,"org.easymock.tests.UsageTest.argumentsOrdered":270,"org.easymock.tests.UsageVarargTest.varargIntAccepted":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":469,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":216,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":48,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":522,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":497,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":457,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":219,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":140,"org.easymock.tests.ReplayStateInvalidUsageTest.times":293,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":341,"org.easymock.tests2.DependencyTest.testClassMocking":519,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":117,"org.easymock.tests2.AnswerTest.answer":130,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":470,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":390,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":483,"org.easymock.tests2.CaptureTest.testAnd":412,"org.easymock.tests2.UsageTest.strictResetToDefault":394,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":514,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":99,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":221,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":174,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":378,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":171,"org.easymock.tests2.DelegateToTest.testDelegate":340,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":139,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":258,"org.easymock.tests.LimitationsTest.mockFinalMethod":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":180,"org.easymock.tests2.DependencyTest.testClassMockingSupport":520,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":241,"org.easymock.tests2.CaptureTest.testCapture1_2446744":416,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":518,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":388,"org.easymock.tests.UsageThrowableTest.throwError":225,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":287,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":484,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":498,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":479,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":224,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":89,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":143,"org.easymock.samples.PartialClassMockTest.testGetArea":111,"org.easymock.tests.MockingTest.testInterfaceMocking":452,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":288,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":186,"org.easymock.tests2.UsageTest.niceToStrict":397,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":15,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":76,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":244,"org.easymock.tests2.ThreadingTest.testChangeDefault":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":455,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":53,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":84,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":507,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":450,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":252,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":379,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":482,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":307,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":272,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":281,"org.easymock.tests.UsageOverloadedMethodTest.overloading":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":86,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":162,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":311,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":200,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":326,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":362,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":421,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":478,"org.easymock.tests.MockClassControlTest.testEquals":34,"org.easymock.tests2.EasyMockSupportClassTest.testAll":68,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":19,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":260,"org.easymock.tests2.CaptureTest.testCaptureAll":413,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":389,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":178,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":158,"org.easymock.tests.MockNameTest.defaultName":445,"org.easymock.tests2.UsageConstraintsTest.testMatches":363,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":223,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":285,"org.easymock.samples.ExampleTest.voteForRemovals":440,"org.easymock.tests.UsageVarargTest.allKinds":199,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":164,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":179,"org.easymock.samples.BasicClassMockTest.testPrintContent":108,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":231,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":342,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":494,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":304,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":339,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":477,"org.easymock.tests2.UsageConstraintsTest.greaterThan":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":69,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":173,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":102,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":144,"org.easymock.samples.ExampleTest.voteForRemoval":437,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":14,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":428,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":103,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":485,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":523,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":95,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":136,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":393,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":16,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":376,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":66,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":299,"org.easymock.tests2.CaptureTest.testCaptureFirst":125,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":0,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":377,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":405,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":314,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":322,"org.easymock.tests2.CaptureTest.testCapture2_2446744":424,"org.easymock.tests2.UsageTest.moreThanOneArgument":395,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":471,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":198,"org.easymock.tests.GenericTest.testBridgedEquals":21,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":159,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":279,"org.easymock.tests.UsageExpectAndReturnTest.longType":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":176,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":374,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":60,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":261,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":203,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":370,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":259,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":220,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":239,"org.easymock.tests.UsageCallCountTest.tooManyCalls":280,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":85,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":323,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":509,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":230,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":43,"org.easymock.tests.MockingTest.testNiceClassMocking":7,"org.easymock.tests.MockingTest.testClassMocking":2,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":49,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":273,"org.easymock.tests2.UsageConstraintsTest.testContains":361,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":64,"org.easymock.tests2.UsageConstraintsTest.testFind":353,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":202,"org.easymock.tests.MockTypeTest.fromEasyMockClass":446,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":129,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":207,"org.easymock.tests.UsageExpectAndReturnTest.object":325,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":96,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":382,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":193,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":206,"org.easymock.tests.UsageTest.exactCallCountByLastCall":271,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":460,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":486,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":168,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":39,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":189,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":331,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":310,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":489,"org.easymock.tests.MockClassControlTest.testHashCode":33,"org.easymock.tests2.EasyMockSupportTest.testVerify":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":78,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":169,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":126,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":306,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":387,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":392,"org.easymock.tests.UsageVarargTest.varargCharAccepted":192,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":476,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":475,"org.easymock.tests2.UsageTest.openCallCountByLastCall":399,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":385,"org.easymock.tests.DefaultClassInstantiatorTest.object":8,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":305,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":79,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":228,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":503,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":488,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":142,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":100,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":32,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":249,"org.easymock.tests.ReplayStateInvalidCallsTest.times":148,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":332,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":238,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":149,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":87,"org.easymock.tests2.UsageTest.resumeIfFailure":404,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":521,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":302,"org.easymock.tests2.StubTest.stubWithReturnValue":426,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":515,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":324,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":371,"org.easymock.tests2.SerializationTest.testAllMockedMethod":41,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":181,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":451,"org.easymock.samples.SupportTest.voteForRemovals":434,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":17,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":255,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":526,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":182,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":406,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":487,"org.easymock.tests.UsageExpectAndThrowTest.object":253,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":368,"org.easymock.tests2.DelegateToTest.testWrongClass":338,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":297,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":298,"org.easymock.samples.ConstructorCalledMockTest.testTax":109,"org.easymock.tests.UsageStrictMockTest.range":212,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":524,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":381,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":42,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":254,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":65,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":295,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":282,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":448,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":138,"org.easymock.tests2.CaptureTest.testCaptureNone":420,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":187,"org.easymock.tests.UsageUnorderedTest.message":188,"org.easymock.tests.UsageVerifyTest.twoReturns":166,"org.easymock.tests.UsageVarargTest.varargByteAccepted":197,"org.easymock.tests2.ThreadingTest.testThreadSafe":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":82,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":277,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":444,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":107,"org.easymock.tests2.CaptureTest.testCapture_2617107":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":473,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":236,"org.easymock.tests2.UsageConstraintsTest.any":359,"org.easymock.tests2.StubTest.stub":425,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":474,"org.easymock.tests.UsageExpectAndThrowTest.longType":246,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":301,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":12,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":291,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":345,"org.easymock.tests2.SerializationTest.testClass":40,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":335,"org.easymock.tests.LimitationsTest.mockNativeMethod":26,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":20,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":334,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":502,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":154,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":348,"org.easymock.tests2.NameTest.nameForMocksControl":411,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":504,"org.easymock.tests2.MockedExceptionTest.testMockedException":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":70,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":268,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":516,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":6,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":247,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":90,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":56,"org.easymock.tests.MockingTest.testNicePartialClassMocking":5,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":94,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":500,"org.easymock.tests2.CaptureTest.testCaptureLast":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":242,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":153,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":47,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":357,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":369,"org.easymock.tests.MockingTest.testTwoMocks":3,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":150,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":513,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":315,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":251,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":402,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":373,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":118,"org.easymock.samples.ExampleTest.removeNonExistingDocument":441,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":506,"org.easymock.tests.UsageStrictMockTest.differentMethods":213,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":289,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":490,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":10,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":429,"org.easymock.tests2.MockBuilderTest.testCreateMockString":61,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":72,"org.easymock.tests.UsageExpectAndThrowTest.floatType":245,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":67,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":499,"org.easymock.tests.UsageVerifyTest.twoThrows":165,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":81,"org.easymock.samples.ExampleTest.voteAgainstRemoval":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":465,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":101,"org.easymock.tests.LimitationsTest.privateConstructor":25,"org.easymock.tests2.UsageConstraintsTest.testNotNull":372,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":62,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":232,"org.easymock.tests2.UsageTest.defaultResetToNice":401,"org.easymock.samples.ExampleTest.voteAgainstRemovals":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":330,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":501,"org.easymock.tests.UsageVarargTest.differentLength":194,"org.easymock.tests2.CallbackTest.callback":127,"org.easymock.tests2.UsageConstraintsTest.equals":511,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":97,"org.easymock.tests.UsageTest.openCallCountByLastCall":267,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":349,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":235,"org.easymock.tests.UsageCallCountTest.tooFewCalls":275,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":45,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":284,"org.easymock.tests.UsageThrowableTest.throwCheckedException":229,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":449,"org.easymock.tests.MockingTest.testStrictClassMocking":1,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":184,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":505,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":44,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":294,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":122,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":133,"org.easymock.tests2.CompareToTest.testGreateOrEqual":160,"org.easymock.tests.ObjectMethodsTest.testHashCode":205,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":430,"org.easymock.tests2.NameTest.nameForNiceMock":410,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":152,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":147,"org.easymock.tests2.DependencyTest.testInterfaceMocking":431,"org.easymock.samples.ExampleTest.addDocument":439,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":83,"org.easymock.tests2.DelegateToTest.testStubDelegate":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":88,"org.easymock.tests2.AnswerTest.stubAnswer":132,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":210,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":113,"org.easymock.tests.UsageVarargTest.varargLongAccepted":196,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":463,"org.easymock.tests.UsageExpectAndReturnTest.floatType":317,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":333,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":38,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":110,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":496,"org.easymock.tests.UsageThrowableTest.noUpperLimit":226,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":312,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":366,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":350,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":105,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":417,"org.easymock.tests2.SerializationTest.test":112,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":9,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":316,"org.easymock.tests2.UsageConstraintsTest.testSame":355,"org.easymock.samples.SupportTest.addDocument":433,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":512,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":137,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":73,"org.easymock.tests.GenericTest.testPackageScope":18,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":495,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":453,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":135,"org.easymock.tests2.NameTest.nameForMock":408,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":327,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":115,"org.easymock.tests2.UsageStrictMockTest.differentMethods":347,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":98,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":319,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":257,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":480,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":175,"org.easymock.tests2.MockedExceptionTest.testRealException":391,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":447,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":525,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":467,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":344,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":234,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":296,"org.easymock.tests2.NameTest.nameForStrictMock":409,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":52,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":128,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":93,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":106,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":11,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":367,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":50,"org.easymock.tests2.UsageStrictMockTest.range":346,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":141,"org.easymock.tests2.UsageConstraintsTest.lessThan":163,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":36,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":462,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":375,"org.easymock.tests2.CaptureTest.testCaptureRightOne":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":77,"org.easymock.tests2.UsageConstraintsTest.testOr":356,"org.easymock.tests.UsageRangeTest.combination":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":91,"org.easymock.tests.UsageTest.wrongArguments":266,"org.easymock.tests2.MockBuilderTest.testWithConstructor":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":74,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":29,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":328,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":13,"org.easymock.tests.UsageVarargTest.varargShortAccepted":195,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":278,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":155,"org.easymock.tests2.UsageConstraintsTest.cmpTo":360,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":407,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":458,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":400,"org.easymock.tests2.CaptureTest.testCaptureFromStub":423,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":286,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":51,"org.easymock.tests.UsageTest.unexpectedCallWithArray":265,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":151,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":209,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":276,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":114,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":329,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":211,"org.easymock.tests2.UsageConstraintsTest.constraints":351,"org.easymock.samples.ExampleTest.addAndChangeDocument":442,"org.easymock.tests.UsageStrictMockTest.testVerify":215,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":443,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":208,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":177,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":418,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":37,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":217,"org.easymock.tests.LimitationsTest.abstractClass":24,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":218,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":313,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":380}}]

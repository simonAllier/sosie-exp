[{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1790","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[54,55,56,57,58,59,6,60,61,62,63,64,65,66,67,68,69,70,71,72,15,16,73,17,74,75,20,21,23,76,25,26,27,77,78,79,34,80,36,81,82,37,38,39,83,84,43,46,85,47,48,49,86,50,51,87],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"constructor","clazz":"toMock"}},{"position":"org.easymock.internal.RecordState:126","failures":[88,89,90,91,92],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[88,89,90,91,92],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[94,95,96,97,72,98,99,100,101,77,102,103,1,2,3,4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[104,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[62,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:223","failures":[94,107,108,109,110,111],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[112],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[113,114,115,116,117,118,119,120,121,122],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:133","sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","type":"CtIfImpl"},"failures":[123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[6,124,125,126,127,128,129,130,131,132,133,134,73,17,20,21,76,26,27,135,136,137,138,139,140,33,80,35,36,37,38,141,142,43,143,144,145,146,46,85,48,49,86,50,51],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[122,147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"finalizeMethod"}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[17,20,21,26,33,35,36,37,38,43,146,46,48,50,51],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[149,150,151,152,7,153,154,155,9,156,10,122,109,29,157,158,159,160],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.RecordState:163","failures":[62,106],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[161,88,162,163,164,165,166,167,168,169,170,149,171,172,173,174,175,176,177,96,178,179,180,181,5,182,183,58,184,185,186,187,59,188,189,190,191,192,6,193,194,195,196,197,198,199,60,200,201,202,203,113,61,204,62,106,153,154,155,89,63,90,91,205,64,65,206,66,67,68,69,70,207,208,209,71,122,147,148,72,210,11,211,212,213,12,13,214,14,215,216,217,15,218,16,219,73,17,18,19,74,75,20,21,23,220,221,222,223,224,225,226,227,76,25,26,27,228,229,28,230,231,232,233,234,157,235,236,111,237,238,77,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,78,300,301,79,302,303,304,305,306,34,80,36,81,82,37,38,39,307,308,309,310,311,41,42,312,83,313,314,84,43,44,315,92,316,317,46,85,47,48,49,318,86,50,51,319,320,321,322,87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.EasyMock:1519","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[76,26,27,28,231,233,323,30,35,46,85,48,49,324],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"toMock"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"failures":[325],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1569","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[326,326,327,327,113,114,328,329,330,120,121,331,122,332],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[141],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[161,88,162,163,164,165,166,167,168,169,170,149,171,172,326,326,327,327,173,174,175,176,177,54,55,56,57,94,95,96,97,178,179,180,181,5,182,183,58,184,185,186,187,59,188,189,190,191,192,6,193,194,195,196,197,198,199,60,200,201,202,203,113,333,334,335,336,61,337,338,204,62,106,107,7,153,108,154,155,8,9,10,339,89,63,90,340,91,205,64,65,206,66,67,68,69,70,207,208,341,209,71,122,147,148,342,72,210,11,211,212,213,12,13,343,214,14,215,216,217,15,218,16,219,73,17,18,19,74,75,344,20,21,22,23,220,221,222,223,224,225,226,24,227,76,25,26,27,228,229,28,230,231,232,233,109,234,323,29,157,30,235,236,111,237,238,98,99,100,101,77,102,239,103,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,345,260,261,262,263,264,346,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,347,348,349,350,351,352,353,354,355,356,291,292,293,294,295,31,296,297,298,299,78,300,301,79,302,303,304,305,306,357,358,359,360,361,362,363,364,1,2,3,365,366,367,368,34,80,35,36,81,82,37,38,39,307,369,308,309,310,311,40,41,42,312,83,313,314,84,141,142,43,370,371,372,373,44,374,375,376,315,143,92,316,144,145,146,377,45,317,46,85,47,48,49,318,324,86,50,51,319,320,321,322,87,378,379],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[26,27,35,46,48,49],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[122,147,148,380],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"failures":[182,58,185,186,195,60,64,69,70,71,78],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[381],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[382,383,384,385,386,387],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[333,334,335,336,107,108,154,155,9,11,211,213,12,13,343,214,14,15,218,18,344,388,24,26,27,109,323,235,389,261,262,390,391,392,360,361,362,363,364,159,393,394,395,396,160,397,398,365,366,367,368,44,45,48,49],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[161,88,162,163,164,165,399,166,167,168,169,170,149,171,172,326,326,327,327,173,174,175,176,177,54,55,56,57,94,95,96,97,178,179,180,181,5,182,183,58,184,185,186,187,59,188,189,190,191,192,6,193,194,195,196,197,198,199,60,200,201,202,203,113,400,333,334,335,336,61,204,62,106,107,7,153,108,154,155,8,9,10,89,63,90,91,205,64,65,206,66,67,68,69,70,207,208,341,209,71,122,147,148,342,72,210,11,211,212,213,12,13,343,214,14,215,216,217,15,218,16,219,73,17,18,19,74,75,344,20,21,22,23,220,221,222,223,224,225,226,24,227,76,25,26,27,228,229,28,230,231,232,233,109,234,323,29,157,30,235,236,111,237,238,98,99,100,101,77,102,239,103,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,347,348,349,350,351,401,402,403,404,405,406,407,408,409,410,0,411,291,292,293,294,295,31,296,297,298,299,78,300,301,79,302,303,304,305,306,412,158,413,414,415,416,417,418,360,361,362,363,364,365,366,367,368,34,80,35,36,81,82,37,38,39,419,420,421,382,307,369,422,308,309,310,311,40,41,42,312,83,313,314,84,142,43,44,374,375,376,315,143,92,316,145,146,45,317,46,85,47,48,49,318,324,86,50,51,319,320,321,322,87],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[125,132,135,137,35,46],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":182,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":34,"org.easymock.tests2.UsageTest.argumentsOrdered":21,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":215,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":19,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":167,"org.easymock.tests2.DelegateToTest.testReturnException":89,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":99,"org.easymock.tests.MockingTest.testPartialClassMocking":260,"org.easymock.tests.MockClassControlTest.testToString":413,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":373,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":110,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":240,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":115,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":187,"org.easymock.tests2.UsageTest.wrongArguments":17,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":312,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":367,"org.easymock.samples.ExampleTest.answerVsDelegate":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":160,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":391,"org.easymock.tests2.UsageConstraintsTest.testNull":58,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":231,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":418,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":14,"org.easymock.tests2.CaptureTest.testPrimitive":206,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":84,"org.easymock.tests.UsageTest.moreThanOneArgument":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":259,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":230,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":349,"org.easymock.tests.UsageTest.argumentsOrdered":38,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":352,"org.easymock.tests.UsageVarargTest.varargIntAccepted":293,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":133,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":265,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":107,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":108,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":269,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":128,"org.easymock.tests.ReplayStateInvalidUsageTest.times":409,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":235,"org.easymock.tests2.AnswerTest.answer":61,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":336,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":394,"org.easymock.tests2.CaptureTest.testAnd":205,"org.easymock.tests2.UsageTest.strictResetToDefault":219,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":323,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":330,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":348,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":375,"org.easymock.tests2.DelegateToTest.testDelegate":91,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":356,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":77,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":364,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":141,"org.easymock.tests2.CaptureTest.testCapture1_2446744":66,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":253,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":334,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":403,"org.easymock.tests.UsageThrowableTest.throwError":300,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":396,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":351,"org.easymock.samples.PartialClassMockTest.testGetArea":149,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":404,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":266,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":358,"org.easymock.tests2.UsageTest.niceToStrict":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":241,"org.easymock.tests2.ThreadingTest.testChangeDefault":104,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":153,"org.easymock.tests2.MockBuilderTest.testCreateMock":8,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":125,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":249,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":12,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":393,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":372,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":369,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":365,"org.easymock.tests.UsageOverloadedMethodTest.overloading":322,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":191,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":316,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":282,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":321,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":190,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":207,"org.easymock.tests.MockClassControlTest.testEquals":417,"org.easymock.tests2.EasyMockSupportClassTest.testAll":236,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":264,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":130,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":257,"org.easymock.tests2.CaptureTest.testCaptureAll":64,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":335,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":362,"org.easymock.tests2.UsageConstraintsTest.testMatches":192,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":401,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":350,"org.easymock.samples.ExampleTest.voteForRemovals":165,"org.easymock.tests.UsageVarargTest.allKinds":78,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":86,"org.easymock.samples.BasicClassMockTest.testPrintContent":170,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":363,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":305,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":24,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":102,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":340,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":119,"org.easymock.tests2.UsageConstraintsTest.greaterThan":193,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":374,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":30,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":387,"org.easymock.samples.ExampleTest.voteForRemoval":162,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":174,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":381,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":397,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":109,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":16,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":307,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":121,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":211,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":79,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":98,"org.easymock.tests2.CaptureTest.testCaptureFirst":71,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":212,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":23,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":278,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":176,"org.easymock.tests2.UsageTest.moreThanOneArgument":73,"org.easymock.tests2.CaptureTest.testCapture2_2446744":209,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":9,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":299,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":41,"org.easymock.tests.UsageExpectAndReturnTest.longType":274,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":210,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":360,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":156,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":258,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":198,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":377,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":256,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":2,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":347,"org.easymock.tests.UsageCallCountTest.tooManyCalls":42,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":136,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":308,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":279,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":245,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":304,"org.easymock.tests.MockingTest.testNiceClassMocking":392,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":221,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":422,"org.easymock.tests2.UsageConstraintsTest.testContains":189,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":152,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":96,"org.easymock.tests2.UsageConstraintsTest.testFind":183,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":87,"org.easymock.tests.MockTypeTest.fromEasyMockClass":395,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":179,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":45,"org.easymock.tests.UsageExpectAndReturnTest.object":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":234,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":214,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":116,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":295,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":421,"org.easymock.tests.UsageTest.exactCallCountByLastCall":39,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":239,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":353,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":140,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":114,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":287,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":291,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":92,"org.easymock.tests.MockClassControlTest.testHashCode":416,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":127,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":354,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":315,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":371,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":333,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":400,"org.easymock.tests.UsageVarargTest.varargCharAccepted":294,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":227,"org.easymock.tests2.UsageTest.openCallCountByLastCall":74,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":382,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":370,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":419,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":33,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":302,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":415,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":29,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":246,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":288,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":1,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":414,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":238,"org.easymock.tests2.UsageTest.resumeIfFailure":22,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":101,"org.easymock.tests2.StubTest.stubWithReturnValue":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":120,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":199,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":280,"org.easymock.tests2.SerializationTest.testAllMockedMethod":148,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":378,"org.easymock.samples.SupportTest.voteForRemovals":172,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":132,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":112,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":252,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":380,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":379,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":337,"org.easymock.tests.UsageExpectAndThrowTest.object":250,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":196,"org.easymock.tests2.DelegateToTest.testWrongClass":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":319,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":320,"org.easymock.tests.UsageStrictMockTest.range":48,"org.easymock.samples.ConstructorCalledMockTest.testTax":326,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":343,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":220,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":251,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":154,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":0,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":366,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":135,"org.easymock.tests2.CaptureTest.testCaptureNone":70,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":359,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":123,"org.easymock.tests.UsageUnorderedTest.message":43,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":52,"org.easymock.tests.UsageVerifyTest.twoReturns":51,"org.easymock.tests.UsageVarargTest.varargByteAccepted":298,"org.easymock.tests2.ThreadingTest.testThreadSafe":173,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":311,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":169,"org.easymock.tests2.CaptureTest.testCapture_2617107":65,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":314,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":408,"org.easymock.tests2.StubTest.stub":342,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":3,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":100,"org.easymock.tests.UsageExpectAndThrowTest.longType":243,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":407,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":25,"org.easymock.tests2.SerializationTest.testClass":122,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":218,"org.easymock.tests.LimitationsTest.mockNativeMethod":270,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":290,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":346,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":151,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests2.NameTest.nameForMocksControl":57,"org.easymock.tests2.MockedExceptionTest.testMockedException":95,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":82,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":244,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":262,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":229,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":155,"org.easymock.tests.MockingTest.testNicePartialClassMocking":261,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":233,"org.easymock.tests2.CaptureTest.testCaptureLast":69,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":142,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":186,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":226,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":197,"org.easymock.tests.MockingTest.testTwoMocks":345,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":248,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":20,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":200,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":105,"org.easymock.samples.ExampleTest.removeNonExistingDocument":399,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":49,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":384,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":175,"org.easymock.tests2.ConstraintsToStringTest.andToString":131,"org.easymock.tests2.MockBuilderTest.testCreateMockString":10,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":412,"org.easymock.tests.UsageExpectAndThrowTest.floatType":242,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":6,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":204,"org.easymock.tests.UsageVerifyTest.twoThrows":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":328,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":237,"org.easymock.samples.ExampleTest.voteAgainstRemoval":163,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":357,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":157,"org.easymock.tests2.UsageConstraintsTest.testNotNull":60,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":94,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":306,"org.easymock.tests2.UsageTest.defaultResetToNice":344,"org.easymock.samples.ExampleTest.voteAgainstRemovals":161,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":286,"org.easymock.tests.UsageVarargTest.differentLength":31,"org.easymock.tests2.CallbackTest.callback":15,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":138,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":332,"org.easymock.tests.UsageTest.openCallCountByLastCall":81,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":180,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":313,"org.easymock.tests.UsageCallCountTest.tooFewCalls":309,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":223,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":368,"org.easymock.tests.UsageThrowableTest.throwCheckedException":303,"org.easymock.tests.MockingTest.testStrictClassMocking":389,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":137,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":225,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":222,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":410,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":224,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":106,"org.easymock.tests.ObjectMethodsTest.testHashCode":420,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":177,"org.easymock.tests2.NameTest.nameForNiceMock":56,"org.easymock.tests2.DependencyTest.testInterfaceMocking":202,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":117,"org.easymock.samples.ExampleTest.addDocument":164,"org.easymock.tests2.DelegateToTest.testStubDelegate":63,"org.easymock.tests2.AnswerTest.stubAnswer":62,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":85,"org.easymock.tests.UsageVarargTest.varargLongAccepted":297,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":318,"org.easymock.tests.UsageExpectAndReturnTest.floatType":273,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":289,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":113,"org.easymock.tests2.ConstraintsToStringTest.orToString":124,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":327,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":144,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":194,"org.easymock.tests.UsageThrowableTest.noUpperLimit":301,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":181,"org.easymock.tests2.SerializationTest.test":147,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":67,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":383,"org.easymock.tests2.UsageConstraintsTest.testSame":184,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":272,"org.easymock.samples.SupportTest.addDocument":171,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":388,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":406,"org.easymock.tests.GenericTest.testPackageScope":263,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":355,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":390,"org.easymock.tests2.NameTest.nameForMock":54,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":283,"org.easymock.tests2.UsageStrictMockTest.differentMethods":27,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":331,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":275,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":376,"org.easymock.tests2.MockedExceptionTest.testRealException":97,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":398,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":139,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":76,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":411,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":83,"org.easymock.tests2.NameTest.nameForStrictMock":55,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":232,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":385,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":195,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":7,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":201,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":118,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":11,"org.easymock.tests2.CaptureTest.testCaptureRightOne":208,"org.easymock.tests2.UsageConstraintsTest.testOr":185,"org.easymock.tests.UsageRangeTest.combination":44,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":28,"org.easymock.tests.UsageTest.wrongArguments":36,"org.easymock.tests2.MockBuilderTest.testWithConstructor":329,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":284,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":386,"org.easymock.tests.UsageVarargTest.varargShortAccepted":296,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":40,"org.easymock.tests2.UsageConstraintsTest.cmpTo":188,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":338,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":75,"org.easymock.tests2.CaptureTest.testCaptureFromStub":341,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":402,"org.easymock.tests.UsageTest.unexpectedCallWithArray":35,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":46,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":310,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":325,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":285,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":47,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.samples.ExampleTest.addAndChangeDocument":166,"org.easymock.tests2.ConstraintsToStringTest.notToString":126,"org.easymock.tests.UsageStrictMockTest.testVerify":324,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":168,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":317,"org.easymock.tests2.CompareToTest.testGreateThan":93,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":361,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":68,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":150,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":267,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":277,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":145,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":13,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":292}}]

[{"position":"org.easymock.internal.ReflectionUtils:106","failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[59,60,16,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[107,108,109,110,111,112],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:320","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[113,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[0,1,2,115,3,4,116,117,118,119,120,121,122,123,124,125,5,126,7,8,9,11,12,14,59,60,16,61,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,17,21,22,23,24,33,34,35,36,37,170,38,39,171,172,173,174,40,175,41,176,42,43,44,45,177,178,64,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,106,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,47,48,49,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,237,238,239,240,241,52,242,243,244,245,246,90,247,248,249,250,251,252,253,254,255,256,257,91,258,259,93,260,261,262,263,264,265,266,267,268,269,53,54,55,99,100,101,102,103,104,57,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[291,292,293,294,295,296,36,39,297,298,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"argType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[300,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"transplant":{"position":"org.easymock.internal.Injector:229","sourceCode":"org.easymock.internal.Injection org.easymock.internal.Injection = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:277","sourceCode":"return this","type":"CtReturnImpl"},"failures":[117,171,172,174,177,212,213,302],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:33","sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResult>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:33","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(boolean.boolean, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[303],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[40,175,41,304],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"argType":"primitiveType","paramType":"primitiveType"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[293,305,306,307,308,309,296],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.InstanceOf:40","sourceCode":"java.lang.StringBuffer.append(((\"isA(\" + (java.lang.Class<?>.getName())) + \")\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[113,310],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"failures":[106,109,256],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[300],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[56],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[0,1,311,291,292,293,312,294,295,313,314,315,33,296,40],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[293,312,305,306,307,316,317,33,296,40],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[318,319],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[2,115,3,4,116,117,118,119,120,121,122,123,124,125,5,6,126,7,8,9,11,13,14,15,16,320,127,128,321,322,129,130,131,132,133,134,135,136,137,138,323,139,140,141,142,143,144,324,145,146,62,151,152,325,153,154,326,63,155,327,328,156,329,157,158,159,160,161,162,163,164,165,166,167,168,169,19,21,23,24,26,33,34,35,36,37,170,38,39,171,172,173,174,40,175,41,176,42,43,44,45,177,178,64,179,180,330,181,182,183,331,332,184,185,186,187,188,189,190,191,192,193,194,333,195,196,197,106,198,199,200,201,202,203,204,205,334,206,207,208,209,210,211,212,213,302,335,65,214,47,48,49,336,215,109,216,337,338,217,218,219,220,221,66,67,222,223,224,339,225,227,228,229,230,340,341,342,343,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,237,344,345,89,346,347,348,242,243,244,245,349,246,90,247,248,249,250,251,350,252,253,254,255,256,351,352,257,91,258,92,259,93,94,95,96,97,98,265,266,267,268,269,53,54,55,103,57,270,105,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[353,135,137,138,323,139,140,141,143,354,144,355,145],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Any:36","failures":[128,136,141,142,145,192,195,216,220,221,66,67,222,223,224,352,265,266,267,268,269,103,270,105],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[356,357,358],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:119","sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(this.java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"key","properties":"properties","key":"key"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[0,0,1,1,2,3,4,5,6,7,8,9,10,11,359,12,13,14,15,360,361,59,60,16,17,19,20,362,21,22,23,24,25,26,28,33,34,35,36,37,38,39,363,40,41,42,43,44,45,364,365,46,47,48,49,366,50,51,367,52,368,369,370,371,372,373,374,53,54,55,56,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[0,0,1,1,2,116,117,118,119,121,122,124,5,6,126,7,8,9,11,13,14,15,59,60,16,61,128,322,129,135,136,138,323,141,142,143,144,355,324,145,146,62,151,152,153,326,63,155,156,329,157,158,159,160,161,162,163,164,165,166,167,168,19,21,23,24,26,33,34,35,36,37,170,38,39,171,375,376,172,173,174,40,175,176,42,43,44,45,177,178,64,113,179,180,330,310,181,182,183,331,332,184,185,186,187,188,189,190,191,192,193,194,195,196,197,106,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,302,335,65,214,47,48,49,216,338,217,220,221,66,67,222,223,224,227,377,342,343,378,379,380,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,237,345,89,348,381,242,243,244,245,382,383,349,246,90,351,384,385,352,257,91,258,92,259,93,94,95,96,97,98,260,261,262,263,264,265,266,267,268,269,53,54,56,386,99,100,101,102,103,104,57,387,388,389,390,391,392,270,105,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:193","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":188,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":88,"org.easymock.tests2.UsageTest.argumentsOrdered":328,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":114,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":154,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":115,"org.easymock.tests2.DelegateToTest.testReturnException":179,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":100,"org.easymock.tests.MockingTest.testPartialClassMocking":47,"org.easymock.tests.MockClassControlTest.testToString":368,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":386,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":361,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":43,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":68,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":211,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":305,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":194,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":220,"org.easymock.tests2.UsageTest.wrongArguments":325,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":240,"org.easymock.samples.ExampleTest.answerVsDelegate":117,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":51,"org.easymock.tests2.UsageConstraintsTest.testNull":190,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":7,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":166,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":373,"org.easymock.tests2.CaptureTest.testPrimitive":138,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":222,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":87,"org.easymock.tests.UsageTest.moreThanOneArgument":237,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":126,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":262,"org.easymock.tests.UsageTest.argumentsOrdered":347,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":377,"org.easymock.tests.UsageVarargTest.varargIntAccepted":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":265,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":17,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":309,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":269,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":146,"org.easymock.tests2.AnswerTest.answer":171,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":333,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":150,"org.easymock.tests2.CaptureTest.testAnd":135,"org.easymock.tests2.UsageTest.strictResetToDefault":151,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":12,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":292,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":161,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":244,"org.easymock.tests2.DelegateToTest.testDelegate":181,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":379,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":103,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":236,"org.easymock.tests2.CaptureTest.testCapture1_2446744":323,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":81,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":148,"org.easymock.tests.UsageThrowableTest.throwError":92,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":264,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":313,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":298,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":266,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":388,"org.easymock.tests2.UsageTest.niceToStrict":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":69,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":358,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":21,"org.easymock.tests2.MockBuilderTest.testCreateMock":25,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":107,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":77,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":162,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":385,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":225,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":238,"org.easymock.tests.UsageOverloadedMethodTest.overloading":246,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":65,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":282,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":349,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":106,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":143,"org.easymock.tests2.EasyMockSupportClassTest.testAll":42,"org.easymock.tests.MockClassControlTest.testEquals":372,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":55,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":85,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":29,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":149,"org.easymock.tests2.CaptureTest.testCaptureAll":136,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":234,"org.easymock.tests2.UsageConstraintsTest.testMatches":199,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":263,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":339,"org.easymock.samples.ExampleTest.voteForRemovals":121,"org.easymock.tests.UsageVarargTest.allKinds":256,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":257,"org.easymock.samples.BasicClassMockTest.testPrintContent":4,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":235,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":97,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":320,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":104,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":310,"org.easymock.tests2.UsageConstraintsTest.greaterThan":201,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":243,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":15,"org.easymock.samples.ExampleTest.voteForRemoval":118,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":183,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":360,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":10,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":53,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":62,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":159,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":93,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":99,"org.easymock.tests2.CaptureTest.testCaptureFirst":145,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":113,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":160,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":329,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":278,"org.easymock.tests2.UsageTest.moreThanOneArgument":152,"org.easymock.tests2.CaptureTest.testCapture2_2446744":324,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":332,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":26,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":255,"org.easymock.tests.GenericTest.testBridgedEquals":301,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":340,"org.easymock.tests.UsageExpectAndReturnTest.longType":274,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":157,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":232,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":27,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":86,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":334,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":381,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":84,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":391,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":260,"org.easymock.tests.UsageCallCountTest.tooManyCalls":341,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":227,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":279,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":73,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":96,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":35,"org.easymock.tests.MockingTest.testNiceClassMocking":366,"org.easymock.tests.MockingTest.testClassMocking":365,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":18,"org.easymock.tests2.UsageConstraintsTest.testContains":197,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":226,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":16,"org.easymock.tests2.UsageConstraintsTest.testFind":189,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":213,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":336,"org.easymock.tests.UsageExpectAndReturnTest.object":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":11,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":165,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":306,"org.easymock.tests.UsageTest.exactCallCountByLastCall":348,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":270,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":342,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":296,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":247,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":287,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":335,"org.easymock.tests.MockClassControlTest.testHashCode":371,"org.easymock.tests2.EasyMockSupportTest.testVerify":169,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":343,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":384,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":147,"org.easymock.tests.UsageVarargTest.varargCharAccepted":250,"org.easymock.tests2.CaptureTest.testCaptureMultiple":353,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests2.UsageTest.openCallCountByLastCall":326,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":168,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":356,"org.easymock.tests.DefaultClassInstantiatorTest.object":374,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":75,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":32,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":94,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":13,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":370,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":74,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":288,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":45,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":369,"org.easymock.tests2.UsageTest.resumeIfFailure":156,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":50,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":102,"org.easymock.tests2.StubTest.stubWithReturnValue":64,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":293,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":206,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":280,"org.easymock.tests2.SerializationTest.testAllMockedMethod":41,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":382,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":315,"org.easymock.samples.SupportTest.voteForRemovals":124,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":108,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":300,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":80,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":304,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":383,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":375,"org.easymock.tests.UsageExpectAndThrowTest.object":78,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":204,"org.easymock.tests2.DelegateToTest.testWrongClass":330,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":223,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":224,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":338,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":164,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":58,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":79,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":23,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":239,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":111,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":389,"org.easymock.tests2.CaptureTest.testCaptureNone":142,"org.easymock.tests.UsageUnorderedTest.message":352,"org.easymock.tests.UsageVerifyTest.twoReturns":258,"org.easymock.tests.UsageVarargTest.varargByteAccepted":254,"org.easymock.tests2.ThreadingTest.testThreadSafe":182,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":230,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":3,"org.easymock.tests2.CaptureTest.testCapture_2617107":137,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":231,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":67,"org.easymock.tests2.UsageConstraintsTest.any":195,"org.easymock.tests2.StubTest.stub":178,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":101,"org.easymock.tests.UsageExpectAndThrowTest.longType":71,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":321,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":176,"org.easymock.tests2.SerializationTest.testClass":40,"org.easymock.tests.LimitationsTest.mockNativeMethod":57,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":56,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":290,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":31,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":130,"org.easymock.tests2.NameTest.nameForMocksControl":134,"org.easymock.tests2.MockedExceptionTest.testMockedException":60,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":89,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":49,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":72,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":5,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":24,"org.easymock.tests.MockingTest.testNicePartialClassMocking":48,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":9,"org.easymock.tests2.CompareToTest.testNotComparable":303,"org.easymock.tests2.CaptureTest.testCaptureLast":141,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":380,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":39,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":193,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":205,"org.easymock.tests.MockingTest.testTwoMocks":46,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":297,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":76,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":327,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":208,"org.easymock.tests.UsageStrictMockTest.differentMethods":217,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":331,"org.easymock.tests2.MockBuilderTest.testCreateMockString":28,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":367,"org.easymock.tests.UsageExpectAndThrowTest.floatType":70,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":200,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":172,"org.easymock.tests.UsageVerifyTest.twoThrows":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":44,"org.easymock.samples.ExampleTest.voteAgainstRemoval":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":387,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":14,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":299,"org.easymock.tests2.UsageConstraintsTest.testNotNull":207,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":98,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":59,"org.easymock.tests2.UsageTest.defaultResetToNice":155,"org.easymock.samples.ExampleTest.voteAgainstRemovals":116,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":286,"org.easymock.tests.UsageVarargTest.differentLength":350,"org.easymock.tests2.CallbackTest.callback":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":311,"org.easymock.tests.UsageTest.openCallCountByLastCall":345,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":66,"org.easymock.tests.UsageCallCountTest.tooFewCalls":228,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":37,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":241,"org.easymock.tests.UsageThrowableTest.throwCheckedException":95,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":112,"org.easymock.tests.MockingTest.testStrictClassMocking":364,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":105,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":38,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":36,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":170,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":308,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":184,"org.easymock.tests2.NameTest.nameForNiceMock":133,"org.easymock.tests2.DependencyTest.testInterfaceMocking":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":307,"org.easymock.samples.ExampleTest.addDocument":120,"org.easymock.tests2.DelegateToTest.testStubDelegate":180,"org.easymock.tests2.AnswerTest.stubAnswer":173,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":216,"org.easymock.tests.UsageVarargTest.varargLongAccepted":253,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":218,"org.easymock.tests.UsageExpectAndReturnTest.floatType":273,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":289,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":202,"org.easymock.tests.UsageThrowableTest.noUpperLimit":259,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":186,"org.easymock.tests2.SerializationTest.test":175,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":139,"org.easymock.tests2.UsageConstraintsTest.testSame":191,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":272,"org.easymock.samples.SupportTest.addDocument":123,"org.easymock.tests.GenericTest.testPackageScope":54,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":378,"org.easymock.tests2.NameTest.nameForMock":131,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":283,"org.easymock.tests2.UsageStrictMockTest.differentMethods":129,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":295,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":359,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":275,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":82,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":245,"org.easymock.tests2.MockedExceptionTest.testRealException":61,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":314,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":128,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":221,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":319,"org.easymock.tests2.NameTest.nameForStrictMock":132,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":362,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":212,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":357,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":8,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":363,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":203,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":19,"org.easymock.tests2.UsageStrictMockTest.range":322,"org.easymock.tests2.UsageConstraintsTest.lessThan":209,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":316,"org.easymock.tests2.CaptureTest.testCaptureRightOne":144,"org.easymock.tests2.UsageConstraintsTest.testOr":192,"org.easymock.tests.UsageRangeTest.combination":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":6,"org.easymock.tests.UsageTest.wrongArguments":344,"org.easymock.tests2.MockBuilderTest.testWithConstructor":291,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":284,"org.easymock.tests.UsageVarargTest.varargShortAccepted":252,"org.easymock.tests2.UsageConstraintsTest.cmpTo":196,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":376,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":63,"org.easymock.tests2.CaptureTest.testCaptureFromStub":355,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":318,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":20,"org.easymock.tests.UsageTest.unexpectedCallWithArray":110,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":109,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":229,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":294,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":285,"org.easymock.tests2.CaptureTest.testCapture":354,"org.easymock.tests2.UsageConstraintsTest.constraints":187,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":337,"org.easymock.samples.ExampleTest.addAndChangeDocument":122,"org.easymock.tests.UsageStrictMockTest.testVerify":219,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":125,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":215,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":233,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":267,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":277,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":163,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":248}}]

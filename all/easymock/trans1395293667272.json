[{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[2,3,4,5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.Find:41","failures":[6],"status":-1,"binaryOperator":"(\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\")))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:853","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[7,8,9,10,11,12],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[13,14,15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[17,18,19,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[21,22,23,24,25,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[41,42,43,44,45],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[46,7,47,48,49,8,50,9,51,52,10,11,53,54,55,12,56,57,58,59,60,61],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:126","failures":[63,64,65,66,67],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1135","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[68,69,70,71,72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[73,74,75,76,77,78,46,7,47,79,80,48,49,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,63,157,158,159,160,161,162,163,40,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,68,242,243,244,69,70,2,245,246,247,248,249,250,251,71,252,253,254,255,72,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,10,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,64,306,307,308,309,310,311,312,313,314,315,316,317,318,319,57,58,320,321,322,323,324,59,60,325,326,327,328,329,330,22,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,24,354,355,356,357,358,41,359,360,361,362,363,364,365,42,366,367,368,369,1,43,370,61,371,372,373,374,375,376,377,378,379,44,380,3,381,382,4,5,383,384,385,386,387,388,389,390,391,62,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,65,412,66,413,67,18,19,20,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,28,491,29,30,31,32,33,34,492,35,37,38,493,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:720","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[42],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[7,47,48,49,494,160,166,173,174,10,274,58,59,60,479],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[46,495,496,497,498,166,172,173,174,272,274,275,57,477,479,480],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[499,500,501,502,503,504],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"argType":"paramType","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[78,46,79,80,81,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,139,140,144,145,147,151,152,153,154,155,63,157,159,161,162,163,40,164,167,168,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,201,202,209,217,221,253,272,274,275,278,279,280,297,298,299,300,301,303,305,64,306,307,309,317,318,319,57,320,322,323,324,325,326,328,22,332,333,336,340,341,342,343,344,345,346,347,350,23,24,354,357,358,41,359,361,362,363,364,365,42,367,368,369,1,43,370,61,371,372,373,374,375,376,377,378,379,44,380,4,5,389,393,394,395,396,397,398,404,65,412,66,67,18,19,414,416,417,418,419,420,421,422,423,424,425,426,427,441,444,454,460,468,477,479,480,483,484,485,486,487,488,489,490,28,491,29,30,31,34,492,35,37,493,39],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[46,9,505,494,156,158,159,160,40,164,166,172,173,174,272,274,275,506,11,507,508,509,510,57,477,479,480],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.Range:40","failures":[73,74,75,76,77,78,46,7,47,79,80,48,49,81,82,83,84,85,511,512,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,63,157,158,159,160,161,162,163,40,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,513,235,236,237,238,239,240,514,241,68,242,243,244,69,70,2,245,246,247,248,249,250,251,71,252,253,254,255,72,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,10,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,515,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,64,306,307,308,309,310,311,312,313,314,315,316,317,318,319,57,58,320,321,322,323,324,59,60,325,326,327,516,328,329,517,330,22,331,332,518,333,519,334,335,336,520,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,24,354,355,356,357,358,41,359,360,361,362,363,364,365,42,366,367,368,369,1,43,370,61,371,372,373,374,375,376,377,378,379,44,380,3,381,382,4,5,383,384,385,386,387,388,389,390,391,62,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,65,412,66,413,67,18,19,20,414,415,521,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,522,523,524,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,525,484,485,486,487,526,488,489,490,527,28,491,29,30,31,32,33,34,492,35,37,38,493,39],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[353,356,432],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[211],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[518,334,528,529,530,531,532,533,534,535,18,414,415],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[85,88,128,141,142,143,144,145,147,150,208,209,210,211,212,219,220,221,222,235,236,237,238,239,240,241,289,290,291,292,293,294,295,296,303,312,312,313,313,314,315,327,328,329,330,22,331,332,333,334,335,336,337,338,339,342,343,345,346,347,348,350,351,352,353,23,24,354,355,356,387,388,389,18,20,414,415,434,522,435,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,484,485,486,487,489,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[494],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1291","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:163","failures":[4,5],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[46,159,165,172,173,174,272,275,276,57,477,480,481],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:40","failures":[73,74,75,76,77,78,46,7,47,79,80,48,49,81,82,83,84,85,511,512,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,63,157,158,159,160,161,162,163,40,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,513,235,236,237,238,239,240,514,241,68,242,243,244,69,70,2,245,246,247,248,249,250,251,71,252,253,254,255,72,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,10,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,515,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,64,306,307,308,309,310,311,312,313,314,315,316,317,318,319,57,58,320,321,322,323,324,59,60,325,326,327,516,328,329,517,330,22,331,332,518,333,519,334,335,336,520,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,24,354,355,356,357,358,41,359,360,361,362,363,364,365,42,366,367,368,369,1,43,370,61,371,372,373,374,375,376,377,378,379,44,380,3,381,382,4,5,383,384,385,386,387,388,389,390,391,62,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,65,412,66,413,67,18,19,20,414,415,521,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,522,523,524,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,525,484,485,486,487,526,488,489,490,527,28,491,29,30,31,32,33,34,492,35,37,38,493,39],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[376,378,391,392],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[24],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[2,3,4,5],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[343],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[536],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[73,74,75,76,77,78,46,7,47,79,80,48,49,81,82,83,84,85,511,512,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,0,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,63,157,158,159,160,161,162,163,40,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,513,235,236,237,238,239,240,514,241,68,242,243,244,69,70,2,245,246,247,248,249,250,251,71,252,253,254,255,72,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,10,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,515,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,64,306,307,308,309,310,311,312,313,314,315,316,317,318,319,57,58,320,321,322,323,324,59,60,325,326,327,516,328,329,517,330,22,331,332,518,333,519,334,335,336,520,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,23,24,354,355,356,357,358,41,359,360,361,362,363,364,365,42,366,367,368,369,1,43,370,61,371,372,373,374,375,376,377,378,379,44,380,3,381,382,4,5,383,384,385,386,387,388,389,390,391,62,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,65,412,66,413,67,18,19,20,414,415,521,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,522,523,524,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,525,484,485,486,487,526,488,489,490,527,28,491,29,30,31,32,33,34,492,35,37,38,493,39],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:573","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[41,365,28,29,37],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[49,85,87,89,142,146,149,150,162,166,173,195,196,198,199,200,201,202,203,204,205,206,207,224,234,260,261,262,263,303,317,320,321,60,327,329,330,331,332,333,336,337,341,343,348,353,24,354,356,359,365,42,367,1,373,374,375,377,383,384,385,386,404,405,416,417,418,419,420,421,422,424,425,426,427,429,430,431,432,433,444,454,460,468,469,484,485,487,488,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[537,27,28,491,29,30,31,32,33,34,492,35,36,37,38,493,39],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[78,46,7,47,48,49,81,8,50,9,51,505,52,494,123,156,158,159,160,40,164,166,172,173,174,270,10,272,273,274,275,276,506,11,507,53,54,508,55,509,12,510,56,318,57,58,320,321,59,60,326,343,23,354,41,61,398,417,421,422,425,475,477,478,479,480,481],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[208,209,210,211,212],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":359,"org.easymock.tests2.UsageTest.argumentsOrdered":60,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":78,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":426,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":248,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":321,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":304,"org.easymock.tests2.DelegateToTest.testReturnException":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":214,"org.easymock.tests.MockingTest.testPartialClassMocking":144,"org.easymock.tests.MockClassControlTest.testToString":291,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":429,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":448,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":444,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":97,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":495,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":341,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":530,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":167,"org.easymock.tests2.UsageTest.wrongArguments":58,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":474,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":262,"org.easymock.samples.ExampleTest.answerVsDelegate":64,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":88,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":149,"org.easymock.tests2.UsageConstraintsTest.testNull":362,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":345,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":425,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":296,"org.easymock.tests2.CaptureTest.testPrimitive":30,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":171,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":116,"org.easymock.tests.UsageTest.moreThanOneArgument":46,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":344,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":75,"org.easymock.tests.UsageTest.argumentsOrdered":49,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":284,"org.easymock.tests.UsageVarargTest.varargIntAccepted":119,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":510,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":252,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":297,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":327,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":523,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":409,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":301,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":54,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":468,"org.easymock.tests.ReplayStateInvalidUsageTest.times":231,"org.easymock.tests2.DependencyTest.testClassMocking":338,"org.easymock.tests2.AnswerTest.answer":380,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":254,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":386,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":512,"org.easymock.tests2.CaptureTest.testAnd":28,"org.easymock.tests2.UsageTest.strictResetToDefault":319,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":517,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":353,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":74,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":420,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":153,"org.easymock.tests2.DelegateToTest.testDelegate":67,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":288,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":112,"org.easymock.tests.LimitationsTest.mockFinalMethod":222,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":207,"org.easymock.tests2.DependencyTest.testClassMockingSupport":339,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":40,"org.easymock.tests2.CaptureTest.testCapture1_2446744":31,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":349,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":110,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":384,"org.easymock.tests.UsageThrowableTest.throwError":195,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":225,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":87,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":515,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":410,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":462,"org.easymock.samples.PartialClassMockTest.testGetArea":303,"org.easymock.tests.MockingTest.testInterfaceMocking":146,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":226,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":298,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":449,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":98,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":269,"org.easymock.tests2.UsageTest.niceToStrict":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":68,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":22,"org.easymock.tests2.MockBuilderTest.testCreateMock":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":457,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":471,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":106,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":11,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":421,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":511,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":96,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":129,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":260,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":500,"org.easymock.tests.UsageOverloadedMethodTest.overloading":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":453,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":157,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":43,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":186,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":161,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":1,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":35,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":120,"org.easymock.tests2.EasyMockSupportClassTest.testAll":441,"org.easymock.tests.MockClassControlTest.testEquals":295,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":210,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":114,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":55,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":25,"org.easymock.tests2.CaptureTest.testCaptureAll":491,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":385,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":205,"org.easymock.tests.MockNameTest.defaultName":138,"org.easymock.tests2.UsageConstraintsTest.testMatches":370,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":76,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":223,"org.easymock.samples.ExampleTest.voteForRemovals":309,"org.easymock.tests.UsageVarargTest.allKinds":0,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":206,"org.easymock.samples.BasicClassMockTest.testPrintContent":315,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":201,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":475,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":413,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":406,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":218,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":535,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":514,"org.easymock.tests2.UsageConstraintsTest.greaterThan":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":442,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":152,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":354,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":241,"org.easymock.samples.ExampleTest.voteForRemoval":306,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":394,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":355,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":89,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":524,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":348,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":128,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":318,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":245,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":418,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":439,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":213,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":411,"org.easymock.tests2.CaptureTest.testCaptureFirst":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":2,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":419,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":326,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":160,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":182,"org.easymock.tests2.CaptureTest.testCapture2_2446744":493,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":396,"org.easymock.tests2.UsageTest.moreThanOneArgument":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":255,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":336,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":127,"org.easymock.tests.GenericTest.testBridgedEquals":212,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":501,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":136,"org.easymock.tests.UsageExpectAndReturnTest.longType":178,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":416,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":115,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":283,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":376,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":113,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":73,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":92,"org.easymock.tests.UsageCallCountTest.tooManyCalls":137,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":50,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":458,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":183,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":473,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":102,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":200,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":485,"org.easymock.tests.MockingTest.testNiceClassMocking":150,"org.easymock.tests.MockingTest.testClassMocking":142,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":130,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":21,"org.easymock.tests2.UsageConstraintsTest.testContains":369,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":389,"org.easymock.tests2.UsageConstraintsTest.testFind":361,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":163,"org.easymock.tests.MockTypeTest.fromEasyMockClass":86,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":392,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":270,"org.easymock.tests.UsageExpectAndReturnTest.object":185,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":472,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":424,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":531,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":122,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":267,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":502,"org.easymock.tests.UsageTest.exactCallCountByLastCall":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":70,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":82,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":285,"org.easymock.tests2.ConstraintsToStringTest.findToString":6,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":415,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":191,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":117,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":63,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":400,"org.easymock.tests.MockClassControlTest.testHashCode":294,"org.easymock.tests2.EasyMockSupportTest.testVerify":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":451,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":53,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":286,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":155,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":95,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":383,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":525,"org.easymock.tests.UsageVarargTest.varargCharAccepted":121,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":513,"org.easymock.tests2.CaptureTest.testCaptureMultiple":27,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":259,"org.easymock.tests2.UsageTest.openCallCountByLastCall":322,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":503,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":427,"org.easymock.tests.DefaultClassInstantiatorTest.object":235,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":94,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":265,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":452,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":104,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":198,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":466,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":399,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":23,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":293,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":103,"org.easymock.tests.CapturesMatcherTest.test":537,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":192,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":91,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":508,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":460,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":292,"org.easymock.tests2.UsageTest.resumeIfFailure":325,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":85,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":522,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":216,"org.easymock.tests2.StubTest.stubWithReturnValue":483,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":518,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":184,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":377,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":253,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":12,"org.easymock.samples.SupportTest.voteForRemovals":317,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":208,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":402,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":109,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":17,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":258,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":3,"org.easymock.tests.UsageExpectAndThrowTest.object":107,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":84,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":374,"org.easymock.tests2.DelegateToTest.testWrongClass":66,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":278,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":279,"org.easymock.tests.UsageStrictMockTest.range":274,"org.easymock.samples.ConstructorCalledMockTest.testTax":312,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":436,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":423,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":484,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":499,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":108,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":438,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":48,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":233,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":261,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":8,"org.easymock.tests2.CaptureTest.testCaptureNone":492,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":282,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":14,"org.easymock.tests.UsageUnorderedTest.message":166,"org.easymock.tests.UsageVerifyTest.twoReturns":174,"org.easymock.tests.UsageVarargTest.varargByteAccepted":126,"org.easymock.tests2.ThreadingTest.testThreadSafe":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":455,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":134,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":268,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":314,"org.easymock.tests2.CaptureTest.testCapture_2617107":29,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":165,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":256,"org.easymock.tests2.UsageConstraintsTest.any":367,"org.easymock.tests2.StubTest.stub":482,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":230,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":93,"org.easymock.tests.UsageExpectAndThrowTest.longType":100,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":257,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":239,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":229,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":478,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":404,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":221,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":194,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":211,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":465,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":26,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":481,"org.easymock.tests2.NameTest.nameForMocksControl":433,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":467,"org.easymock.tests2.MockedExceptionTest.testMockedException":388,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":443,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":80,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":147,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":101,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":62,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":342,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":333,"org.easymock.tests.MockingTest.testNicePartialClassMocking":145,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":347,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":529,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":463,"org.easymock.tests2.CaptureTest.testCaptureLast":34,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":164,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":490,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":365,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":375,"org.easymock.tests.MockingTest.testTwoMocks":143,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":527,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":175,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":105,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":59,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":379,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":16,"org.easymock.samples.ExampleTest.removeNonExistingDocument":310,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":470,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":227,"org.easymock.tests.UsageStrictMockTest.differentMethods":275,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":401,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":237,"org.easymock.tests2.ConstraintsToStringTest.andToString":509,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":395,"org.easymock.tests2.MockBuilderTest.testCreateMockString":337,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":445,"org.easymock.tests.UsageExpectAndThrowTest.floatType":99,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":440,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":382,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":521,"org.easymock.tests.UsageVerifyTest.twoThrows":173,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":454,"org.easymock.samples.ExampleTest.voteAgainstRemoval":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":249,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":280,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":24,"org.easymock.tests.LimitationsTest.privateConstructor":220,"org.easymock.tests2.UsageConstraintsTest.testNotNull":378,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":387,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":202,"org.easymock.tests2.UsageTest.defaultResetToNice":324,"org.easymock.samples.ExampleTest.voteAgainstRemovals":305,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":250,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":464,"org.easymock.tests.UsageVarargTest.differentLength":123,"org.easymock.tests2.CallbackTest.callback":398,"org.easymock.tests2.UsageConstraintsTest.equals":360,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":51,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":351,"org.easymock.tests.UsageTest.openCallCountByLastCall":79,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":357,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":169,"org.easymock.tests.UsageCallCountTest.tooFewCalls":132,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":487,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":263,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":15,"org.easymock.tests.UsageThrowableTest.throwCheckedException":199,"org.easymock.tests.MockingTest.testStrictClassMocking":141,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":9,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":489,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":140,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":486,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":469,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":232,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":488,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":5,"org.easymock.tests2.CompareToTest.testGreateOrEqual":45,"org.easymock.tests.ObjectMethodsTest.testHashCode":266,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":534,"org.easymock.tests2.NameTest.nameForNiceMock":432,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":397,"org.easymock.tests2.DependencyTest.testInterfaceMocking":340,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":532,"org.easymock.samples.ExampleTest.addDocument":308,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":461,"org.easymock.tests2.DelegateToTest.testStubDelegate":412,"org.easymock.tests2.AnswerTest.stubAnswer":4,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":272,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":519,"org.easymock.tests.UsageVarargTest.varargLongAccepted":125,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":247,"org.easymock.tests.UsageExpectAndReturnTest.floatType":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":193,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":414,"org.easymock.tests2.ConstraintsToStringTest.orToString":506,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":313,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":408,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":158,"org.easymock.tests.UsageThrowableTest.noUpperLimit":196,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":372,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":358,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":434,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":32,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":536,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":236,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":176,"org.easymock.tests2.UsageConstraintsTest.testSame":363,"org.easymock.samples.SupportTest.addDocument":316,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":526,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":446,"org.easymock.tests.GenericTest.testPackageScope":209,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":287,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":69,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":407,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":148,"org.easymock.tests2.NameTest.nameForMock":430,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":187,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":520,"org.easymock.tests2.UsageStrictMockTest.differentMethods":480,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":352,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":179,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":111,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":264,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":154,"org.easymock.tests2.MockedExceptionTest.testRealException":390,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":90,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":71,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":505,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":528,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":251,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":168,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":234,"org.easymock.tests2.NameTest.nameForStrictMock":431,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":504,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":391,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":346,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":435,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":496,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":238,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":373,"org.easymock.tests.ErrorMessageTest.testGetters":497,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":328,"org.easymock.tests2.UsageStrictMockTest.range":479,"org.easymock.tests2.UsageConstraintsTest.lessThan":44,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":403,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":533,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":450,"org.easymock.tests2.CaptureTest.testCaptureRightOne":37,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":13,"org.easymock.tests2.UsageConstraintsTest.testOr":364,"org.easymock.tests.UsageRangeTest.combination":151,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":343,"org.easymock.tests.UsageTest.wrongArguments":47,"org.easymock.tests2.MockBuilderTest.testWithConstructor":516,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":447,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":290,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":180,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":242,"org.easymock.tests.UsageVarargTest.varargShortAccepted":124,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":240,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":135,"org.easymock.tests2.UsageConstraintsTest.cmpTo":368,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":244,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":323,"org.easymock.tests2.CaptureTest.testCaptureFromStub":38,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":224,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":329,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":133,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":189,"org.easymock.tests2.CaptureTest.testCapture":36,"org.easymock.tests2.UsageConstraintsTest.constraints":41,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":273,"org.easymock.samples.ExampleTest.addAndChangeDocument":311,"org.easymock.tests2.ConstraintsToStringTest.notToString":507,"org.easymock.tests.UsageStrictMockTest.testVerify":277,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":302,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":271,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":204,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":33,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":299,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":181,"org.easymock.tests.LimitationsTest.abstractClass":219,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":300,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":498,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":422,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":118}}]

[{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"org.easymock.internal.AndroidSupport.isAndroid"}},{"position":"org.easymock.internal.Range:36","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"binaryOperator":"(int <= int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:142","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.AndroidClassProxyFactory()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[15,20,98,99,100,101,104,105,106,107,108,173,174,175,176,177,179,182,190,191,192,193,194,195,197,223,224,225,226,227,228,229,230,231,249,258,258,259,259,264,265,266,267,269,270,271,272,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,314,315,349,351,352,354,355,357,358,359,360,362,364,365,366,368,382,383,386,441,442,444,445,446],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[488,349,350,351],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[338],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:189","sourceCode":"net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor })","type":"CtInvocationImpl"},"failures":[15,20,100,105,106,107,173,174,175,176,177,179,182,190,223,224,225,226,227,228,229,230,231,249,258,258,259,259,264,265,266,267,269,270,271,272,274,276,277,278,279,280,281,282,286,289,299,305,308,309,310,311,314,315,349,351,352,354,355,357,358,359,360,362,365,366,368,386,441,444,445,446],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"mockClass"}},{"transplant":{"position":"org.easymock.EasyMock:801","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.JavaProxyFactory:30","sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","type":"CtReturnImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,96,102,103,105,125,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,178,180,181,183,184,185,186,187,188,190,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,250,251,252,253,254,255,256,257,260,261,262,263,268,313,317,319,320,321,322,323,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,369,370,371,372,373,374,375,376,377,378,379,380,381,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,403,404,405,406,407,410,411,412,413,414,415,416,417,418,419,420,421,422,423,425,426,427,428,429,430,431,433,434,435,436,437,440,444,445,446,447,448,449,450,451,452,453,454,455,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:36","sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[243,336],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[348,489],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[24,96,219],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[330,336,348,490],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"failures":[335],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[267,277],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[28,38,52,74,75,77,78,79,80,81,82,94,183,185,188,232,233,234,242,243,244,245,246,326,332,338,346,369,371,372,375,376,378,379,381,389,393,425,426,427,428,448,455,462,467,468,470,471,472,473,474,479,483,484,485,486],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[467,478],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[15,20,34,98,99,100,101,104,105,106,107,108,173,174,175,176,177,179,182,190,191,192,193,194,195,197,223,224,225,226,227,228,229,230,231,249,258,258,259,259,264,265,266,267,269,270,271,272,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,314,315,349,351,352,491,354,355,357,358,359,360,362,364,365,366,492,368,382,386,441,442,493,444,445,446],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[191,195],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1459","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[280],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[279],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[54,122,251,317,319,389,392,394,448],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1647","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[23,24,25,26,27,28,36,38,39,40,41,42,43,59,61,62,64,65,66,67,68,69,74,75,78,79,82,96,100,102,103,105,118,120,129,130,132,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,176,177,179,184,185,188,190,210,211,212,213,232,234,243,245,246,249,250,252,253,255,263,266,267,268,269,270,271,274,278,279,280,286,289,299,305,308,309,310,311,313,314,315,320,321,322,323,325,326,327,328,329,330,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,354,358,360,362,366,369,370,371,373,375,376,377,380,381,389,393,404,411,412,413,414,415,416,417,418,419,420,421,422,434,441,446,449,450,451,452,453,455,458,459,462,466,467,468,469,470,473,474,475,476,478,479,483,485,486],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[494],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:40","sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[495],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[52,61,62,64,65,66,67,68,94,102,103,183,184,185,186,187,188,242,243,274,317,319,320,321,322,323,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,452,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,483],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[496],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[5,6,7,8,10,11,26,27,28,29,32,36,37,38,39,40,41,42,43,48,49,50,51,52,53,54,56,57,61,62,64,65,66,67,68,74,75,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,100,102,103,105,106,108,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,183,184,185,186,187,188,210,212,213,214,215,216,217,218,229,230,231,232,233,234,236,237,240,241,242,243,244,245,246,247,248,250,251,252,253,254,255,257,260,261,262,263,264,265,266,267,268,269,270,271,274,280,286,308,311,313,317,319,320,321,322,323,325,326,327,328,329,330,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,350,351,369,370,371,372,373,374,375,376,378,379,380,381,389,392,393,394,404,411,412,413,414,415,416,417,419,420,421,422,423,434,444,445,446,447,448,449,450,451,452,453,454,455,458,459,461,462,463,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,481,482,483,484,485,486,487],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[335],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[497,76,77,80,81,183,233,234,242,245,372,378,379,485],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[194,496,498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[320,339,342,499],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[258,259,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,310,315,316,349,353,356,361,364,500,367,501,502,441,442],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[204,270,338,374],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[322,323,328,329,331,341,466,468,476],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[466,468,469,470,471,472,473,475,503,476,477,479],"status":-1,"binaryOperator":"(this.java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[124,131,200],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[190,191,192,193,195,197],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[504,505,76,242,506,507],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:223","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":323,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":74,"org.easymock.tests2.UsageTest.argumentsOrdered":379,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":421,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":119,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":374,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":260,"org.easymock.tests2.DelegateToTest.testReturnException":461,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":49,"org.easymock.tests.MockingTest.testPartialClassMocking":176,"org.easymock.tests.MockClassControlTest.testToString":225,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":424,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":128,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":293,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":133,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":289,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":459,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":330,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":184,"org.easymock.tests2.UsageTest.wrongArguments":372,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":440,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":46,"org.easymock.samples.ExampleTest.answerVsDelegate":251,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":20,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":181,"org.easymock.tests2.UsageConstraintsTest.testNull":326,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":269,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":420,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":230,"org.easymock.tests2.CaptureTest.testPrimitive":469,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":152,"org.easymock.tests.UsageTest.moreThanOneArgument":75,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":268,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":216,"org.easymock.tests.UsageTest.argumentsOrdered":81,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":235,"org.easymock.tests.UsageVarargTest.varargIntAccepted":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":124,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":64,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":352,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":409,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":384,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":359,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":68,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":434,"org.easymock.tests.ReplayStateInvalidUsageTest.times":206,"org.easymock.tests2.DependencyTest.testClassMocking":456,"org.easymock.tests2.AnswerTest.answer":389,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":126,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":398,"org.easymock.tests2.CaptureTest.testAnd":466,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":17,"org.easymock.tests2.UsageTest.strictResetToDefault":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":277,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":356,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":215,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":415,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":212,"org.easymock.tests2.DelegateToTest.testDelegate":465,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":148,"org.easymock.tests.LimitationsTest.mockFinalMethod":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":73,"org.easymock.tests2.DependencyTest.testClassMockingSupport":457,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":220,"org.easymock.tests2.CaptureTest.testCapture1_2446744":470,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":273,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":146,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":396,"org.easymock.tests.UsageThrowableTest.throwError":36,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":200,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":19,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":410,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":63,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":218,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":501,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":307,"org.easymock.samples.PartialClassMockTest.testGetArea":249,"org.easymock.tests.MockingTest.testInterfaceMocking":178,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":201,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":65,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":24,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":134,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":294,"org.easymock.tests2.UsageTest.niceToStrict":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":109,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":358,"org.easymock.tests2.MockBuilderTest.testCreateMock":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":302,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":437,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":506,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":142,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":416,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":16,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":44,"org.easymock.tests.UsageOverloadedMethodTest.overloading":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":304,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":57,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":336,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":164,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":26,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":496,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":335,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":475,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":86,"org.easymock.tests.MockClassControlTest.testEquals":229,"org.easymock.tests2.EasyMockSupportClassTest.testAll":286,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":106,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":150,"org.easymock.tests2.CaptureTest.testCaptureAll":467,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":71,"org.easymock.tests.MockNameTest.defaultName":35,"org.easymock.tests2.UsageConstraintsTest.testMatches":337,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":198,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":217,"org.easymock.samples.ExampleTest.voteForRemovals":255,"org.easymock.tests.UsageVarargTest.allKinds":94,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":232,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":72,"org.easymock.samples.BasicClassMockTest.testPrintContent":265,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":42,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":481,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":464,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":406,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":53,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":196,"org.easymock.tests2.UsageConstraintsTest.greaterThan":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":287,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":211,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":280,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":197,"org.easymock.samples.ExampleTest.voteForRemoval":252,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":450,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":281,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":21,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":385,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":272,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":231,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":369,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":116,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":413,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":48,"org.easymock.tests2.CaptureTest.testCaptureFirst":479,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":115,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":414,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":381,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":60,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":160,"org.easymock.tests2.CaptureTest.testCapture2_2446744":478,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":452,"org.easymock.tests2.UsageTest.moreThanOneArgument":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":127,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":366,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":93,"org.easymock.tests.GenericTest.testBridgedEquals":108,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":10,"org.easymock.tests.UsageExpectAndReturnTest.longType":156,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":411,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":69,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":492,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":151,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":219,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":344,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":149,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":214,"org.easymock.tests.UsageCallCountTest.tooManyCalls":11,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":303,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":161,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":439,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":138,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":41,"org.easymock.tests.MockingTest.testNiceClassMocking":182,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":309,"org.easymock.tests.MockingTest.testClassMocking":174,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":491,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":4,"org.easymock.tests2.UsageConstraintsTest.testContains":334,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":446,"org.easymock.tests2.UsageConstraintsTest.testFind":325,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":28,"org.easymock.tests.MockTypeTest.fromEasyMockClass":18,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":240,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":319,"org.easymock.tests.UsageExpectAndReturnTest.object":163,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":274,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":419,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":88,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":32,"org.easymock.tests.UsageTest.exactCallCountByLastCall":82,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":114,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":95,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":236,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":442,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":169,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":83,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":56,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":400,"org.easymock.tests.MockClassControlTest.testHashCode":228,"org.easymock.tests2.EasyMockSupportTest.testVerify":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":296,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":237,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":1,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":54,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":395,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":480,"org.easymock.tests.UsageVarargTest.varargCharAccepted":87,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":189,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":132,"org.easymock.tests2.UsageTest.openCallCountByLastCall":375,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":422,"org.easymock.tests.DefaultClassInstantiatorTest.object":190,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":0,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":30,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":497,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":39,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":432,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":399,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":227,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":139,"org.easymock.tests.CapturesMatcherTest.test":494,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":170,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":12,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":305,"org.easymock.tests2.UsageTest.resumeIfFailure":380,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":15,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":383,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":51,"org.easymock.tests2.StubTest.stubWithReturnValue":455,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":361,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":162,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":345,"org.easymock.tests2.SerializationTest.testAllMockedMethod":351,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":125,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":507,"org.easymock.samples.SupportTest.voteForRemovals":263,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":104,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":402,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":145,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":488,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":131,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":390,"org.easymock.tests.UsageExpectAndThrowTest.object":143,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":97,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":342,"org.easymock.tests2.DelegateToTest.testWrongClass":463,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":61,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":62,"org.easymock.tests.UsageStrictMockTest.range":245,"org.easymock.samples.ConstructorCalledMockTest.testTax":258,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":387,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":418,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":144,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":360,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":80,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":45,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":504,"org.easymock.tests2.CaptureTest.testCaptureNone":474,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":25,"org.easymock.tests.UsageUnorderedTest.message":183,"org.easymock.tests.UsageVerifyTest.twoReturns":234,"org.easymock.tests.UsageVarargTest.varargByteAccepted":92,"org.easymock.tests2.ThreadingTest.testThreadSafe":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":300,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":8,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":33,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":264,"org.easymock.tests2.CaptureTest.testCapture_2617107":468,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":222,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":129,"org.easymock.tests2.UsageConstraintsTest.any":332,"org.easymock.tests2.StubTest.stub":454,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":14,"org.easymock.tests.UsageExpectAndThrowTest.longType":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":50,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":194,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":204,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":484,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":404,"org.easymock.tests2.SerializationTest.testClass":349,"org.easymock.tests.LimitationsTest.mockNativeMethod":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":172,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":107,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":431,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":487,"org.easymock.tests2.NameTest.nameForMocksControl":428,"org.easymock.tests2.MockedExceptionTest.testMockedException":445,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":288,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":79,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":137,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":318,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":266,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":362,"org.easymock.tests.MockingTest.testNicePartialClassMocking":177,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":271,"org.easymock.tests2.CaptureTest.testCaptureLast":473,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":429,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":221,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":315,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":329,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":343,"org.easymock.tests.MockingTest.testTwoMocks":175,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":316,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":141,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":378,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":347,"org.easymock.samples.ExampleTest.removeNonExistingDocument":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":436,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":202,"org.easymock.tests.UsageStrictMockTest.differentMethods":246,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":401,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":192,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":451,"org.easymock.tests2.MockBuilderTest.testCreateMockString":368,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":223,"org.easymock.tests.UsageExpectAndThrowTest.floatType":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":290,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":392,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":443,"org.easymock.tests.UsageVerifyTest.twoThrows":233,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":299,"org.easymock.samples.ExampleTest.voteAgainstRemoval":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":23,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":279,"org.easymock.tests.LimitationsTest.privateConstructor":99,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":502,"org.easymock.tests2.UsageConstraintsTest.testNotNull":346,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":444,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":43,"org.easymock.tests2.UsageTest.defaultResetToNice":377,"org.easymock.samples.ExampleTest.voteAgainstRemovals":250,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":121,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":430,"org.easymock.tests.UsageVarargTest.differentLength":89,"org.easymock.tests2.CallbackTest.callback":448,"org.easymock.tests2.UsageConstraintsTest.equals":324,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":275,"org.easymock.tests.UsageTest.openCallCountByLastCall":78,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":320,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":186,"org.easymock.tests.UsageCallCountTest.tooFewCalls":6,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":311,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":47,"org.easymock.tests.UsageThrowableTest.throwCheckedException":40,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":505,"org.easymock.tests.MockingTest.testStrictClassMocking":173,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":435,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":310,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":313,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":394,"org.easymock.tests2.CompareToTest.testGreateOrEqual":490,"org.easymock.tests.ObjectMethodsTest.testHashCode":31,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":495,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":453,"org.easymock.tests2.NameTest.nameForNiceMock":427,"org.easymock.tests2.DependencyTest.testInterfaceMocking":458,"org.easymock.samples.ExampleTest.addDocument":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":301,"org.easymock.tests2.DelegateToTest.testStubDelegate":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":306,"org.easymock.tests2.AnswerTest.stubAnswer":393,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":243,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":363,"org.easymock.tests.UsageVarargTest.varargLongAccepted":91,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":118,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":171,"org.easymock.tests.UsageExpectAndReturnTest.floatType":155,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":441,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":408,"org.easymock.tests.UsageThrowableTest.noUpperLimit":37,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":58,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":340,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":321,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":382,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":471,"org.easymock.tests2.SerializationTest.test":350,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":498,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":191,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":154,"org.easymock.tests2.UsageConstraintsTest.testSame":327,"org.easymock.samples.SupportTest.addDocument":262,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":312,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":291,"org.easymock.tests.GenericTest.testPackageScope":105,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":113,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":407,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":180,"org.easymock.tests2.NameTest.nameForMock":425,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":165,"org.easymock.tests2.UsageStrictMockTest.differentMethods":486,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":367,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":276,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":157,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":147,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":29,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":213,"org.easymock.tests2.MockedExceptionTest.testRealException":447,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":22,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":123,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":185,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":209,"org.easymock.tests2.NameTest.nameForStrictMock":426,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":357,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":317,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":270,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":386,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":193,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":341,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":354,"org.easymock.tests2.UsageStrictMockTest.range":485,"org.easymock.tests2.UsageConstraintsTest.lessThan":348,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":412,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":117,"org.easymock.tests2.CaptureTest.testCaptureRightOne":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":295,"org.easymock.tests2.UsageConstraintsTest.testOr":328,"org.easymock.tests.UsageRangeTest.combination":210,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":267,"org.easymock.tests.UsageTest.wrongArguments":77,"org.easymock.tests2.MockBuilderTest.testWithConstructor":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":292,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":224,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":110,"org.easymock.tests.UsageVarargTest.varargShortAccepted":90,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":195,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":9,"org.easymock.tests2.UsageConstraintsTest.cmpTo":333,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":391,"org.easymock.tests2.CompareToTest.testLessThan":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":112,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":376,"org.easymock.tests2.CaptureTest.testCaptureFromStub":477,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":199,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":355,"org.easymock.tests.UsageTest.unexpectedCallWithArray":76,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":242,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":7,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":500,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":167,"org.easymock.tests2.CaptureTest.testCapture":503,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":244,"org.easymock.tests2.UsageConstraintsTest.constraints":322,"org.easymock.samples.ExampleTest.addAndChangeDocument":257,"org.easymock.tests.UsageStrictMockTest.testVerify":248,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":261,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":241,"org.easymock.tests2.CompareToTest.testGreateThan":499,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":70,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":472,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":493,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":159,"org.easymock.tests.LimitationsTest.abstractClass":98,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":59,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":67,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":417,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":84}}]

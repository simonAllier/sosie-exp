[{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,27,60,61,0,62,1,2,63,29,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,4,5,6,134,135,136,137,138,139,140,141,142,143,144,145,146,8,147,148,149,9,10,150,151,152,153,154,155,156,157,158,13,14,159,160,161,162,163,164,165,166,167,168,169,15,16,170,17,18,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,20,21,22,250],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"methods":"methods","name":"name","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:123","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[251,13,160,163,164,165,166,167,252,207,253,254,210,211,255,212,256,257,258,259,213,260,261,262,263,214,264,265,266,267,268,269,270,271,272],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[138,273],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[41,42,43,44,45,47,49,51,60,61,0,62,1,2,63,66,75,76,77,274,78,79,80,81,82,83,275,84,85,86,89,276,94,277,278,108,109,110,111,113,114,117,118,119,251,122,279,280,281,123,124,125,126,127,282,128,283,284,129,130,131,132,133,285,134,137,138,143,145,146,147,148,286,287,9,10,150,12,13,14,160,161,162,163,164,165,166,167,168,169,15,16,170,17,18,171,172,180,182,185,215,216,288,289,290,291,292,222,225,268,226,227,228,229,230,232,233,234,235,236,293,294,295,296,21,22,250],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[297,298,299,300],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[25,25,26,26,51,52,53,27,28,29,65,67,68,69,70,72,73,301,302,303,85,86,88,89,90,91,92,30,304,93,276,94,277,305,306,97,98,99,307,136,137,308,309,138,139,140,141,34,142,143,310,144,311,312,313,314,315,151,316,317,152,318,319,320,321,322,323,324,325,326,153,327,328,329,330,331,154,332,333,173,334,335,336,337,338,339,340,341,23,186,187,342,343,344,345,216,346,347,348,349,237,238,239,350,240,242,243,244,245,246,247,248],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[351,352,353,354,15,249],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[355],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[51,29,356,357,91,276,94,358,137,138,140,141,143,273,144,340,341,241],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[351,352,66,353,354,359,15,16,249,20,295,296,21,22,250],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.Range:52","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[360,283],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"result","maximum":"result"}},{"position":"org.easymock.internal.RecordState:126","failures":[43,106,107,278,206],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[74,76,83,361,122,280,362,123,363,129,285],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[74,75,76,77,274,78,79,80,81,82,83,364,275,84,365],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[141,340],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[28,366,367,368,369,370,33],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[202],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"failures":[371,269],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[127],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[145,287,13,162,294,296],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:311","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[29,64,65],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[27,28,29,366,367,368,372,373,33,34],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[297,298,299,300],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:159","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":122,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":294,"org.easymock.tests2.UsageTest.argumentsOrdered":10,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":118,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":148,"org.easymock.tests2.StubTest.stubWithReturnValue":251,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":33,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":133,"org.easymock.tests2.SerializationTest.testAllMockedMethod":65,"org.easymock.tests2.DelegateToTest.testReturnException":106,"org.easymock.tests.MockingTest.testPartialClassMocking":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":39,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":352,"org.easymock.samples.SupportTest.voteForRemovals":41,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":23,"org.easymock.tests.MockClassControlTest.testToString":242,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":306,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":253,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":152,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":297,"org.easymock.tests.UsageExpectAndThrowTest.object":213,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":11,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":59,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":366,"org.easymock.tests2.DelegateToTest.testWrongClass":107,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":124,"org.easymock.tests2.UsageTest.wrongArguments":8,"org.easymock.tests.UsageStrictMockTest.range":17,"org.easymock.samples.ConstructorCalledMockTest.testTax":25,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":157,"org.easymock.samples.ExampleTest.answerVsDelegate":43,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":115,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":341,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":67,"org.easymock.tests2.UsageConstraintsTest.testNull":280,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":260,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":88,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":247,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":117,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":301,"org.easymock.tests2.CaptureTest.testPrimitive":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":313,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":267,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":203,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":21,"org.easymock.tests.UsageTest.moreThanOneArgument":19,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":87,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":156,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":353,"org.easymock.tests2.CaptureTest.testCaptureNone":81,"org.easymock.tests.UsageUnorderedTest.message":215,"org.easymock.tests.UsageVerifyTest.twoReturns":14,"org.easymock.tests.UsageVarargTest.varargByteAccepted":234,"org.easymock.tests.UsageTest.argumentsOrdered":22,"org.easymock.tests.UsageVarargTest.varargIntAccepted":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":327,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":182,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":52,"org.easymock.tests2.CaptureTest.testCapture_2617107":76,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":370,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":223,"org.easymock.tests2.UsageConstraintsTest.any":125,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":355,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":200,"org.easymock.tests2.StubTest.stub":121,"org.easymock.tests.UsageExpectAndThrowTest.longType":211,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":337,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":199,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":62,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":100,"org.easymock.tests.LimitationsTest.mockNativeMethod":216,"org.easymock.tests.ReplayStateInvalidUsageTest.times":201,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":57,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":342,"org.easymock.tests2.AnswerTest.answer":134,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":363,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":105,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":357,"org.easymock.tests2.CaptureTest.testAnd":74,"org.easymock.tests2.UsageTest.strictResetToDefault":146,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":93,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":63,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":32,"org.easymock.tests2.NameTest.nameForMocksControl":6,"org.easymock.tests2.MockedExceptionTest.testMockedException":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":112,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":296,"org.easymock.tests2.DelegateToTest.testDelegate":278,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":255,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":239,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":141,"org.easymock.tests.MockingTest.testNicePartialClassMocking":238,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":214,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":90,"org.easymock.tests.LimitationsTest.mockFinalMethod":346,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":252,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":159,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":73,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":221,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":131,"org.easymock.tests.MockingTest.testTwoMocks":349,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":359,"org.easymock.tests2.CaptureTest.testCapture1_2446744":274,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":262,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":258,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":103,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":9,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":195,"org.easymock.tests.UsageThrowableTest.throwError":160,"org.easymock.samples.ExampleTest.removeNonExistingDocument":48,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":197,"org.easymock.tests.UsageStrictMockTest.differentMethods":18,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":335,"org.easymock.tests2.MockBuilderTest.testCreateMockString":144,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":318,"org.easymock.tests.UsageExpectAndThrowTest.floatType":210,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":315,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":135,"org.easymock.tests.UsageVerifyTest.twoThrows":13,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":153,"org.easymock.samples.PartialClassMockTest.testGetArea":51,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":196,"org.easymock.samples.ExampleTest.voteAgainstRemoval":45,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":322,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":254,"org.easymock.tests2.UsageTest.niceToStrict":147,"org.easymock.tests.LimitationsTest.privateConstructor":345,"org.easymock.tests2.UsageConstraintsTest.testNotNull":285,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":97,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":167,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":24,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":138,"org.easymock.tests2.MockBuilderTest.testCreateMock":142,"org.easymock.tests2.UsageTest.defaultResetToNice":149,"org.easymock.samples.ExampleTest.voteAgainstRemovals":42,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":329,"org.easymock.tests.UsageVarargTest.differentLength":231,"org.easymock.tests2.CallbackTest.callback":66,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":30,"org.easymock.tests.UsageTest.openCallCountByLastCall":295,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":351,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":259,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":113,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":271,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":222,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":155,"org.easymock.tests.UsageCallCountTest.tooFewCalls":180,"org.easymock.tests.UsageOverloadedMethodTest.overloading":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":326,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":282,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":207,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":224,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":70,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":127,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":82,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":158,"org.easymock.tests.UsageThrowableTest.throwCheckedException":164,"org.easymock.tests.MockClassControlTest.testEquals":246,"org.easymock.tests2.EasyMockSupportClassTest.testAll":151,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":187,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":354,"org.easymock.tests.MockingTest.testStrictClassMocking":347,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":265,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":302,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":219,"org.easymock.tests2.CaptureTest.testCaptureAll":75,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":104,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":291,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":72,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":69,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":71,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":299,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":193,"org.easymock.tests.ObjectMethodsTest.testHashCode":175,"org.easymock.samples.ExampleTest.voteForRemovals":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":369,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":56,"org.easymock.tests2.NameTest.nameForNiceMock":5,"org.easymock.tests.UsageVarargTest.allKinds":236,"org.easymock.tests2.DependencyTest.testInterfaceMocking":58,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":12,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":368,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":220,"org.easymock.samples.BasicClassMockTest.testPrintContent":53,"org.easymock.samples.ExampleTest.addDocument":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":332,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":166,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":60,"org.easymock.tests2.AnswerTest.stubAnswer":298,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":16,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":373,"org.easymock.tests2.UsageConstraintsTest.greaterThan":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":277,"org.easymock.tests.UsageVarargTest.varargLongAccepted":233,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":171,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":339,"org.easymock.samples.ExampleTest.voteForRemoval":44,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":305,"org.easymock.tests.UsageExpectAndReturnTest.floatType":188,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":310,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":91,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":27,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":26,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":284,"org.easymock.tests.UsageThrowableTest.noUpperLimit":161,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":248,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":145,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":311,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":78,"org.easymock.tests2.SerializationTest.test":64,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":34,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":334,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":110,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":162,"org.easymock.tests2.UsageConstraintsTest.testSame":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":314,"org.easymock.samples.SupportTest.addDocument":40,"org.easymock.tests2.CaptureTest.testCaptureFirst":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":300,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":111,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":150,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":209,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":319,"org.easymock.tests.GenericTest.testPackageScope":186,"org.easymock.tests2.CaptureTest.testCapture2_2446744":275,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":55,"org.easymock.tests2.UsageTest.moreThanOneArgument":7,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":143,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":235,"org.easymock.tests.GenericTest.testBridgedEquals":343,"org.easymock.tests2.NameTest.nameForMock":3,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":184,"org.easymock.tests.UsageExpectAndReturnTest.longType":189,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":217,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":108,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":273,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":266,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":132,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":264,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":36,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":304,"org.easymock.tests.UsageCallCountTest.tooManyCalls":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":263,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":330,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":38,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":212,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":292,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":204,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":165,"org.easymock.tests.MockingTest.testNiceClassMocking":350,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":68,"org.easymock.tests.MockingTest.testClassMocking":348,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":358,"org.easymock.tests2.NameTest.nameForStrictMock":4,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":178,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":99,"org.easymock.tests2.UsageConstraintsTest.testFind":279,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":268,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":309,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":95,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":89,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":96,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":168,"org.easymock.tests.UsageExpectAndReturnTest.object":191,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":312,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":336,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":129,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":92,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":137,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":367,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":230,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":176,"org.easymock.tests.UsageTest.exactCallCountByLastCall":250,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":307,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":290,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":372,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":323,"org.easymock.tests2.CaptureTest.testCaptureRightOne":83,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":288,"org.easymock.tests2.UsageConstraintsTest.testOr":362,"org.easymock.tests.UsageRangeTest.combination":293,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":28,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":86,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":206,"org.easymock.tests.UsageTest.wrongArguments":20,"org.easymock.tests2.MockBuilderTest.testWithConstructor":31,"org.easymock.tests.MockClassControlTest.testHashCode":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":320,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":241,"org.easymock.tests2.EasyMockSupportTest.testVerify":120,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":324,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":289,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":338,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":270,"org.easymock.tests.UsageVarargTest.varargShortAccepted":232,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":205,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":102,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":183,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":101,"org.easymock.tests2.UsageConstraintsTest.cmpTo":126,"org.easymock.tests.UsageVarargTest.varargCharAccepted":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":272,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":61,"org.easymock.tests2.UsageTest.openCallCountByLastCall":286,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":287,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":119,"org.easymock.tests.DefaultClassInstantiatorTest.object":173,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":269,"org.easymock.tests2.CaptureTest.testCaptureFromStub":364,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":194,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":308,"org.easymock.tests.UsageTest.unexpectedCallWithArray":249,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":325,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":257,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":303,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":15,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":163,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":181,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":35,"org.easymock.tests2.UsageConstraintsTest.constraints":361,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":276,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":244,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":256,"org.easymock.samples.ExampleTest.addAndChangeDocument":49,"org.easymock.tests.CapturesMatcherTest.test":365,"org.easymock.tests.UsageStrictMockTest.testVerify":172,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":371,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":54,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":154,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":169,"org.easymock.tests2.CompareToTest.testGreateThan":360,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":218,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":79,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":356,"org.easymock.tests.LimitationsTest.abstractClass":344,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":340,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":208,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":227,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":114}}]

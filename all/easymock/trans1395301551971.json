[{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[0,1,2,3],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:180","sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[4,5,6,7,8,9,10],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1963","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","type":"CtInvocationImpl"},"failures":[11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"position":"org.easymock.internal.RecordState:243","failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[99,100],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[101,102,103,104,105,106,13,14,107,15,108,109,110,111,112,113,114,115,16,17,18,19,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,20,21,157,158,159,160,161,162,163,164,165,166,167,168,169,170,22,171,172,23,173,174,175,176,177,178,179,180,181,24,182,25,26,183,184,27,28,29,30,31,32,33,34,35,185,186,187,188,189,190,191,192,193,194,36,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,37,245,38,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,39,40,271,272,41,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,42,292,293,294,295,296,297,298,299,43,44,45,46,47,48,300,301,49,50,302,51,52,53,303,54,55,56,57,58,304,305,306,307,308,309,310,311,312,313,314,315,316,317,59,318,319,320,60,9,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,61,337,62,63,338,339,340,341,342,343,344,345,346,347,348,349,350,351,1,352,353,354,355,356,2,357,358,100,359,360,361,362,363,364,365,366,3,367,368,369,370,371,372,373,374,375,376,377,378,379,64,65,66,67,380,68,69,70,381,382,383,384,385,386,387,71,388,389,390,72,391,73,10,74,392,393,394,75,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,11,432,433,434,435,436,437,438,439,440,12,441,442,443,444,445,76,446,447,448,449,77,450,451,78,452,453,454,455,456,457,458,459,460,79,461,462,463,464,465,80,466,467,81,82,83,84,85,86,468,469,87,470,471,472,88,89,90,473,474,475,476,91,92,477,478,479,480,481,482,483,484,93,485,486,487,488,489,94,95,490,96,97,491,98,492,493,494],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[351],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[101,102,103,24,26,183,205,227,298,61,63,338,407],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[4,5,6,7,8,9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[101,102,103,104,105,106,13,14,107,15,108,109,110,111,112,113,114,115,16,17,18,19,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,20,21,157,158,159,160,161,162,163,164,165,166,167,168,169,170,22,171,172,23,173,174,175,176,177,178,179,180,181,24,182,25,26,183,184,27,28,29,30,31,32,33,34,35,185,186,187,188,189,190,191,192,193,194,36,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,37,245,38,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,39,40,271,272,41,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,42,292,293,294,295,296,297,298,299,43,44,45,46,47,48,300,301,49,50,302,51,52,53,303,54,55,56,57,58,304,305,306,307,308,309,310,311,312,313,314,315,316,317,59,318,319,320,60,9,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,61,337,62,63,338,339,340,341,342,343,344,345,346,347,348,349,350,351,1,352,353,354,355,356,2,357,358,100,359,360,361,362,363,364,365,366,3,367,368,369,370,371,372,373,374,375,376,377,378,379,64,65,66,67,380,68,69,70,381,382,383,384,385,386,387,71,388,389,390,72,391,73,10,74,392,393,394,75,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,11,432,433,434,435,436,437,438,439,440,12,441,442,443,444,445,76,446,447,448,449,77,450,451,78,452,453,454,455,456,457,458,459,460,79,461,462,463,464,465,80,466,467,81,82,83,84,85,86,468,469,87,470,471,472,88,89,90,473,474,475,476,91,92,477,478,479,480,481,482,483,484,93,485,486,487,488,489,94,95,490,96,97,491,98,492,493,494],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[409],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[101,103,13,14,15,16,18,19,130,132,141,142,144,154,156,20,21,22,171,172,24,25,26,27,28,29,30,31,187,189,190,191,192,193,194,36,195,198,226,227,230,231,234,37,38,39,40,41,42,43,44,45,46,47,48,300,301,49,50,302,51,52,53,303,54,55,56,57,58,309,59,60,328,61,62,63,339,340,342,343,344,345,347,348,349,350,351,1,353,354,355,356,2,357,358,100,359,360,361,362,364,365,366,3,367,368,369,370,371,372,373,375,376,377,378,64,65,66,67,68,69,70,72,73,74,405,406,407,409,411,412,416,417,418,422,429,430,11,432,435,436,437,438,440,12,442,443,444,445,76,446,77,78,79,80,81,82,83,84,85,86,87,89,91,92,93,94,95,96,97,98],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[147,151],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[495,496,181,228,497,498],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[0,1,2,3],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[101,102,103,112,113,157,158,169,22,172,181,24,25,26,189,226,227,229,230,231,232,233,234,238,240,243,320,61,62,63,348,349,353,354,365,366,405,407,408,411,412,414,415,417,418,425,426,427,428,490],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[356],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[499,339,340,341],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[244],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:358","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[99,342,100,361],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[99,100],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:315","failures":[155,172,189,193,194,196,197,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,231,274,275,276,277,278,279,296,397,398,399,400,405,412,442],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:693","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + org.easymock.internal.Range.(toString())","type":"CtReturnImpl"},"failures":[101,102,103,17,157,165,181,24,25,26,184,227,229,232,233,235,238,243,328,61,62,63,339,345,100,369,373,376,72,396,407,408,410,411,414,415,418,425,426,427,428,89,90],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[500,501,502],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[478,479,480],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[495,496,181,228,497,498],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:357","sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[403],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"argType":"type","paramType":"type"}},{"position":"org.easymock.ConstructorArgs:54","failures":[60,9,339,66,70,381,387,389,10,393,503,395,504,505,447,448,449,77,450,451,78,452,453,454,455,456,457,458,459,460,79,461,462,463,464,465,80,466,467,488,489],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[264,291,292,76],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"failures":[104,105,106,13,14,15,110,146,147,148,149,150,151,153,186,244,37,245,38,246,247,252,271,272,41,273,283,284,285,286,287,288,289,290,60,9,339,341,64,65,66,67,69,70,386,71,388,390,72,391,73,74,393,394,75,396,397,398,399,447,448,449,77,450,451,78,452,453,454,455,456,457,458,459,460,79,461,462,463,464,465,80,466,467,81,82,84,85,86,468,87,470,471,472,88,89,90,473,474,477,481,485,486,488,488,489,489,94],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":345,"org.easymock.tests2.UsageTest.argumentsOrdered":415,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":226,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":377,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":131,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":410,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":487,"org.easymock.tests2.DelegateToTest.testReturnException":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":275,"org.easymock.tests.MockingTest.testPartialClassMocking":13,"org.easymock.tests.MockClassControlTest.testToString":285,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":424,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":42,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":455,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":78,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":206,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":92,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":4,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":1,"org.easymock.tests2.UsageTest.wrongArguments":408,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":36,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":334,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":257,"org.easymock.samples.ExampleTest.answerVsDelegate":490,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":252,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":109,"org.easymock.tests2.UsageConstraintsTest.testNull":348,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":84,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":290,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":376,"org.easymock.tests2.CaptureTest.testPrimitive":11,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":198,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":225,"org.easymock.tests.UsageTest.moreThanOneArgument":227,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":34,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":111,"org.easymock.tests.UsageTest.argumentsOrdered":233,"org.easymock.tests.UsageVarargTest.varargIntAccepted":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":27,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":386,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":8,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":479,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":314,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":31,"org.easymock.tests.ReplayStateInvalidUsageTest.times":267,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":328,"org.easymock.tests2.DependencyTest.testClassMocking":475,"org.easymock.tests2.AnswerTest.answer":418,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":138,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":385,"org.easymock.tests2.CaptureTest.testAnd":429,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":249,"org.easymock.tests2.UsageTest.strictResetToDefault":406,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":472,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":389,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":33,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":18,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":371,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":115,"org.easymock.tests2.DelegateToTest.testDelegate":320,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":221,"org.easymock.tests.LimitationsTest.mockFinalMethod":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":120,"org.easymock.tests2.DependencyTest.testClassMockingSupport":476,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":203,"org.easymock.tests2.CaptureTest.testCapture1_2446744":432,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":469,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":219,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":383,"org.easymock.tests.UsageThrowableTest.throwError":187,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":261,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":251,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":170,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":315,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":185,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":504,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":467,"org.easymock.samples.PartialClassMockTest.testGetArea":94,"org.easymock.tests.MockingTest.testInterfaceMocking":107,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":262,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":28,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":456,"org.easymock.tests2.UsageTest.niceToStrict":409,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":178,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":207,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":121,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":72,"org.easymock.tests2.MockBuilderTest.testCreateMock":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":463,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":331,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":497,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":215,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":372,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":248,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":282,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":255,"org.easymock.tests.UsageOverloadedMethodTest.overloading":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":460,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":2,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":296,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":22,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":51,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":356,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":437,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":161,"org.easymock.tests2.EasyMockSupportClassTest.testAll":77,"org.easymock.tests.MockClassControlTest.testEquals":289,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":245,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":223,"org.easymock.tests2.CaptureTest.testCaptureAll":430,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":384,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":118,"org.easymock.tests.MockNameTest.defaultName":199,"org.easymock.tests2.UsageConstraintsTest.testMatches":357,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":35,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":259,"org.easymock.samples.ExampleTest.voteForRemovals":98,"org.easymock.tests.UsageVarargTest.allKinds":169,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":101,"org.easymock.samples.BasicClassMockTest.testPrintContent":486,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":119,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":193,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":279,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":311,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":319,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":152,"org.easymock.tests2.UsageConstraintsTest.greaterThan":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":450,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":17,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":90,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":153,"org.easymock.samples.ExampleTest.voteForRemoval":96,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":473,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":444,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":253,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":480,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":468,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":405,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":186,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":369,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":448,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":274,"org.easymock.tests2.CaptureTest.testCaptureFirst":12,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":370,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":417,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":299,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":301,"org.easymock.tests2.CaptureTest.testCapture2_2446744":440,"org.easymock.tests2.UsageTest.moreThanOneArgument":407,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":75,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":168,"org.easymock.tests.GenericTest.testBridgedEquals":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":242,"org.easymock.tests.UsageExpectAndReturnTest.longType":46,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":116,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":367,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":224,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":23,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":363,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":222,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":32,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":201,"org.easymock.tests.UsageCallCountTest.tooManyCalls":243,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":464,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":49,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":333,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":211,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":192,"org.easymock.tests.MockingTest.testNiceClassMocking":110,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":65,"org.easymock.tests.MockingTest.testClassMocking":105,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":236,"org.easymock.tests2.UsageConstraintsTest.testContains":355,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":399,"org.easymock.tests2.UsageConstraintsTest.testFind":347,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":172,"org.easymock.tests.MockTypeTest.fromEasyMockClass":250,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":404,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":179,"org.easymock.tests.UsageExpectAndReturnTest.object":302,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":87,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":332,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":375,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":5,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":176,"org.easymock.tests.UsageTest.exactCallCountByLastCall":234,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":126,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":112,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":291,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":158,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":55,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":295,"org.easymock.tests.MockClassControlTest.testHashCode":288,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":305,"org.easymock.tests2.EasyMockSupportTest.testVerify":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":458,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":113,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":293,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":382,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":401,"org.easymock.tests.UsageVarargTest.varargCharAccepted":162,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":145,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":144,"org.easymock.tests2.UsageTest.openCallCountByLastCall":411,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":500,"org.easymock.tests.DefaultClassInstantiatorTest.object":146,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":378,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":280,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":459,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":213,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":190,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":326,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":304,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":88,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":287,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":212,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":56,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":80,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":286,"org.easymock.tests2.UsageTest.resumeIfFailure":416,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":247,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":478,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":277,"org.easymock.tests2.StubTest.stubWithReturnValue":442,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":10,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":364,"org.easymock.tests2.SerializationTest.testAllMockedMethod":341,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":137,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":498,"org.easymock.samples.SupportTest.voteForRemovals":93,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":244,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":307,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":218,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":499,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":143,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":419,"org.easymock.tests.UsageExpectAndThrowTest.object":216,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":292,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":361,"org.easymock.tests2.DelegateToTest.testWrongClass":318,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":39,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":40,"org.easymock.samples.ConstructorCalledMockTest.testTax":488,"org.easymock.tests.UsageStrictMockTest.range":25,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":482,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":374,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":64,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":217,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":447,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":232,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":269,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":256,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":495,"org.easymock.tests2.CaptureTest.testCaptureNone":436,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":21,"org.easymock.tests.UsageUnorderedTest.message":157,"org.easymock.tests.UsageVerifyTest.twoReturns":103,"org.easymock.tests.UsageVarargTest.varargByteAccepted":167,"org.easymock.tests2.ThreadingTest.testThreadSafe":443,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":461,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":240,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":485,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":177,"org.easymock.tests2.CaptureTest.testCapture_2617107":431,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":141,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":197,"org.easymock.tests2.UsageConstraintsTest.any":353,"org.easymock.tests2.StubTest.stub":441,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":266,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":142,"org.easymock.tests.UsageExpectAndThrowTest.longType":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":276,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":150,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":265,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":337,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":309,"org.easymock.tests2.SerializationTest.testClass":339,"org.easymock.tests.LimitationsTest.mockNativeMethod":41,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":38,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":58,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":325,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":338,"org.easymock.tests2.NameTest.nameForMocksControl":428,"org.easymock.tests2.MockedExceptionTest.testMockedException":398,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":451,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":231,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":403,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":210,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":81,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":74,"org.easymock.tests.MockingTest.testNicePartialClassMocking":14,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":86,"org.easymock.tests2.CaptureTest.testCaptureLast":435,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":323,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":204,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":70,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":351,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":362,"org.easymock.tests.MockingTest.testTwoMocks":106,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":381,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":43,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":214,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":414,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":366,"org.easymock.samples.ExampleTest.removeNonExistingDocument":492,"org.easymock.tests.UsageStrictMockTest.differentMethods":26,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":263,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":330,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":306,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":148,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":445,"org.easymock.tests2.MockBuilderTest.testCreateMockString":396,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":452,"org.easymock.tests.UsageExpectAndThrowTest.floatType":208,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":449,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":421,"org.easymock.tests.UsageVerifyTest.twoThrows":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":321,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":79,"org.easymock.samples.ExampleTest.voteAgainstRemoval":97,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":132,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":89,"org.easymock.tests.LimitationsTest.privateConstructor":272,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":505,"org.easymock.tests2.UsageConstraintsTest.testNotNull":365,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":397,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":194,"org.easymock.tests2.UsageTest.defaultResetToNice":413,"org.easymock.samples.ExampleTest.voteAgainstRemovals":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":133,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":54,"org.easymock.tests.UsageVarargTest.differentLength":164,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":324,"org.easymock.tests2.CallbackTest.callback":322,"org.easymock.tests2.UsageConstraintsTest.equals":346,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":470,"org.easymock.tests.UsageTest.openCallCountByLastCall":230,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":342,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":196,"org.easymock.tests.UsageCallCountTest.tooFewCalls":238,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":67,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":258,"org.easymock.tests.UsageThrowableTest.throwCheckedException":191,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":496,"org.easymock.tests.MockingTest.testStrictClassMocking":104,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":155,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":69,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":66,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":329,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":268,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":68,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":423,"org.easymock.tests.ObjectMethodsTest.testHashCode":175,"org.easymock.tests2.CompareToTest.testGreateOrEqual":0,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":7,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":446,"org.easymock.tests2.NameTest.nameForNiceMock":427,"org.easymock.tests2.DependencyTest.testInterfaceMocking":91,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":6,"org.easymock.samples.ExampleTest.addDocument":491,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.DelegateToTest.testStubDelegate":59,"org.easymock.tests2.AnswerTest.stubAnswer":422,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":24,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":392,"org.easymock.tests.UsageVarargTest.varargLongAccepted":166,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":130,"org.easymock.tests.UsageExpectAndReturnTest.floatType":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":57,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":60,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":489,"org.easymock.tests.UsageThrowableTest.noUpperLimit":188,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":297,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":313,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":359,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":343,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":477,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":433,"org.easymock.tests2.SerializationTest.test":340,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":147,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":44,"org.easymock.tests2.UsageConstraintsTest.testSame":349,"org.easymock.samples.SupportTest.addDocument":484,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":380,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":453,"org.easymock.tests.GenericTest.testPackageScope":37,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":125,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":312,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":108,"org.easymock.tests2.NameTest.nameForMock":425,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":52,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":395,"org.easymock.tests2.UsageStrictMockTest.differentMethods":63,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":471,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":47,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":220,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":173,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":19,"org.easymock.tests2.MockedExceptionTest.testRealException":400,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":254,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":134,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":270,"org.easymock.tests2.NameTest.nameForStrictMock":426,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":390,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":501,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":402,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":85,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":481,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":149,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":360,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":71,"org.easymock.tests2.UsageStrictMockTest.range":62,"org.easymock.tests2.UsageConstraintsTest.lessThan":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":129,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":457,"org.easymock.tests2.CaptureTest.testCaptureRightOne":438,"org.easymock.tests2.UsageConstraintsTest.testOr":350,"org.easymock.tests.UsageRangeTest.combination":16,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":82,"org.easymock.tests.UsageTest.wrongArguments":229,"org.easymock.tests2.MockBuilderTest.testWithConstructor":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":454,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":284,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":53,"org.easymock.tests.UsageVarargTest.varargShortAccepted":165,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":151,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":241,"org.easymock.tests2.UsageConstraintsTest.cmpTo":354,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":124,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":412,"org.easymock.tests2.CaptureTest.testCaptureFromStub":439,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":260,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":388,"org.easymock.tests.UsageTest.unexpectedCallWithArray":228,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":181,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":239,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":503,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":303,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":182,"org.easymock.tests2.UsageConstraintsTest.constraints":344,"org.easymock.samples.ExampleTest.addAndChangeDocument":493,"org.easymock.tests.UsageStrictMockTest.testVerify":184,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":494,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":180,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":117,"org.easymock.tests2.CompareToTest.testGreateThan":99,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":434,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":29,"org.easymock.tests.LimitationsTest.abstractClass":271,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":30,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":298,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":159,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":373}}]

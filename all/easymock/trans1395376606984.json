[{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:40","sourceCode":"if (org.easymock.internal.DefaultClassInstantiator.isSerializable(java.lang.Class<?>)) {\n    try {\n        return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n    } catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n        throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:41","sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"c","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[47,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[49],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:51","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Float.java.lang.Class<java.lang.Float>, java.lang.Float.java.lang.Float.valueOf(0))","type":"CtInvocationImpl"},"failures":[50,51,52,53,54,5,14,16,30,31,55,56,57],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[59,60,61,62],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[63,64],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1964","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,0,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,4,94,95,96,97,98,99,100,101,40,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1863","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[132,133,128,134],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1162","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:53","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","failures":[135,126,136,137,138,139,140,141,142,143,144],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":126,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":3,"org.easymock.tests2.UsageTest.argumentsOrdered":106,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":8,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":104,"org.easymock.tests2.StubTest.stubWithReturnValue":39,"org.easymock.tests2.SerializationTest.testAllMockedMethod":62,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":6,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":74,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":122,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":132,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":134,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":37,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":24,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":107,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":59,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":10,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":12,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":87,"org.easymock.tests2.UsageConstraintsTest.greaterThan":127,"org.easymock.tests.UsageExpectAndThrowTest.object":22,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":131,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":55,"org.easymock.tests.UsageExpectAndReturnTest.floatType":50,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":52,"org.easymock.tests2.UsageTest.wrongArguments":103,"org.easymock.tests.UsageStrictMockTest.range":88,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":113,"org.easymock.tests2.ConstraintsToStringTest.orToString":114,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":94,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests2.UsageConstraintsTest.testNull":136,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":23,"org.easymock.tests2.SerializationTest.test":61,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":101,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":99,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":33,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":31,"org.easymock.tests.UsageTest.moreThanOneArgument":76,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":80,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":129,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":54,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":66,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":5,"org.easymock.tests.UsageUnorderedTest.message":97,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":96,"org.easymock.tests2.UsageTest.moreThanOneArgument":102,"org.easymock.tests.UsageVerifyTest.twoReturns":75,"org.easymock.tests.UsageTest.argumentsOrdered":81,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":123,"org.easymock.tests2.CaptureTest.testCapture_2617107":143,"org.easymock.tests2.NameTest.nameForMock":133,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":124,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":125,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":30,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":73,"org.easymock.tests2.UsageStrictMockTest.differentMethods":111,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":28,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":7,"org.easymock.tests.UsageExpectAndThrowTest.longType":15,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":64,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":51,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":118,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":109,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":26,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":67,"org.easymock.tests2.SerializationTest.testClass":60,"org.easymock.tests2.DependencyTest.testClassMocking":47,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":53,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":139,"org.easymock.tests2.MockedExceptionTest.testRealException":45,"org.easymock.tests2.CaptureTest.testAnd":142,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":112,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":70,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":108,"org.easymock.tests2.MockedExceptionTest.testMockedException":43,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":17,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":36,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":2,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":16,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":44,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":27,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":11,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":9,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":83,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":140,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":138,"org.easymock.tests2.UsageStrictMockTest.range":110,"org.easymock.tests2.DependencyTest.testClassMockingSupport":48,"org.easymock.tests.MockingTest.testTwoMocks":84,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":82,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":25,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":20,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":57,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":105,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":58,"org.easymock.tests.UsageThrowableTest.throwError":32,"org.easymock.tests2.CaptureTest.testCaptureRightOne":144,"org.easymock.tests.UsageStrictMockTest.differentMethods":89,"org.easymock.tests2.UsageConstraintsTest.testOr":137,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":71,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":128,"org.easymock.tests.UsageTest.wrongArguments":78,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":93,"org.easymock.tests2.ConstraintsToStringTest.andToString":121,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":98,"org.easymock.tests.UsageExpectAndThrowTest.floatType":14,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":117,"org.easymock.tests.UsageVerifyTest.twoThrows":0,"org.easymock.tests.UsageVarargTest.varargShortAccepted":65,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":92,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":130,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":13,"org.easymock.tests2.UsageTest.niceToStrict":63,"org.easymock.tests2.UsageConstraintsTest.testNotNull":141,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":42,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":41,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":38,"org.easymock.tests.UsageTest.unexpectedCallWithArray":77,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":69,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":72,"org.easymock.tests.UsageTest.openCallCountByLastCall":79,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":115,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":19,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":21,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":34,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":86,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":49,"org.easymock.tests2.UsageConstraintsTest.constraints":135,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":18,"org.easymock.tests2.ConstraintsToStringTest.notToString":116,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":4,"org.easymock.tests.UsageStrictMockTest.testVerify":91,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":119,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":85,"org.easymock.tests.UsageThrowableTest.throwCheckedException":35,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":120,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":29,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":68,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":95,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":100}}]

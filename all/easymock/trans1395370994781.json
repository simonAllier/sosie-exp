[{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:52","sourceCode":"return int == int","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[1,2,3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"minimum":"result","maximum":"result"}},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[4,5,6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"this.java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","hashCodeMethod":"toStringMethod","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[8,9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,10,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,8,9,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,11,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,1,395,2,396,397,398,399,400,401,7,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,0,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[245,492,493],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[492],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:65","sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[12,18,440,441,442,443,444,446,447,473,474,475,476,477,479,480],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[396,401],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"failures":[44,396,399,401,7,413,418,457,463,464,469],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[232],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:450","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[284,285,359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[494,495,52,102,496,497],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[19,20,21,22,23,24,26,33,34,35,37,38,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,73,74,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,116,117,118,119,120,121,126,134,135,136,137,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,165,166,167,168,169,170,175,176,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,204,206,207,208,210,255,256,257,258,259,260,261,262,268,269,270,271,272,273,274,275,276,8,277,278,279,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,322,323,324,325,326,328,329,330,331,332,333,334,335,336,337,363,369,370,377,379,380,381,382,383,387,388,390,391,392,393,394,1,395,2,396,398,399,400,401,7,402,404,405,406,407,408,409,410,411,412,413,414,415,417,418,419,420,421,422,423,424,425,426,429,0,433,456,457,458,459,460,461,462,463,464,465,466,467,468,469,483,484,485,487,488,489,490,491],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[12,15,16,17,18,19,20,21,22,23,24,26,27,28,33,34,35,37,38,39,40,41,42,43,44,46,48,49,53,56,57,58,73,74,76,82,83,85,90,95,100,101,102,103,104,105,106,107,108,115,116,117,118,119,120,121,122,138,140,141,143,145,150,152,153,154,155,156,157,165,168,169,170,172,173,175,176,179,180,184,185,187,192,197,204,206,207,208,255,256,257,258,259,260,261,262,273,280,281,282,283,284,285,286,287,288,289,290,291,292,295,296,297,298,299,301,302,303,306,307,308,310,311,312,313,314,315,316,317,318,322,323,324,325,326,328,330,335,336,337,341,344,354,360,365,369,371,373,377,381,382,383,384,386,387,388,393,394,396,398,399,400,7,402,403,404,405,407,408,410,411,413,414,415,416,417,418,421,422,423,424,425,426,429,432,433,434,442,456,457,458,459,460,461,462,463,464,465,466,469,475,483,485,487,490],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[178,216,381,384,421,424,425,426,429],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[2,7,456,458,466],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:50","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","type":"CtInvocationImpl"},"failures":[83,89,96,97,111,147,156,161,185,191,198,199,269],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"expected"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[498,499,500,501,502,503,504,505],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:63","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtInvocationImpl"},"failures":[44,102,103,115,116,117,118,119,120,121,150,152,153,154,155,156,206,207,208,8,277,313,380,393,1,395,2,396,398,399,400,401,7,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,429,456,457,458,459,460,461,462,463,464,465,466,467,468,469],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[174,178],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[392],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[318,319,335,372,375,506,507,508,509,510],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:39","sourceCode":"try {\n    com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler);\n    if (org.easymock.ConstructorArgs != null) {\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n    } else {\n        try {\n            org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n            java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n            java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n            com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n        } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n        }\n    }\n    return com.google.dexmaker.stock.ProxyBuilder<T>.build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[174],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:137","sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[511,512,48,49,105,208,315],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer","matches":"matches"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":396,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":50,"org.easymock.tests2.UsageTest.argumentsOrdered":308,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":290,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":443,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":226,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":303,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":18,"org.easymock.tests2.DelegateToTest.testReturnException":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":147,"org.easymock.tests.MockingTest.testPartialClassMocking":73,"org.easymock.tests.MockClassControlTest.testToString":211,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":321,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":113,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":235,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":348,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":182,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":344,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":296,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":506,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":402,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":117,"org.easymock.tests2.UsageTest.wrongArguments":301,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":481,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":136,"org.easymock.samples.ExampleTest.answerVsDelegate":20,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":67,"org.easymock.tests2.UsageConstraintsTest.testNull":399,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":78,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":424,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":216,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":289,"org.easymock.tests2.CaptureTest.testPrimitive":459,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":121,"org.easymock.tests.UsageTest.moreThanOneArgument":51,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":201,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":423,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":270,"org.easymock.tests.UsageTest.argumentsOrdered":57,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":263,"org.easymock.tests.UsageVarargTest.varargIntAccepted":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":152,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":363,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":451,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":447,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":156,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":475,"org.easymock.tests.ReplayStateInvalidUsageTest.times":130,"org.easymock.tests2.DependencyTest.testClassMocking":293,"org.easymock.tests2.AnswerTest.answer":326,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":403,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":334,"org.easymock.tests2.CaptureTest.testAnd":456,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":64,"org.easymock.tests2.UsageTest.strictResetToDefault":299,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":0,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":367,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":275,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":284,"org.easymock.tests2.DelegateToTest.testDelegate":487,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":267,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":197,"org.easymock.tests.LimitationsTest.mockFinalMethod":205,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":161,"org.easymock.tests2.DependencyTest.testClassMockingSupport":294,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":59,"org.easymock.tests2.CaptureTest.testCapture1_2446744":460,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":428,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":195,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":332,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":124,"org.easymock.tests.UsageThrowableTest.throwError":255,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":66,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":448,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":29,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":272,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":362,"org.easymock.samples.PartialClassMockTest.testGetArea":17,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":125,"org.easymock.tests.MockingTest.testInterfaceMocking":75,"org.easymock.tests2.CompareToTest.testLessOrEqual":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":153,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":183,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":254,"org.easymock.tests2.UsageTest.niceToStrict":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":349,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":217,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":369,"org.easymock.tests2.MockBuilderTest.testCreateMock":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":357,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":478,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":496,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":191,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":285,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":63,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":32,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":165,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":134,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":502,"org.easymock.tests.UsageOverloadedMethodTest.overloading":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":359,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":408,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":141,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":179,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":91,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":492,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":407,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":465,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":36,"org.easymock.tests.MockClassControlTest.testEquals":215,"org.easymock.tests2.EasyMockSupportClassTest.testAll":341,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":176,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":199,"org.easymock.tests2.CaptureTest.testCaptureAll":457,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":159,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":333,"org.easymock.tests.MockNameTest.defaultName":45,"org.easymock.tests2.UsageConstraintsTest.testMatches":409,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":271,"org.easymock.samples.ExampleTest.voteForRemovals":24,"org.easymock.tests.UsageVarargTest.allKinds":44,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":47,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":160,"org.easymock.samples.BasicClassMockTest.testPrintContent":28,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":261,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":311,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":486,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":151,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":510,"org.easymock.tests2.UsageConstraintsTest.greaterThan":411,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":342,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":274,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":434,"org.easymock.samples.ExampleTest.voteForRemoval":21,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":248,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":435,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":391,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":68,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":452,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":427,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":145,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":298,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":223,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":282,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":339,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":146,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":482,"org.easymock.tests2.CaptureTest.testCaptureFirst":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":10,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":283,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":310,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":144,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":87,"org.easymock.tests2.CaptureTest.testCapture2_2446744":468,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":393,"org.easymock.tests2.UsageTest.moreThanOneArgument":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":234,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":377,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":43,"org.easymock.tests.GenericTest.testBridgedEquals":178,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":503,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":500,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":172,"org.easymock.tests.UsageExpectAndReturnTest.longType":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":157,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":280,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":200,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":416,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":198,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":163,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":268,"org.easymock.tests.UsageCallCountTest.tooManyCalls":173,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":358,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":480,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":187,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":260,"org.easymock.tests.MockingTest.testNiceClassMocking":79,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":382,"org.easymock.tests.MockingTest.testClassMocking":71,"org.easymock.tests2.UsageConstraintsTest.testContains":406,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":166,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":490,"org.easymock.tests2.UsageConstraintsTest.testFind":398,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":181,"org.easymock.tests.MockTypeTest.fromEasyMockClass":65,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":100,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":277,"org.easymock.tests.UsageExpectAndReturnTest.object":90,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":429,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":479,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":288,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":507,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":38,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":252,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":504,"org.easymock.tests.UsageTest.exactCallCountByLastCall":58,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":222,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":112,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":264,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":96,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":33,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":140,"org.easymock.tests.ResultTest.createThrowResultToString":6,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":438,"org.easymock.tests.MockClassControlTest.testHashCode":214,"org.easymock.tests2.EasyMockSupportTest.testVerify":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":351,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":265,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":138,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":31,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":331,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":380,"org.easymock.tests.UsageVarargTest.varargCharAccepted":37,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":240,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":239,"org.easymock.tests2.UsageTest.openCallCountByLastCall":304,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":498,"org.easymock.tests.DefaultClassInstantiatorTest.object":241,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":291,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":30,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":250,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":352,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":258,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":473,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":437,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":432,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":213,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":188,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":97,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":162,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":360,"org.easymock.tests2.UsageTest.resumeIfFailure":309,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":62,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":450,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":149,"org.easymock.tests2.StubTest.stubWithReturnValue":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":372,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":417,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":89,"org.easymock.tests2.SerializationTest.testAllMockedMethod":337,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":232,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":497,"org.easymock.samples.SupportTest.voteForRemovals":16,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":174,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":440,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":194,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":238,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":11,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":114,"org.easymock.tests.UsageExpectAndThrowTest.object":192,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":414,"org.easymock.tests2.DelegateToTest.testWrongClass":485,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":206,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":207,"org.easymock.tests.UsageStrictMockTest.range":105,"org.easymock.samples.ConstructorCalledMockTest.testTax":13,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":454,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":287,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":381,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":501,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":193,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":371,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":132,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":135,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":494,"org.easymock.tests2.CaptureTest.testCaptureNone":464,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":111,"org.easymock.tests.UsageUnorderedTest.message":208,"org.easymock.tests.UsageVerifyTest.twoReturns":49,"org.easymock.tests.UsageVarargTest.varargByteAccepted":42,"org.easymock.tests2.ThreadingTest.testThreadSafe":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":355,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":170,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":27,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":253,"org.easymock.tests2.CaptureTest.testCapture_2617107":458,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":236,"org.easymock.tests2.UsageConstraintsTest.any":404,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":129,"org.easymock.tests2.StubTest.stub":278,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":164,"org.easymock.tests.UsageExpectAndThrowTest.longType":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":237,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":245,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":128,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":314,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":442,"org.easymock.tests2.SerializationTest.testClass":335,"org.easymock.tests.LimitationsTest.mockNativeMethod":204,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":177,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":99,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":472,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":317,"org.easymock.tests2.NameTest.nameForMocksControl":325,"org.easymock.tests2.MockedExceptionTest.testMockedException":489,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":343,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":55,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":186,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":9,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":76,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":421,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":373,"org.easymock.tests.MockingTest.testNicePartialClassMocking":74,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":426,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":470,"org.easymock.tests2.CaptureTest.testCaptureLast":463,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":60,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":388,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":415,"org.easymock.tests.MockingTest.testTwoMocks":72,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":389,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":190,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":307,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":419,"org.easymock.samples.ExampleTest.removeNonExistingDocument":25,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":477,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":126,"org.easymock.tests.UsageStrictMockTest.differentMethods":106,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":439,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":243,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":392,"org.easymock.tests2.MockBuilderTest.testCreateMockString":379,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":209,"org.easymock.tests.UsageExpectAndThrowTest.floatType":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":345,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":340,"org.easymock.tests.ResultTest.createReturnResultToString":5,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":328,"org.easymock.tests.UsageVerifyTest.twoThrows":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":320,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":354,"org.easymock.tests.ResultTest.createDelegateResultToString":4,"org.easymock.samples.ExampleTest.voteAgainstRemoval":22,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":227,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":433,"org.easymock.tests.LimitationsTest.privateConstructor":203,"org.easymock.tests2.UsageConstraintsTest.testNotNull":418,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":488,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":262,"org.easymock.tests2.UsageTest.defaultResetToNice":306,"org.easymock.samples.ExampleTest.voteAgainstRemovals":19,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":228,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":471,"org.easymock.tests.UsageVarargTest.differentLength":39,"org.easymock.tests2.CallbackTest.callback":297,"org.easymock.tests2.UsageConstraintsTest.equals":397,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":430,"org.easymock.tests.UsageTest.openCallCountByLastCall":54,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":119,"org.easymock.tests.UsageCallCountTest.tooFewCalls":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":384,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":137,"org.easymock.tests.UsageThrowableTest.throwCheckedException":259,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":495,"org.easymock.tests.MockingTest.testStrictClassMocking":70,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":387,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":116,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":476,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":383,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":131,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":386,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":330,"org.easymock.tests.ObjectMethodsTest.testHashCode":251,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":394,"org.easymock.tests2.NameTest.nameForNiceMock":324,"org.easymock.tests2.DependencyTest.testInterfaceMocking":295,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":508,"org.easymock.samples.ExampleTest.addDocument":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":356,"org.easymock.tests2.DelegateToTest.testStubDelegate":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":361,"org.easymock.tests2.AnswerTest.stubAnswer":329,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":103,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":374,"org.easymock.tests.UsageVarargTest.varargLongAccepted":41,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":225,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":98,"org.easymock.tests.UsageExpectAndReturnTest.floatType":82,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":318,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":14,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":446,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":412,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":142,"org.easymock.tests.UsageThrowableTest.noUpperLimit":256,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":395,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":449,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":461,"org.easymock.tests2.SerializationTest.test":336,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":493,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":242,"org.easymock.tests2.UsageConstraintsTest.testSame":400,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":81,"org.easymock.samples.SupportTest.addDocument":15,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":385,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":346,"org.easymock.tests.GenericTest.testPackageScope":175,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":221,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":445,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":77,"org.easymock.tests2.NameTest.nameForMock":322,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":92,"org.easymock.tests2.UsageStrictMockTest.differentMethods":316,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":378,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":431,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":84,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":196,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":276,"org.easymock.tests2.MockedExceptionTest.testRealException":491,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":69,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":455,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":229,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":313,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":118,"org.easymock.tests2.NameTest.nameForStrictMock":323,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":368,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":499,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":8,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":425,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":453,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":511,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":413,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":244,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":365,"org.easymock.tests2.UsageStrictMockTest.range":315,"org.easymock.tests2.UsageConstraintsTest.lessThan":420,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":441,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":224,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":281,"org.easymock.tests2.CaptureTest.testCaptureRightOne":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":350,"org.easymock.tests2.UsageConstraintsTest.testOr":401,"org.easymock.tests.UsageRangeTest.combination":273,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":422,"org.easymock.tests.UsageTest.wrongArguments":53,"org.easymock.tests2.MockBuilderTest.testWithConstructor":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":347,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":218,"org.easymock.tests.UsageVarargTest.varargShortAccepted":40,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":246,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":171,"org.easymock.tests2.UsageConstraintsTest.cmpTo":405,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":220,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":305,"org.easymock.tests2.CaptureTest.testCaptureFromStub":467,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":123,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":366,"org.easymock.tests.UsageTest.unexpectedCallWithArray":52,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":102,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":169,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":94,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":104,"org.easymock.tests2.UsageConstraintsTest.constraints":2,"org.easymock.samples.ExampleTest.addAndChangeDocument":26,"org.easymock.tests.UsageStrictMockTest.testVerify":108,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":12,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":101,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":158,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":154,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":86,"org.easymock.tests.LimitationsTest.abstractClass":202,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":155,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":143,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":512,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":34,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":286}}]

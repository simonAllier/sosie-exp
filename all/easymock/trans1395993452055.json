[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:57","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","position":"org.easymock.internal.AndroidSupport:27","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","position":"org.easymock.internal.DefaultClassInstantiator:140","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.Set<java.lang.reflect.Method>) == null) {\n    this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ClassProxyFactory:116","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.And:48","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments()","position":"org.easymock.internal.BridgeMethodResolver:319","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:42","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","position":"org.easymock.internal.ReplayState:45","type":"CtTryImpl"},"status":-2},{"failures":[23,24],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","position":"org.easymock.EasyMock:2066","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{"lastResult":"lastResult"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"status":-2},{"failures":[25,26,27],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"same(\")","position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"More than one value captured: \" + org.easymock.Capture<T>.(getValues()))","name":"math","position":"org.easymock.Capture:83","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int int = int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","position":"org.easymock.Capture:131","type":"CtIfImpl"},"status":-2},{"failures":[28,29,30],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","position":"org.easymock.internal.ReplayState:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","position":"org.easymock.EasyMock:1687","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1582","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"values":"values"},"name":"add","transplant":{"sourceCode":"return java.util.List<T>.toString()","position":"org.easymock.Capture:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","position":"org.easymock.Capture:134","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Delegated to \" + java.lang.Object","position":"org.easymock.internal.Result:95","type":"CtReturnImpl"},"status":-2},{"failures":[31],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:77","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.lang.IllegalArgumentException(((java.lang.Object + \" isn\\'t of type \") + java.lang.Class<?>))","position":"org.easymock.ConstructorArgs:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:333","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1458","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToArgumentMatcherStack":"org.easymock.internal.LastControl.threadToCurrentInvocation"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.MocksBehavior:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtInvocationImpl"},"status":-2},{"failures":[32,33],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper","position":"org.easymock.internal.MockInvocationHandler:45","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:77","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:194","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:37","type":"CtReturnImpl"},"status":-2},{"failures":[34,35],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"bridgeMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"status":-2},{"failures":[],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":0},{"failures":[36,37,1,2,3,38,39,4,5,9,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,28,56,57,58,59,13,60,29,14,15,61,16,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:61","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"matchers":"matchers","length":"length","arguments":"arguments"},"name":"add","transplant":{"sourceCode":"for (int int = 0 ; int < (this.int) ; int++) {\n    if (!(this.java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.EasyMock:573","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.MockType","position":"org.easymock.internal.MocksControl:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","position":"org.easymock.internal.DefaultClassInstantiator:155","type":"CtTryImpl"},"status":-2},{"failures":[49,85,50,86,51,52,34,35,87,88,31,89,90,58,63,64,65,66,72,73],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:223","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[91,92],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","position":"org.easymock.internal.RecordState:262","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"bridgeMethod":"bridgeMethod","this":"this"},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:78","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:106","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:249","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:69","type":"CtLocalVariableImpl"},"status":-2},{"failures":[54,93],"variableMapping":{"maximum":"result","minimum":"result"},"name":"replace","transplant":{"sourceCode":"return int == int","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:75","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"case NONE :\n    break;","position":"org.easymock.Capture:106","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:59","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1519","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","position":"org.easymock.internal.ErrorMessage:53","type":"CtInvocationImpl"},"status":-2},{"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"binaryOperator":"(java.lang.Object[].int) - 1","name":"math","position":"org.easymock.internal.Invocation:60","type":"mutation","status":-1},{"failures":[109,110,111,112,113,6,7,114,115,116,117,118,119,120,121,122,17,18],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","position":"org.easymock.internal.MocksControl:222","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","position":"org.easymock.internal.MocksControl:343","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","position":"org.easymock.internal.MockBuilder:139","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","position":"org.easymock.internal.RecordState:166","type":"CtInvocationImpl"},"status":-2},{"failures":[123],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:174","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:323","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.String + \".\") + java.lang.String","name":"math","position":"org.easymock.internal.Invocation:154","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:170","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:252","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:321","type":"mutation","status":0},{"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"binaryOperator":"((java.lang.Object[].int) - 1)","name":"math","position":"org.easymock.internal.Invocation:59","type":"mutation","status":-1},{"failures":[],"variableMapping":{"pt":"pt","typeVariableMap":"typeVariableMap","this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":0},{"failures":[124,63,64,65,66,67,68,69,70,125,71,72,73,74,75],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.UnorderedBehavior:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Captures:53","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Object java.lang.Object","position":"org.easymock.internal.Injector:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object java.lang.Object = org.easymock.internal.matchers.Equals.getExpected()","position":"org.easymock.internal.matchers.ArrayEquals:35","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.And:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:161","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"otherArgument":"actual","myArgument":"actual"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:180","type":"CtReturnImpl"},"status":-2},{"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.ReplayState:61","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","position":"org.easymock.internal.ClassProxyFactory:169","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1916","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.LinkedList<org.easymock.internal.Range>.add(org.easymock.internal.Range)","position":"org.easymock.internal.Results:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()))","position":"org.easymock.internal.Injector:90","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:410","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","position":"org.easymock.internal.InjectionPlan:52","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<org.easymock.internal.UnorderedBehavior>.isEmpty()) || (!(org.easymock.internal.MocksBehavior.lastBehaviorList().allowsExpectedInvocation(org.easymock.internal.ExpectedInvocation, boolean)))) {\n    java.util.List<org.easymock.internal.UnorderedBehavior>.add(new org.easymock.internal.UnorderedBehavior(boolean));\n} ","position":"org.easymock.internal.MocksBehavior:74","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"c"},"name":"replace","transplant":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToDefault()","position":"org.easymock.EasyMockSupport:584","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.DefaultClassInstantiator:182","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class.java.lang.Class.forName(java.lang.String, true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","position":"org.easymock.internal.MethodSerializationWrapper:63","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:933","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget)","position":"org.easymock.internal.Injector:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((java.util.Comparator<? super T>) + \"(\")","name":"math","position":"org.easymock.internal.matchers.Compare:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:136","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ObjectMethodsFilter:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mocks":"methodArgs"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"CtForImpl"},"status":-2},{"failures":[141],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-1},{"failures":[95,142,143,144,145,96,146,147,148,149,150,151,152,153,154,36,155,156,37,157,158,159,160,161,162,163,164,0,165,1,166,167,2,3,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,109,192,193,194,110,111,195,112,196,197,113,198,199,200,201,202,203,97,98,99,100,101,102,103,104,105,106,107,108,38,204,129,130,131,205,206,207,208,209,210,211,212,213,214,215,39,216,4,5,217,6,7,218,219,220,221,222,223,224,225,226,8,9,10,227,228,229,230,231,232,233,234,235,236,237,238,40,41,239,42,43,44,45,46,240,241,242,243,244,245,246,33,247,248,249,250,251,252,253,254,255,256,257,118,258,259,260,119,120,261,121,262,263,122,264,265,266,267,268,269,47,48,49,85,50,86,51,52,34,35,88,270,53,271,54,55,28,56,57,31,89,272,273,274,90,58,59,275,276,12,13,60,29,277,278,279,14,15,280,281,133,282,283,284,285,286,287,288,289,290,291,292,293,294,61,295,16,296,17,18,297,298,299,141,62,63,64,65,66,67,68,69,70,125,71,72,73,74,75,300,301,302,303,304,305,306,76,307,134,135,136,137,308,309,310,311,312,313,314,315,316,23,317,318,30,319,138,320,24,139,140,321,322,77,323,19,20,21,22],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:68","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:166","type":"CtContinueImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":42,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":217,"org.easymock.tests2.MockedExceptionTest.testRealException":284,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":320,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":216,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":198,"org.easymock.tests.UsageVarargTest.varargIntAccepted":99,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":162,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":47,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":172,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":323,"org.easymock.tests2.UsageConstraintsTest.testContains":53,"org.easymock.tests.UsageCallCountTest.tooManyCalls":235,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":246,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests2.StubTest.stubWithReturnValue":77,"org.easymock.tests.UsageVarargTest.allKinds":107,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":161,"org.easymock.tests2.CaptureTest.testCaptureAll":64,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":237,"org.easymock.samples.ExampleTest.addAndChangeDocument":147,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":309,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":26,"org.easymock.tests.UsageVarargTest.varargCharAccepted":100,"org.easymock.tests2.CaptureTest.testCaptureFromStub":73,"org.easymock.tests.UsageVerifyTest.twoThrows":9,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":155,"org.easymock.tests2.DelegateToTest.testReturnException":291,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":29,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":28,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":132,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":295,"org.easymock.tests2.CaptureTest.testAnd":63,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":253,"org.easymock.tests.UsageStrictMockTest.testVerify":219,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":110,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":71,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":196,"org.easymock.tests2.UsageConstraintsTest.testMatches":55,"org.easymock.tests.MockClassControlTest.testToString":171,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":178,"org.easymock.tests2.UsageConstraintsTest.testNull":86,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":252,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":81,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":199,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":263,"org.easymock.tests.UsageThrowableTest.throwError":40,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":154,"org.easymock.tests2.UsageConstraintsTest.greaterThan":56,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":97,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":157,"org.easymock.tests2.StubTest.stub":322,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":248,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":33,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":209,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":36,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":31,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":83,"org.easymock.tests.UsageExpectAndReturnTest.object":261,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":268,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":106,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":297,"org.easymock.tests.UsageExpectAndThrowTest.object":195,"org.easymock.tests2.DelegateToTest.testWrongClass":293,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":302,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":184,"org.easymock.tests2.UsageTest.moreThanOneArgument":12,"org.easymock.tests.UsageVarargTest.varargByteAccepted":105,"org.easymock.tests.MockClassControlTest.testEquals":175,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":194,"org.easymock.tests.UsageTest.wrongArguments":1,"org.easymock.samples.ExampleTest.voteAgainstRemoval":144,"org.easymock.tests.CapturesMatcherTest.test":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":180,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":45,"org.easymock.tests.UsageVarargTest.varargShortAccepted":103,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":222,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":112,"org.easymock.tests2.UsageTest.defaultResetToNice":279,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":208,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":303,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":169,"org.easymock.tests2.MockBuilderTest.testCreateMock":313,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":304,"org.easymock.tests2.NameTest.nameForMocksControl":22,"org.easymock.tests2.SerializationTest.testAllMockedMethod":141,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":243,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":247,"org.easymock.samples.ExampleTest.voteAgainstRemovals":95,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":61,"org.easymock.tests2.CompareToTest.testCompareEqual":123,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":149,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":37,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":108,"org.easymock.tests2.CaptureTest.testCapture1_2446744":67,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":281,"org.easymock.tests.LimitationsTest.mockNativeMethod":240,"org.easymock.tests2.DelegateToTest.testStubDelegate":292,"org.easymock.tests.UsageUnorderedTest.message":236,"org.easymock.samples.ExampleTest.answerVsDelegate":142,"org.easymock.samples.ExampleTest.voteForRemoval":143,"org.easymock.tests.UsageCallCountTest.tooFewCalls":230,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":120,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":232,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":306,"org.easymock.tests.UsageVerifyTest.twoReturns":10,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":111,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":118,"org.easymock.tests2.DependencyTest.testInterfaceMocking":308,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":183,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":288,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":34,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":158,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":218,"org.easymock.tests2.CaptureTest.testCaptureRightOne":72,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":259,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":229,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":159,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":244,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":133,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":319,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":224,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":116,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":245,"org.easymock.tests2.UsageConstraintsTest.cmpTo":270,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":121,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":135,"org.easymock.tests2.MockedExceptionTest.testMockedException":282,"org.easymock.tests.UsageThrowableTest.throwCheckedException":43,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":213,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":274,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":8,"org.easymock.samples.PartialClassMockTest.testGetArea":128,"org.easymock.samples.ExampleTest.voteForRemovals":96,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":239,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":204,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":54,"org.easymock.samples.ConstructorCalledMockTest.testTax":126,"org.easymock.tests.ReplayStateInvalidUsageTest.times":250,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":151,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":185,"org.easymock.tests2.UsageTest.argumentsOrdered":15,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":30,"org.easymock.samples.ExampleTest.removeNonExistingDocument":146,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":164,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":307,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":177,"org.easymock.tests2.AnswerTest.answer":305,"org.easymock.tests.MockingTest.testNicePartialClassMocking":130,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":5,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":255,"org.easymock.tests2.UsageConstraintsTest.any":88,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":210,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":215,"org.easymock.tests.UsageExpectAndThrowTest.longType":191,"org.easymock.tests2.CallbackTest.callback":62,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":200,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":290,"org.easymock.tests2.NameTest.nameForMock":19,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":114,"org.easymock.tests.UsageTest.argumentsOrdered":3,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":85,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":271,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":267,"org.easymock.tests2.NameTest.nameForStrictMock":20,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":156,"org.easymock.tests2.MockBuilderTest.testCreateMockString":315,"org.easymock.tests2.CaptureTest.testCaptureNone":125,"org.easymock.tests2.SerializationTest.test":299,"org.easymock.tests.UsageExpectAndReturnTest.longType":257,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":69,"org.easymock.tests2.SerializationTest.testClass":298,"org.easymock.tests2.CaptureTest.testCaptureFirst":75,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":89,"org.easymock.tests2.UsageTest.niceToStrict":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":182,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":220,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":181,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":312,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":39,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":192,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":273,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":275,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":197,"org.easymock.tests2.UsageTest.strictResetToDefault":276,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":266,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":314,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":163,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":188,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":35,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":285,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":138,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":57,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":98,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":318,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":316,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":187,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":131,"org.easymock.tests2.UsageConstraintsTest.testOr":52,"org.easymock.tests2.DelegateToTest.testDelegate":294,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":301,"org.easymock.tests2.UsageConstraintsTest.testNotNull":90,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":296,"org.easymock.tests.MockClassControlTest.testHashCode":174,"org.easymock.tests2.CaptureTest.testCapture_2617107":65,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":251,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":46,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":262,"org.easymock.tests2.ThreadingTest.testThreadSafe":300,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":278,"org.easymock.tests.UsageThrowableTest.noUpperLimit":41,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":212,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":134,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":78,"org.easymock.tests.UsageExpectAndReturnTest.floatType":256,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":87,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":287,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":27,"org.easymock.tests2.UsageConstraintsTest.testSame":51,"org.easymock.tests2.UsageTest.resumeIfFailure":280,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":173,"org.easymock.tests.UsageOverloadedMethodTest.overloading":38,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":136,"org.easymock.samples.SupportTest.voteForRemovals":94,"org.easymock.tests.UsageRangeTest.combination":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":44,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":127,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":58,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":242,"org.easymock.tests.UsageTest.openCallCountByLastCall":166,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":193,"org.easymock.tests2.NameTest.nameForNiceMock":21,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":249,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":226,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":272,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":211,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":16,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":32,"org.easymock.tests2.CaptureTest.testPrimitive":66,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":317,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":122,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":113,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":92,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":24,"org.easymock.tests.UsageExpectAndThrowTest.floatType":190,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":23,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":234,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":264,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":289,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":228,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests.UsageTest.exactCallCountByLastCall":168,"org.easymock.tests2.AnswerTest.stubAnswer":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":79,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":82,"org.easymock.tests2.CaptureTest.testCaptureLast":70,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":189,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":233,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":231,"org.easymock.tests.UsageStrictMockTest.range":6,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":167,"org.easymock.tests.UsageTest.unexpectedCallWithArray":165,"org.easymock.tests.MockingTest.testPartialClassMocking":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":265,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.constraints":49,"org.easymock.samples.ExampleTest.addDocument":145,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":11,"org.easymock.tests2.CompareToTest.testGreateOrEqual":93,"org.easymock.tests2.UsageConstraintsTest.lessThan":59,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":153,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":286,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":2,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":148,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":269,"org.easymock.tests.UsageVarargTest.varargLongAccepted":104,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":115,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":214,"org.easymock.tests.ObjectMethodsTest.testHashCode":221,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":139,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":321,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":4,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":201,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":91,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":179,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":203,"org.easymock.tests.UsageTest.moreThanOneArgument":0,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":25,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":176,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":207,"org.easymock.tests2.UsageTest.openCallCountByLastCall":277,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":310,"org.easymock.tests.UsageStrictMockTest.differentMethods":7,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":80,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":48,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":170,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":311,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":109,"org.easymock.tests.DefaultClassInstantiatorTest.object":205,"org.easymock.tests.UsageVarargTest.differentLength":102,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":254,"org.easymock.tests2.CaptureTest.testCapture2_2446744":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":186,"org.easymock.tests.GenericTest.testPackageScope":241}}]

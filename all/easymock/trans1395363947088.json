[{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:1569","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:93","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[4,5,6,7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"failures":[26,27,28,29,30],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[31],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[32,33,34,35,36,4,8,37,38,39,40,41,18,42,19,20,43,44,45,46,47,48,21,49,50,51,52,53,54,22,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[72],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[35,36,74,37,38,39,40,41,18,75,76,77,78,66,69,70,71,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResult:25","sourceCode":"-1951159588262854559L","type":"CtUnaryOperatorImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"failures":[79,80,81,31,82,83],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[84,85,86,87,88,89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[90],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[26,91,27,92,93,94,95,96,32,97,98,99,100,101,102,103,104,28,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,29,121,122,123,124,125,126,30,127,128],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[129],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[130,131,132,133,134],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.RecordState:324","failures":[32,62,63],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":0,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":35,"org.easymock.tests2.UsageConstraintsTest.testMatches":90,"org.easymock.tests2.UsageTest.argumentsOrdered":116,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":33,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":40,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":24,"org.easymock.tests2.StubTest.stubWithReturnValue":66,"org.easymock.samples.ExampleTest.voteForRemovals":88,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":38,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":96,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":30,"org.easymock.samples.SupportTest.voteForRemovals":84,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":52,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":64,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":6,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":19,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":105,"org.easymock.tests2.UsageConstraintsTest.greaterThan":132,"org.easymock.tests.UsageExpectAndThrowTest.object":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":72,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":23,"org.easymock.samples.ExampleTest.voteForRemoval":86,"org.easymock.tests2.UsageTest.wrongArguments":114,"org.easymock.tests.UsageStrictMockTest.range":106,"org.easymock.samples.ConstructorCalledMockTest.testTax":79,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":17,"org.easymock.tests2.ConstraintsToStringTest.orToString":120,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":80,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":109,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":67,"org.easymock.tests2.UsageConstraintsTest.testNull":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":78,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":101,"org.easymock.tests.UsageTest.moreThanOneArgument":98,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":58,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":60,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":74,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":14,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":37,"org.easymock.tests.UsageUnorderedTest.message":112,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":111,"org.easymock.tests2.UsageTest.moreThanOneArgument":113,"org.easymock.tests.UsageVerifyTest.twoReturns":97,"org.easymock.tests.UsageTest.argumentsOrdered":102,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":5,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":73,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":128,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":57,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":4,"org.easymock.tests2.UsageStrictMockTest.differentMethods":119,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":55,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":82,"org.easymock.tests2.StubTest.stub":7,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":76,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":77,"org.easymock.tests.UsageExpectAndThrowTest.longType":44,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":39,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":123,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":54,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":91,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":2,"org.easymock.tests2.MockedExceptionTest.testRealException":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":3,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":15,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":93,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":46,"org.easymock.tests2.MockedExceptionTest.testMockedException":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":63,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":34,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":45,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":71,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":22,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":42,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":41,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":104,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":11,"org.easymock.tests2.UsageStrictMockTest.range":118,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":103,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":13,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":53,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":21,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":129,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":115,"org.easymock.tests.UsageThrowableTest.throwError":59,"org.easymock.tests.UsageStrictMockTest.differentMethods":107,"org.easymock.tests2.UsageConstraintsTest.testOr":1,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":94,"org.easymock.tests.UsageTest.wrongArguments":100,"org.easymock.tests2.ConstraintsToStringTest.andToString":126,"org.easymock.tests2.MockBuilderTest.testWithConstructor":81,"org.easymock.tests.UsageExpectAndThrowTest.floatType":43,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":122,"org.easymock.tests.UsageVerifyTest.twoThrows":32,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":108,"org.easymock.tests2.CompareToTest.testLessOrEqual":134,"org.easymock.samples.ExampleTest.voteAgainstRemoval":87,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":20,"org.easymock.tests2.UsageConstraintsTest.testNotNull":12,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":65,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":68,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":69,"org.easymock.samples.ExampleTest.voteAgainstRemovals":85,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":16,"org.easymock.tests.UsageTest.unexpectedCallWithArray":99,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":83,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":92,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":95,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":29,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":48,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":49,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":61,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":130,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":31,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":36,"org.easymock.tests2.UsageConstraintsTest.constraints":131,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":47,"org.easymock.tests2.ConstraintsToStringTest.notToString":121,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":8,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":75,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":124,"org.easymock.tests.UsageThrowableTest.throwCheckedException":62,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":89,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":125,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":110,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":27,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":56,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":25}}]

[{"transplant":{"position":"org.easymock.EasyMock:1725","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[0,1,2,3],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:38","sourceCode":"new java.util.HashSet<java.lang.String>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[21,22,23],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:193","sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[24,25,26],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[27,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[29,30,31],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[32,33,34,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:372","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:103","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:37","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(int.int, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","bridgeMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[65,66,67,68,69],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1708","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[70,71],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[72,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[74,75],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[76,77,78,79],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[81,82,83,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[85,86,87,88,89,90,5,6,7,8,91,92,9,93,94,95,96,97,98,99,100,101,102,0,103,1,104,105,14,106,107,15,16,108,109,110,111,112,3,113,114,115,116,117,118,119,120,70,121],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[122],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[71,123,124,125],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[126,121],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,148,149,149,150,151,152,153,0,154,155,156,157,158,103,1,104,159,2,160,161,162,110,163,126,164,165,166,167,111,168,112,169,27,170,171,172,173,174,175,176,177,178],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[179,180,181,182,183,184,185,186,187],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[188,189],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":177,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":175,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":39,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":32,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":107,"org.easymock.tests2.SerializationTest.testAllMockedMethod":172,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":59,"org.easymock.tests.UsageVarargTest.allKinds":72,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":54,"org.easymock.tests.MockingTest.testPartialClassMocking":131,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":19,"org.easymock.samples.BasicClassMockTest.testPrintContent":152,"org.easymock.tests.MockClassControlTest.testToString":142,"org.easymock.tests2.DelegateToTest.testStubDelegate":189,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":187,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":169,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":117,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":2,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":77,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":112,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":63,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":51,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":179,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":31,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.samples.ConstructorCalledMockTest.testTax":148,"org.easymock.tests.UsageStrictMockTest.range":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":165,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":27,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":43,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":149,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":128,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":82,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":129,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":105,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":163,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":157,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":147,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":116,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":23,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":40,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":7,"org.easymock.tests.UsageTest.moreThanOneArgument":4,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":10,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":45,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":188,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":186,"org.easymock.tests2.CaptureTest.testCaptureFirst":69,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":109,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":44,"org.easymock.tests.UsageUnorderedTest.message":89,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":96,"org.easymock.tests.GenericTest.testPackageScope":135,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.CaptureTest.testCapture2_2446744":68,"org.easymock.tests.UsageVerifyTest.twoReturns":102,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":1,"org.easymock.tests.UsageTest.argumentsOrdered":8,"org.easymock.tests.GenericTest.testBridgedEquals":138,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":42,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":151,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":122,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":76,"org.easymock.tests2.CaptureTest.testCapture_2617107":124,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":86,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":20,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":153,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":181,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":78,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":156,"org.easymock.tests2.UsageStrictMockTest.differentMethods":120,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":37,"org.easymock.tests2.StubTest.stub":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":182,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":47,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":26,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":21,"org.easymock.tests.UsageCallCountTest.tooManyCalls":87,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":36,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":118,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":24,"org.easymock.tests2.SerializationTest.testClass":171,"org.easymock.tests.LimitationsTest.mockNativeMethod":134,"org.easymock.tests.ReplayStateInvalidUsageTest.times":38,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":137,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":64,"org.easymock.tests2.CaptureTest.testAnd":123,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":61,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":167,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":41,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":174,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":133,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":170,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":162,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":158,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":46,"org.easymock.tests.MockingTest.testNicePartialClassMocking":132,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":164,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":126,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":92,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":84,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":178,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":60,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":71,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":166,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":0,"org.easymock.tests.MockingTest.testTwoMocks":130,"org.easymock.tests2.UsageStrictMockTest.range":119,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":48,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":83,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":57,"org.easymock.tests.UsageTest.exactCallCountByLastCall":91,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":113,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":34,"org.easymock.tests2.CaptureTest.testCaptureRightOne":125,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":35,"org.easymock.tests.UsageStrictMockTest.differentMethods":95,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":74,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":12,"org.easymock.tests.UsageRangeTest.combination":100,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":110,"org.easymock.tests.UsageTest.wrongArguments":6,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":75,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":30,"org.easymock.tests2.MockBuilderTest.testCreateMockString":104,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":97,"org.easymock.tests.MockClassControlTest.testHashCode":145,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":140,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":141,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":121,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":25,"org.easymock.tests.UsageVerifyTest.twoThrows":101,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":81,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":98,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":85,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":160,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":50,"org.easymock.samples.PartialClassMockTest.testGetArea":150,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":29,"org.easymock.tests2.CaptureTest.testCaptureMultiple":66,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":52,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":185,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":180,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":168,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":139,"org.easymock.tests2.UsageTest.niceToStrict":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":183,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":155,"org.easymock.tests2.MockBuilderTest.testCreateMock":103,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":33,"org.easymock.tests.UsageVarargTest.differentLength":88,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":154,"org.easymock.tests2.CallbackTest.callback":3,"org.easymock.tests.UsageTest.unexpectedCallWithArray":5,"org.easymock.tests2.UsageConstraintsTest.equals":80,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":99,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":58,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":17,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":114,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":144,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":111,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":49,"org.easymock.tests2.UsageConstraintsTest.constraints":70,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":93,"org.easymock.tests.CapturesMatcherTest.test":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":176,"org.easymock.tests.ReplayStateInvalidCallsTest.times":55,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":22,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":73,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":161,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":143,"org.easymock.tests2.EasyMockSupportClassTest.testAll":159,"org.easymock.tests.MockClassControlTest.testEquals":146,"org.easymock.tests2.UsageTest.resumeIfFailure":108,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":136,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":127,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":11,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":18,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":115,"org.easymock.tests2.CaptureTest.testCaptureAll":67}}]

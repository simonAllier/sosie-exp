[{"transplant":{"position":"org.easymock.EasyMock:2123","sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:363","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[2,3,4,5,6,7],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,7,30,31,32],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[33,34],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,90,91],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[92],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[41,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,16,136,137,138,139,140,141,142,19,143,144,145,146,147,148,7,30,149,150,151,152,153],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[154,155],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[72,156,73,157],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[158,159,160,161,56,162,163,17,18,164,165,166,31,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,35,36,184,37,38,39,40,41,185,186,42,43,44,45,0,187,158,188,189,159,190,161,191,192,193,194,33,195,196,154,155,197,198,1,93,199,200,201,46,202,203,204,94,95,96,97,98,99,100,101,102,103,104,105,106,107,49,205,51,52,53,206,55,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,12,13,162,223,224,225,226,14,15,227,228,108,109,110,111,229,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,230,61,62,231,63,163,232,16,233,17,18,234,136,235,137,236,237,238,239,240,68,241,69,242,243,244,245,246,247,70,248,249,71,250,251,72,156,73,74,252,164,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,34,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,75,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,76,321,322,77,78,79,323,138,139,140,141,142,324,81,325,326,327,328,19,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,143,144,145,367,368,369,370,371,372,373,374,375,376,20,21,22,377,378,379,380,381,382,383,384,92,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,165,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,146,416,147,148,417,418,419,420,421,422,423,424,425,426,26,6,27,427,428,28,29,429,430,431,82,83,84,432,85,433,434,435,86,166,436,7,30,437,31,32,438,439,440,441,442,443,444,445,149,150,151,152,153,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,87,88,89,89,90,90,91,464,465,466,467],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[334,335,441,442],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:53","sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","type":"CtInvocationImpl"},"failures":[173,174,176,179,180,181,182,183,208,209,211,214,215,216,217,218],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[2,3,4,5,6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[58,69,70,89,90,91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[200,201,46,202,220,268,145,391,412,413,414,415,146,416,440,441,442,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[53,81],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[35,36,184,37,38,39,41,43,44,45,93,203,204,49,51,53,54,56,59,60,61,62,231,63,64,16,17,18,68,69,70,71,74,255,298,299,300,301,302,303,306,307,309,310,311,313,314,315,316,317,76,138,139,140,141,142,367,368,369,370,165,401,402,403,147,148,83,84,85,30,31,32,149,456,458,459,461,91,466],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[94,95,96,97,104,105,110,111,112,113,114,115,116,117,118,119,128,129,133,134],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[94,96,104,110,111,115,116,118,128],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[141,378],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Injector:122","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:57","sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[123,468],"status":-1,"binaryOperator":"int >= 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[469,206,470,471,472,473,474,72,74,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":111,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":426,"org.easymock.tests2.UsageTest.argumentsOrdered":15,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":191,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":271,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":223,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":467,"org.easymock.tests2.DelegateToTest.testReturnException":254,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":413,"org.easymock.tests.MockingTest.testPartialClassMocking":83,"org.easymock.tests.MockClassControlTest.testToString":286,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":167,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":280,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":69,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":336,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":23,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":204,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":470,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":149,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":218,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":331,"org.easymock.samples.ExampleTest.answerVsDelegate":457,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":81,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":434,"org.easymock.tests2.UsageConstraintsTest.testNull":113,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":37,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":161,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":291,"org.easymock.tests2.CaptureTest.testPrimitive":97,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":153,"org.easymock.tests.UsageTest.moreThanOneArgument":26,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":355,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":369,"org.easymock.tests.UsageTest.argumentsOrdered":29,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":372,"org.easymock.tests.UsageVarargTest.varargIntAccepted":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":276,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":138,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":47,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":182,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":264,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":142,"org.easymock.tests.ReplayStateInvalidUsageTest.times":389,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":212,"org.easymock.tests2.AnswerTest.answer":194,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":278,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":171,"org.easymock.tests2.CaptureTest.testAnd":94,"org.easymock.tests2.UsageTest.strictResetToDefault":222,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":42,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":368,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":189,"org.easymock.tests2.DelegateToTest.testDelegate":258,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":376,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":351,"org.easymock.tests.LimitationsTest.mockFinalMethod":321,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":381,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":259,"org.easymock.tests2.CaptureTest.testCapture1_2446744":98,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":169,"org.easymock.tests.UsageThrowableTest.throwError":393,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":384,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":183,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":251,"org.easymock.samples.PartialClassMockTest.testGetArea":91,"org.easymock.tests.MockingTest.testInterfaceMocking":432,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":92,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":139,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":327,"org.easymock.tests2.UsageTest.niceToStrict":162,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":337,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":262,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":51,"org.easymock.tests2.MockBuilderTest.testCreateMock":55,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":215,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":345,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":159,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":335,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":417,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":329,"org.easymock.tests.UsageOverloadedMethodTest.overloading":454,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":247,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":249,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":408,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":123,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":453,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":309,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":122,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":103,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":359,"org.easymock.tests2.EasyMockSupportClassTest.testAll":68,"org.easymock.tests.MockClassControlTest.testEquals":290,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":78,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":353,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":65,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":170,"org.easymock.tests2.CaptureTest.testCaptureAll":95,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":379,"org.easymock.tests.MockNameTest.defaultName":318,"org.easymock.tests2.UsageConstraintsTest.testMatches":124,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":370,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":382,"org.easymock.samples.ExampleTest.voteForRemovals":461,"org.easymock.tests.UsageVarargTest.allKinds":143,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":20,"org.easymock.samples.BasicClassMockTest.testPrintContent":88,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":380,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":399,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":416,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":179,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":474,"org.easymock.tests2.UsageConstraintsTest.greaterThan":126,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":401,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":45,"org.easymock.samples.ExampleTest.voteForRemoval":458,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":452,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":0,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":198,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":40,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":86,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":221,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":188,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":412,"org.easymock.tests2.CaptureTest.testCaptureFirst":107,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":34,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":228,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":411,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":305,"org.easymock.tests2.CaptureTest.testCapture2_2446744":106,"org.easymock.tests2.UsageTest.moreThanOneArgument":12,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":93,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":279,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":366,"org.easymock.tests.GenericTest.testBridgedEquals":323,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":424,"org.easymock.tests.UsageExpectAndReturnTest.longType":301,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":377,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":57,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":354,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":404,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":131,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":352,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":441,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":367,"org.easymock.tests.UsageCallCountTest.tooManyCalls":425,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":419,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":306,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":217,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":341,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":398,"org.easymock.tests.MockingTest.testNiceClassMocking":435,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":60,"org.easymock.tests.MockingTest.testClassMocking":431,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":418,"org.easymock.tests2.UsageConstraintsTest.testContains":121,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":48,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":46,"org.easymock.tests2.UsageConstraintsTest.testFind":112,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":455,"org.easymock.tests.MockTypeTest.fromEasyMockClass":324,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":166,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":137,"org.easymock.tests.UsageExpectAndReturnTest.object":308,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":41,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":471,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":361,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":295,"org.easymock.tests.UsageTest.exactCallCountByLastCall":429,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":267,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":443,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":373,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":252,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":314,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":356,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":407,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":173,"org.easymock.tests.MockClassControlTest.testHashCode":289,"org.easymock.tests2.EasyMockSupportTest.testVerify":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":245,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":374,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":405,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":334,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":168,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":230,"org.easymock.tests.UsageVarargTest.varargCharAccepted":360,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":284,"org.easymock.tests2.UsageTest.openCallCountByLastCall":224,"org.easymock.tests.DefaultClassInstantiatorTest.object":446,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":192,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":333,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":246,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":343,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":396,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":210,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":172,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":43,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":288,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":342,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":315,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":71,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":287,"org.easymock.tests2.UsageTest.resumeIfFailure":227,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":415,"org.easymock.tests2.StubTest.stubWithReturnValue":220,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":469,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":132,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":307,"org.easymock.tests2.SerializationTest.testAllMockedMethod":73,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":277,"org.easymock.samples.SupportTest.voteForRemovals":466,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":3,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":175,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":348,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":157,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":283,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":33,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":445,"org.easymock.tests.UsageExpectAndThrowTest.object":346,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":129,"org.easymock.tests2.DelegateToTest.testWrongClass":256,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":148,"org.easymock.tests.UsageStrictMockTest.range":31,"org.easymock.samples.ConstructorCalledMockTest.testTax":89,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":238,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":190,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":59,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":347,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":53,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":391,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":240,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":330,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":4,"org.easymock.tests2.CaptureTest.testCaptureNone":102,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":328,"org.easymock.tests.UsageUnorderedTest.message":19,"org.easymock.tests.UsageVerifyTest.twoReturns":22,"org.easymock.tests.UsageVarargTest.varargByteAccepted":365,"org.easymock.tests2.ThreadingTest.testThreadSafe":197,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":422,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":87,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":296,"org.easymock.tests2.CaptureTest.testCapture_2617107":96,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":261,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":281,"org.easymock.tests2.UsageConstraintsTest.any":119,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":388,"org.easymock.tests2.StubTest.stub":219,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":442,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":282,"org.easymock.tests.UsageExpectAndThrowTest.longType":339,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":450,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":387,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":233,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":177,"org.easymock.tests2.SerializationTest.testClass":72,"org.easymock.tests.LimitationsTest.mockNativeMethod":76,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":79,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":317,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":67,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":209,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":234,"org.easymock.tests2.NameTest.nameForMocksControl":11,"org.easymock.tests2.MockedExceptionTest.testMockedException":201,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":241,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":428,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":85,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":235,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":340,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":54,"org.easymock.tests.MockingTest.testNicePartialClassMocking":84,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":39,"org.easymock.tests2.CaptureTest.testCaptureLast":101,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":207,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":116,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":64,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":130,"org.easymock.tests.MockingTest.testTwoMocks":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":344,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":134,"org.easymock.samples.ExampleTest.removeNonExistingDocument":462,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":385,"org.easymock.tests.UsageStrictMockTest.differentMethods":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":214,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":174,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":448,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":1,"org.easymock.tests2.MockBuilderTest.testCreateMockString":58,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":285,"org.easymock.tests.UsageExpectAndThrowTest.floatType":338,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":125,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":196,"org.easymock.tests.UsageVerifyTest.twoThrows":21,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":70,"org.easymock.samples.ExampleTest.voteAgainstRemoval":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":272,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":326,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":44,"org.easymock.tests.LimitationsTest.privateConstructor":320,"org.easymock.tests2.UsageConstraintsTest.testNotNull":133,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":400,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":200,"org.easymock.tests2.UsageTest.defaultResetToNice":226,"org.easymock.samples.ExampleTest.voteAgainstRemovals":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":273,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":313,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":208,"org.easymock.tests.UsageVarargTest.differentLength":362,"org.easymock.tests2.CallbackTest.callback":164,"org.easymock.tests2.UsageConstraintsTest.equals":229,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":185,"org.easymock.tests.UsageTest.openCallCountByLastCall":427,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":151,"org.easymock.tests.UsageCallCountTest.tooFewCalls":420,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":62,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":332,"org.easymock.tests.UsageThrowableTest.throwCheckedException":397,"org.easymock.tests.MockingTest.testStrictClassMocking":430,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":5,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":61,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":213,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":390,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":155,"org.easymock.tests2.CompareToTest.testGreateOrEqual":468,"org.easymock.tests.ObjectMethodsTest.testHashCode":294,"org.easymock.tests2.NameTest.nameForNiceMock":10,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":199,"org.easymock.tests2.DependencyTest.testInterfaceMocking":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":472,"org.easymock.samples.ExampleTest.addDocument":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":250,"org.easymock.tests2.DelegateToTest.testStubDelegate":255,"org.easymock.tests2.AnswerTest.stubAnswer":154,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":30,"org.easymock.tests.UsageVarargTest.varargLongAccepted":364,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":270,"org.easymock.tests.UsageExpectAndReturnTest.floatType":300,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":316,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":74,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":90,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":409,"org.easymock.tests.UsageThrowableTest.noUpperLimit":394,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":181,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":127,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":109,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":236,"org.easymock.tests2.SerializationTest.test":156,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":99,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":447,"org.easymock.tests2.UsageConstraintsTest.testSame":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":299,"org.easymock.samples.SupportTest.addDocument":465,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":242,"org.easymock.tests.GenericTest.testPackageScope":77,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":375,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":266,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":180,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":433,"org.easymock.tests2.NameTest.nameForMock":8,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":310,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":186,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":302,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":350,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":292,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":403,"org.easymock.tests2.MockedExceptionTest.testRealException":202,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":325,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":275,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":274,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":392,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":150,"org.easymock.tests2.NameTest.nameForStrictMock":9,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":205,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":136,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":38,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":237,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":449,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":128,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":49,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":473,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":269,"org.easymock.tests2.CaptureTest.testCaptureRightOne":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":244,"org.easymock.tests2.UsageConstraintsTest.testOr":115,"org.easymock.tests.UsageRangeTest.combination":165,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":36,"org.easymock.tests.UsageTest.wrongArguments":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":243,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":75,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":263,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":311,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":451,"org.easymock.tests.UsageVarargTest.varargShortAccepted":363,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":423,"org.easymock.tests2.UsageConstraintsTest.cmpTo":120,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":195,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":265,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":225,"org.easymock.tests2.CaptureTest.testCaptureFromStub":105,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":383,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":50,"org.easymock.tests.UsageTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":421,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":312,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":437,"org.easymock.tests2.UsageConstraintsTest.constraints":110,"org.easymock.samples.ExampleTest.addAndChangeDocument":463,"org.easymock.tests.UsageStrictMockTest.testVerify":439,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":464,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":436,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":378,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":140,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":66,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":304,"org.easymock.tests.LimitationsTest.abstractClass":319,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":141,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":160,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":25,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":357}}]

[{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:325","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[1,2],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1554","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(short))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,2,69,70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[73,74,75,76],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[77,78,79,80,81],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[6,11,13,14,42,52,56,58,63,64,66,67,2,71,72],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (this.org.easymock.Capture<T>.hasCaptured()) {\n    this.org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[26,82,83,84,85,86,87,88,89,90,91,92,93,94],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"capture"}},{"transplant":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[26,82,83,84,90,91,95,27,96,97,98,99,100,101,102,103,104,105,106,107],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,73,74,119,120,121,122,123,124,125,4,5,6,7,8,9,126,10,11,127,12,128,129,13,14,130,26,82,83,84,85,86,87,89,90,131,132,95,27,96,97,98,99,100,101,103,133,134,135,136,137,138,28,139,104,105,140,141,106,107,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,29,165,166,167,168,30,169,170,171,172,173,174,175,34,176,177,41,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,56,57,212,58,59,60,213,62,64,65,214,66,67,215,2,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,70,71,72,247,248,249,250,251,252],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[73,253,254,255,256,257,258,163,259],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[260,261,262],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[263,263,264,264,4,91,131,132,96,97,98,99,134,136,137,28,139,104,106,107,142,178,179,181,265,266,267,268,269,57,241,242,243,244,245,247,251,252],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:36","failures":[4,6,7,10,15,16,17,18,19,20,22,23,24,43,44,46,47,48,50,52,56,57,58,59,62,63,2,70,71,72],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[73,253,254,255,270,256,257,258,163,259],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"failures":[138],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:81","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[271,272,273,274,275],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[108,109,110,111,276,112,277,278,279,280,113,281,114,282,263,263,264,264,283,115,116,117,118,73,74,75,119,120,121,284,122,123,124,285,286,287,288,125,3,4,5,6,7,8,9,126,10,11,127,12,128,129,289,13,14,290,130,26,82,83,84,85,86,87,88,291,89,90,91,92,93,131,132,95,27,96,97,98,99,100,101,103,133,134,135,136,137,138,28,139,104,105,140,292,141,106,107,142,293,143,144,145,294,295,146,296,147,148,297,149,298,150,299,300,151,301,302,303,304,305,152,153,154,155,156,157,158,159,160,161,162,163,164,29,306,165,166,167,168,307,30,169,170,171,31,308,172,32,173,174,309,175,33,34,176,310,177,311,312,313,314,35,36,315,37,38,39,41,42,178,179,316,180,181,317,318,319,320,182,321,183,184,185,186,187,188,44,265,266,267,268,269,322,53,323,324,325,326,327,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,328,329,330,331,332,333,54,334,335,336,337,338,339,340,341,342,343,344,345,346,272,273,211,55,56,57,212,58,59,60,61,347,348,349,350,351,352,353,354,355,356,357,358,213,62,63,64,65,214,66,67,215,68,359,360,361,362,363,364,365,366,2,69,367,368,369,216,217,218,370,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,70,71,72,371,372,373,374,375,247,376,248,249,250,251,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[16,23,46,48,56,63],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[73,74,75,76],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[108,109,110,111,276,112,277,278,279,280,113,281,114,282,263,263,264,264,283,115,116,117,118,73,74,75,119,120,121,284,122,123,124,285,286,287,288,125,3,4,5,6,7,8,9,126,10,11,127,12,128,129,289,13,14,290,130,26,82,83,84,85,86,87,88,291,89,90,91,92,93,131,132,95,27,96,97,98,99,100,101,103,133,134,135,136,137,138,28,139,104,105,140,292,141,106,107,142,293,143,144,145,377,294,295,146,296,147,148,297,149,298,150,299,300,151,301,302,303,304,305,152,153,154,155,156,157,158,159,160,161,162,163,164,29,306,165,166,167,168,307,30,169,170,171,31,308,172,32,173,174,309,175,33,34,176,310,177,311,312,313,314,35,36,315,37,38,39,41,42,178,179,316,180,181,317,318,319,320,182,321,183,184,185,186,187,188,44,265,266,267,268,269,322,53,323,324,325,326,327,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,328,329,330,331,332,333,54,334,335,336,337,338,339,340,341,342,343,344,345,346,272,273,211,55,56,57,212,58,59,60,61,347,348,349,350,351,352,353,354,355,356,357,358,213,62,63,64,65,214,66,67,215,68,359,360,361,362,363,364,365,366,2,69,367,368,369,216,217,218,370,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,70,71,72,371,372,373,374,375,247,376,248,249,250,251,252],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[378,131,28,105],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[315,38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:288","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[379,380],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:94","failures":[26,82,83,84,90,91,95,27,96,97,98,99,100,101,102,103,104,105,106,107],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[108,109,110,111,276,112,278,281,114,282,283,381,115,116,117,379,118,74,119,120,121,284,122,123,124,285,286,287,288,125,3,4,5,6,7,8,9,126,10,11,127,12,128,129,289,13,14,290,130,26,82,83,84,85,86,87,88,291,89,90,91,92,93,131,132,95,27,96,97,98,99,100,101,102,103,133,134,135,136,137,138,28,139,104,105,140,292,141,106,107,142,293,150,299,300,151,301,302,303,304,305,156,159,382,383,160,161,162,164,29,306,165,166,167,168,307,30,169,170,171,31,308,172,32,173,174,309,175,34,315,37,38,39,40,41,42,384,385,386,178,179,316,180,181,317,318,319,320,182,321,183,184,185,186,187,188,387,388,389,43,44,45,390,391,265,266,267,268,269,53,323,324,325,326,327,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,328,329,330,331,332,333,54,334,335,336,337,392,209,210,393,394,338,211,55,56,57,212,58,59,60,61,395,213,62,63,64,65,214,66,67,215,68,360,361,362,363,364,365,366,2,69,369,216,217,396,397,218,370,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,70,71,72,371,372,373,374,375,247,376,398,251,252,399],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:852","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Integer>(int))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[346,272],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"i","this":"this"}},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[271],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[108,110,111,112,113,114,116,73,74,119,120,121,122,4,6,7,9,126,10,127,128,129,289,290,130,26,82,83,84,85,88,291,89,90,92,93,131,132,95,27,96,97,98,99,100,101,103,133,134,135,136,137,138,28,139,104,105,140,292,141,106,107,142,293,143,144,145,295,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,163,29,306,165,166,167,168,307,30,169,170,171,31,308,172,32,173,174,175,33,34,176,310,177,312,314,35,36,41,178,179,181,317,182,183,184,185,186,187,188,272,57,58,59,213,62,65,214,215,369,216,217,218,370,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,70,72,247,376,248,249,250,251,252],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[400],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[289],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[379],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:327","failures":[385,386,388,389],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"this.org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(this.org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior","state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[347,348,349,350,351,353,354,355,356,357,358,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":27,"org.easymock.tests2.UsageTest.argumentsOrdered":14,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":213,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":173,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":12,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":283,"org.easymock.tests2.DelegateToTest.testReturnException":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":323,"org.easymock.tests.MockingTest.testPartialClassMocking":248,"org.easymock.tests.MockClassControlTest.testToString":340,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":399,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":189,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":143,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":120,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":422,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":253,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":178,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":319,"org.easymock.samples.ExampleTest.answerVsDelegate":109,"org.easymock.tests2.UsageConstraintsTest.testNull":97,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":176,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":32,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":345,"org.easymock.tests2.CaptureTest.testPrimitive":84,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":181,"org.easymock.tests.UsageTest.moreThanOneArgument":62,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":208,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":34,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":267,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":392,"org.easymock.tests.UsageTest.argumentsOrdered":67,"org.easymock.tests.UsageVarargTest.varargIntAccepted":330,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":24,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":241,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":79,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":294,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":296,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":245,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":406,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":19,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":121,"org.easymock.tests.ReplayStateInvalidUsageTest.times":355,"org.easymock.tests2.AnswerTest.answer":159,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":102,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":288,"org.easymock.tests2.CaptureTest.testAnd":26,"org.easymock.tests2.UsageTest.strictResetToDefault":126,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":313,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":266,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":170,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":219,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":394,"org.easymock.tests2.DelegateToTest.testDelegate":118,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":405,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":326,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":375,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":43,"org.easymock.tests2.CaptureTest.testCapture1_2446744":85,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":202,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":286,"org.easymock.tests.UsageThrowableTest.throwError":182,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":349,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":269,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":409,"org.easymock.samples.PartialClassMockTest.testGetArea":113,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":350,"org.easymock.tests2.CompareToTest.testLessOrEqual":400,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":242,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":390,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":190,"org.easymock.tests2.UsageTest.niceToStrict":127,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":146,"org.easymock.tests2.MockBuilderTest.testCreateMock":297,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":16,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":198,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":171,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":389,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":68,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":317,"org.easymock.tests.UsageOverloadedMethodTest.overloading":216,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":136,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":39,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":232,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":369,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":135,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":89,"org.easymock.tests2.EasyMockSupportClassTest.testAll":293,"org.easymock.tests.MockClassControlTest.testEquals":344,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":273,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":21,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":206,"org.easymock.tests2.CaptureTest.testCaptureAll":82,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":287,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":373,"org.easymock.tests2.UsageConstraintsTest.testMatches":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":268,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":347,"org.easymock.samples.ExampleTest.voteForRemovals":112,"org.easymock.tests.UsageVarargTest.allKinds":337,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":70,"org.easymock.samples.BasicClassMockTest.testPrintContent":280,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":374,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":187,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":327,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":379,"org.easymock.tests2.UsageConstraintsTest.greaterThan":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":0,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":370,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":36,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":410,"org.easymock.samples.ExampleTest.voteForRemoval":110,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":311,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":402,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":9,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":322,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":258,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":30,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.CaptureTest.testCaptureFirst":93,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":381,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":169,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":130,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":228,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":166,"org.easymock.tests2.UsageTest.moreThanOneArgument":10,"org.easymock.tests2.CaptureTest.testCapture2_2446744":92,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":149,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":336,"org.easymock.tests.GenericTest.testBridgedEquals":275,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":365,"org.easymock.tests.UsageExpectAndReturnTest.longType":224,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":371,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":207,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":395,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":292,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":265,"org.easymock.tests.UsageCallCountTest.tooManyCalls":366,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":47,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":360,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":194,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":186,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":153,"org.easymock.tests2.UsageConstraintsTest.testContains":134,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":359,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":151,"org.easymock.tests2.UsageConstraintsTest.testFind":96,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":217,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":124,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":211,"org.easymock.tests.UsageExpectAndReturnTest.object":231,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":254,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":332,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":368,"org.easymock.tests.UsageTest.exactCallCountByLastCall":215,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":247,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":209,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":51,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":237,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":328,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":38,"org.easymock.tests.MockClassControlTest.testHashCode":343,"org.easymock.tests2.EasyMockSupportTest.testVerify":309,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":18,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":210,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":388,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":285,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":377,"org.easymock.tests.UsageVarargTest.varargCharAccepted":331,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":3,"org.easymock.tests2.UsageTest.openCallCountByLastCall":128,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":174,"org.easymock.tests.DefaultClassInstantiatorTest.object":346,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":387,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":69,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":52,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":196,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":184,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":408,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":314,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":342,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":195,"org.easymock.tests.CapturesMatcherTest.test":94,"org.easymock.tests.ReplayStateInvalidCallsTest.times":414,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":238,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":384,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":145,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":20,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":341,"org.easymock.tests2.UsageTest.resumeIfFailure":290,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":325,"org.easymock.tests2.StubTest.stubWithReturnValue":122,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":257,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":141,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":230,"org.easymock.tests2.SerializationTest.testAllMockedMethod":75,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":396,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":81,"org.easymock.samples.SupportTest.voteForRemovals":114,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":23,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":271,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":201,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":76,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":397,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":382,"org.easymock.tests.UsageExpectAndThrowTest.object":199,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":105,"org.easymock.tests2.DelegateToTest.testWrongClass":117,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":412,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":251,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":252,"org.easymock.tests.UsageStrictMockTest.range":58,"org.easymock.samples.ConstructorCalledMockTest.testTax":263,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":308,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":152,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":200,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":147,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":66,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":357,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":318,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":46,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":404,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":391,"org.easymock.tests2.CaptureTest.testCaptureNone":291,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":260,"org.easymock.tests.UsageUnorderedTest.message":2,"org.easymock.tests.UsageVerifyTest.twoReturns":72,"org.easymock.tests.UsageVarargTest.varargByteAccepted":335,"org.easymock.tests2.ThreadingTest.testThreadSafe":29,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":363,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":279,"org.easymock.tests2.CaptureTest.testCapture_2617107":83,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":180,"org.easymock.tests2.UsageConstraintsTest.any":103,"org.easymock.tests2.StubTest.stub":284,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":354,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":386,"org.easymock.tests.UsageExpectAndThrowTest.longType":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":324,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":353,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":5,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":150,"org.easymock.tests2.SerializationTest.testClass":73,"org.easymock.tests.LimitationsTest.mockNativeMethod":246,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":240,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":274,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":420,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":8,"org.easymock.tests2.NameTest.nameForMocksControl":305,"org.easymock.tests2.MockedExceptionTest.testMockedException":300,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":214,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":193,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":250,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":175,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":148,"org.easymock.tests.MockingTest.testNicePartialClassMocking":249,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":77,"org.easymock.tests2.CaptureTest.testCaptureLast":88,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":44,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":419,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":158,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":100,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":140,"org.easymock.tests.MockingTest.testTwoMocks":398,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":197,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":13,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":262,"org.easymock.samples.ExampleTest.removeNonExistingDocument":277,"org.easymock.tests.UsageStrictMockTest.differentMethods":59,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":261,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":165,"org.easymock.tests2.ConstraintsToStringTest.andToString":22,"org.easymock.tests2.MockBuilderTest.testCreateMockString":298,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":338,"org.easymock.tests.UsageExpectAndThrowTest.floatType":191,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":138,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":160,"org.easymock.tests.UsageVerifyTest.twoThrows":71,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":144,"org.easymock.samples.ExampleTest.voteAgainstRemoval":111,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":45,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":35,"org.easymock.tests2.UsageConstraintsTest.testNotNull":106,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":188,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":299,"org.easymock.tests2.UsageTest.defaultResetToNice":289,"org.easymock.samples.ExampleTest.voteAgainstRemovals":108,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":236,"org.easymock.tests.UsageVarargTest.differentLength":333,"org.easymock.tests2.CallbackTest.callback":164,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":49,"org.easymock.tests.UsageTest.openCallCountByLastCall":65,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":131,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":316,"org.easymock.tests.UsageCallCountTest.tooFewCalls":361,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":155,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":320,"org.easymock.tests.UsageThrowableTest.throwCheckedException":185,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":48,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":157,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":376,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":154,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":156,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":162,"org.easymock.tests.ObjectMethodsTest.testHashCode":367,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":78,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":418,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":167,"org.easymock.tests2.NameTest.nameForNiceMock":304,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":413,"org.easymock.tests2.DependencyTest.testInterfaceMocking":119,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":255,"org.easymock.samples.ExampleTest.addDocument":276,"org.easymock.tests2.DelegateToTest.testStubDelegate":116,"org.easymock.tests2.AnswerTest.stubAnswer":161,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":57,"org.easymock.tests.UsageVarargTest.varargLongAccepted":334,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":60,"org.easymock.tests.UsageExpectAndReturnTest.floatType":223,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":239,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":163,"org.easymock.tests2.ConstraintsToStringTest.orToString":15,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":264,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":139,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":40,"org.easymock.tests.UsageThrowableTest.noUpperLimit":321,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":132,"org.easymock.tests2.SerializationTest.test":74,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":86,"org.easymock.tests2.UsageConstraintsTest.testSame":98,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":222,"org.easymock.samples.SupportTest.addDocument":281,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":403,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":352,"org.easymock.tests.GenericTest.testPackageScope":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":393,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":401,"org.easymock.tests2.NameTest.nameForMock":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":233,"org.easymock.tests2.UsageStrictMockTest.differentMethods":7,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":225,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":203,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":220,"org.easymock.tests2.MockedExceptionTest.testRealException":301,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":50,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":80,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":179,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":358,"org.easymock.tests2.NameTest.nameForStrictMock":303,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":123,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":310,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":104,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":1,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":295,"org.easymock.tests2.UsageStrictMockTest.range":6,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":407,"org.easymock.tests2.UsageConstraintsTest.lessThan":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":270,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":307,"org.easymock.tests2.CaptureTest.testCaptureRightOne":90,"org.easymock.tests2.UsageConstraintsTest.testOr":99,"org.easymock.tests.UsageRangeTest.combination":218,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":33,"org.easymock.tests.UsageTest.wrongArguments":64,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":339,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":226,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":234,"org.easymock.tests.UsageVarargTest.varargShortAccepted":54,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":364,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":421,"org.easymock.tests2.UsageConstraintsTest.cmpTo":133,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":383,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":411,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":129,"org.easymock.tests2.CaptureTest.testCaptureFromStub":91,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":348,"org.easymock.tests.UsageTest.unexpectedCallWithArray":63,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":417,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":56,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":362,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":235,"org.easymock.tests2.UsageConstraintsTest.constraints":95,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":212,"org.easymock.samples.ExampleTest.addAndChangeDocument":278,"org.easymock.tests2.ConstraintsToStringTest.notToString":17,"org.easymock.tests.UsageStrictMockTest.testVerify":61,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":282,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":55,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":372,"org.easymock.tests2.CompareToTest.testGreateThan":378,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":87,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":243,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":227,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":41,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":31,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":329}}]

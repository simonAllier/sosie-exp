[{"position":"org.easymock.internal.ArgumentToString:89","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"failures":[49],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[50,39],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[51,4,52,53,54,55,56,57,58,59,60,61,19,20,62,30,63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[65,66,67],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[68,69,70,71,72],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[73,74,23,75,76,77,78,79],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[80,81,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[82,83,84],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,1,51,2,3,4,52,108,109,110,111,112,113,114,115,116,117,118,6,7,119,120,121,122,123,124,125,126,127,128,129,54,130,131,132,55,56,133,57,134,135,58,136,137,138,139,140,141,142,143,144,145,146,8,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,11,59,12,13,174,175,14,15,16,176,177,178,179,180,181,182,183,184,17,185,186,187,188,189,190,191,192,73,193,194,195,196,60,18,197,198,199,200,201,61,19,20,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,216,217,217,218,219,220,221,222,74,223,224,225,226,227,228,23,229,230,80,231,232,233,234,235,236,237,81,238,239,240,241,24,242,243,244,245,246,247,248,25,249,26,250,251,252,253,254,255,27,256,62,28,29,30,63,257,258,259,260,261,262,263,264,31,265,266,267,268,269,270,271,272,273,274,275,276,277,278,32,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,33,304,305,306,34,35,307,308,36,309,310,311,312,313,314,37,315,64,38,39,40,316,317,318,41,42,43,44,75,76,319,320,321,322,323,324,325,326,45,327,328,329,47,330,331,332,333,77,334,335,78,336,79],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[337],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[338],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:90","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()))","type":"CtThrowImpl"},"failures":[339,340,341,342,343,344,345,346],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[1,347,348,12,349,350],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:85","failures":[85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,1,51,2,3,4,52,108,114,351,115,116,117,118,5,6,7,352,353,354,355,356,121,122,123,124,125,126,127,128,129,54,130,131,132,55,56,133,57,134,135,58,136,137,138,139,140,144,145,8,147,148,149,150,357,358,359,360,361,362,363,364,365,366,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,11,59,12,13,174,175,14,15,16,177,178,179,367,368,369,370,371,180,181,182,183,184,17,185,186,187,188,189,192,372,373,374,375,376,377,378,379,380,381,382,73,194,195,60,383,18,197,198,199,200,201,61,19,20,202,203,204,205,206,207,208,209,213,214,215,216,216,217,217,218,219,220,221,222,74,223,224,225,226,227,228,23,229,230,80,231,232,233,234,235,236,237,81,238,239,240,241,24,242,243,244,245,246,247,248,25,249,26,250,251,252,253,254,255,27,256,62,28,29,30,63,257,384,385,386,387,388,258,259,260,261,262,263,264,31,265,266,267,268,269,270,271,273,274,275,276,277,278,32,279,280,281,282,283,284,285,286,287,288,290,291,292,294,295,296,297,298,299,300,301,302,303,33,304,305,306,34,35,307,308,36,309,310,311,312,313,314,37,315,64,38,39,40,316,317,318,41,42,43,44,75,76,319,320,321,322,323,324,325,326,45,327,389,328,329,46,47,48,330,331,332,333,77,78,336,79],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[1,3,10,12,13,14,15,383,18,19,20,29,38,41,42],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[390,391,85,392,393,394,337,144,145,146,395,396,359,360,361,362,363,364,365,366,397,398,176,177,178,179,399,371,68,69,70,400,71,72,202,213,214,215,216,216,217,217,241,24,243,244,245,246,247,401,50,248,25,249,26,402,403,257,404,405,406,407,408,409,410,411,412,413,259,414,415,260,416,417,418,419,420,421,422,423,424,261,425,426,427,428,429,262,430,431,312,314,432,433,319,320,321,322,324,325,434,326,435,45,436,437,327,389,328,329,438,46,47,439,440,48,330,331,332],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[51,121,122,125,162,164,441,442,443,444,445,197,198,199,200,201,203,204,205,206,207,208,209,216,216,217,217,238,62,263,264,266,267,268,269,275,277,278,279,280,286,287,288],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:81","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[337,144,145,146,395],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[446],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual","this":"actual"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[111,447],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[1,3,10,12,13,14,15,383,18,19,20,29,38,41,42],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[85,448,86,449,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,1,51,2,3,4,52,108,109,110,111,112,113,114,351,115,116,117,118,5,6,7,352,353,354,355,356,119,120,121,122,123,124,125,162,163,169,189,18,203,204,205,206,207,208,209,229,230,80,231,232,233,234,235,236,237,81,238,239,240,247,62,388,263,264,31,265,266,267,268,269,270,271,272,273,274,275,276,277,278,32,279,280,281,282,283,284,285,286,287,288,295,296,301,75,76],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1963","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","type":"CtInvocationImpl"},"failures":[231],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,0,107,1,51,2,3,4,52,108,110,111,114,115,116,117,118,6,7,121,122,123,124,125,126,127,128,129,54,130,131,132,55,56,133,57,134,135,58,136,137,138,139,140,144,145,8,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,169,11,59,13,174,175,14,15,16,177,178,179,180,181,182,183,184,17,185,186,187,188,189,190,73,194,195,60,18,61,19,20,202,203,204,205,206,207,208,209,213,214,215,218,219,220,221,222,74,223,224,225,226,228,23,229,230,80,231,232,233,234,235,236,237,81,239,240,241,24,242,243,244,245,247,25,249,26,250,251,252,253,254,255,27,256,62,28,29,30,63,257,258,259,260,261,262,263,264,31,265,266,267,268,269,270,271,272,273,274,275,276,277,278,32,279,280,281,282,283,284,285,286,287,288,290,291,292,294,295,296,297,298,299,300,301,302,303,33,304,305,306,34,35,307,308,36,309,310,311,312,313,314,37,315,64,38,39,40,316,317,318,41,42,43,44,75,76,319,320,321,322,323,324,325,45,327,328,329,47,332,77,78,336,79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1177","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[1,347,348,12,349,350],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[1,347,348,12,349,350],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[289,293],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[229,80,81,31,270],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[393,394,146,213,246,312,326,435,45,436,327,389,328,329,46,47,440,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[288,450],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[246,389],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[357,359,364],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.Capture:134","failures":[451,452],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":265,"org.easymock.tests2.UsageTest.argumentsOrdered":42,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":11,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":309,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":40,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":219,"org.easymock.tests2.DelegateToTest.testReturnException":290,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":166,"org.easymock.tests.MockingTest.testPartialClassMocking":177,"org.easymock.tests.MockClassControlTest.testToString":361,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":445,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":419,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":126,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":260,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":296,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":271,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":121,"org.easymock.tests2.UsageTest.wrongArguments":38,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":369,"org.easymock.samples.ExampleTest.answerVsDelegate":74,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":394,"org.easymock.tests2.UsageConstraintsTest.testNull":267,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":243,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":36,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":366,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":405,"org.easymock.tests2.CaptureTest.testPrimitive":231,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":125,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":140,"org.easymock.tests.UsageTest.moreThanOneArgument":59,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":199,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":109,"org.easymock.tests.UsageTest.argumentsOrdered":15,"org.easymock.tests.UsageVarargTest.varargIntAccepted":182,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":338,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":205,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":326,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":66,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":346,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":209,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":258,"org.easymock.tests.ReplayStateInvalidUsageTest.times":379,"org.easymock.tests2.AnswerTest.answer":77,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":272,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":387,"org.easymock.tests2.CaptureTest.testAnd":229,"org.easymock.tests2.UsageTest.strictResetToDefault":315,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":198,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":306,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":113,"org.easymock.tests2.DelegateToTest.testDelegate":294,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":136,"org.easymock.tests.LimitationsTest.mockFinalMethod":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":356,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":119,"org.easymock.tests2.CaptureTest.testCapture1_2446744":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":135,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":385,"org.easymock.tests.UsageThrowableTest.throwError":154,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":373,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":22,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":431,"org.easymock.samples.PartialClassMockTest.testGetArea":213,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":206,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":420,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":396,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":127,"org.easymock.tests2.UsageTest.niceToStrict":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":441,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":327,"org.easymock.tests2.MockBuilderTest.testCreateMock":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":427,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":56,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":349,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":34,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":173,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":114,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":367,"org.easymock.tests.UsageOverloadedMethodTest.overloading":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":429,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":424,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":195,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":277,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":98,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":276,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":237,"org.easymock.tests2.EasyMockSupportClassTest.testAll":259,"org.easymock.tests.MockClassControlTest.testEquals":365,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":138,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":406,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":386,"org.easymock.tests2.CaptureTest.testCaptureAll":230,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":354,"org.easymock.tests2.UsageConstraintsTest.testMatches":278,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":200,"org.easymock.samples.ExampleTest.voteForRemovals":226,"org.easymock.tests.UsageVarargTest.allKinds":189,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":61,"org.easymock.samples.BasicClassMockTest.testPrintContent":215,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":355,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":160,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":27,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":170,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":293,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":344,"org.easymock.tests2.UsageConstraintsTest.greaterThan":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":414,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":147,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":26,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":72,"org.easymock.samples.ExampleTest.voteForRemoval":223,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":402,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":298,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":439,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":246,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":37,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":202,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":304,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":412,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":165,"org.easymock.tests2.CaptureTest.testCaptureFirst":240,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":289,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":305,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":44,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":383,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":94,"org.easymock.tests2.UsageTest.moreThanOneArgument":64,"org.easymock.tests2.CaptureTest.testCapture2_2446744":239,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":447,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":47,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":188,"org.easymock.tests.GenericTest.testBridgedEquals":395,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":6,"org.easymock.tests.UsageExpectAndReturnTest.longType":90,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":352,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":440,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":139,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":164,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":284,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":197,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":211,"org.easymock.tests.UsageCallCountTest.tooManyCalls":7,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":428,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":95,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":342,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":130,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":159,"org.easymock.tests.MockingTest.testNiceClassMocking":399,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":320,"org.easymock.tests.MockingTest.testClassMocking":398,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":435,"org.easymock.tests2.UsageConstraintsTest.testContains":275,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":351,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":332,"org.easymock.tests2.UsageConstraintsTest.testFind":266,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":153,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":0,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":76,"org.easymock.tests.UsageExpectAndReturnTest.object":97,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":247,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":308,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":184,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":358,"org.easymock.tests.UsageTest.exactCallCountByLastCall":16,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":448,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":110,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":404,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":180,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":103,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":194,"org.easymock.tests.MockClassControlTest.testHashCode":364,"org.easymock.tests2.EasyMockSupportTest.testVerify":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":422,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":111,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":172,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":73,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":384,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":9,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":388,"org.easymock.tests.UsageVarargTest.varargCharAccepted":183,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":256,"org.easymock.tests2.UsageTest.openCallCountByLastCall":316,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":310,"org.easymock.tests.DefaultClassInstantiatorTest.object":371,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":171,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":150,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":423,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":132,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":410,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":157,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":25,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":363,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":131,"org.easymock.tests.CapturesMatcherTest.test":451,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":104,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":210,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":262,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":362,"org.easymock.tests2.UsageTest.resumeIfFailure":43,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":393,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":65,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":168,"org.easymock.tests2.StubTest.stubWithReturnValue":251,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":96,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":285,"org.easymock.tests2.SerializationTest.testAllMockedMethod":314,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":190,"org.easymock.samples.SupportTest.voteForRemovals":221,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":350,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":337,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":134,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":191,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":334,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":449,"org.easymock.tests.UsageExpectAndThrowTest.object":133,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":282,"org.easymock.tests2.DelegateToTest.testWrongClass":292,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":203,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":204,"org.easymock.tests.UsageStrictMockTest.range":3,"org.easymock.samples.ConstructorCalledMockTest.testTax":216,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":307,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":319,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":57,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":411,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":381,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":368,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":347,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":143,"org.easymock.tests2.CaptureTest.testCaptureNone":236,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":82,"org.easymock.tests.UsageUnorderedTest.message":18,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":21,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests.UsageVarargTest.varargByteAccepted":187,"org.easymock.tests2.ThreadingTest.testThreadSafe":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":425,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":118,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":214,"org.easymock.tests2.CaptureTest.testCapture_2617107":80,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":53,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":124,"org.easymock.tests2.UsageConstraintsTest.any":273,"org.easymock.tests2.StubTest.stub":250,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":378,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":212,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":167,"org.easymock.tests.UsageExpectAndThrowTest.longType":129,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":400,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":377,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":28,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":302,"org.easymock.tests2.SerializationTest.testClass":312,"org.easymock.tests.LimitationsTest.mockNativeMethod":85,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":146,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":106,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":409,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":63,"org.easymock.tests2.NameTest.nameForMocksControl":255,"org.easymock.tests2.MockedExceptionTest.testMockedException":331,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":415,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":175,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":54,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":241,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":329,"org.easymock.tests.MockingTest.testNicePartialClassMocking":178,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":245,"org.easymock.tests2.CompareToTest.testNotComparable":446,"org.easymock.tests2.CaptureTest.testCaptureLast":235,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":120,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":270,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":325,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":283,"org.easymock.tests.MockingTest.testTwoMocks":176,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":87,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":55,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":287,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":84,"org.easymock.samples.ExampleTest.removeNonExistingDocument":227,"org.easymock.tests.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":340,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":375,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":69,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":83,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":299,"org.easymock.tests2.MockBuilderTest.testCreateMockString":48,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":416,"org.easymock.tests.UsageExpectAndThrowTest.floatType":128,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":413,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":78,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":261,"org.easymock.samples.ExampleTest.voteAgainstRemoval":224,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":141,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":249,"org.easymock.tests.LimitationsTest.privateConstructor":391,"org.easymock.tests2.UsageConstraintsTest.testNotNull":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":161,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":330,"org.easymock.tests2.UsageTest.defaultResetToNice":318,"org.easymock.samples.ExampleTest.voteAgainstRemovals":222,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":102,"org.easymock.tests.UsageVarargTest.differentLength":17,"org.easymock.tests2.CallbackTest.callback":23,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":401,"org.easymock.tests.UsageTest.openCallCountByLastCall":174,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":263,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":123,"org.easymock.tests.UsageCallCountTest.tooFewCalls":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":322,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":370,"org.easymock.tests.UsageThrowableTest.throwCheckedException":158,"org.easymock.tests.MockingTest.testStrictClassMocking":397,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":348,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":163,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":324,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":321,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":380,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":323,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":79,"org.easymock.tests.ObjectMethodsTest.testHashCode":357,"org.easymock.tests2.NameTest.nameForNiceMock":254,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":301,"org.easymock.tests2.DependencyTest.testInterfaceMocking":295,"org.easymock.samples.ExampleTest.addDocument":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":430,"org.easymock.tests2.DelegateToTest.testStubDelegate":291,"org.easymock.tests2.AnswerTest.stubAnswer":336,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":51,"org.easymock.tests.UsageVarargTest.varargLongAccepted":186,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":105,"org.easymock.tests.UsageExpectAndReturnTest.floatType":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":257,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":217,"org.easymock.tests.UsageThrowableTest.noUpperLimit":155,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":196,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":280,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":345,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":264,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":432,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":233,"org.easymock.tests2.SerializationTest.test":313,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":88,"org.easymock.tests2.UsageConstraintsTest.testSame":268,"org.easymock.samples.SupportTest.addDocument":220,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":376,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":417,"org.easymock.tests.GenericTest.testPackageScope":144,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":442,"org.easymock.tests2.NameTest.nameForMock":252,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":99,"org.easymock.tests2.UsageStrictMockTest.differentMethods":30,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":50,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":91,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":58,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":149,"org.easymock.tests2.MockedExceptionTest.testRealException":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":62,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":122,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":382,"org.easymock.tests2.NameTest.nameForStrictMock":253,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":437,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":75,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":244,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":433,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":70,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":281,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":45,"org.easymock.tests2.UsageStrictMockTest.range":29,"org.easymock.tests2.UsageConstraintsTest.lessThan":288,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":407,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":343,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":434,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":421,"org.easymock.tests2.CaptureTest.testCaptureRightOne":81,"org.easymock.tests2.UsageConstraintsTest.testOr":269,"org.easymock.tests.UsageRangeTest.combination":8,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":24,"org.easymock.tests.UsageTest.wrongArguments":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":418,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":360,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":92,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":100,"org.easymock.tests.UsageVarargTest.varargShortAccepted":185,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":71,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":5,"org.easymock.tests2.UsageConstraintsTest.cmpTo":274,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":335,"org.easymock.tests2.CompareToTest.testLessThan":450,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":317,"org.easymock.tests2.CaptureTest.testCaptureFromStub":238,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":372,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":436,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":1,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":117,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":101,"org.easymock.tests2.CaptureTest.testCapture":452,"org.easymock.tests2.UsageConstraintsTest.constraints":31,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":2,"org.easymock.samples.ExampleTest.addAndChangeDocument":228,"org.easymock.tests.UsageStrictMockTest.testVerify":108,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":218,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":107,"org.easymock.tests2.CompareToTest.testGreateThan":49,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":353,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":234,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":408,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":207,"org.easymock.tests.LimitationsTest.abstractClass":390,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":93,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":208,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":181,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":35}}]

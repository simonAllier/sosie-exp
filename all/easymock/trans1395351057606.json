[{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:41","failures":[82],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Comparable)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation().addCapture(((org.easymock.internal.matchers.Captures<java.lang.Object>)(this)), java.lang.Object)","type":"CtInvocationImpl"},"failures":[83,84,85,86,87,88,89,90,91,92,93,94,95,96],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[98],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"qualifier","key":"qualifier"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[99,100,101,102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[103,104,105,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[107],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"obj"}},{"transplant":{"position":"org.easymock.EasyMock:1519","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[108,109,110,111],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:40","sourceCode":"return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]))","type":"CtReturnImpl"},"failures":[112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,37,146,147,148,149,150,151,152,153,38,154,39,40,155,156,41,42,43,157,108,109,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,44,45,179,46,47,48,180,181,182,183,184,185,110,111,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,53,208,209,210,211,212,213,214,215,216,54,55,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,239,240,240,241,56,242,243,244,58,59,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,60,264,265,61,62,63,266,267,268,64,65,66,67,269,68,270,271,272,273,274,275,69,276,70,71,277,72,278,279,280,73,74,281,282,75,283,284,76,285,77,78,79,286,287,288,80,289,290,103,291,292,293,294,104,295,296,297,298,299,300,81,301,302,105,303,304,305,306,106,307,308,309,310,311,100,312,313,101,102,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,84,85,86,87,88,89,90,91,335,92,93,94,95,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[336],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:45","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","type":"CtInvocationImpl"},"failures":[112,113,115,139,163,169,170,171,179,47,48,193,199,200,201,53,208,209,210,218,226,250,262,263,285,78,79],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:632","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"failures":[115,337,338,133,134,135,136,144,339,145,37,340,44,223,341,342,343,344,345,346,347,239,239,240,240,241,348,56,242,349,244,57,58,59,253,254,255,256,257,269,68,271,272,273,350,274,275,69,276,70,71,309,310,314,315,316,319,321,322,323,324,325,327,328],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:60","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:41","sourceCode":"java.lang.StringBuffer.append(\"same(\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[114,351,352,353,33,34,35,115,116,117,354,337,118,119,120,121,122,123,124,125,126,127,128,130,131,355,133,134,135,136,137,138,139,140,141,142,356,357,358,359,360,36,361,362,363,364,143,144,339,37,146,147,148,149,150,38,154,39,40,155,156,41,42,43,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,44,365,45,179,46,47,48,180,181,182,83,83,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,53,209,210,211,212,213,214,215,216,54,55,218,219,220,221,222,224,225,226,227,228,229,230,231,232,233,234,235,366,236,237,367,368,238,239,240,369,241,370,371,348,56,242,349,243,244,57,58,59,245,246,247,248,249,250,251,252,372,253,254,255,256,257,258,259,260,262,263,60,264,265,61,62,63,266,267,268,64,65,66,67,269,68,270,271,272,273,350,274,275,69,276,70,71,277,72,278,279,280,73,74,281,282,75,283,284,373,76,374,285,77,78,79,286,287,288,80,289,290,103,291,292,293,294,295,296,297,298,299,300,81,301,302,105,303,304,305,306,106,307,308,309,310,311,313,101,102,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,331,332,334,84,85,86,87,88,89,90,91,335,92,93,94,95,96],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[375,376,377,378,379,118,120,122,123,124,125,126,127,132,133,134,135,136,144,145,152,153,38,154,155,156,43,178,179,47,48,181,182,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,53,208,209,210,211,212,213,214,215,216,55,218,219,222,229,230,231,232,234,235,236,238,241,56,242,243,244,58,245,246,247,248,249,253,254,255,256,260,262,263,60,264,265,62,266,267,268,66,67,269,68,270,271,272,273,274,69,276,70,277,72,278,279,280,73,74,281,282,75,283,284,285,78,79,287,288,80,289,290,103,291,292,293,294,295,296,297,298,299,300,81,301,302,105,303,304,306,106,307,308,309,310,101,316,318,319,320,322,323,324,325,326,327,328,331,84,85,87,88,91,335,92,93,95,96],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:119","sourceCode":"java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String","type":"CtAssignmentImpl"},"failures":[367,369,380,381,382,383,384,310,385,386,387,388,389,390,391,392,393,394,395,318,396,397,398,399,400,401],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[402,403,337,338,133,134,135,136,144,339,145,404,405,223,341,342,343,344,345,346,347,239,239,240,240,241,370,371,348,56,406,242,349,243,244,57,58,59,253,254,255,256,269,68,271,272,273,350,274,275,69,276,70,407,309,316,319,321,322,323,324,325,327,328],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:54","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[154,39,40,41,42,45,408,409,410,265,61,64,65,411,412,413,414],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1092","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Contains(java.lang.String))","type":"CtInvocationImpl"},"failures":[80,293,297,105],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"substring","key":"substring"}},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:344","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[415],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[62],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[129,416,132,355,37,154,39,40,41,42,45,179,47,48,183,184,408,417,409,418,419,410,52,216,54,55,265,61,64,65,420,411,421,422,423,424,412,425,413,426,414,285,78,79],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[99,100,101,102],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[340,427,428,429,430,431],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[432],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:380","sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":289,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":38,"org.easymock.tests2.UsageTest.argumentsOrdered":65,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":283,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":396,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":63,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":369,"org.easymock.tests2.DelegateToTest.testReturnException":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":138,"org.easymock.tests.MockingTest.testPartialClassMocking":133,"org.easymock.tests.MockClassControlTest.testToString":342,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":178,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":407,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":158,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":254,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":263,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":32,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":294,"org.easymock.tests2.UsageTest.wrongArguments":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":218,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":390,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":117,"org.easymock.samples.ExampleTest.answerVsDelegate":233,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":403,"org.easymock.tests2.UsageConstraintsTest.testNull":103,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":271,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":75,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":347,"org.easymock.tests2.CaptureTest.testPrimitive":87,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":222,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":177,"org.easymock.tests.UsageTest.moreThanOneArgument":154,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":270,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":226,"org.easymock.tests.UsageTest.argumentsOrdered":42,"org.easymock.tests.UsageVarargTest.varargIntAccepted":358,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":426,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":211,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":348,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":400,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":349,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":215,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":16,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":423,"org.easymock.tests.ReplayStateInvalidUsageTest.times":7,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":310,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":107,"org.easymock.tests2.AnswerTest.answer":311,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":372,"org.easymock.tests2.CaptureTest.testAnd":84,"org.easymock.tests2.UsageTest.strictResetToDefault":264,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":275,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":225,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":209,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":280,"org.easymock.tests2.DelegateToTest.testDelegate":334,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":173,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":141,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":150,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":183,"org.easymock.tests2.CaptureTest.testCapture1_2446744":88,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":336,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":171,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":251,"org.easymock.tests.UsageThrowableTest.throwError":120,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":2,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":401,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":50,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":228,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":19,"org.easymock.samples.PartialClassMockTest.testGetArea":241,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":3,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":212,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":152,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":405,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":159,"org.easymock.tests2.UsageTest.niceToStrict":62,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":242,"org.easymock.tests2.MockBuilderTest.testCreateMock":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":97,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":387,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":411,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":167,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":73,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":109,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":115,"org.easymock.tests.UsageOverloadedMethodTest.overloading":230,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":131,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":299,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":199,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":229,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":298,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":92,"org.easymock.tests2.EasyMockSupportClassTest.testAll":253,"org.easymock.tests.MockClassControlTest.testEquals":346,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":339,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":412,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":148,"org.easymock.tests2.CaptureTest.testCaptureAll":85,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":252,"org.easymock.tests2.UsageConstraintsTest.testMatches":300,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":0,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":227,"org.easymock.samples.ExampleTest.voteForRemovals":236,"org.easymock.tests.UsageVarargTest.allKinds":143,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":216,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":149,"org.easymock.samples.BasicClassMockTest.testPrintContent":371,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":126,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":76,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":397,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":142,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":333,"org.easymock.tests2.UsageConstraintsTest.greaterThan":301,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":208,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":70,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":20,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":431,"org.easymock.samples.ExampleTest.voteForRemoval":234,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":350,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":12,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":337,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":278,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":122,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":137,"org.easymock.tests2.CaptureTest.testCaptureFirst":96,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":329,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":279,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":67,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":355,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":195,"org.easymock.tests2.CaptureTest.testCapture2_2446744":95,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":248,"org.easymock.tests2.UsageTest.moreThanOneArgument":265,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":58,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":364,"org.easymock.tests.GenericTest.testBridgedEquals":404,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":34,"org.easymock.tests.UsageExpectAndReturnTest.longType":191,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":146,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":176,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":217,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":305,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":174,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":110,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":224,"org.easymock.tests.UsageCallCountTest.tooManyCalls":35,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":417,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":389,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":163,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":323,"org.easymock.tests2.UsageConstraintsTest.testContains":297,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":316,"org.easymock.tests2.UsageConstraintsTest.testFind":290,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":231,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":44,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":258,"org.easymock.tests.UsageExpectAndReturnTest.object":198,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":274,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":388,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":282,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":360,"org.easymock.tests.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":118,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":186,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":410,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":204,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":356,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":130,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":392,"org.easymock.tests.MockClassControlTest.testHashCode":345,"org.easymock.tests2.EasyMockSupportTest.testVerify":373,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":422,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":187,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":128,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":108,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":51,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":250,"org.easymock.tests.UsageVarargTest.varargCharAccepted":359,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":379,"org.easymock.tests2.UsageTest.openCallCountByLastCall":266,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":284,"org.easymock.tests.DefaultClassInstantiatorTest.object":340,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":157,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":52,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":165,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":123,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":383,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":391,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":18,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":69,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":344,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":164,"org.easymock.tests.CapturesMatcherTest.test":83,"org.easymock.tests.ReplayStateInvalidCallsTest.times":24,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":205,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":185,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":25,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":256,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":343,"org.easymock.tests2.UsageTest.resumeIfFailure":66,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":402,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":140,"org.easymock.tests2.StubTest.stubWithReturnValue":260,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":197,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":306,"org.easymock.tests2.SerializationTest.testAllMockedMethod":321,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":112,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":413,"org.easymock.samples.SupportTest.voteForRemovals":238,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":432,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":394,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":170,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":113,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":100,"org.easymock.tests.UsageExpectAndThrowTest.object":168,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":303,"org.easymock.tests2.DelegateToTest.testWrongClass":332,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":181,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":22,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":182,"org.easymock.tests.UsageStrictMockTest.range":47,"org.easymock.samples.ConstructorCalledMockTest.testTax":239,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":281,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":322,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":169,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":243,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":9,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":116,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":408,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":153,"org.easymock.tests2.CaptureTest.testCaptureNone":335,"org.easymock.tests.UsageUnorderedTest.message":37,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":49,"org.easymock.tests.UsageVerifyTest.twoReturns":55,"org.easymock.tests.UsageVarargTest.varargByteAccepted":363,"org.easymock.tests2.ThreadingTest.testThreadSafe":245,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":353,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":370,"org.easymock.tests2.CaptureTest.testCapture_2617107":86,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":414,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":98,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":221,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":377,"org.easymock.tests2.UsageConstraintsTest.any":295,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":6,"org.easymock.tests2.StubTest.stub":259,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":111,"org.easymock.tests.UsageExpectAndThrowTest.longType":161,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":378,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":5,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":77,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":318,"org.easymock.tests2.SerializationTest.testClass":319,"org.easymock.tests.LimitationsTest.mockNativeMethod":136,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":145,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":207,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":382,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":30,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":286,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":384,"org.easymock.tests2.MockedExceptionTest.testMockedException":315,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":156,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":162,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":135,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":269,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":244,"org.easymock.tests.MockingTest.testNicePartialClassMocking":134,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":273,"org.easymock.tests2.CompareToTest.testNotComparable":82,"org.easymock.tests2.CaptureTest.testCaptureLast":91,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":380,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":184,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":29,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":293,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":328,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":304,"org.easymock.tests.MockingTest.testTwoMocks":338,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":26,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":188,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":166,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":64,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":307,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":386,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":4,"org.easymock.tests.UsageStrictMockTest.differentMethods":48,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":393,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":428,"org.easymock.tests2.ConstraintsToStringTest.andToString":425,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":247,"org.easymock.tests2.MockBuilderTest.testCreateMockString":59,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":223,"org.easymock.tests.UsageExpectAndThrowTest.floatType":160,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":81,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":313,"org.easymock.tests.UsageVerifyTest.twoThrows":54,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":255,"org.easymock.samples.ExampleTest.voteAgainstRemoval":235,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":151,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":376,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":276,"org.easymock.tests2.UsageConstraintsTest.testNotNull":106,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":127,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":314,"org.easymock.tests2.UsageTest.defaultResetToNice":268,"org.easymock.samples.ExampleTest.voteAgainstRemovals":232,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":203,"org.easymock.tests.UsageVarargTest.differentLength":36,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":381,"org.easymock.tests2.CallbackTest.callback":71,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":418,"org.easymock.tests.UsageTest.openCallCountByLastCall":155,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":287,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":220,"org.easymock.tests.UsageCallCountTest.tooFewCalls":351,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":325,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":354,"org.easymock.tests.UsageThrowableTest.throwCheckedException":124,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":409,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":119,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":327,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":385,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":324,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":8,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":326,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":102,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":28,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":249,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":23,"org.easymock.tests2.DependencyTest.testInterfaceMocking":262,"org.easymock.samples.ExampleTest.addDocument":366,"org.easymock.tests2.DelegateToTest.testStubDelegate":331,"org.easymock.tests2.AnswerTest.stubAnswer":101,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":179,"org.easymock.tests.UsageVarargTest.varargLongAccepted":362,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":180,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":375,"org.easymock.tests.UsageExpectAndReturnTest.floatType":190,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":206,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":309,"org.easymock.tests2.ConstraintsToStringTest.orToString":420,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":240,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":399,"org.easymock.tests.UsageThrowableTest.noUpperLimit":121,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":302,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":288,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":89,"org.easymock.tests2.SerializationTest.test":320,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":427,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":189,"org.easymock.tests2.UsageConstraintsTest.testSame":291,"org.easymock.samples.SupportTest.addDocument":368,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":13,"org.easymock.tests.GenericTest.testPackageScope":144,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":398,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":11,"org.easymock.tests2.NameTest.nameForMock":261,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":200,"org.easymock.tests2.UsageStrictMockTest.differentMethods":79,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":192,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":210,"org.easymock.tests2.MockedExceptionTest.testRealException":317,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":415,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":419,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":285,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":219,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":257,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":272,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":429,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":105,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":56,"org.easymock.tests2.UsageStrictMockTest.range":78,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":308,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":72,"org.easymock.tests2.CaptureTest.testCaptureRightOne":93,"org.easymock.tests2.UsageConstraintsTest.testOr":292,"org.easymock.tests.UsageRangeTest.combination":53,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":68,"org.easymock.tests.UsageTest.wrongArguments":40,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":341,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":193,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":201,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":430,"org.easymock.tests.UsageVarargTest.varargShortAccepted":361,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":33,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":31,"org.easymock.tests2.UsageConstraintsTest.cmpTo":296,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":312,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":21,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":267,"org.easymock.tests2.CaptureTest.testCaptureFromStub":94,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":1,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":406,"org.easymock.tests.UsageTest.unexpectedCallWithArray":39,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":27,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":45,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":352,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":202,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":46,"org.easymock.tests2.UsageConstraintsTest.constraints":80,"org.easymock.samples.ExampleTest.addAndChangeDocument":237,"org.easymock.tests2.ConstraintsToStringTest.notToString":421,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":367,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":365,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":147,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":90,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":213,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":194,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":132,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":214,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":74,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":357}}]

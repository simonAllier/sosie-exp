[{"transplantationPoint":{"position":"org.easymock.EasyMock:1530","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(int))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[11,12,13,14,15,16,17],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:252","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,11,42,43,44,0,45,1,46,2,3,47,48,49,50,51,52,53,54,55,56,4,57,58,59,60,5,61,62,63,64,65,66,67,12,68,69,14,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,6,136,137,138,139,140,7,8,141,142,143,144,9,145,146,147,148,149,150,151,152,15,153,154,155,156,157,158,159,160,161,162,163,164,165,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,16,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,10],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[297],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[11,44,54,70,73,76,298,299,300,301,79,80,82,86,87,302,303,304,197,199,201,204,229,230,231,234,235],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:163","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:218","sourceCode":"return ","type":"CtReturnImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,305,11,42,43,44,0,45,1,46,2,3,47,297,48,49,50,51,52,53,54,55,56,4,57,58,59,60,5,61,62,63,64,65,66,67,12,306,13,68,69,14,70,71,72,73,74,75,76,307,308,309,310,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,311,118,119,120,312,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,6,136,137,138,139,140,7,8,141,142,143,144,9,145,146,147,148,149,150,150,151,151,152,15,153,154,155,156,313,157,158,159,314,315,316,160,161,162,163,164,317,318,319,320,321,322,323,324,325,326,327,166,167,168,169,170,171,172,328,329,173,174,175,176,177,178,179,180,330,181,182,16,331,183,184,332,333,185,186,187,188,189,190,191,334,335,336,337,338,339,340,341,342,343,344,345,346,192,193,194,195,196,347,348,197,198,199,200,201,202,203,204,349,205,350,206,207,351,352,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,353,354,355,356,357,228,229,230,231,232,233,234,235,236,358,237,238,239,240,241,242,359,360,361,362,363,364,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,365,366,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,10],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,11,42,43,44,0,45,1,46,2,3,47,297,48,49,50,51,52,53,54,55,56,4,57,58,59,60,5,61,62,63,64,65,66,67,12,306,13,68,69,14,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,311,118,119,120,312,121,122,123,124,125,126,127,128,129,130,131,132,133,135,6,136,137,138,139,140,7,8,141,142,143,144,9,145,149,150,150,151,151,152,15,153,154,156,157,159,314,315,316,160,161,162,163,164,317,318,319,166,167,168,169,170,171,172,328,329,173,174,175,176,177,178,179,180,181,182,16,331,183,184,332,333,185,186,187,188,189,190,191,346,192,193,194,195,347,348,197,199,200,201,202,203,204,205,350,206,207,351,352,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,353,354,355,356,357,228,229,230,231,232,233,234,235,236,358,237,238,239,240,241,242,362,363,364,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,286,10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"proxy"}},{"position":"org.easymock.internal.Range:40","failures":[18,19,20,367,368,369,370,371,372,373,21,22,23,24,374,25,26,27,375,376,377,378,28,379,380,29,381,382,383,384,385,386,387,388,389,30,390,391,392,393,394,31,395,396,397,398,399,400,401,32,402,403,404,405,406,407,33,34,35,36,37,38,39,40,41,305,11,42,43,44,0,408,45,1,46,2,3,47,297,48,49,50,51,52,53,54,55,56,4,57,58,59,60,5,61,62,409,410,411,412,413,63,414,415,416,417,418,419,420,421,64,65,66,422,67,12,306,13,68,69,14,70,71,72,73,74,75,76,423,307,308,309,310,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,424,97,425,426,98,99,100,101,427,428,102,103,104,429,430,105,431,106,432,433,434,107,108,109,435,110,436,437,111,112,438,113,114,115,116,117,311,118,119,120,312,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,6,136,137,138,139,140,7,8,141,142,143,144,9,145,146,147,148,149,150,151,152,15,153,154,155,156,313,157,158,159,314,315,316,160,161,162,163,164,317,318,319,320,321,322,323,324,325,326,327,439,440,166,441,167,168,169,170,171,172,328,329,442,173,174,175,176,177,178,179,180,443,330,444,445,446,447,448,449,450,181,182,16,331,183,184,332,333,185,186,187,188,189,190,191,334,335,336,337,338,339,340,341,342,343,344,345,451,452,346,192,193,453,194,454,455,456,457,195,196,347,458,348,197,198,199,200,201,202,203,204,349,205,350,206,207,459,460,461,462,463,464,465,466,467,468,469,470,471,17,472,473,351,474,475,476,477,478,352,479,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,353,354,355,356,357,480,228,229,230,231,232,233,234,235,236,481,358,482,237,238,239,240,241,242,483,359,360,361,484,485,362,363,364,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,486,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,365,366,279,280,281,282,283,284,285,487,488,489,490,491,492,493,494,286,287,288,289,495,290,291,292,293,294,295,296,10],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[436],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[48],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[341,474],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[55,496],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[18,19,20,497],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[18,19,32,37,38,39,41,11,0,1,2,3,5,63,64,65,12,68,69,71,72,73,74,75,76,77,78,79,81,82,83,84,88,89,91,94,100,102,103,107,109,110,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,135,6,7,8,142,9,145,146,147,148,149,152,15,153,154,155,156,157,158,160,161,162,163,164,167,173,174,175,181,182,16,183,184,186,187,188,189,190,191,196,198,200,201,202,203,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,233,236,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,286,287,288,289,290,291,293,294,295,296,10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"actual"}},{"position":"org.easymock.internal.RecordState:243","failures":[21,22,23,24,25,26,27,28,29,30,31,40,64,65,72,74,75,90,91,92,93,94,95,97,99,100,101,104,106,107,109,110,112,119,149,152,153,154,156,159,160,161,162,163,166,181,182,192,193,194,348,200,202,203,205,350,206,207,208,209,210,211,212,213,216,217,219,220,221,223,224,225,226,227,358,238,239,240,241,242,363,263],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[7,141,498],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[499,500,501,502,503,504,505,506],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[77,84,103,114,115,116,117,168,174,184,186,187,188,189,190,191,228,233,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,265,266,268,270,271,272,273,274,275,278],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Same:37","failures":[46],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[507,508,509,510,511,429,435],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[306,69,14,465],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.RecordState:183","failures":[20,59,71,73,74,75,76,82,102,107,125,131,132,133,134,6,136,139,140,7,8,9,145,146,147,148,149,152,153,154,155,156,157,158,196,198,201,202,203,204,237,265,269,279,280,281,282,284,285,286,287,288,289,290,291,293,294,295,296,10],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret"}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockHandler:79","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"expected"}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EndsWith:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).endsWith(java.lang.String))","type":"CtReturnImpl"},"failures":[43],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[18,19,20,367,368,369,370,371,372,373,21,22,23,24,374,25,26,27,375,376,377,378,28,379,380,29,381,382,383,384,385,386,387,388,389,30,390,391,392,393,394,31,395,396,397,398,399,400,401,32,402,403,404,405,406,407,33,34,35,36,37,38,39,40,41,305,11,42,43,44,0,408,45,1,46,2,3,47,297,48,49,50,51,52,53,54,55,56,4,57,58,59,60,5,61,62,409,410,411,412,413,63,414,415,416,417,418,419,420,421,64,65,66,422,67,12,306,13,68,69,14,70,71,72,73,74,75,76,423,307,308,309,310,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,424,97,425,426,98,99,100,101,427,428,102,103,104,429,430,105,431,106,432,433,434,107,108,109,435,110,436,437,111,112,438,113,114,115,116,117,311,118,119,120,312,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,6,136,137,138,139,140,7,8,141,142,143,144,9,145,146,147,148,149,150,151,152,15,153,154,155,156,313,157,158,159,314,315,316,160,161,162,163,164,317,318,319,320,321,322,323,324,325,326,327,439,440,166,441,167,168,169,170,171,172,328,329,442,173,174,175,176,177,178,179,180,443,330,444,445,446,447,448,449,450,181,182,16,331,183,184,332,333,185,186,187,188,189,190,191,334,335,336,337,338,339,340,341,342,343,344,345,451,452,346,192,193,453,194,454,455,456,457,195,196,347,458,348,197,198,199,200,201,202,203,204,349,205,350,206,207,459,460,461,462,463,464,465,466,467,468,469,470,471,17,472,473,351,474,475,476,477,478,352,479,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,353,354,355,356,357,480,228,229,230,231,232,233,234,235,236,481,358,482,237,238,239,240,241,242,483,359,360,361,484,485,362,363,364,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,486,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,365,366,279,280,281,282,283,284,285,487,488,489,490,491,492,493,494,286,287,288,289,495,290,291,292,293,294,295,296,10],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[422],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"cls"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[298,300,302,303,199,230],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:210","failures":[18,425,104,429,436,437,150,150,151,151],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[457,458],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[444,448],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[37,38,39,11,42,52,55,62,66,67,79,121,6,7,8,9,471,208,214,220,224,226,229,243,249,255,259,261,278,286],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[444,448],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[298,300,302,303,199,230],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":0,"org.easymock.tests2.UsageTest.argumentsOrdered":87,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":228,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":469,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":82,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":158,"org.easymock.tests2.DelegateToTest.testReturnException":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":187,"org.easymock.tests.MockingTest.testPartialClassMocking":192,"org.easymock.tests.MockClassControlTest.testToString":322,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":423,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":428,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":384,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":243,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":65,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":507,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":47,"org.easymock.tests2.UsageTest.wrongArguments":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":263,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":419,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":171,"org.easymock.samples.ExampleTest.answerVsDelegate":15,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":492,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":455,"org.easymock.tests2.UsageConstraintsTest.testNull":1,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":93,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":131,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":327,"org.easymock.tests2.CaptureTest.testPrimitive":137,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":267,"org.easymock.tests.UsageTest.moreThanOneArgument":229,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":262,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":92,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":162,"org.easymock.tests.UsageTest.argumentsOrdered":235,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":353,"org.easymock.tests.UsageVarargTest.varargIntAccepted":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":473,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":238,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":511,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":105,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":369,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":461,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":242,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":63,"org.easymock.tests.ReplayStateInvalidUsageTest.times":342,"org.easymock.tests2.DependencyTest.testClassMocking":420,"org.easymock.tests2.AnswerTest.answer":12,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":474,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":36,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":489,"org.easymock.tests2.CaptureTest.testAnd":135,"org.easymock.tests2.UsageTest.strictResetToDefault":78,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":433,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":161,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":126,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":206,"org.easymock.tests2.DelegateToTest.testDelegate":121,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":357,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":258,"org.easymock.tests.LimitationsTest.mockFinalMethod":441,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":190,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":180,"org.easymock.tests2.DependencyTest.testClassMockingSupport":421,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":328,"org.easymock.tests2.CaptureTest.testCapture1_2446744":138,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":424,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":256,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":34,"org.easymock.tests.UsageThrowableTest.throwError":268,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":336,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":491,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":486,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":407,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":396,"org.easymock.samples.PartialClassMockTest.testGetArea":159,"org.easymock.tests.MockingTest.testInterfaceMocking":453,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":239,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":363,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests2.UsageTest.niceToStrict":81,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":244,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":459,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":107,"org.easymock.tests2.MockBuilderTest.testCreateMock":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":392,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":416,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":252,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":298,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":127,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":488,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":316,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":365,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":169,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":501,"org.easymock.tests.UsageOverloadedMethodTest.overloading":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":389,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":184,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":219,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":276,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":51,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":141,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":495,"org.easymock.tests2.EasyMockSupportClassTest.testAll":28,"org.easymock.tests.MockClassControlTest.testEquals":326,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":196,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":260,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":178,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":35,"org.easymock.tests2.CaptureTest.testCaptureAll":6,"org.easymock.tests.MockNameTest.defaultName":480,"org.easymock.tests2.UsageConstraintsTest.testMatches":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":163,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":334,"org.easymock.samples.ExampleTest.voteForRemovals":156,"org.easymock.tests.UsageVarargTest.allKinds":10,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":173,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":179,"org.easymock.samples.BasicClassMockTest.testPrintContent":146,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":274,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":70,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":191,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":312,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":449,"org.easymock.tests2.UsageConstraintsTest.greaterThan":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":350,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":101,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":450,"org.easymock.samples.ExampleTest.voteForRemoval":153,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":427,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":38,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":493,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":96,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":437,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":466,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":124,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":186,"org.easymock.tests2.CaptureTest.testCaptureFirst":9,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":465,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":125,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":89,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":185,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":215,"org.easymock.tests2.CaptureTest.testCapture2_2446744":144,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":40,"org.easymock.tests2.UsageTest.moreThanOneArgument":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":475,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":112,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":296,"org.easymock.tests.GenericTest.testBridgedEquals":458,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":502,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":499,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":284,"org.easymock.tests.UsageExpectAndReturnTest.longType":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":176,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":122,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":261,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":59,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":259,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":160,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":318,"org.easymock.tests.UsageCallCountTest.tooManyCalls":285,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":216,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":418,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":248,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":273,"org.easymock.tests.MockingTest.testNiceClassMocking":456,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":22,"org.easymock.tests.MockingTest.testClassMocking":452,"org.easymock.tests2.UsageConstraintsTest.testContains":50,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":366,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":116,"org.easymock.tests2.UsageConstraintsTest.testFind":45,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":278,"org.easymock.tests.MockTypeTest.fromEasyMockClass":490,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":67,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":197,"org.easymock.tests.UsageExpectAndReturnTest.object":218,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":97,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":417,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":508,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":291,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":361,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":503,"org.easymock.tests.UsageTest.exactCallCountByLastCall":236,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":481,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":354,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":304,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":429,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":224,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":287,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":183,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":398,"org.easymock.tests.MockClassControlTest.testHashCode":325,"org.easymock.tests2.EasyMockSupportTest.testVerify":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":355,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":16,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":315,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":33,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":305,"org.easymock.tests.UsageVarargTest.varargCharAccepted":290,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":443,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":71,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":479,"org.easymock.tests2.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":505,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":133,"org.easymock.tests.DefaultClassInstantiatorTest.object":330,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":314,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":250,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":271,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":412,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":397,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":99,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":324,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":249,"org.easymock.tests.CapturesMatcherTest.test":165,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":225,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":31,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":323,"org.easymock.tests2.UsageTest.resumeIfFailure":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":487,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":368,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":189,"org.easymock.tests2.StubTest.stubWithReturnValue":103,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":435,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":60,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":217,"org.easymock.tests2.SerializationTest.testAllMockedMethod":20,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":351,"org.easymock.samples.SupportTest.voteForRemovals":149,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":300,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":457,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":400,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":255,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":497,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":352,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":306,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":482,"org.easymock.tests.UsageExpectAndThrowTest.object":253,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":57,"org.easymock.tests2.DelegateToTest.testWrongClass":120,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":181,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":182,"org.easymock.samples.ConstructorCalledMockTest.testTax":150,"org.easymock.tests.UsageStrictMockTest.range":202,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":372,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":21,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":500,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":254,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":109,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":234,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":170,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":302,"org.easymock.tests2.CaptureTest.testCaptureNone":8,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":364,"org.easymock.tests.UsageUnorderedTest.message":286,"org.easymock.tests.UsageVerifyTest.twoReturns":175,"org.easymock.tests.UsageVarargTest.varargByteAccepted":295,"org.easymock.tests2.ThreadingTest.testThreadSafe":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":390,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":282,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":484,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":145,"org.easymock.tests2.CaptureTest.testCapture_2617107":136,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":301,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":477,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":266,"org.easymock.tests2.UsageConstraintsTest.any":48,"org.easymock.tests2.StubTest.stub":102,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":341,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":478,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":188,"org.easymock.tests.UsageExpectAndThrowTest.longType":246,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":447,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":340,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":32,"org.easymock.tests2.SerializationTest.testClass":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":166,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":227,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":347,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":411,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":76,"org.easymock.tests2.NameTest.nameForMocksControl":310,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":413,"org.easymock.tests2.MockedExceptionTest.testMockedException":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":380,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":233,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":422,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":194,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":247,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":90,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":193,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":95,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":409,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":329,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":27,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":3,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":58,"org.easymock.tests.MockingTest.testTwoMocks":346,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":375,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":251,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":86,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":61,"org.easymock.samples.ExampleTest.removeNonExistingDocument":313,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":415,"org.easymock.tests.UsageStrictMockTest.differentMethods":203,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":338,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":399,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":445,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":39,"org.easymock.tests2.MockBuilderTest.testCreateMockString":113,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":320,"org.easymock.tests.UsageExpectAndThrowTest.floatType":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":381,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":68,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":430,"org.easymock.tests.UsageVerifyTest.twoThrows":174,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":30,"org.easymock.samples.ExampleTest.voteAgainstRemoval":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":470,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":362,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":100,"org.easymock.tests.LimitationsTest.privateConstructor":440,"org.easymock.tests2.UsageConstraintsTest.testNotNull":5,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":114,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":275,"org.easymock.tests2.UsageTest.defaultResetToNice":85,"org.easymock.samples.ExampleTest.voteAgainstRemovals":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":471,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":223,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":410,"org.easymock.tests.UsageVarargTest.differentLength":292,"org.easymock.tests2.CallbackTest.callback":11,"org.easymock.tests2.UsageConstraintsTest.equals":408,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":425,"org.easymock.tests.UsageTest.openCallCountByLastCall":232,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":265,"org.easymock.tests.UsageCallCountTest.tooFewCalls":280,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":24,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":172,"org.easymock.tests.UsageThrowableTest.throwCheckedException":272,"org.easymock.tests.MockingTest.testStrictClassMocking":451,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":303,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":168,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":26,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":414,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":23,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":343,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":25,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":14,"org.easymock.tests.ObjectMethodsTest.testHashCode":360,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":510,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":41,"org.easymock.tests2.NameTest.nameForNiceMock":309,"org.easymock.tests2.DependencyTest.testInterfaceMocking":64,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":509,"org.easymock.samples.ExampleTest.addDocument":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.DelegateToTest.testStubDelegate":119,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":200,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":436,"org.easymock.tests.UsageVarargTest.varargLongAccepted":294,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndReturnTest.floatType":210,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":104,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":151,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":405,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":56,"org.easymock.tests.UsageThrowableTest.noUpperLimit":269,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":332,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":43,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":367,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":139,"org.easymock.tests2.SerializationTest.test":19,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":444,"org.easymock.tests2.UsageConstraintsTest.testSame":46,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":209,"org.easymock.samples.SupportTest.addDocument":148,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":374,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":382,"org.easymock.tests.GenericTest.testPackageScope":195,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":356,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":404,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":454,"org.easymock.tests2.NameTest.nameForMock":307,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":220,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":438,"org.easymock.tests2.UsageStrictMockTest.differentMethods":75,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":426,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":212,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":257,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":483,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":207,"org.easymock.tests2.MockedExceptionTest.testRealException":117,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":494,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":17,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":72,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":264,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":345,"org.easymock.tests2.NameTest.nameForStrictMock":308,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":434,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":506,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":66,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":94,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":371,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":446,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":106,"org.easymock.tests2.UsageStrictMockTest.range":74,"org.easymock.tests2.UsageConstraintsTest.lessThan":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":467,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":386,"org.easymock.tests2.CaptureTest.testCaptureRightOne":142,"org.easymock.tests2.UsageConstraintsTest.testOr":2,"org.easymock.tests.UsageRangeTest.combination":205,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":91,"org.easymock.tests.UsageTest.wrongArguments":231,"org.easymock.tests2.MockBuilderTest.testWithConstructor":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":383,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":213,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":460,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":221,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":448,"org.easymock.tests.UsageVarargTest.varargShortAccepted":293,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":283,"org.easymock.tests2.UsageConstraintsTest.cmpTo":49,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":13,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":462,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests2.CaptureTest.testCaptureFromStub":143,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":335,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":432,"org.easymock.tests.UsageTest.unexpectedCallWithArray":230,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":199,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":281,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":222,"org.easymock.tests2.CaptureTest.testCapture":498,"org.easymock.tests2.UsageConstraintsTest.constraints":44,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":201,"org.easymock.samples.ExampleTest.addAndChangeDocument":157,"org.easymock.tests.UsageStrictMockTest.testVerify":349,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":147,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":198,"org.easymock.tests2.CompareToTest.testGreateThan":496,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":177,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":240,"org.easymock.tests.LimitationsTest.abstractClass":439,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":214,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":241,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":128,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":288}}]

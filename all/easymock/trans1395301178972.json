[{"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"failMessage"}},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[1,2,3,4,5,6],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,24,24],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"args"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[25,26,27,28,29,30],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[31],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:187","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[32,33,34],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[35,36,37,38,39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[53,54,55,56],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.RecordState:136","failures":[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,54,93,94,95,96,97,98,99,100,55,101,102,103,104,51,23,23,24,24],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[105,0,95,97,106,107,108,102,41,42,50],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[109,110,111,112,113,7,8,9,114,12],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[115,116,117,118,119,120,121,35,36,37,122,123,124,125,126,75,127,128,129,130,131,132,133,134,135,136,137,138,139,76,140,141,142,77,78,79,80,81,82,83,84,85,86,143,144,145,87,88,89,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,90,91,180,64,65,66,67,68,69,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,7,206,207,92,208,209,9,210,211,54,93,105,0,94,95,96,97,106,212,213,214,98,215,99,100,216,55,101,108,217,218,56,102,103,104,219,10,220,11,221,222,223,224,225,4,226,70,71,72,73,227,228,229,230,231,232,233,39,234,235,236,237,238,239,240,241,41,242,42,43,45,46,47,243,48,50,52,31,74,244,245,246,247,248,249,250,251,252,21,6,253,254,255,256,257,258,259,260],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[60,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[262,99,218,104],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:173","failures":[204],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[115,116,117,118,119,120,121,36,37,122,123,124,125,126,75,58,263,127,128,129,130,131,264,132,133,134,135,136,265,137,138,266,139,27,76,267,268,140,141,77,78,79,80,81,82,83,84,85,86,143,269,144,145,270,271,272,273,274,87,88,59,275,89,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,276,167,28,277,278,279,280,281,282,170,171,172,173,283,284,285,174,175,176,177,178,179,90,91,180,64,65,66,67,68,69,286,287,288,289,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,290,203,204,291,205,7,206,292,293,207,92,294,295,208,209,9,210,211,54,93,105,0,94,95,96,97,106,212,213,214,98,215,99,100,216,55,101,108,217,218,296,56,102,103,104,297,298,299,300,301,302,303,304,305,306,307,308,309,310,219,10,311,312,220,11,221,222,223,224,225,313,4,226,314,315,316,317,318,70,71,72,73,227,228,319,229,230,320,231,232,321,322,233,323,324,39,325,234,235,236,237,41,242,42,43,44,45,46,47,243,48,50,51,326,52,31,74,244,245,327,246,328,329,330,331,247,19,248,249,250,251,332,252,21,5,6,22,253,333,334,335,336,337,338,23,24,339,254,255,256,257,258,259,260,340],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lock":"lock"}},{"transplant":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[136,95,97,106,108,102,242,47],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:233","failures":[115,116,117,118,119,120,341,342,121,35,36,37,343,344,345,346,347,348,349,57,350,351,352,353,354,355,356,357,358,38,359,360,361,362,363,364,75,58,365,366,367,263,127,128,129,130,131,264,132,133,134,135,136,265,137,138,368,266,139,27,76,267,268,140,141,142,77,78,79,80,81,82,83,84,85,86,143,269,144,145,270,271,272,273,274,87,88,59,275,89,60,61,62,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,276,167,277,278,279,280,281,282,168,170,171,172,173,284,285,174,175,369,90,91,180,64,65,66,67,68,69,261,370,371,372,286,287,288,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,290,373,203,204,291,374,205,7,206,292,293,207,92,294,295,208,209,9,210,211,54,93,105,0,94,95,96,97,106,212,107,213,214,98,215,99,100,216,55,101,108,217,218,296,56,102,103,104,297,298,299,300,301,302,303,304,305,306,307,308,309,310,219,10,311,312,220,11,313,4,314,315,317,70,71,72,73,227,228,319,229,230,320,231,232,321,322,233,323,324,39,325,234,375,376,235,236,237,238,239,240,241,41,242,42,43,44,45,46,47,243,48,50,51,326,52,31,74,244,245,377,327,246,328,329,330,331,247,19,248,249,250,251,252,5,6,22,253,333,334,335,336,337,338,23,23,24,24,339,254,255,256,257,258,259,260,340],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[378,109,110,111,379,380,113,7,8,9,114,12,381,382],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[105,0,95,97,106,107,108,102,41,42,50],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:62","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[118,119,120,78,180,204,7,310,219,10,311,312,220,11,313,4,314,315,317,327,328,329,330,331,247,248,249,251,339],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[115,116,117,263,76,268,140,167,383,384,385,386,92,295,208,230],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[103],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:83","failures":[115,116,117,263,136,138,27,76,267,268,140,145,88,89,276,167,277,278,279,280,281,282,68,204,206,92,294,295,208,95,213,216,102,319,230,320,321,322,323,324,325,234,236,238,239,240,241,242,42,44,45,46,47,243,52,74],"status":-1,"binaryOperator":"(int) == (java.lang.Integer.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[345],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[116,58,138,269,145,270,271,272,273,274,59,275,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,276,279,64,65,66,67,68,69,288,70,71,72,73,319,322,74],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:906","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[217],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1848","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1471","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[105,0,95,97,106,107,108,102,41,42,50],"status":-1,"binaryOperator":"int < int","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[109,110,111,112,113,7,8,9,114,12],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":0,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":276,"org.easymock.tests2.UsageTest.argumentsOrdered":324,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":307,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":352,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":232,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":338,"org.easymock.tests2.DelegateToTest.testReturnException":203,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":65,"org.easymock.tests.MockingTest.testPartialClassMocking":118,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":147,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":329,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":383,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":333,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":109,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":212,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":87,"org.easymock.tests2.UsageTest.wrongArguments":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":178,"org.easymock.samples.ExampleTest.answerVsDelegate":255,"org.easymock.tests2.UsageConstraintsTest.testNull":95,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":249,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":306,"org.easymock.tests2.CaptureTest.testPrimitive":43,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":89,"org.easymock.tests.UsageTest.moreThanOneArgument":167,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":166,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":248,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":84,"org.easymock.tests.UsageTest.argumentsOrdered":281,"org.easymock.tests.UsageVarargTest.varargIntAccepted":129,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":357,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":77,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":380,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":345,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":81,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":292,"org.easymock.tests2.AnswerTest.answer":234,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":38,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":224,"org.easymock.tests2.CaptureTest.testAnd":41,"org.easymock.tests2.UsageTest.strictResetToDefault":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":21,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":83,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":301,"org.easymock.tests2.DelegateToTest.testDelegate":205,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":68,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":126,"org.easymock.tests2.CaptureTest.testCapture1_2446744":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":160,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":222,"org.easymock.tests.UsageThrowableTest.throwError":269,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":18,"org.easymock.samples.PartialClassMockTest.testGetArea":339,"org.easymock.tests2.CompareToTest.testLessOrEqual":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":78,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":366,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":148,"org.easymock.tests2.UsageTest.niceToStrict":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":343,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":4,"org.easymock.tests2.MockBuilderTest.testCreateMock":316,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":156,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":29,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":302,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":371,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":168,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":176,"org.easymock.tests.UsageOverloadedMethodTest.overloading":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":16,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":99,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":288,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":194,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":265,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":33,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":215,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":48,"org.easymock.tests2.EasyMockSupportClassTest.testAll":328,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":175,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":164,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":1,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":124,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":223,"org.easymock.tests2.CaptureTest.testCaptureAll":242,"org.easymock.tests2.UsageConstraintsTest.testMatches":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":85,"org.easymock.samples.ExampleTest.voteForRemovals":259,"org.easymock.tests.UsageVarargTest.allKinds":136,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":115,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":125,"org.easymock.samples.BasicClassMockTest.testPrintContent":337,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":273,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":69,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":374,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":113,"org.easymock.tests2.UsageConstraintsTest.greaterThan":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":14,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":35,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":22,"org.easymock.samples.ExampleTest.voteForRemoval":256,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":332,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":143,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":319,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":12,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":57,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":299,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":64,"org.easymock.tests2.CaptureTest.testCaptureFirst":52,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":349,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":300,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":325,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":289,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":190,"org.easymock.tests2.UsageTest.moreThanOneArgument":230,"org.easymock.tests2.CaptureTest.testCapture2_2446744":326,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":327,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":359,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":135,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":284,"org.easymock.tests.UsageExpectAndReturnTest.longType":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":122,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":297,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":165,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":296,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":368,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":163,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":82,"org.easymock.tests.UsageCallCountTest.tooManyCalls":285,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":170,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":152,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":272,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":219,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":169,"org.easymock.tests2.UsageConstraintsTest.testContains":98,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":72,"org.easymock.tests2.UsageConstraintsTest.testFind":94,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":138,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":228,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":266,"org.easymock.tests.UsageExpectAndReturnTest.object":193,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":305,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":131,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":110,"org.easymock.tests.UsageTest.exactCallCountByLastCall":282,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":348,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":341,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":8,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":127,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":199,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":287,"org.easymock.tests2.EasyMockSupportTest.testVerify":309,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":342,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":286,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":370,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":221,"org.easymock.tests.UsageVarargTest.varargCharAccepted":130,"org.easymock.tests2.CaptureTest.testCaptureMultiple":40,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":364,"org.easymock.tests2.UsageTest.openCallCountByLastCall":321,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":308,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":261,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":154,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":3,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":270,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":153,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":200,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":331,"org.easymock.tests2.UsageTest.resumeIfFailure":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":67,"org.easymock.tests2.StubTest.stubWithReturnValue":74,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":114,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":56,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":192,"org.easymock.tests2.SerializationTest.testAllMockedMethod":211,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":358,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":382,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":30,"org.easymock.samples.SupportTest.voteForRemovals":335,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":159,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":363,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":375,"org.easymock.tests.UsageExpectAndThrowTest.object":157,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":217,"org.easymock.tests2.DelegateToTest.testWrongClass":291,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":91,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests.UsageStrictMockTest.range":268,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":304,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":310,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":158,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":314,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":63,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":280,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":177,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":25,"org.easymock.tests2.CaptureTest.testCaptureNone":243,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":367,"org.easymock.tests.UsageUnorderedTest.message":263,"org.easymock.tests.UsageVerifyTest.twoReturns":117,"org.easymock.tests.UsageVarargTest.varargByteAccepted":134,"org.easymock.tests2.ThreadingTest.testThreadSafe":244,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":173,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":336,"org.easymock.tests2.CaptureTest.testCapture_2617107":42,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":146,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":361,"org.easymock.tests2.UsageConstraintsTest.any":213,"org.easymock.tests2.StubTest.stub":31,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":62,"org.easymock.tests.UsageExpectAndThrowTest.longType":150,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":66,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":362,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":32,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":294,"org.easymock.tests2.SerializationTest.testClass":9,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":290,"org.easymock.tests.LimitationsTest.mockNativeMethod":180,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":202,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":369,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":2,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.tests2.NameTest.nameForMocksControl":241,"org.easymock.tests2.MockedExceptionTest.testMockedException":71,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":279,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":151,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":120,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":247,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":315,"org.easymock.tests.MockingTest.testNicePartialClassMocking":119,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":251,"org.easymock.tests2.CaptureTest.testCaptureLast":47,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":378,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":106,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":11,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":218,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":183,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":155,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":323,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":103,"org.easymock.tests.UsageStrictMockTest.differentMethods":140,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":377,"org.easymock.tests2.MockBuilderTest.testCreateMockString":318,"org.easymock.tests.UsageExpectAndThrowTest.floatType":149,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":13,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":235,"org.easymock.tests.UsageVerifyTest.twoThrows":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":330,"org.easymock.samples.ExampleTest.voteAgainstRemoval":257,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":353,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":365,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":6,"org.easymock.tests2.UsageConstraintsTest.testNotNull":102,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":70,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":274,"org.easymock.tests2.UsageTest.defaultResetToNice":233,"org.easymock.samples.ExampleTest.voteAgainstRemovals":254,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":198,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":354,"org.easymock.tests.UsageVarargTest.differentLength":264,"org.easymock.tests2.CallbackTest.callback":206,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":20,"org.easymock.tests.UsageTest.openCallCountByLastCall":278,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":59,"org.easymock.tests.UsageCallCountTest.tooFewCalls":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":311,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":179,"org.easymock.tests.UsageThrowableTest.throwCheckedException":271,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":26,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":58,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":220,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":10,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":312,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":237,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":379,"org.easymock.tests2.NameTest.nameForNiceMock":240,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":246,"org.easymock.tests2.DependencyTest.testInterfaceMocking":253,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":111,"org.easymock.samples.ExampleTest.addDocument":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":17,"org.easymock.tests2.DelegateToTest.testStubDelegate":204,"org.easymock.tests2.AnswerTest.stubAnswer":236,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":76,"org.easymock.tests.UsageVarargTest.varargLongAccepted":133,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":351,"org.easymock.tests.UsageExpectAndReturnTest.floatType":185,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":7,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":144,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":101,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":93,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":45,"org.easymock.tests2.SerializationTest.test":210,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":34,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":184,"org.easymock.tests2.UsageConstraintsTest.testSame":96,"org.easymock.samples.SupportTest.addDocument":334,"org.easymock.tests.GenericTest.testPackageScope":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":347,"org.easymock.tests2.NameTest.nameForMock":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":195,"org.easymock.tests2.UsageStrictMockTest.differentMethods":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":187,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":161,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":37,"org.easymock.tests2.MockedExceptionTest.testRealException":73,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":381,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":355,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":88,"org.easymock.tests2.NameTest.nameForStrictMock":239,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":227,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":250,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":384,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":108,"org.easymock.tests.ErrorMessageTest.testGetters":385,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":313,"org.easymock.tests2.UsageStrictMockTest.range":295,"org.easymock.tests2.UsageConstraintsTest.lessThan":104,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":112,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":350,"org.easymock.tests2.CaptureTest.testCaptureRightOne":50,"org.easymock.tests2.UsageConstraintsTest.testOr":97,"org.easymock.tests.UsageRangeTest.combination":121,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":19,"org.easymock.tests.UsageTest.wrongArguments":277,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":181,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":188,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":344,"org.easymock.tests.UsageVarargTest.varargShortAccepted":132,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":283,"org.easymock.tests2.UsageConstraintsTest.cmpTo":214,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":376,"org.easymock.tests2.CompareToTest.testLessThan":262,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":346,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":322,"org.easymock.tests2.CaptureTest.testCaptureFromStub":51,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":27,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":172,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":197,"org.easymock.tests2.CaptureTest.testCapture":49,"org.easymock.tests2.UsageConstraintsTest.constraints":105,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":267,"org.easymock.samples.ExampleTest.addAndChangeDocument":260,"org.easymock.tests.UsageStrictMockTest.testVerify":142,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":340,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":139,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":123,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":46,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":189,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":80,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":386,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":303}}]

[{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[4,5,6,7],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[8,9,10,0,0,1,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,3,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1976","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return (this.int) == (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[67,68,69,70,71,72,73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"maximum","java.lang.Integer.MAX_VALUE":"maximum"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[74,75],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[76,77,78,79,80,27,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[123,124,125,126,127,128],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[129],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[8,9,10,0,1,11,12,130,131,132,133,13,134,14,135,136,137,138,139,140,141,15,142,143,144,145,146,16,17,147,18,19,148,149,20,21,22,150,23,151,24,25,152,26,79,80,27,28,29,30,31,32,33,3,153,154,34,35,36,37,38,39,40,155,156,41,42,43,44,157,45,46,47,48,49,50,51,52,53,54,158,74,159,160,161,75,162,163,55,56,57,58,59,60,164,165,62,166,167,168,63,64,65,66,169],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[170,171,172,173,174,175],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[176,177,178],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[179],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:196","sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"args":"args","mockClass":"mockClass","cstr":"cstr"}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[180],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.LastControl:51","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[181,182,183,184,185,186,10,187,0,0,1,1,188,189,190,191,192,193,11,194,195,196,197,198,76,199,200,201,67,68,77,202,203,204,205,78,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,179,240,241,242,243,244,13,14,15,16,18,20,22,23,25,245,79,80,27,81,28,29,30,31,246,32,33,247,248,249,250,251,252,3,253,254,255,256,4,257,258,259,260,261,262,263,264,265,266,267,268,269,34,35,270,36,37,38,40,42,43,44,271,272,82,273,274,275,276,277,278,83,84,279,85,280,86,87,88,89,90,91,281,282,283,177,284,285,286,287,288,289,123,290,46,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,291,69,70,292,293,55,57,294,71,72,295,118,296,297,119,298,299,300,301,302,120,178,303,304,305,306,307,124,125,308,309,310,311,312,313,126,314,315,316,317,318,319,127,320,321,322,323,324,325,326,327,328,62,73,121,329,330,122,64,65,66,331,128,332],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[222,228],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[209,333,211,212,334,335,213,215,336,216,217,219],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[8,9,10,12,130,131,132,133,13,134,14,135,136,137,138,139,140,141,15,142,143,144,145,146,16,17,18,19,149,20,21,22,23,24,25,26,79,80,27,28,29,31,32,34,35,36,37,38,39,40,156,41,42,43,44,157,45,46,47,48,49,50,51,52,53,54,158,74,159,160,161,75,162,163,55,56,57,58,59,60,164,165,62,166,167,168,63,64,65,66,169],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[14],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[337,338,339,340,341,220,222,229,231,234,237,179,240,241,244,40],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:122","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[163,58],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[251,252],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[342,343,344],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[345,209,210,333,211,212,334,335,213,214,215,336,216,217,218,219,220,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:319","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[213,215],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[341,220,237,241],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[336,129],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[67,346,347,348,349,350,351,174,71,175,352,353,354,300,121,329],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[11,194,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"finalizeMethod"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":223,"org.easymock.tests2.UsageTest.argumentsOrdered":348,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":118,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":95,"org.easymock.tests2.StubTest.stubWithReturnValue":76,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":150,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":314,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":241,"org.easymock.tests2.SerializationTest.testAllMockedMethod":12,"org.easymock.tests2.DelegateToTest.testReturnException":189,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":93,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":178,"org.easymock.tests.MockingTest.testPartialClassMocking":64,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":171,"org.easymock.samples.SupportTest.voteForRemovals":187,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":163,"org.easymock.tests.MockClassControlTest.testToString":49,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":332,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":110,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":303,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":14,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":98,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":248,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":7,"org.easymock.tests.UsageExpectAndThrowTest.object":108,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":196,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":179,"org.easymock.tests2.DelegateToTest.testWrongClass":191,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":331,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":229,"org.easymock.tests2.UsageTest.wrongArguments":346,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":277,"org.easymock.tests.UsageStrictMockTest.range":71,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.samples.ExampleTest.answerVsDelegate":182,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":265,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":28,"org.easymock.tests2.UsageConstraintsTest.testNull":225,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":36,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":267,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":54,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":22,"org.easymock.tests2.CaptureTest.testPrimitive":211,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":279,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":353,"org.easymock.tests.UsageTest.moreThanOneArgument":296,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":132,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":270,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":289,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":172,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":286,"org.easymock.tests2.CaptureTest.testCaptureNone":214,"org.easymock.tests.UsageUnorderedTest.message":300,"org.easymock.tests.UsageVerifyTest.twoReturns":329,"org.easymock.tests2.ThreadingTest.testThreadSafe":254,"org.easymock.tests.UsageTest.argumentsOrdered":354,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":142,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":8,"org.easymock.tests2.CaptureTest.testCapture_2617107":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":324,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":17,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":84,"org.easymock.tests2.UsageConstraintsTest.any":230,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":21,"org.easymock.tests2.StubTest.stub":198,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":328,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":276,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":94,"org.easymock.tests.UsageExpectAndThrowTest.longType":101,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":161,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":245,"org.easymock.tests2.SerializationTest.testClass":11,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":197,"org.easymock.tests.LimitationsTest.mockNativeMethod":62,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":323,"org.easymock.tests2.AnswerTest.answer":247,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":57,"org.easymock.tests2.CaptureTest.testAnd":209,"org.easymock.tests2.UsageTest.strictResetToDefault":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":41,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":148,"org.easymock.tests2.MockedExceptionTest.testMockedException":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":288,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":134,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":119,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":293,"org.easymock.tests2.DelegateToTest.testDelegate":193,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":66,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":102,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":34,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":23,"org.easymock.tests.MockingTest.testNicePartialClassMocking":65,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":113,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":38,"org.easymock.tests.LimitationsTest.mockFinalMethod":166,"org.easymock.tests2.CompareToTest.testCompareEqual":339,"org.easymock.tests2.CaptureTest.testCaptureLast":213,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":96,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":177,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":228,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":33,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":240,"org.easymock.tests.MockingTest.testTwoMocks":63,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":176,"org.easymock.tests2.CaptureTest.testCapture1_2446744":212,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":111,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":106,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":347,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":243,"org.easymock.tests.UsageThrowableTest.throwError":85,"org.easymock.tests.UsageStrictMockTest.differentMethods":72,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":180,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":159,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":256,"org.easymock.tests2.MockBuilderTest.testCreateMockString":26,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":47,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":290,"org.easymock.tests.UsageExpectAndThrowTest.floatType":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":135,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":236,"org.easymock.tests.ResultTest.createReturnResultToString":343,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":250,"org.easymock.tests.UsageVerifyTest.twoThrows":121,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":154,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":15,"org.easymock.samples.PartialClassMockTest.testGetArea":10,"org.easymock.tests2.CompareToTest.testLessOrEqual":341,"org.easymock.tests.ResultTest.createDelegateResultToString":342,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":325,"org.easymock.samples.ExampleTest.voteAgainstRemoval":184,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":285,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":284,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":43,"org.easymock.tests2.UsageTest.niceToStrict":204,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":138,"org.easymock.tests.LimitationsTest.privateConstructor":165,"org.easymock.tests2.UsageConstraintsTest.testNotNull":242,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":91,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":20,"org.easymock.tests2.UsageTest.defaultResetToNice":206,"org.easymock.tests2.MockBuilderTest.testCreateMock":24,"org.easymock.samples.ExampleTest.voteAgainstRemovals":181,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":127,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":144,"org.easymock.tests2.CallbackTest.callback":253,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":155,"org.easymock.tests.UsageTest.openCallCountByLastCall":297,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":107,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":170,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":263,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":220,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":283,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":83,"org.easymock.tests.UsageOverloadedMethodTest.overloading":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":146,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":234,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":82,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":316,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":301,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":31,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":233,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":215,"org.easymock.tests.UsageThrowableTest.throwCheckedException":88,"org.easymock.tests.MockClassControlTest.testEquals":53,"org.easymock.tests2.EasyMockSupportClassTest.testAll":13,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":56,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":115,"org.easymock.tests.MockingTest.testStrictClassMocking":167,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":173,"org.easymock.tests2.CaptureTest.testCaptureAll":210,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":32,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":122,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests2.UsageConstraintsTest.testMatches":235,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":246,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":252,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":123,"org.easymock.tests2.CompareToTest.testGreateOrEqual":340,"org.easymock.samples.ExampleTest.voteForRemovals":185,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":257,"org.easymock.tests2.DependencyTest.testInterfaceMocking":195,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":73,"org.easymock.samples.BasicClassMockTest.testPrintContent":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":143,"org.easymock.tests2.DelegateToTest.testStubDelegate":190,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":90,"org.easymock.tests2.AnswerTest.stubAnswer":251,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":97,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":294,"org.easymock.tests2.UsageConstraintsTest.greaterThan":237,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":305,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":44,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":162,"org.easymock.samples.ExampleTest.voteForRemoval":183,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":255,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":157,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":322,"org.easymock.tests.UsageExpectAndReturnTest.floatType":308,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":3,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":39,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.UsageThrowableTest.noUpperLimit":280,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":238,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":221,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":77,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":46,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":130,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":334,"org.easymock.tests2.SerializationTest.test":194,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":151,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":260,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":74,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":86,"org.easymock.tests2.UsageConstraintsTest.testSame":226,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":133,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":92,"org.easymock.tests2.CaptureTest.testCaptureFirst":219,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":188,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":261,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":208,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":349,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":5,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":136,"org.easymock.tests.GenericTest.testPackageScope":55,"org.easymock.tests2.CaptureTest.testCapture2_2446744":218,"org.easymock.tests2.UsageTest.moreThanOneArgument":203,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":4,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":292,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":25,"org.easymock.tests.GenericTest.testBridgedEquals":58,"org.easymock.tests.UsageExpectAndReturnTest.longType":309,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":116,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":295,"org.easymock.tests2.UsageStrictMockTest.differentMethods":68,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":114,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":152,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":287,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":275,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":310,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":307,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":299,"org.easymock.tests2.MockedExceptionTest.testRealException":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":145,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":126,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":350,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":201,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":278,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":89,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":29,"org.easymock.tests.MockingTest.testNiceClassMocking":169,"org.easymock.tests.MockingTest.testClassMocking":168,"org.easymock.tests2.UsageConstraintsTest.testContains":232,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":27,"org.easymock.tests2.UsageConstraintsTest.testFind":224,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":120,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":149,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":199,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":37,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":200,"org.easymock.tests.UsageExpectAndReturnTest.object":315,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":131,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":239,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":40,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":18,"org.easymock.tests2.UsageStrictMockTest.range":67,"org.easymock.tests2.UsageConstraintsTest.lessThan":244,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":266,"org.easymock.tests.UsageTest.exactCallCountByLastCall":298,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":330,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":259,"org.easymock.tests2.CaptureTest.testCaptureRightOne":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":139,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":69,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":6,"org.easymock.tests2.UsageConstraintsTest.testOr":227,"org.easymock.tests.UsageRangeTest.combination":304,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":153,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":320,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":35,"org.easymock.tests.UsageTest.wrongArguments":352,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":272,"org.easymock.tests.ResultTest.createThrowResultToString":344,"org.easymock.tests2.MockBuilderTest.testWithConstructor":147,"org.easymock.tests.MockClassControlTest.testHashCode":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":137,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":48,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":311,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":140,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":70,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":282,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":271,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":75,"org.easymock.tests2.UsageConstraintsTest.cmpTo":231,"org.easymock.tests2.CaptureTest.testCaptureMultiple":345,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":249,"org.easymock.tests2.CompareToTest.testLessThan":337,"org.easymock.tests2.UsageTest.openCallCountByLastCall":205,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":78,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":269,"org.easymock.tests.DefaultClassInstantiatorTest.object":158,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":281,"org.easymock.tests2.CaptureTest.testCaptureFromStub":217,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":19,"org.easymock.tests.UsageTest.unexpectedCallWithArray":175,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":351,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":141,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":87,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":174,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":319,"org.easymock.tests2.CaptureTest.testCapture":336,"org.easymock.tests2.UsageConstraintsTest.constraints":222,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":51,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":42,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":104,"org.easymock.samples.ExampleTest.addAndChangeDocument":186,"org.easymock.tests.CapturesMatcherTest.test":129,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":321,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":274,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":16,"org.easymock.tests2.CompareToTest.testGreateThan":338,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":335,"org.easymock.tests2.UsageTest.resumeIfFailure":207,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":326,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":312,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":59,"org.easymock.tests.LimitationsTest.abstractClass":164,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":327,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":273,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":264}}]

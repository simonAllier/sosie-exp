[{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:163","failures":[3,4],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[5,6,7,8,9,10],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"failures":[11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[12],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[14,15,16,17,18,19,20,5,21,22,23,24,25,26,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[5,61,22,23,62,8,63,37,38,51,64,65,66,53],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:196","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:189","sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtAssignmentImpl"},"failures":[79,80,81,82,83,84,85,86,87,88,89,14,15,16,90,91,92,93,94,95,96,97,98,99,19,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,20,116,5,61,21,22,23,117,62,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,26,152,8,27,153,154,28,29,30,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,31,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,32,284,285,286,287,33,34,288,289,290,291,292,293,294,295,0,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,35,336,63,36,37,38,337,338,339,340,341,342,343,344,345,67,346,347,348,349,68,69,39,350,351,40,41,42,352,353,354,43,44,45,46,355,356,357,358,359,360,361,362,363,364,70,365,366,367,368,369,370,47,371,372,373,374,375,376,377,378,48,49,50,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,51,405,64,406,65,407,408,409,410,411,66,52,412,53,413,414,415,416,417,418,3,4,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,54,443,444,445,55,56,446,447,57,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,58,470,471,472,473,11,474,475,476,477,478,479,480,481,482,483,59,484,485,13,486,487,488,489,490,491,492,493,494,495,60],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"failures":[168,193,304,415,417,4,60],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[374,407],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[18,219,247,255,256,257,340,67,349,375],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[496,408,497],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:99","failures":[79,91,93,95,96,99,114,61,22,23,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,26,152,153,154,30,183,184,185,186,187,198,224,225,227,250,251,261,262,263,32,284,285,286,287,34,303,305,306,308,313,319,325,334,335,63,37,38,339,344,345,67,346,348,349,68,39,350,351,41,352,353,354,45,46,357,359,360,361,362,363,364,47,373,375,376,49,382,385,395,401,404,51,405,64,406,65,409,52,412,53,3,424,428,429,431,432,435,436,437,438,440,441,442,54,443,444,445,55,56,446,447,57,448,449,457,468,469,58,470,472,473,11,474,475,476,478,479,480,481,482,483,59,484,485,13,486,487,489,490,491,492,493,494],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[428,430,438,58,470,473,474,475,477,13,490],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:128","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this","constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[477],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[419,420],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[481],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[19,5,22,25,8,27,28,29,199,33,34,37,40,43,44],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[19,498],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[499,476,482,492],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[311,311,312,312,3],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[79,80,81,82,83,84,85,86,87,88,89,14,15,16,90,91,92,93,94,18,95,96,97,98,99,19,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,20,116,5,61,21,22,23,117,62,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,26,152,8,27,153,154,28,29,30,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,31,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,32,284,285,286,287,33,34,288,289,290,291,500,292,293,294,295,0,296,501,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,35,336,63,36,37,38,337,338,339,340,502,503,504,341,342,343,344,345,67,346,347,348,349,68,69,39,350,351,40,41,42,352,353,354,43,44,45,46,355,356,357,358,359,360,361,362,363,364,70,505,365,366,367,368,369,370,71,47,371,72,372,373,374,375,73,376,377,378,48,49,75,50,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,51,405,64,406,65,407,408,409,410,411,66,52,412,53,413,414,415,416,417,418,3,4,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,54,443,444,445,55,56,446,447,57,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,58,470,471,472,473,11,474,475,476,477,478,479,480,481,482,483,59,484,485,13,486,487,488,489,490,491,492,493,494,495,60],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[79,80,91,95,96,99,19,114,61,22,23,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,26,152,153,154,30,183,184,185,186,187,188,198,224,225,227,250,251,253,261,262,263,32,284,285,286,287,34,303,305,306,308,313,319,325,334,335,63,37,38,339,344,345,67,346,348,349,68,39,350,351,41,352,353,354,45,46,357,359,360,361,362,363,364,47,373,375,376,49,382,385,395,401,404,51,405,64,406,65,409,52,412,53,415,3,424,428,429,430,431,432,435,436,437,438,440,441,442,54,443,444,445,55,56,446,447,57,448,449,457,468,469,58,470,472,473,11,474,475,476,478,479,480,481,482,483,59,484,485,13,486,487,488,489,490,491,492,493,494],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[224,225,227,349,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[506,507,508,509,510,364,70,73,378,493],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[429,430,432,433,434,435,436,441,59,488],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[17,18,19,5,22,23,24,25,8,27,28,29,33,34,37,38,40,43,44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[311,312,364,70,71,72,73,378,74,75,511,512,513,410,493],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[514,493,494,495],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Any:36","failures":[79,80,95,96,97,98,99,19,61,183,184,185,186,187,235,250,251,63,429,435,436,441,474,478],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[47,49,385,52,414],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[79,84,86,87,88,89,15,16,91,92,95,96,97,98,99,19,114,20,116,5,61,21,22,23,117,119,120,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,26,152,27,28,29,30,182,183,184,185,186,187,198,200,201,202,204,205,31,206,207,208,209,210,224,225,227,235,250,251,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,32,284,285,286,287,33,34,303,304,305,306,307,308,310,313,314,315,316,317,318,319,325,334,335,35,336,63,36,37,38,337,338,339,344,345,67,346,348,349,68,39,350,351,40,41,42,43,44,45,46,357,359,360,363,364,366,367,368,369,47,373,375,376,49,382,385,395,401,404,51,405,64,406,65,409,52,412,53,415,418,3,4,419,421,423,424,427,428,429,430,431,433,434,435,436,437,438,441,442,54,443,444,445,55,56,447,57,448,449,450,457,468,469,58,470,472,473,11,474,475,476,478,479,480,481,482,483,59,484,485,13,486,487,489,490,491,492,493,494,495,60],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[118,121],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":470,"org.easymock.tests2.UsageTest.argumentsOrdered":44,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":26,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":448,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":165,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":42,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":314,"org.easymock.tests2.DelegateToTest.testReturnException":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":232,"org.easymock.tests.MockingTest.testPartialClassMocking":224,"org.easymock.tests.MockClassControlTest.testToString":255,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":365,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":150,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":385,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":264,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":506,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":476,"org.easymock.tests2.UsageTest.wrongArguments":40,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":95,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":463,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":290,"org.easymock.samples.ExampleTest.answerVsDelegate":304,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":247,"org.easymock.tests2.UsageConstraintsTest.testNull":473,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":229,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":64,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":57,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":260,"org.easymock.tests2.CaptureTest.testPrimitive":431,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":99,"org.easymock.tests.UsageTest.moreThanOneArgument":152,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":283,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":405,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":300,"org.easymock.tests.UsageTest.argumentsOrdered":29,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":237,"org.easymock.tests.UsageVarargTest.varargIntAccepted":202,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":170,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":183,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":370,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":503,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":330,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":374,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":157,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":187,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":457,"org.easymock.tests.ReplayStateInvalidUsageTest.times":108,"org.easymock.tests2.DependencyTest.testClassMocking":332,"org.easymock.tests2.AnswerTest.answer":415,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":467,"org.easymock.tests2.CaptureTest.testAnd":428,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":244,"org.easymock.tests2.UsageTest.strictResetToDefault":350,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":66,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":299,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":445,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":285,"org.easymock.tests2.DelegateToTest.testDelegate":427,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":279,"org.easymock.tests.LimitationsTest.mockFinalMethod":115,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":235,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":192,"org.easymock.tests2.DependencyTest.testClassMockingSupport":333,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":146,"org.easymock.tests2.CaptureTest.testCapture1_2446744":432,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":408,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":277,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":465,"org.easymock.tests.UsageThrowableTest.throwError":118,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":102,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":246,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":18,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":331,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":302,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":511,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":403,"org.easymock.samples.PartialClassMockTest.testGetArea":313,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":103,"org.easymock.tests.MockingTest.testInterfaceMocking":226,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":184,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":390,"org.easymock.tests2.UsageTest.niceToStrict":41,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":219,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":265,"org.easymock.tests2.ThreadingTest.testChangeDefault":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":155,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":373,"org.easymock.tests2.MockBuilderTest.testCreateMock":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":398,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":460,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":273,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":55,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":243,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":83,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":84,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":288,"org.easymock.tests.UsageOverloadedMethodTest.overloading":262,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":394,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":482,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":196,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":137,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":261,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":481,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":1,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":437,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":203,"org.easymock.tests.MockClassControlTest.testEquals":259,"org.easymock.tests2.EasyMockSupportClassTest.testAll":382,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":92,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":466,"org.easymock.tests2.CaptureTest.testCaptureAll":429,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":190,"org.easymock.tests.MockNameTest.defaultName":252,"org.easymock.tests2.UsageConstraintsTest.testMatches":483,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":100,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":301,"org.easymock.samples.ExampleTest.voteForRemovals":308,"org.easymock.tests.UsageVarargTest.allKinds":210,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":287,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":191,"org.easymock.samples.BasicClassMockTest.testPrintContent":317,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":124,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":35,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":236,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":327,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":510,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":501,"org.easymock.tests2.UsageConstraintsTest.greaterThan":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":53,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":297,"org.easymock.samples.ExampleTest.voteForRemoval":305,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":413,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":360,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":248,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":504,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":407,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":182,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":39,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":162,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":443,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":380,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":231,"org.easymock.tests2.CaptureTest.testCaptureFirst":441,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":161,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":444,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":46,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":199,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":133,"org.easymock.tests2.CaptureTest.testCapture2_2446744":440,"org.easymock.tests2.UsageTest.moreThanOneArgument":351,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":173,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":209,"org.easymock.tests.GenericTest.testBridgedEquals":94,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":15,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":78,"org.easymock.tests.UsageExpectAndReturnTest.longType":129,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":442,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":188,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":282,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":488,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":220,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":280,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":298,"org.easymock.tests.UsageCallCountTest.tooManyCalls":16,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":399,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":134,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":462,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":269,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":123,"org.easymock.tests.MockingTest.testNiceClassMocking":230,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":345,"org.easymock.tests.MockingTest.testClassMocking":222,"org.easymock.tests2.UsageConstraintsTest.testContains":480,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":85,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":357,"org.easymock.tests2.UsageConstraintsTest.testFind":472,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":263,"org.easymock.tests.MockTypeTest.fromEasyMockClass":245,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":421,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":20,"org.easymock.tests.UsageExpectAndReturnTest.object":136,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":409,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":461,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":12,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":447,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":507,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":205,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":217,"org.easymock.tests.UsageTest.exactCallCountByLastCall":30,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":160,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":149,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":238,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":70,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":142,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":200,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":195,"org.easymock.tests.MockClassControlTest.testHashCode":258,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":321,"org.easymock.tests2.EasyMockSupportTest.testVerify":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":392,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":239,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":464,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":24,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":451,"org.easymock.tests.UsageVarargTest.varargCharAccepted":204,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":500,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":178,"org.easymock.tests2.UsageTest.openCallCountByLastCall":352,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":449,"org.easymock.tests.DefaultClassInstantiatorTest.object":292,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":81,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":215,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":393,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":271,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":121,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":455,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":320,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":52,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":257,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":270,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":143,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":401,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":256,"org.easymock.tests2.UsageTest.resumeIfFailure":45,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":242,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":502,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":234,"org.easymock.tests2.StubTest.stubWithReturnValue":339,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":73,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":489,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":135,"org.easymock.tests2.SerializationTest.testAllMockedMethod":495,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":171,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":513,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":10,"org.easymock.samples.SupportTest.voteForRemovals":319,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":323,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":276,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":514,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":177,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":416,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":151,"org.easymock.tests.UsageExpectAndThrowTest.object":274,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":486,"org.easymock.tests2.DelegateToTest.testWrongClass":425,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":250,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":251,"org.easymock.tests.UsageStrictMockTest.range":22,"org.easymock.samples.ConstructorCalledMockTest.testTax":311,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":342,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":446,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":344,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":275,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":375,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":110,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":379,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":289,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":6,"org.easymock.tests2.CaptureTest.testCaptureNone":436,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":213,"org.easymock.tests.UsageUnorderedTest.message":19,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":17,"org.easymock.tests.UsageVerifyTest.twoReturns":34,"org.easymock.tests.UsageVarargTest.varargByteAccepted":208,"org.easymock.tests2.ThreadingTest.testThreadSafe":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":396,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":89,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":218,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":316,"org.easymock.tests2.CaptureTest.testCapture_2617107":430,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":175,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":98,"org.easymock.tests2.UsageConstraintsTest.any":478,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":107,"org.easymock.tests2.StubTest.stub":338,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":176,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":233,"org.easymock.tests.UsageExpectAndThrowTest.longType":267,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":106,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":36,"org.easymock.tests2.SerializationTest.testClass":493,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":325,"org.easymock.tests.LimitationsTest.mockNativeMethod":114,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":145,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":93,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":454,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":337,"org.easymock.tests2.NameTest.nameForMocksControl":369,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":456,"org.easymock.tests2.MockedExceptionTest.testMockedException":356,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":384,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":154,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":420,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":227,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":268,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":404,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":376,"org.easymock.tests.MockingTest.testNicePartialClassMocking":225,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":65,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":452,"org.easymock.tests2.CaptureTest.testCaptureLast":435,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":147,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":475,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":68,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":487,"org.easymock.tests.MockingTest.testTwoMocks":223,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":69,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":272,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":491,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":497,"org.easymock.samples.ExampleTest.removeNonExistingDocument":309,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":459,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":104,"org.easymock.tests.UsageStrictMockTest.differentMethods":23,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":322,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":294,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":361,"org.easymock.tests2.MockBuilderTest.testCreateMockString":50,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":386,"org.easymock.tests.UsageExpectAndThrowTest.floatType":266,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":381,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":418,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":505,"org.easymock.tests.UsageVerifyTest.twoThrows":33,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":395,"org.easymock.samples.ExampleTest.voteAgainstRemoval":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":166,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":211,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":412,"org.easymock.tests.LimitationsTest.privateConstructor":113,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":77,"org.easymock.tests2.UsageConstraintsTest.testNotNull":490,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":125,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":355,"org.easymock.tests2.UsageTest.defaultResetToNice":354,"org.easymock.samples.ExampleTest.voteAgainstRemovals":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":141,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":453,"org.easymock.tests.UsageVarargTest.differentLength":31,"org.easymock.tests2.CallbackTest.callback":60,"org.easymock.tests2.UsageConstraintsTest.equals":471,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":410,"org.easymock.tests.UsageTest.openCallCountByLastCall":153,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":468,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":97,"org.easymock.tests.UsageCallCountTest.tooFewCalls":87,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":346,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":291,"org.easymock.tests.UsageThrowableTest.throwCheckedException":122,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":7,"org.easymock.tests.MockingTest.testStrictClassMocking":221,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":80,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":349,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":458,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":67,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":109,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":348,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests2.CompareToTest.testGreateOrEqual":499,"org.easymock.tests.ObjectMethodsTest.testHashCode":216,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":363,"org.easymock.tests2.NameTest.nameForNiceMock":368,"org.easymock.tests2.DependencyTest.testInterfaceMocking":334,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":508,"org.easymock.samples.ExampleTest.addDocument":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":397,"org.easymock.tests2.DelegateToTest.testStubDelegate":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":402,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":61,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":377,"org.easymock.tests.UsageVarargTest.varargLongAccepted":207,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":144,"org.easymock.tests.UsageExpectAndReturnTest.floatType":128,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":364,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":312,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":485,"org.easymock.tests.UsageThrowableTest.noUpperLimit":119,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":197,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":329,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":469,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":340,"org.easymock.tests2.SerializationTest.test":494,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":433,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":293,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":127,"org.easymock.tests2.UsageConstraintsTest.testSame":11,"org.easymock.samples.SupportTest.addDocument":318,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":347,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":387,"org.easymock.tests.GenericTest.testPackageScope":91,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":159,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":328,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":228,"org.easymock.tests2.NameTest.nameForMock":366,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":138,"org.easymock.tests2.UsageStrictMockTest.differentMethods":38,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":75,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":411,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":130,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":278,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":214,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":286,"org.easymock.tests2.MockedExceptionTest.testRealException":358,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":169,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":343,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":512,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":168,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":63,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":111,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":96,"org.easymock.tests2.NameTest.nameForStrictMock":367,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":372,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":419,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":341,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":498,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":13,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":295,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":47,"org.easymock.tests2.UsageStrictMockTest.range":37,"org.easymock.tests2.UsageConstraintsTest.lessThan":492,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":324,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":509,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":54,"org.easymock.tests2.CaptureTest.testCaptureRightOne":438,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":391,"org.easymock.tests2.UsageConstraintsTest.testOr":474,"org.easymock.tests.UsageRangeTest.combination":32,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":51,"org.easymock.tests.UsageTest.wrongArguments":27,"org.easymock.tests2.MockBuilderTest.testWithConstructor":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":388,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":156,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":139,"org.easymock.tests.UsageVarargTest.varargShortAccepted":206,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":296,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":14,"org.easymock.tests2.UsageConstraintsTest.cmpTo":479,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":158,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":353,"org.easymock.tests2.CaptureTest.testCaptureFromStub":439,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":101,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":371,"org.easymock.tests.UsageTest.unexpectedCallWithArray":8,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":88,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":74,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":140,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":21,"org.easymock.tests2.UsageConstraintsTest.constraints":58,"org.easymock.samples.ExampleTest.addAndChangeDocument":310,"org.easymock.tests.UsageStrictMockTest.testVerify":62,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":315,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":116,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":189,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":434,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":185,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":132,"org.easymock.tests.LimitationsTest.abstractClass":112,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":186,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":198,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":56,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":201}}]

[{"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[0,1,2,3],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:102","sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","type":"CtIfImpl"},"failures":[4],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[15,3,16,17,18,19,20,21,22,23,24,25],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[14,26,27,28],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,0,88,89,90,91,92,1,93,94,95,96,97,98,99,100,101,102,2,103,104,105,106,107,108,109,110,111,112,113,14,26,27,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,15,131,3,16,17,18,19,20,132,21,23,24,133,25,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:97","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[108,271],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"failures":[272,273,274],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[126],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[275],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:340","sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[47],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[276],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[118,125,136,166,262,267],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[276,299,300],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[14,26,27,28],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[6,10,11,301,302],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[303,304],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[97],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"expected":"expected","actual":"expected"}},{"position":"org.easymock.internal.Range:44","failures":[305,306,29,30,31,32,33,34,307,35,308,309,310,311,312,313,314,36,5,315,37,316,317,318,38,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,39,340,40,341,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,342,343,344,345,346,347,348,349,350,351,352,353,354,58,59,60,61,62,63,355,356,64,357,358,65,359,66,360,361,362,67,363,364,68,69,70,365,71,72,73,366,74,75,76,77,78,79,80,367,368,369,370,371,372,373,81,374,375,376,377,378,82,83,379,13,380,381,382,383,84,384,85,385,386,387,388,389,390,391,392,393,394,395,396,86,87,0,88,397,89,90,91,92,1,93,4,94,95,96,97,98,99,100,101,102,2,103,104,398,105,106,107,108,109,110,111,112,399,400,113,401,14,26,27,402,114,115,403,404,405,116,117,406,118,119,120,121,122,123,124,125,126,127,128,129,130,407,408,409,410,411,412,413,414,415,416,417,418,15,131,3,16,17,18,19,20,132,21,23,24,133,25,134,135,136,137,138,139,140,141,419,142,143,144,145,146,147,420,421,422,423,424,425,426,427,148,428,429,275,149,150,151,152,153,154,155,156,157,430,431,158,432,433,434,435,436,437,438,439,440,159,160,161,162,163,164,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,303,470,471,472,304,473,474,165,166,167,475,476,477,478,479,480,168,169,170,171,481,482,483,484,485,172,486,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,487,197,198,488,489,490,491,492,199,200,493,494,201,495,202,203,204,205,206,496,497,498,207,208,499,209,500,501,502,503,210,504,505,506,507,508,211,509,510,511,512,513,514,515,212,213,214,215,216,516,517,518,519,520,521,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,522,242,243,244,245,246,247,523,248,249,524,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,525,526,527],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[305,305,306,306,29,30,31,32,34,35,308,310,36,38,321,331,337,39,40,45,46,47,48,49,52,54,55,57,342,343,344,345,346,347,348,349,350,351,352,353,58,59,60,61,62,63,64,359,66,360,67,363,364,68,69,70,365,71,72,73,366,74,75,76,77,78,79,80,375,82,379,380,84,390,86,87,0,88,89,90,91,92,1,93,94,95,96,97,98,99,100,101,102,2,103,104,105,106,107,108,113,401,14,26,402,114,115,403,405,116,117,118,119,120,122,124,125,126,129,130,412,15,131,16,17,20,132,21,23,24,133,25,134,135,136,137,138,139,140,141,419,142,143,144,145,146,147,148,428,429,275,152,154,155,439,161,460,466,165,166,167,168,169,170,171,481,483,484,172,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,488,490,491,492,199,200,201,202,203,204,205,206,207,208,209,210,212,213,214,215,216,517,518,519,520,521,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,522,242,243,244,255,256,262,263,266,267,270,525,526,527],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1952","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[0,88,92,1,4,2,15,3,23],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[41,42,43,44,50,52,53,54,55,56,57,343,345,347,348,350,351,59,65,360,362,81,375,376,379,380,383,84,85,390,391,0,100,114,115,116,117,118,120,121,122,123,127,128,129,130,412,413,420,423,424,425,426,427,148,149,151,152,153,154,155,156,430,432,433,434,159,161,162,441,442,443,165,166,167,476,479,480,168,482,485,172,486,503,210,524,262,263,264,265,268,269,270],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[305,305,306,306,52,80,86,87,89,90,91,92,96,98,99,101,102,106,107,108,24,152,199,200,202,203,204,205,206,212,213,214,215,216,217,218,221,255],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:36","failures":[52,54,55,528,529,530,272,273,531,532,533,534,120,148,151,152,154,155,165,166,167,535,274,536,537,538,503,210,263,264],"status":-1,"binaryOperator":"java.lang.Object instanceof java.lang.String","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[22,539],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"failures":[540,148],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[305,306,29,30,31,32,33,34,307,35,308,309,310,311,312,313,314,36,5,315,37,316,317,318,38,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,39,340,40,341,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,342,343,344,345,346,347,348,349,350,351,352,353,354,58,59,60,61,62,63,355,356,64,357,358,65,359,66,360,361,362,67,363,364,68,69,70,365,71,72,73,366,74,75,76,77,78,79,80,367,368,369,370,371,372,373,81,374,375,376,377,378,82,83,379,13,380,381,382,383,84,384,85,385,386,387,388,389,390,391,392,393,394,395,396,86,87,0,88,397,89,90,91,92,1,93,4,94,95,96,97,98,99,100,101,102,2,103,104,398,105,106,107,108,109,110,111,112,399,400,113,401,14,26,27,402,114,115,403,404,405,116,117,406,118,119,120,121,122,123,124,125,126,127,128,129,130,407,408,409,410,411,412,413,414,415,416,417,418,15,131,3,16,17,18,19,20,132,21,23,24,133,25,134,135,136,137,138,139,140,141,419,142,143,144,145,146,147,420,421,422,423,424,425,426,427,148,428,429,275,149,150,151,152,153,154,155,156,157,430,431,158,432,433,434,435,436,437,438,439,440,159,160,161,162,163,164,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,303,470,471,472,304,473,474,165,166,167,475,476,477,478,479,480,168,169,170,171,481,482,483,484,485,172,486,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,487,197,198,488,489,490,491,492,199,200,493,494,201,495,202,203,204,205,206,496,497,498,207,208,499,209,500,501,502,503,210,504,505,506,507,508,211,509,510,511,512,513,514,515,212,213,214,215,216,516,517,518,519,520,521,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,522,242,243,244,245,246,247,523,248,249,524,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,525,526,527],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[305,305,306,306,29,30,31,32,33,34,35,308,309,310,311,312,313,314,36,38,321,331,337,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,342,343,344,345,346,347,348,349,350,351,352,353,354,58,59,60,61,62,63,355,64,65,359,66,360,67,363,364,68,69,70,365,71,72,73,366,74,75,76,77,78,79,80,375,82,379,380,84,390,86,87,0,88,89,90,91,92,1,93,4,94,95,96,97,98,99,100,101,102,2,103,104,398,105,106,107,108,109,113,401,14,26,27,402,114,115,403,405,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,412,15,131,3,16,17,18,19,20,132,21,23,24,133,25,134,135,136,137,138,139,140,141,419,142,143,144,145,146,147,148,428,429,275,149,150,151,152,153,154,155,156,157,431,439,159,161,162,163,164,442,443,460,466,165,166,167,168,169,170,171,481,482,483,484,485,172,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,488,490,491,492,199,200,201,202,203,204,205,206,498,207,208,209,503,210,212,213,214,215,216,517,518,519,520,521,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,522,242,243,244,245,246,247,248,249,524,250,251,252,253,254,255,256,257,262,263,265,266,267,268,269,270,525,526,527],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[100,398,131,3,17,18,19,20,132,25],"status":-1,"binaryOperator":"((((this.java.util.List<org.easymock.IArgumentMatcher>) == null) && ((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)) || (((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>))))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Invocation:99","failures":[31,32,34,35,308,310,351,353,82,94,168,541],"status":-1,"binaryOperator":"((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[529,533,151,535,536,264],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[108,271],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"argType":"type","paramType":"type"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[472,542,543],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[30,397,90,106,127,245,254,268],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[0,88,92,1,4,2,15,3,23],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[122],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":88,"org.easymock.tests2.UsageTest.argumentsOrdered":128,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":262,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":352,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":454,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":123,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":314,"org.easymock.tests2.DelegateToTest.testReturnException":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":143,"org.easymock.tests.MockingTest.testPartialClassMocking":207,"org.easymock.tests.MockClassControlTest.testToString":432,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":341,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":439,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":325,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":177,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":321,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":401,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":298,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":93,"org.easymock.tests2.UsageTest.wrongArguments":121,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":217,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":396,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":175,"org.easymock.samples.ExampleTest.answerVsDelegate":30,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":425,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":501,"org.easymock.tests2.UsageConstraintsTest.testNull":90,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":61,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":437,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":351,"org.easymock.tests2.CaptureTest.testPrimitive":16,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":221,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":196,"org.easymock.tests.UsageTest.moreThanOneArgument":263,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":60,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":214,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":517,"org.easymock.tests.UsageTest.argumentsOrdered":269,"org.easymock.tests.UsageVarargTest.varargIntAccepted":247,"org.easymock.tests.InvocationTest.testEquals":541,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":534,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":459,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":202,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":11,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":81,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":417,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":369,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":83,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":206,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":282,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":273,"org.easymock.tests.ReplayStateInvalidUsageTest.times":512,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":390,"org.easymock.tests2.DependencyTest.testClassMocking":399,"org.easymock.tests2.AnswerTest.answer":67,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":4,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":461,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":112,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":422,"org.easymock.tests2.CaptureTest.testAnd":15,"org.easymock.tests2.UsageTest.strictResetToDefault":119,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":65,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":377,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":170,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":346,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":521,"org.easymock.tests2.DelegateToTest.testDelegate":74,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":281,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":192,"org.easymock.tests.LimitationsTest.mockFinalMethod":495,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":146,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":261,"org.easymock.tests2.DependencyTest.testClassMockingSupport":400,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":503,"org.easymock.tests2.CaptureTest.testCapture1_2446744":17,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":356,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":190,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":110,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":507,"org.easymock.tests.UsageThrowableTest.throwError":134,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":424,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":516,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":418,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":339,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":285,"org.easymock.samples.PartialClassMockTest.testGetArea":308,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":508,"org.easymock.tests.MockingTest.testInterfaceMocking":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":203,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":429,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":480,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":178,"org.easymock.tests2.UsageTest.niceToStrict":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":326,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":276,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":82,"org.easymock.tests2.MockBuilderTest.testCreateMock":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":334,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":393,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":529,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":186,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":347,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":421,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":527,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":159,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":173,"org.easymock.tests.UsageOverloadedMethodTest.overloading":242,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":336,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":484,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":98,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":522,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":233,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":542,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":97,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":21,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":523,"org.easymock.tests.MockClassControlTest.testEquals":436,"org.easymock.tests2.EasyMockSupportClassTest.testAll":38,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":198,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":194,"org.easymock.tests2.CaptureTest.testCaptureAll":131,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":111,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":259,"org.easymock.tests.MockNameTest.defaultName":430,"org.easymock.tests2.UsageConstraintsTest.testMatches":99,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":505,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":215,"org.easymock.samples.ExampleTest.voteForRemovals":34,"org.easymock.tests.UsageVarargTest.allKinds":254,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":260,"org.easymock.samples.BasicClassMockTest.testPrintContent":312,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":140,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":50,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":147,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":366,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":473,"org.easymock.tests2.UsageConstraintsTest.greaterThan":101,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":319,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":169,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":360,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":286,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":474,"org.easymock.samples.ExampleTest.voteForRemoval":31,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":46,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":361,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":426,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":355,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":278,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":118,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":244,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":344,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":142,"org.easymock.tests2.CaptureTest.testCaptureFirst":25,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":450,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":345,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":130,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":486,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":229,"org.easymock.tests2.CaptureTest.testCapture2_2446744":133,"org.easymock.tests2.UsageTest.moreThanOneArgument":120,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":462,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":84,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":253,"org.easymock.tests.GenericTest.testBridgedEquals":489,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":442,"org.easymock.tests.UsageExpectAndReturnTest.longType":225,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":257,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":342,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":195,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":419,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":398,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":193,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":491,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":212,"org.easymock.tests.UsageCallCountTest.tooManyCalls":443,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":274,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":335,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":230,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":395,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":182,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":139,"org.easymock.tests.MockingTest.testNiceClassMocking":502,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":114,"org.easymock.tests.MockingTest.testClassMocking":497,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":160,"org.easymock.tests2.UsageConstraintsTest.testContains":96,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":77,"org.easymock.tests2.UsageConstraintsTest.testFind":89,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":243,"org.easymock.tests.MockTypeTest.fromEasyMockClass":423,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":149,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":40,"org.easymock.tests.UsageExpectAndReturnTest.object":232,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":64,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":350,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":249,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":478,"org.easymock.tests.UsageTest.exactCallCountByLastCall":270,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":518,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":438,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":5,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":238,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":245,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":483,"org.easymock.tests.MockClassControlTest.testHashCode":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":408,"org.easymock.tests2.EasyMockSupportTest.testVerify":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":328,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":272,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":519,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":526,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":481,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":109,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":37,"org.easymock.tests.UsageVarargTest.varargCharAccepted":248,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":468,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":467,"org.easymock.tests2.UsageTest.openCallCountByLastCall":124,"org.easymock.tests.DefaultClassInstantiatorTest.object":469,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":299,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":353,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":525,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":476,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":538,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":329,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":137,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":388,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":407,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":434,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":284,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":359,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":183,"org.easymock.tests.CapturesMatcherTest.test":539,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":239,"org.easymock.tests.ReplayStateInvalidCallsTest.times":290,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":490,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":291,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":531,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":433,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":337,"org.easymock.tests2.UsageTest.resumeIfFailure":129,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":420,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":368,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":145,"org.easymock.tests2.StubTest.stubWithReturnValue":80,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":13,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":105,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":231,"org.easymock.tests2.SerializationTest.testAllMockedMethod":27,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":460,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":302,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":533,"org.easymock.samples.SupportTest.voteForRemovals":310,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":487,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":410,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":189,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":28,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":466,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":363,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":440,"org.easymock.tests.UsageExpectAndThrowTest.object":187,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":103,"org.easymock.tests2.DelegateToTest.testWrongClass":73,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":199,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":288,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":200,"org.easymock.tests.UsageStrictMockTest.range":154,"org.easymock.samples.ConstructorCalledMockTest.testTax":305,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":372,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":349,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":402,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":188,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":379,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":514,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":268,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":174,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":535,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":280,"org.easymock.tests2.CaptureTest.testCaptureNone":132,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":275,"org.easymock.tests.UsageUnorderedTest.message":148,"org.easymock.tests.UsageVerifyTest.twoReturns":167,"org.easymock.tests.UsageVarargTest.varargByteAccepted":252,"org.easymock.tests2.ThreadingTest.testThreadSafe":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":332,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":164,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":479,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":311,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":464,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":220,"org.easymock.tests2.UsageConstraintsTest.any":94,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":511,"org.easymock.tests2.StubTest.stub":79,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndThrowTest.longType":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":144,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":472,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":510,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":53,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":412,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests.LimitationsTest.mockNativeMethod":201,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":488,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":241,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":387,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":296,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":56,"org.easymock.tests2.NameTest.nameForMocksControl":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":389,"org.easymock.tests2.MockedExceptionTest.testMockedException":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":320,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":181,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":209,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":340,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":58,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":380,"org.easymock.tests.MockingTest.testNicePartialClassMocking":208,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":63,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":385,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":6,"org.easymock.tests2.CaptureTest.testCaptureLast":20,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":210,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":117,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":295,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":104,"org.easymock.tests.MockingTest.testTwoMocks":498,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":292,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":406,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":222,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":185,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":127,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":107,"org.easymock.samples.ExampleTest.removeNonExistingDocument":307,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":392,"org.easymock.tests.UsageStrictMockTest.differentMethods":155,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":211,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":409,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":470,"org.easymock.tests2.ConstraintsToStringTest.andToString":532,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":47,"org.easymock.tests2.MockBuilderTest.testCreateMockString":85,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":431,"org.easymock.tests.UsageExpectAndThrowTest.floatType":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":322,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":318,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":68,"org.easymock.tests.UsageVerifyTest.twoThrows":166,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":315,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":331,"org.easymock.samples.ExampleTest.voteAgainstRemoval":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":455,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":428,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":66,"org.easymock.tests.LimitationsTest.privateConstructor":494,"org.easymock.tests2.UsageConstraintsTest.testNotNull":106,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":141,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":75,"org.easymock.tests2.UsageTest.defaultResetToNice":126,"org.easymock.samples.ExampleTest.voteAgainstRemovals":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":237,"org.easymock.tests.UsageVarargTest.differentLength":524,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":386,"org.easymock.tests2.CallbackTest.callback":57,"org.easymock.tests2.UsageConstraintsTest.equals":397,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":357,"org.easymock.tests.UsageTest.openCallCountByLastCall":266,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":86,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":219,"org.easymock.tests.UsageCallCountTest.tooFewCalls":162,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":403,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":176,"org.easymock.tests.UsageThrowableTest.throwCheckedException":138,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":536,"org.easymock.tests.MockingTest.testStrictClassMocking":496,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":116,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":256,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":391,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":115,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":513,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":405,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":70,"org.easymock.tests.ObjectMethodsTest.testHashCode":477,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":10,"org.easymock.tests2.NameTest.nameForNiceMock":43,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":49,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":294,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":289,"org.easymock.tests2.DependencyTest.testInterfaceMocking":113,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.samples.ExampleTest.addDocument":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":333,"org.easymock.tests2.DelegateToTest.testStubDelegate":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":338,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":152,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":381,"org.easymock.tests.UsageVarargTest.varargLongAccepted":251,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndReturnTest.floatType":224,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":240,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":36,"org.easymock.tests2.ConstraintsToStringTest.orToString":528,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":306,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":485,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":416,"org.easymock.tests.UsageThrowableTest.noUpperLimit":135,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":102,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":87,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":367,"org.easymock.tests2.SerializationTest.test":26,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":18,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":543,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":303,"org.easymock.tests2.UsageConstraintsTest.testSame":91,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":223,"org.easymock.samples.SupportTest.addDocument":309,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":404,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":279,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":509,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":323,"org.easymock.tests.GenericTest.testPackageScope":197,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":520,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":415,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":500,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":277,"org.easymock.tests2.NameTest.nameForMock":41,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":234,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":384,"org.easymock.tests2.UsageStrictMockTest.differentMethods":55,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":358,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":226,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":191,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":475,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":171,"org.easymock.tests2.MockedExceptionTest.testRealException":78,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":427,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":373,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":537,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":457,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":52,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":515,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":218,"org.easymock.tests2.NameTest.nameForStrictMock":42,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":378,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":39,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":300,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":62,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":371,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":540,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":471,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":2,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":375,"org.easymock.tests2.UsageStrictMockTest.range":54,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":283,"org.easymock.tests2.UsageConstraintsTest.lessThan":108,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":452,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":343,"org.easymock.tests2.CaptureTest.testCaptureRightOne":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":327,"org.easymock.tests2.UsageConstraintsTest.testOr":92,"org.easymock.tests.UsageRangeTest.combination":168,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":59,"org.easymock.tests.UsageTest.wrongArguments":265,"org.easymock.tests2.MockBuilderTest.testWithConstructor":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":324,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":235,"org.easymock.tests.UsageVarargTest.varargShortAccepted":250,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":304,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":441,"org.easymock.tests2.UsageConstraintsTest.cmpTo":95,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":297,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":364,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":287,"org.easymock.tests2.CompareToTest.testLessThan":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":447,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":125,"org.easymock.tests2.CaptureTest.testCaptureFromStub":24,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":506,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":376,"org.easymock.tests.UsageTest.unexpectedCallWithArray":264,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":293,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":151,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":163,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":236,"org.easymock.tests2.CaptureTest.testCapture":22,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":153,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.samples.ExampleTest.addAndChangeDocument":35,"org.easymock.tests2.ConstraintsToStringTest.notToString":530,"org.easymock.tests.UsageStrictMockTest.testVerify":157,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":313,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":258,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":204,"org.easymock.tests.LimitationsTest.abstractClass":493,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":228,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":205,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":348}}]

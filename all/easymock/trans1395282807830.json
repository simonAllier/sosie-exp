[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[17,145,198],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[258,259],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[4,5,6,7,8,9,10,11,12,13,260,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,44,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,85,107,108,129,130,131,132,133,145,152,153,154,155,156,157,158,186,187,190,198,199,219],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[262,263,264,265,266,267,268,269,270,271,272,273,274,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,30,275,31,32,276,277,278,33,34,35,36,37,38,39,40,41,42,43,279,44,45,280,46,281,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,282,76,77,78,79,80,81,82,83,84,85,86,87,88,89,283,284,285,286,287,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,288,107,108,109,289,110,111,290,291,112,113,292,293,294,295,296,297,298,299,300,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,301,134,135,136,137,138,139,140,302,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,182,183,184,185,303,304,305,186,187,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,246,247,248,249,250,251,252,253,254,255,256,306,307,308,309],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"invocation"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[4,5,8,9,10,11,16,18,19,21,22,27,28,29,71,77,85,294,294,295,295,129,130,131,132,133,310,152,154,155,158,186,187,311,312,313,314,315,316,199,249,250,251,252,253],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[29,317],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[77,90,97,135,157,159,160,163,165,166,167,168,170,171,172,173,175,176,177,178,318,206,211,219,247],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:231","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[33,319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[22,85,310,311,312,313,314,315,316,199],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"value"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[156,320],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[321,322,323,324,325,326,327],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1026","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:157","sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[321,328,35,322,323,324,329,330,82,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[331,0,1,2,3,262,263,264,265,266,267,268,269,270,271,272,273,274,4,5,6,7,332,8,9,10,11,12,13,260,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,30,333,275,334,335,336,31,32,276,321,277,337,328,278,33,338,34,35,36,37,38,39,40,41,42,43,279,339,44,340,341,45,280,46,281,342,319,47,48,49,50,51,52,53,54,55,343,56,57,58,344,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,345,346,347,348,349,350,351,74,352,353,75,282,76,77,78,79,80,81,82,327,354,83,84,85,86,87,88,89,355,356,357,283,358,359,284,360,361,362,363,364,365,366,367,368,285,369,370,371,372,373,286,374,375,376,377,378,379,380,287,381,382,383,384,385,386,90,91,92,93,94,95,96,97,98,99,100,101,102,103,387,388,104,105,106,389,390,391,392,393,288,394,395,396,397,398,399,107,400,108,109,289,110,111,290,401,291,112,113,402,292,293,294,295,296,297,298,299,300,114,115,116,117,118,119,403,120,121,122,123,124,125,126,127,128,129,130,131,132,133,404,405,406,310,301,134,135,136,137,138,407,139,140,302,141,142,143,144,145,408,146,147,409,410,411,148,149,150,151,152,153,154,155,156,157,158,412,413,414,415,416,417,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,418,179,419,420,421,422,423,424,180,181,182,183,184,185,303,304,305,425,426,427,428,429,430,431,432,186,187,433,434,435,436,437,311,438,439,440,188,441,442,443,444,445,446,447,448,449,189,450,451,452,453,312,454,455,318,313,314,456,320,457,458,459,460,461,462,315,463,464,465,466,316,467,468,469,470,471,472,473,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,474,475,476,215,216,217,218,219,220,221,222,223,224,477,478,258,479,480,481,259,482,483,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,484,245,485,246,247,248,249,250,251,252,253,486,487,488,489,254,255,490,256,491,492,493,306,494,307,308,495,257,309],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[18,496],"status":-1,"binaryOperator":"int >= 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:80","failures":[30,497,275,334,31,32,276,277,278,33,498,34,35,279,297,409,425,430],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.Capture:82","failures":[60,62,63,64,65,66,67,69,499,70,71,73],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[262,263,264,265,266,267,268,269,270,271,272,273,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,275,31,276,277,33,35,36,38,39,40,41,42,43,44,280,46,281,51,52,53,54,55,343,56,57,58,344,59,60,61,63,64,67,68,69,70,71,72,73,75,282,76,77,78,79,80,81,82,85,87,88,283,284,285,286,287,90,91,92,94,96,97,98,101,102,103,387,388,104,105,106,288,107,108,109,289,110,111,290,291,112,113,294,294,295,295,297,300,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,405,310,301,134,135,146,409,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,182,186,187,433,434,435,436,437,189,451,452,453,464,469,471,472,473,190,199,201,202,205,206,207,210,211,214,474,475,476,215,216,217,218,219,220,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,306,307,308,257],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Find:37","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String).matcher(((java.lang.String)(java.lang.Object))).find())","type":"CtReturnImpl"},"failures":[8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:89","sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","type":"CtTryImpl"},"failures":[478,258,479,480,259,483],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[4,21,26,500],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[56,58,344,59,115,307],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[85,90,96,97,102,103,199,206,210,211,214,246,248],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[501],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.internal.RecordState:191","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:106","sourceCode":"return org.easymock.IAnswer<?>.answer()","type":"CtReturnImpl"},"failures":[262,263,264,265,266,267,268,269,270,271,272,273,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,276,277,35,36,38,39,40,41,42,43,279,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,67,68,69,70,71,72,73,75,282,77,78,79,80,81,82,85,87,88,283,284,285,286,287,90,91,92,94,96,97,98,101,102,103,104,105,106,288,107,108,109,289,110,111,290,291,112,113,294,295,297,300,114,115,116,117,119,121,123,124,125,126,127,128,129,130,131,132,133,301,134,135,146,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,186,187,189,191,192,193,194,195,199,201,202,206,207,210,211,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,246,247,248,249,250,251,252,253,254,255,256,306,307,308],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[6,7,11,12,260,23,60,62,70],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[321,322,323,324,325,326,327],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:180","sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[9,261,54,145],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"o":"actual"}},{"position":"org.easymock.internal.MocksControl:136","failures":[30,275,334,336,31,32,276,277,328,278,33,34,35,37,38,39,41,42,43,279,44,340,341,45,280,46,281,342,319,345,346,347,349,352,353,78,79,80,82,327,355,356,357,283,358,359,284,360,361,362,363,364,365,366,367,368,285,369,370,371,372,373,286,374,375,289,110,111,290,112,113,292,293,294,294,295,295,297,408,146,147,409,410,418,179,419,420,421,422,423,424,425,430,448,449,189,450,205,478,258,479,480,481,259,483,487,488,489,254,255,256,493],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:180","failures":[321,328,35,322,323,324,329,330,82,327],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[87,93,99,100,502,190,198,201,208,209,212,213,247,248],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[0,1,2,3,262,263,264,265,266,267,268,269,270,271,272,273,274,4,5,6,7,8,9,10,11,12,13,260,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,275,31,276,277,33,35,36,37,38,39,40,41,42,43,44,280,46,281,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,75,282,76,77,80,82,83,84,85,86,87,88,89,283,284,285,286,287,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,288,107,108,109,289,110,111,290,291,112,113,292,293,296,297,298,299,300,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,301,134,135,136,137,138,139,140,302,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,413,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,182,183,184,185,304,305,186,187,433,434,435,189,190,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,213,214,219,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,246,247,248,254,255,256,306,307,308,257],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[35,36,37,503],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterTypeNames":"parameterTypeNames","i":"i","parameterTypes":"parameterTypes"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[331,0,1,2,3,262,263,264,265,266,267,268,269,270,271,272,273,274,4,5,6,7,332,8,9,10,11,12,13,260,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,504,505,506,507,508,509,30,275,334,336,31,32,276,277,337,328,278,33,34,35,36,37,38,39,40,41,42,43,279,339,44,340,341,45,280,46,281,342,319,47,48,49,50,51,510,52,53,54,55,343,56,57,58,344,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,345,346,347,349,350,351,74,352,353,75,282,76,77,78,79,80,81,82,327,83,84,85,86,87,88,89,355,356,357,283,358,359,284,360,361,362,363,364,365,366,367,368,285,369,370,371,372,373,286,374,375,376,377,378,379,380,287,381,382,383,384,385,386,90,91,92,93,94,95,96,97,98,99,100,101,102,103,387,388,104,105,106,389,390,391,392,393,288,394,395,396,397,398,399,107,400,108,109,289,110,111,290,401,291,112,113,402,292,293,294,295,296,297,298,299,300,114,115,116,117,118,119,403,120,121,122,123,124,125,126,127,128,129,130,131,132,133,404,405,406,310,301,134,135,136,137,138,407,139,140,302,141,142,143,144,145,408,146,147,409,410,148,149,150,151,152,153,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,154,155,156,157,158,412,413,414,415,416,417,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,418,179,419,420,421,422,423,424,180,181,182,183,184,185,303,304,305,425,426,427,428,429,430,431,432,186,187,433,434,435,436,437,311,438,439,440,188,441,442,443,444,445,446,447,448,449,189,450,451,452,453,312,454,455,318,313,314,456,320,457,458,459,460,461,462,315,463,464,465,466,316,467,468,469,470,471,472,473,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,474,475,476,215,216,217,218,219,220,221,222,223,224,478,258,479,480,481,259,483,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,484,245,485,246,247,248,249,250,251,252,253,486,487,488,489,254,255,490,256,491,492,493,306,494,307,308,495,257,309],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[331,0,1,2,3,262,263,264,265,266,267,268,269,270,271,272,273,274,4,5,6,7,332,8,9,10,11,12,13,260,14,15,16,17,18,19,20,21,22,23,24,25,261,26,27,28,29,30,333,275,334,335,336,31,32,276,321,277,337,328,278,33,338,34,35,36,37,38,39,40,41,42,43,279,339,44,340,341,45,280,46,281,342,319,47,48,49,50,51,52,53,54,55,343,56,57,58,344,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,345,346,347,348,349,350,351,74,352,353,75,282,76,77,78,79,80,81,82,327,354,83,84,85,86,87,88,89,355,356,357,283,358,359,284,360,361,362,363,364,365,366,367,368,285,369,370,371,372,373,286,374,375,376,377,378,379,380,287,381,382,383,384,385,386,90,91,92,93,94,95,96,97,98,99,100,101,102,103,387,388,104,105,106,389,390,391,392,393,288,394,395,396,397,398,399,107,400,108,109,289,110,111,290,401,291,112,113,402,292,293,294,295,296,297,298,299,300,114,115,116,117,118,119,403,120,121,122,123,124,125,126,127,128,129,130,131,132,133,404,405,406,310,301,134,135,136,137,138,407,139,140,302,141,142,143,144,145,408,146,147,409,410,411,148,149,150,151,152,153,154,155,156,157,158,412,413,414,415,416,417,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,418,179,419,420,421,422,423,424,180,181,182,183,184,185,303,304,305,425,426,427,428,429,430,431,432,186,187,433,434,435,436,437,311,438,439,440,188,441,442,443,444,445,446,447,448,449,189,450,451,452,453,312,454,455,318,313,314,456,320,457,458,459,460,461,462,315,463,464,465,466,316,467,468,469,470,471,472,473,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,474,475,476,215,216,217,218,219,220,221,222,223,224,477,478,258,479,480,481,259,482,483,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,484,245,485,246,247,248,249,250,251,252,253,486,487,488,489,254,255,490,256,491,492,493,306,494,307,308,495,257,309],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[533,534,535],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[20,42,95],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.MocksControl:190","failures":[263,265,267,268,271,272,273,7,12,13,14,17,23,24,25,26,33,39,46,70,83,87,88,94,95,100,109,121,122,124,125,126,127,128,134,148,190,196,201,202,213,247],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[0,1,2,3,85,87,88,92,93,99,100,190,198,199,201,202,207,209,212,213,246,247,248],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[536,537,538,539,198,208],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:157","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[60,62,63,64,65,66,67,69,499,70,71,73],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[4,6,21,26,500],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":7,"org.easymock.tests2.UsageTest.argumentsOrdered":100,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":206,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":272,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":394,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":459,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":95,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":296,"org.easymock.tests2.DelegateToTest.testReturnException":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":216,"org.easymock.tests.MockingTest.testPartialClassMocking":254,"org.easymock.tests.MockClassControlTest.testToString":419,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":331,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":363,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":159,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":284,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":282,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":532,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":322,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":154,"org.easymock.tests2.UsageTest.wrongArguments":93,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":386,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":223,"org.easymock.samples.ExampleTest.answerVsDelegate":115,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":430,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":492,"org.easymock.tests2.UsageConstraintsTest.testNull":9,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":41,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":424,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":271,"org.easymock.tests2.CaptureTest.testPrimitive":63,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":158,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":178,"org.easymock.tests.UsageTest.moreThanOneArgument":207,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":40,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":251,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":433,"org.easymock.tests.UsageTest.argumentsOrdered":213,"org.easymock.tests.UsageVarargTest.varargIntAccepted":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":463,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":30,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":326,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":398,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":347,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":455,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":516,"org.easymock.tests.ReplayStateInvalidUsageTest.times":444,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":287,"org.easymock.tests2.DependencyTest.testClassMocking":352,"org.easymock.tests2.AnswerTest.answer":103,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":465,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":50,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":427,"org.easymock.tests2.CaptureTest.testAnd":60,"org.easymock.tests2.UsageTest.strictResetToDefault":91,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":45,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":335,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":150,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":266,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":437,"org.easymock.tests2.DelegateToTest.testDelegate":59,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":515,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":174,"org.easymock.tests.LimitationsTest.mockFinalMethod":450,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":195,"org.easymock.tests2.DependencyTest.testClassMockingSupport":353,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":484,"org.easymock.tests2.CaptureTest.testCapture1_2446744":64,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":172,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":48,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":439,"org.easymock.tests.UsageThrowableTest.throwError":121,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":429,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":411,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":399,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":253,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":375,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":519,"org.easymock.samples.PartialClassMockTest.testGetArea":297,"org.easymock.tests.MockingTest.testInterfaceMocking":490,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":440,"org.easymock.tests2.CompareToTest.testLessOrEqual":500,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":452,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":417,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":160,"org.easymock.tests2.UsageTest.niceToStrict":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":364,"org.easymock.tests2.ThreadingTest.testChangeDefault":510,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":533,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":312,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":31,"org.easymock.tests2.MockBuilderTest.testCreateMock":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":383,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":536,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":168,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":267,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":426,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":473,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":180,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":221,"org.easymock.tests.UsageOverloadedMethodTest.overloading":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":373,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":18,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":308,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":236,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":301,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":17,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":69,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":407,"org.easymock.tests.MockClassControlTest.testEquals":423,"org.easymock.tests2.EasyMockSupportClassTest.testAll":283,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":147,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":176,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":49,"org.easymock.tests2.CaptureTest.testCaptureAll":61,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":193,"org.easymock.tests.MockNameTest.defaultName":486,"org.easymock.tests2.UsageConstraintsTest.testMatches":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":252,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":311,"org.easymock.samples.ExampleTest.voteForRemovals":119,"org.easymock.tests.UsageVarargTest.allKinds":145,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":194,"org.easymock.samples.BasicClassMockTest.testPrintContent":293,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":127,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":83,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":395,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":220,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":344,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":482,"org.easymock.tests2.UsageConstraintsTest.greaterThan":21,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":330,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":149,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":281,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":520,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":483,"org.easymock.samples.ExampleTest.voteForRemoval":116,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":52,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":342,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":431,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":348,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":279,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":512,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":90,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":205,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":320,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":264,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":215,"org.easymock.tests2.CaptureTest.testCaptureFirst":73,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":456,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":265,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":102,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":309,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":232,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":54,"org.easymock.tests2.CaptureTest.testCapture2_2446744":72,"org.easymock.tests2.UsageTest.moreThanOneArgument":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":466,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":33,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":144,"org.easymock.tests.GenericTest.testBridgedEquals":410,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":304,"org.easymock.tests.UsageExpectAndReturnTest.longType":228,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":191,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":262,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":498,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":177,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":261,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":310,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":175,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":475,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":249,"org.easymock.tests.UsageCallCountTest.tooManyCalls":305,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":372,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":233,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":385,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":164,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":126,"org.easymock.tests.MockingTest.testNiceClassMocking":493,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":110,"org.easymock.tests.MockingTest.testClassMocking":488,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":497,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":181,"org.easymock.tests2.UsageConstraintsTest.testContains":16,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":80,"org.easymock.tests2.UsageConstraintsTest.testFind":8,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":135,"org.easymock.tests.MockTypeTest.fromEasyMockClass":428,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":108,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":196,"org.easymock.tests.UsageExpectAndReturnTest.object":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":384,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":270,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":323,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":415,"org.easymock.tests.UsageTest.exactCallCountByLastCall":214,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":314,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":434,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":404,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":327,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":136,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":241,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":307,"org.easymock.tests.MockClassControlTest.testHashCode":422,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":390,"org.easymock.tests2.EasyMockSupportTest.testVerify":274,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":366,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":435,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":472,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":306,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":47,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":74,"org.easymock.tests.UsageVarargTest.varargCharAccepted":139,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":477,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastCall":96,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":534,"org.easymock.tests.DefaultClassInstantiatorTest.object":478,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":273,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":471,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":413,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":502,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":367,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":124,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":379,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":389,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":518,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":421,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":280,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":165,"org.easymock.tests.ReplayStateInvalidCallsTest.times":524,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":474,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":525,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":420,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":286,"org.easymock.tests2.UsageTest.resumeIfFailure":101,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":425,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":346,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":218,"org.easymock.tests2.StubTest.stubWithReturnValue":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":321,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":26,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":234,"org.easymock.tests2.SerializationTest.testAllMockedMethod":37,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":464,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":537,"org.easymock.samples.SupportTest.voteForRemovals":300,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":408,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":392,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":171,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":503,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":469,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":387,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":406,"org.easymock.tests.UsageExpectAndThrowTest.object":169,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":24,"org.easymock.tests2.DelegateToTest.testWrongClass":58,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":522,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":186,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":187,"org.easymock.tests.UsageStrictMockTest.range":201,"org.easymock.samples.ConstructorCalledMockTest.testTax":294,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":350,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":269,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":289,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":170,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":276,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":446,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":222,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":538,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":514,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":453,"org.easymock.tests2.CaptureTest.testCaptureNone":68,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":505,"org.easymock.tests.UsageUnorderedTest.message":190,"org.easymock.tests.UsageVerifyTest.twoReturns":248,"org.easymock.tests.UsageVarargTest.varargByteAccepted":143,"org.easymock.tests2.ThreadingTest.testThreadSafe":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":369,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":185,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":416,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":292,"org.easymock.tests2.CaptureTest.testCapture_2617107":62,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":157,"org.easymock.tests2.UsageConstraintsTest.any":14,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":443,"org.easymock.tests2.StubTest.stub":76,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndThrowTest.longType":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":217,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":481,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":442,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":86,"org.easymock.tests2.SerializationTest.testClass":35,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":288,"org.easymock.tests.LimitationsTest.mockNativeMethod":189,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":409,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":244,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":378,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":530,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":89,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":506,"org.easymock.tests2.NameTest.nameForMocksControl":3,"org.easymock.tests2.MockedExceptionTest.testMockedException":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":380,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":359,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":211,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":400,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":163,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":256,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":38,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":277,"org.easymock.tests.MockingTest.testNicePartialClassMocking":255,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":43,"org.easymock.tests2.CaptureTest.testCaptureLast":67,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":376,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":245,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":529,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":12,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":25,"org.easymock.tests.MockingTest.testTwoMocks":489,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":526,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":402,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":167,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":99,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":28,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":509,"org.easymock.samples.ExampleTest.removeNonExistingDocument":403,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":188,"org.easymock.tests.UsageStrictMockTest.differentMethods":202,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":382,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":391,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":508,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":479,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":53,"org.easymock.tests2.MockBuilderTest.testCreateMockString":34,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":418,"org.easymock.tests.UsageExpectAndThrowTest.floatType":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":360,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":20,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":104,"org.easymock.tests.UsageVerifyTest.twoThrows":247,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":354,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":285,"org.easymock.samples.ExampleTest.voteAgainstRemoval":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":460,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":451,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":46,"org.easymock.tests.LimitationsTest.privateConstructor":449,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":501,"org.easymock.tests2.UsageConstraintsTest.testNotNull":27,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":128,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":78,"org.easymock.tests2.UsageTest.defaultResetToNice":98,"org.easymock.samples.ExampleTest.voteAgainstRemovals":114,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":461,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":240,"org.easymock.tests.UsageVarargTest.differentLength":302,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":377,"org.easymock.tests2.CallbackTest.callback":109,"org.easymock.tests2.UsageConstraintsTest.equals":332,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":340,"org.easymock.tests.UsageTest.openCallCountByLastCall":210,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":156,"org.easymock.tests.UsageCallCountTest.tooFewCalls":183,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":290,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":224,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":507,"org.easymock.tests.UsageThrowableTest.throwCheckedException":125,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":539,"org.easymock.tests.MockingTest.testStrictClassMocking":487,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":153,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":112,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":111,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":381,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":445,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":291,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":106,"org.easymock.tests2.CompareToTest.testGreateOrEqual":496,"org.easymock.tests.ObjectMethodsTest.testHashCode":414,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":325,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":528,"org.easymock.tests2.NameTest.nameForNiceMock":2,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":55,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":523,"org.easymock.tests2.DependencyTest.testInterfaceMocking":75,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":324,"org.easymock.samples.ExampleTest.addDocument":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":370,"org.easymock.tests2.DelegateToTest.testStubDelegate":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":374,"org.easymock.tests2.AnswerTest.stubAnswer":105,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":199,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":337,"org.easymock.tests.UsageVarargTest.varargLongAccepted":142,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndReturnTest.floatType":227,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":243,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":82,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":295,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":495,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":397,"org.easymock.tests.UsageThrowableTest.noUpperLimit":122,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":22,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":5,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":345,"org.easymock.tests2.SerializationTest.test":36,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":65,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":258,"org.easymock.tests2.UsageConstraintsTest.testSame":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":226,"org.easymock.samples.SupportTest.addDocument":299,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":401,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":513,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":441,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":361,"org.easymock.tests.GenericTest.testPackageScope":146,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":396,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":491,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":511,"org.easymock.tests2.NameTest.nameForMock":0,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":237,"org.easymock.tests2.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":338,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":341,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":173,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":412,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":151,"org.easymock.tests2.MockedExceptionTest.testRealException":81,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":315,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":462,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":85,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":447,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":155,"org.easymock.tests2.NameTest.nameForStrictMock":1,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":336,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":535,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":107,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":42,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":349,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":480,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":23,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":275,"org.easymock.tests2.UsageStrictMockTest.range":87,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":517,"org.easymock.tests2.UsageConstraintsTest.lessThan":29,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":393,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":457,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":263,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":329,"org.easymock.tests2.CaptureTest.testCaptureRightOne":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":365,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":504,"org.easymock.tests2.UsageConstraintsTest.testOr":11,"org.easymock.tests.UsageRangeTest.combination":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":39,"org.easymock.tests.UsageTest.wrongArguments":209,"org.easymock.tests2.MockBuilderTest.testWithConstructor":333,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":362,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":179,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":454,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":238,"org.easymock.tests.UsageVarargTest.varargShortAccepted":141,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":259,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":303,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":531,"org.easymock.tests2.UsageConstraintsTest.cmpTo":15,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":388,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":521,"org.easymock.tests2.CompareToTest.testLessThan":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":318,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":97,"org.easymock.tests2.CaptureTest.testCaptureFromStub":71,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":438,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":334,"org.easymock.tests.UsageTest.unexpectedCallWithArray":208,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":527,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":198,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":184,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":239,"org.easymock.tests2.CaptureTest.testCapture":499,"org.easymock.tests2.UsageConstraintsTest.constraints":6,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":200,"org.easymock.samples.ExampleTest.addAndChangeDocument":120,"org.easymock.tests.UsageStrictMockTest.testVerify":204,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":298,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":192,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests.LimitationsTest.abstractClass":448,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":257,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":268}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:747","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[0,1,2,3],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0,25,26,27,28,1,29,30,31,32,33,34,35,36,37,38,2,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,105,106,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[185,186],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[30],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[96],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[187,188,189,190,191,192,193,194,195,100,104,196],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[78,80,197,88,198,199,200,201,202,146,148,203,150,204,174,205,175,184],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[206,207],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[72],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Null:35","failures":[21,208,59,209],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[210,211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[212,213],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[64],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:129","sourceCode":"this.org.easymock.internal.Result = org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:102","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult","delegateTo":"value","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[5,9,10,13,18,30,47,53,55,214,215,79,86,216,89,217,218,219,94,220,221,222,223,224,225,226,147,149,227,228,229,230,153,205,175,231],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[193,232,105,105,106,106],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"this.org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[233,234,235,236,237],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[238],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[44,45,239,240],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[241],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[192,242,243,244,245,246,195],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[247,248,186,249,250,137,225,146,227,228,151,152,229,230,153],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[251],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[251,130,252,131,253],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[19,24,33],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[24],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:47","sourceCode":"java.lang.StringBuffer.append(\"and(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>)","type":"CtInvocationImpl"},"failures":[254],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[255,256],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":19,"org.easymock.tests2.UsageTest.argumentsOrdered":219,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":149,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":14,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":217,"org.easymock.tests2.StubTest.stubWithReturnValue":75,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":192,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":36,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":163,"org.easymock.tests2.SerializationTest.testAllMockedMethod":239,"org.easymock.tests.MockingTest.testPartialClassMocking":181,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":248,"org.easymock.samples.SupportTest.voteForRemovals":108,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":251,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":125,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":236,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":240,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":82,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":74,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":34,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":242,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":140,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":141,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":0,"org.easymock.tests2.UsageTest.wrongArguments":216,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":137,"org.easymock.samples.ConstructorCalledMockTest.testTax":105,"org.easymock.tests.UsageStrictMockTest.range":147,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":11,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":98,"org.easymock.tests2.UsageConstraintsTest.testNull":21,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":201,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":49,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":13,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":41,"org.easymock.tests2.CaptureTest.testPrimitive":64,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":139,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":229,"org.easymock.tests.UsageTest.moreThanOneArgument":150,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":48,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":249,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":178,"org.easymock.tests2.CaptureTest.testCaptureNone":67,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":145,"org.easymock.tests.UsageUnorderedTest.message":223,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":238,"org.easymock.tests.UsageVerifyTest.twoReturns":175,"org.easymock.tests2.ThreadingTest.testThreadSafe":56,"org.easymock.tests.UsageTest.argumentsOrdered":230,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":120,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":246,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":233,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":204,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":234,"org.easymock.tests2.UsageConstraintsTest.any":25,"org.easymock.tests2.StubTest.stub":186,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":124,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":215,"org.easymock.tests2.SerializationTest.testClass":44,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":97,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":85,"org.easymock.tests.LimitationsTest.mockNativeMethod":142,"org.easymock.tests2.AnswerTest.answer":95,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":131,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":173,"org.easymock.tests2.CaptureTest.testAnd":62,"org.easymock.tests2.UsageTest.strictResetToDefault":87,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":197,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":191,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":177,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":8,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":134,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":152,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":256,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":198,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":183,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":46,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":42,"org.easymock.tests.MockingTest.testNicePartialClassMocking":182,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":51,"org.easymock.tests2.CaptureTest.testCaptureLast":66,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":24,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":104,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":35,"org.easymock.tests2.CaptureTest.testCapture1_2446744":65,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":199,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":218,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":38,"org.easymock.tests.UsageThrowableTest.throwError":113,"org.easymock.tests.UsageStrictMockTest.differentMethods":148,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":58,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":180,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":30,"org.easymock.tests.UsageVerifyTest.twoThrows":205,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":83,"org.easymock.samples.PartialClassMockTest.testGetArea":107,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":121,"org.easymock.samples.ExampleTest.voteAgainstRemoval":111,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":143,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":144,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":54,"org.easymock.tests2.UsageTest.niceToStrict":89,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":188,"org.easymock.tests2.UsageConstraintsTest.testNotNull":37,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":237,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":119,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":40,"org.easymock.tests2.UsageTest.defaultResetToNice":92,"org.easymock.samples.ExampleTest.voteAgainstRemovals":109,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":169,"org.easymock.tests.UsageVarargTest.differentLength":221,"org.easymock.tests2.CallbackTest.callback":220,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":232,"org.easymock.tests.UsageTest.openCallCountByLastCall":151,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":247,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":200,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":9,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":16,"org.easymock.tests.UsageOverloadedMethodTest.overloading":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":1,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":101,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":127,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":28,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":68,"org.easymock.tests.UsageThrowableTest.throwCheckedException":116,"org.easymock.tests2.EasyMockSupportClassTest.testAll":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":252,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":250,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":241,"org.easymock.tests2.CaptureTest.testCaptureAll":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":103,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":100,"org.easymock.tests2.UsageConstraintsTest.testMatches":29,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":179,"org.easymock.tests2.CompareToTest.testGreateOrEqual":3,"org.easymock.samples.ExampleTest.voteForRemovals":112,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":245,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":60,"org.easymock.tests.UsageVarargTest.allKinds":209,"org.easymock.tests2.DependencyTest.testInterfaceMocking":73,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":174,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":244,"org.easymock.tests2.DelegateToTest.testStubDelegate":61,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":118,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":214,"org.easymock.tests2.AnswerTest.stubAnswer":96,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":146,"org.easymock.tests2.UsageConstraintsTest.greaterThan":31,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":133,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":55,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":203,"org.easymock.samples.ExampleTest.voteForRemoval":110,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":57,"org.easymock.tests.UsageExpectAndReturnTest.floatType":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":235,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":77,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":106,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":32,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":17,"org.easymock.tests2.SerializationTest.test":45,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":6,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":114,"org.easymock.tests2.UsageConstraintsTest.testSame":22,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":155,"org.easymock.tests2.CaptureTest.testCaptureFirst":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":7,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":94,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":231,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":161,"org.easymock.tests.GenericTest.testPackageScope":130,"org.easymock.tests2.UsageTest.moreThanOneArgument":88,"org.easymock.tests2.CaptureTest.testCapture2_2446744":71,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":59,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":43,"org.easymock.tests.GenericTest.testBridgedEquals":253,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":189,"org.easymock.tests.UsageExpectAndReturnTest.longType":157,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":4,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":211,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":166,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":208,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":126,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":194,"org.easymock.tests2.UsageStrictMockTest.differentMethods":80,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":176,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":202,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":135,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":207,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":78,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":138,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":99,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":210,"org.easymock.tests2.UsageConstraintsTest.testContains":27,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":76,"org.easymock.tests2.UsageConstraintsTest.testFind":20,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":129,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":255,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":50,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":224,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":33,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":52,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":39,"org.easymock.tests2.UsageStrictMockTest.range":79,"org.easymock.tests2.UsageConstraintsTest.lessThan":2,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":12,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":243,"org.easymock.tests.UsageTest.exactCallCountByLastCall":153,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":5,"org.easymock.tests2.CaptureTest.testCaptureRightOne":69,"org.easymock.tests2.UsageConstraintsTest.testOr":23,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":195,"org.easymock.tests.UsageRangeTest.combination":132,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":47,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":170,"org.easymock.tests.UsageTest.wrongArguments":228,"org.easymock.tests2.MockBuilderTest.testWithConstructor":190,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":159,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":167,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":213,"org.easymock.tests2.UsageConstraintsTest.cmpTo":26,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":185,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":206,"org.easymock.tests2.UsageTest.openCallCountByLastCall":90,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":91,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":15,"org.easymock.tests2.CaptureTest.testCaptureFromStub":70,"org.easymock.tests.UsageTest.unexpectedCallWithArray":227,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":222,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":115,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":193,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":168,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":53,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests.CapturesMatcherTest.test":254,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":84,"org.easymock.tests2.UsageTest.resumeIfFailure":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":122,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":123,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":184,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":10}}]

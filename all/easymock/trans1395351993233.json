[{"transplant":{"position":"org.easymock.internal.AndroidSupport:28","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:148","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","type":"CtThrowImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[46,46,47,47,48],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:280","failures":[49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[59,60,61,3,4,62,63,5,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,21,88,89,24,55,26,90,30,31,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,32,106,107,108,109,110,111,38,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,45,130],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"actualTypeArguments"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[131],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[132,133],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:197","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"failures":[134,135],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[136],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[137,138],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"failures":[46,47,139,140,141,142,143,144,145,146,147,148,149,150,151],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"captured"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[152,153,154,155,156,157],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"propertyFileName":"propertyFileName","properties":"properties","in":"in"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[141,142,143,144,146,147,158,159,160,161,162,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplantationPoint":{"position":"org.easymock.Capture:107","sourceCode":"break","type":"CtBreakImpl"},"failures":[81],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[163,164,165],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(this.java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[166,167],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"expected"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[46,47,140,141,168,142,143,144,147,158,159,160,169,170,171,172,173,161,162,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:57","sourceCode":"java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[174],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[80,175,176],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":161,"org.easymock.tests2.UsageConstraintsTest.testMatches":71,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":38,"org.easymock.tests2.UsageTest.argumentsOrdered":23,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":21,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":144,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":97,"org.easymock.tests.UsageVarargTest.allKinds":166,"org.easymock.tests2.DelegateToTest.testReturnException":51,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":150,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":109,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":137,"org.easymock.tests2.DelegateToTest.testStubDelegate":52,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":123,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":1,"org.easymock.tests2.AnswerTest.stubAnswer":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":115,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":54,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":164,"org.easymock.tests2.UsageConstraintsTest.greaterThan":72,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":106,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":9,"org.easymock.tests2.DelegateToTest.testWrongClass":53,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":85,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":104,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":131,"org.easymock.tests2.UsageTest.wrongArguments":19,"org.easymock.samples.ConstructorCalledMockTest.testTax":46,"org.easymock.tests.UsageStrictMockTest.range":30,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":140,"org.easymock.samples.ExampleTest.answerVsDelegate":49,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":134,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":47,"org.easymock.tests.UsageThrowableTest.noUpperLimit":130,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":73,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":18,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":169,"org.easymock.tests2.UsageConstraintsTest.testNull":65,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":122,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":79,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":145,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":13,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":132,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":129,"org.easymock.tests.UsageTest.moreThanOneArgument":112,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests2.UsageConstraintsTest.testSame":66,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":92,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":165,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":50,"org.easymock.tests2.CaptureTest.testCaptureNone":81,"org.easymock.tests2.CaptureTest.testCaptureFirst":83,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":153,"org.easymock.tests.UsageUnorderedTest.message":45,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":25,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":95,"org.easymock.tests2.CaptureTest.testCapture2_2446744":82,"org.easymock.tests2.UsageTest.moreThanOneArgument":87,"org.easymock.tests.UsageVerifyTest.twoReturns":34,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":16,"org.easymock.tests2.ThreadingTest.testThreadSafe":84,"org.easymock.tests.UsageTest.argumentsOrdered":42,"org.easymock.tests.GenericTest.testBridgedEquals":138,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":171,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":160,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":36,"org.easymock.tests2.CaptureTest.testCapture_2617107":77,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":99,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":147,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":126,"org.easymock.tests2.UsageStrictMockTest.differentMethods":4,"org.easymock.tests2.StubTest.stub":90,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":93,"org.easymock.tests.UsageCallCountTest.tooManyCalls":37,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":125,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":2,"org.easymock.tests2.SerializationTest.testClass":151,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":105,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":108,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":96,"org.easymock.tests2.UsageTest.strictResetToDefault":136,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":143,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":154,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":149,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":167,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":107,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":114,"org.easymock.tests2.UsageConstraintsTest.testContains":68,"org.easymock.tests2.DelegateToTest.testDelegate":55,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":117,"org.easymock.tests2.UsageConstraintsTest.testFind":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":110,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":168,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":60,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":27,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":61,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":174,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":162,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":14,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":75,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":91,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":124,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":120,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":172,"org.easymock.tests.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":74,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":157,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":10,"org.easymock.tests.UsageStrictMockTest.differentMethods":31,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":152,"org.easymock.tests2.UsageConstraintsTest.testOr":67,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":141,"org.easymock.tests.UsageRangeTest.combination":32,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":7,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":156,"org.easymock.tests.UsageTest.wrongArguments":40,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":56,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":86,"org.easymock.tests2.MockBuilderTest.testWithConstructor":142,"org.easymock.tests2.MockBuilderTest.testCreateMockString":17,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":6,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":100,"org.easymock.tests.UsageVerifyTest.twoThrows":33,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":133,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":148,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":158,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":35,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":163,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":116,"org.easymock.tests2.UsageTest.niceToStrict":20,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":159,"org.easymock.tests2.UsageTest.openCallCountByLastCall":88,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":89,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":173,"org.easymock.tests2.UsageTest.defaultResetToNice":135,"org.easymock.tests2.MockBuilderTest.testCreateMock":15,"org.easymock.tests.UsageVarargTest.differentLength":44,"org.easymock.tests2.CallbackTest.callback":26,"org.easymock.tests.UsageTest.unexpectedCallWithArray":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":139,"org.easymock.tests.UsageTest.openCallCountByLastCall":113,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":119,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":28,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":11,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":62,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":146,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":170,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":101,"org.easymock.tests2.CaptureTest.testCapture":176,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":29,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":8,"org.easymock.tests2.UsageConstraintsTest.constraints":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":118,"org.easymock.samples.ExampleTest.addAndChangeDocument":59,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":70,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":98,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":103,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":69,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":175,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":155,"org.easymock.tests2.UsageTest.resumeIfFailure":24,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":94,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":12,"org.easymock.tests2.CaptureTest.testCaptureAll":76}}]

[{"position":"org.easymock.internal.MocksControl:136","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,105,106,106,107,108,109],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[97],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[110,111,112,113,114,115,116,117,118,119,120,121],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[122,123,124,125,126],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[127],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"value","capture":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[128],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[14,24,60,105,106,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:160","sourceCode":"if (boolean) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[129,130,131,132,133,134,135,125,126],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[136,137,138,122,139,140,141,142,143,144,145,123,146,147,125,126],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[148],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EndsWith:40","failures":[149],"status":-1,"binaryOperator":"((\"endsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockInvocationHandler:37","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1988","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1397","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[150],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:633","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[33,151,34,152],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[153,131,122,154,155,156,157,158,159,160,161,162,140,163,134,123,164,165,166,147,167,125,126],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[168,169],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"f","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"mock"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[90,91,95],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[129,170,171,172,135,125],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:327","sourceCode":"return false","type":"CtReturnImpl"},"failures":[173,174,175,176],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:274","failures":[177,178,179,132,180,181,182,183,184],"status":-1,"binaryOperator":"org.easymock.IAnswer<?> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[185,186],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,150,204,205,206,207,208,209,210,211,212,213,129,214,153,215,216,170,217,218,130,0,1,2,3,219,4,5,220,221,131,122,154,11,14,24,30,222,132,181,33,151,36,39,41,42,45,47,223,185,186,224,225,49,50,226,51,52,53,55,59,60,61,66,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,127,73,249,250,251,78,79,80,252,253,254,255,256,171,163,257,172,133,134,123,164,258,259,260,98,100,261,262,263,264,265,266,267,268,269,135,270,271,272,273,274,167,126,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,107,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[33,151,34,152],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[33,151,34],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[168],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[300],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:191","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[301,302],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[33,151,34,152],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[196],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:183","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[33,151,34,152],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:159","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[33,151,34,152],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[303,304,187,305,306,307,177,178,300,179,188,189,190,191,308,192,193,194,195,196,197,309,198,199,200,201,202,203,150,204,205,206,207,208,310,209,210,211,212,311,110,111,312,112,213,313,113,114,314,315,115,129,214,153,136,215,316,216,170,217,137,138,218,130,0,1,2,3,317,219,4,5,318,6,7,220,221,319,320,131,321,122,154,322,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,323,324,116,117,325,118,222,326,119,120,327,328,121,132,329,330,180,181,182,331,332,333,334,335,33,151,34,35,36,37,38,39,40,41,42,336,43,44,45,46,337,338,339,340,47,48,341,342,343,344,345,346,223,347,185,186,224,225,49,50,226,51,52,53,54,348,55,56,57,58,59,60,61,62,63,64,65,66,349,227,228,229,230,231,232,233,234,235,236,237,238,350,67,68,69,70,351,352,353,239,240,241,354,242,243,355,356,244,245,246,247,357,248,127,71,72,73,74,358,359,360,361,362,363,249,250,251,75,76,77,78,79,364,80,365,366,81,252,253,254,255,256,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,171,163,141,142,257,172,143,144,133,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,301,173,174,425,426,145,134,427,123,164,428,429,82,83,84,85,86,87,88,89,430,431,432,433,434,435,436,128,258,259,90,91,92,93,94,95,96,260,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,97,98,99,100,101,165,166,462,261,262,263,264,183,463,464,465,466,265,146,102,467,468,469,470,471,472,473,474,475,476,477,478,266,267,479,480,268,147,103,481,482,483,484,104,485,486,269,487,135,270,271,272,273,274,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,167,125,126,302,175,176,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,295,184,296,297,518,298,519,520,105,106,521,107,522,523,299,108,109],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[156,524,525,161,141,145],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,11,14,24,30,526,33,34,35,527,36,37,39,40,41,42,44,45,528,46,47,49,50,51,52,53,54,55,58,59,60,61,66,73,77,78,79,80,83,98,99,100,102,103,104,105,105,106,106,107,108,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:193","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":191,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":171,"org.easymock.tests2.UsageTest.argumentsOrdered":138,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":448,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":316,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":521,"org.easymock.tests2.DelegateToTest.testReturnException":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":394,"org.easymock.tests.MockingTest.testPartialClassMocking":78,"org.easymock.tests.MockClassControlTest.testToString":84,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":331,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":489,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":457,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":400,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":14,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":221,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":392,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":197,"org.easymock.tests2.UsageTest.wrongArguments":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":266,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":121,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":369,"org.easymock.samples.ExampleTest.answerVsDelegate":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":104,"org.easymock.tests2.UsageConstraintsTest.testNull":193,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":366,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":51,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":89,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":236,"org.easymock.tests2.CaptureTest.testPrimitive":242,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":268,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":419,"org.easymock.tests.UsageTest.moreThanOneArgument":163,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":432,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":513,"org.easymock.tests.UsageTest.argumentsOrdered":144,"org.easymock.tests.UsageVarargTest.varargIntAccepted":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":453,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":252,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":35,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":69,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":315,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":40,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":440,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":256,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":376,"org.easymock.tests.ReplayStateInvalidUsageTest.times":475,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":222,"org.easymock.tests2.DependencyTest.testClassMocking":6,"org.easymock.tests2.AnswerTest.answer":132,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":455,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":340,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":482,"org.easymock.tests2.CaptureTest.testAnd":240,"org.easymock.tests2.UsageTest.strictResetToDefault":214,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":58,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":231,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":263,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":517,"org.easymock.tests2.DelegateToTest.testDelegate":307,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":375,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":415,"org.easymock.tests.LimitationsTest.mockFinalMethod":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":397,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":424,"org.easymock.tests2.DependencyTest.testClassMockingSupport":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":165,"org.easymock.tests2.CaptureTest.testCapture1_2446744":243,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":413,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":338,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":469,"org.easymock.tests.UsageThrowableTest.throwError":269,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":484,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":115,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":32,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":379,"org.easymock.samples.PartialClassMockTest.testGetArea":107,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":470,"org.easymock.tests.MockingTest.testInterfaceMocking":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":253,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":436,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":19,"org.easymock.tests2.UsageTest.niceToStrict":215,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":363,"org.easymock.tests2.ThreadingTest.testChangeDefault":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":438,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":39,"org.easymock.tests2.MockBuilderTest.testCreateMock":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":27,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":120,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":409,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":156,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":232,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":481,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":176,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":504,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":367,"org.easymock.tests.UsageOverloadedMethodTest.overloading":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":23,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":465,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":202,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":249,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":286,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":168,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":201,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":246,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":494,"org.easymock.tests2.EasyMockSupportClassTest.testAll":11,"org.easymock.tests.MockClassControlTest.testEquals":88,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":417,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":422,"org.easymock.tests2.CaptureTest.testCaptureAll":241,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":339,"org.easymock.tests.MockNameTest.defaultName":399,"org.easymock.tests2.UsageConstraintsTest.testMatches":203,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":467,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":433,"org.easymock.samples.ExampleTest.voteForRemovals":298,"org.easymock.tests.UsageVarargTest.allKinds":502,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":167,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":423,"org.easymock.samples.BasicClassMockTest.testPrintContent":109,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":273,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":319,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":398,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":113,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":306,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":148,"org.easymock.tests2.UsageConstraintsTest.greaterThan":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":12,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":262,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":61,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":380,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":96,"org.easymock.samples.ExampleTest.voteForRemoval":296,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":62,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":485,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":54,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":372,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":102,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":445,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":229,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":9,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":393,"org.easymock.tests2.CaptureTest.testCaptureFirst":127,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":444,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":230,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":130,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":282,"org.easymock.tests2.UsageTest.moreThanOneArgument":153,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":224,"org.easymock.tests2.CaptureTest.testCapture2_2446744":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":456,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":45,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":501,"org.easymock.tests.GenericTest.testBridgedEquals":101,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":511,"org.easymock.tests.UsageExpectAndReturnTest.longType":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":420,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":227,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":528,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":418,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":503,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":310,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":416,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":430,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":173,"org.easymock.tests.UsageCallCountTest.tooManyCalls":512,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":506,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":28,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":283,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":405,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":272,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":1,"org.easymock.tests.MockingTest.testNiceClassMocking":81,"org.easymock.tests.MockingTest.testClassMocking":76,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":527,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":505,"org.easymock.tests2.UsageConstraintsTest.testContains":200,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":66,"org.easymock.tests2.UsageConstraintsTest.testFind":192,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":251,"org.easymock.tests.MockTypeTest.fromEasyMockClass":483,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":425,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":179,"org.easymock.tests.UsageExpectAndReturnTest.object":285,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":55,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":327,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":235,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":496,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":361,"org.easymock.tests.UsageTest.exactCallCountByLastCall":133,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":443,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":514,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":488,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":48,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":491,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":291,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":464,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":110,"org.easymock.tests.MockClassControlTest.testHashCode":87,"org.easymock.tests2.EasyMockSupportTest.testVerify":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":21,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":515,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":183,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":175,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":139,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":337,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":323,"org.easymock.tests.UsageVarargTest.varargCharAccepted":495,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":461,"org.easymock.tests2.UsageTest.openCallCountByLastCall":216,"org.easymock.tests.DefaultClassInstantiatorTest.object":90,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":238,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":302,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":359,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":140,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":407,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":270,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":325,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":59,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":86,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":378,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":406,"org.easymock.tests.ReplayStateInvalidCallsTest.times":384,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":292,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":301,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":385,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":85,"org.easymock.tests2.UsageTest.resumeIfFailure":218,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":103,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":396,"org.easymock.tests2.StubTest.stubWithReturnValue":239,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":284,"org.easymock.tests2.SerializationTest.testAllMockedMethod":34,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":454,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":524,"org.easymock.samples.SupportTest.voteForRemovals":299,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":312,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":412,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":152,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":460,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":329,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":490,"org.easymock.tests.UsageExpectAndThrowTest.object":410,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":207,"org.easymock.tests2.DelegateToTest.testWrongClass":305,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":382,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.tests.UsageStrictMockTest.range":123,"org.easymock.samples.ConstructorCalledMockTest.testTax":105,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":351,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":234,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":0,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":411,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":41,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":477,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":8,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":368,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":525,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":374,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":128,"org.easymock.tests2.CaptureTest.testCaptureNone":245,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":342,"org.easymock.tests.UsageUnorderedTest.message":147,"org.easymock.tests2.ConstraintsToStringTest.endsWithToString":149,"org.easymock.tests.UsageVerifyTest.twoReturns":126,"org.easymock.tests.UsageVarargTest.varargByteAccepted":500,"org.easymock.tests2.ThreadingTest.testThreadSafe":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":25,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":509,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":108,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":362,"org.easymock.tests2.CaptureTest.testCapture_2617107":354,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":462,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":458,"org.easymock.tests2.UsageConstraintsTest.any":198,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":474,"org.easymock.tests2.StubTest.stub":353,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndThrowTest.longType":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":395,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":94,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":473,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":321,"org.easymock.tests2.SerializationTest.testClass":33,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":213,"org.easymock.tests.LimitationsTest.mockNativeMethod":73,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":294,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":117,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":390,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":322,"org.easymock.tests2.NameTest.nameForMocksControl":335,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":343,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":118,"org.easymock.tests2.MockedExceptionTest.testMockedException":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":13,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":172,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":404,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":80,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":300,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":49,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":42,"org.easymock.tests.MockingTest.testNicePartialClassMocking":79,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":53,"org.easymock.tests2.CaptureTest.testCaptureLast":244,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":324,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":166,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":389,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":5,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":196,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":208,"org.easymock.tests.MockingTest.testTwoMocks":77,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":386,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":318,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":408,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":137,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":211,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":346,"org.easymock.samples.ExampleTest.removeNonExistingDocument":519,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":471,"org.easymock.tests.UsageStrictMockTest.differentMethods":164,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":119,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":111,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":92,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":345,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":186,"org.easymock.tests2.ConstraintsToStringTest.andToString":159,"org.easymock.tests2.MockBuilderTest.testCreateMockString":46,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":82,"org.easymock.tests.UsageExpectAndThrowTest.floatType":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":15,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":150,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":10,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":180,"org.easymock.tests.UsageVerifyTest.twoThrows":125,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":24,"org.easymock.samples.ExampleTest.voteAgainstRemoval":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":449,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":435,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":60,"org.easymock.tests.LimitationsTest.privateConstructor":72,"org.easymock.tests2.UsageConstraintsTest.testNotNull":210,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":64,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":274,"org.easymock.tests2.UsageTest.defaultResetToNice":217,"org.easymock.samples.ExampleTest.voteAgainstRemovals":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":450,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":290,"org.easymock.tests.UsageVarargTest.differentLength":497,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":116,"org.easymock.tests2.CallbackTest.callback":177,"org.easymock.tests2.UsageConstraintsTest.equals":308,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":56,"org.easymock.tests.UsageTest.openCallCountByLastCall":257,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":188,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":479,"org.easymock.tests.UsageCallCountTest.tooFewCalls":507,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":3,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":370,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":344,"org.easymock.tests.UsageThrowableTest.throwCheckedException":271,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":161,"org.easymock.tests.MockingTest.testStrictClassMocking":75,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":437,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":4,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":2,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":326,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":476,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":219,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":182,"org.easymock.tests.ObjectMethodsTest.testHashCode":360,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":388,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":225,"org.easymock.tests2.NameTest.nameForNiceMock":334,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":383,"org.easymock.tests2.DependencyTest.testInterfaceMocking":220,"org.easymock.samples.ExampleTest.addDocument":518,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":26,"org.easymock.tests2.DelegateToTest.testStubDelegate":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":31,"org.easymock.tests2.AnswerTest.stubAnswer":181,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":134,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":336,"org.easymock.tests.UsageVarargTest.varargLongAccepted":499,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":447,"org.easymock.tests.UsageExpectAndReturnTest.floatType":277,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":293,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":47,"org.easymock.tests2.ConstraintsToStringTest.orToString":155,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":106,"org.easymock.tests.UsageThrowableTest.noUpperLimit":487,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":466,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":205,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":314,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":189,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":67,"org.easymock.tests2.SerializationTest.test":151,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":355,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":169,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":91,"org.easymock.tests2.UsageConstraintsTest.testSame":194,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":276,"org.easymock.samples.SupportTest.addDocument":523,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":317,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":373,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":16,"org.easymock.tests.GenericTest.testPackageScope":98,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":516,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":442,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":114,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":365,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":371,"org.easymock.tests2.NameTest.nameForMock":332,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":287,"org.easymock.tests2.UsageStrictMockTest.differentMethods":154,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":57,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":414,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":264,"org.easymock.tests2.MockedExceptionTest.testRealException":349,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":486,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":352,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":162,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":451,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":131,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":478,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":267,"org.easymock.tests2.NameTest.nameForStrictMock":333,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":38,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":52,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":70,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":93,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":206,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":36,"org.easymock.tests2.UsageStrictMockTest.range":122,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":377,"org.easymock.tests2.UsageConstraintsTest.lessThan":212,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":446,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":20,"org.easymock.tests2.CaptureTest.testCaptureRightOne":247,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":341,"org.easymock.tests2.UsageConstraintsTest.testOr":195,"org.easymock.tests.UsageRangeTest.combination":261,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":50,"org.easymock.tests.UsageTest.wrongArguments":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":17,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":83,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":439,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":288,"org.easymock.tests.UsageVarargTest.varargShortAccepted":498,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":95,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":510,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":391,"org.easymock.tests2.UsageConstraintsTest.cmpTo":199,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":330,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":441,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":170,"org.easymock.tests2.CaptureTest.testCaptureFromStub":357,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":468,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":37,"org.easymock.tests.UsageTest.unexpectedCallWithArray":141,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":387,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":145,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":508,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":289,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":427,"org.easymock.tests2.UsageConstraintsTest.constraints":190,"org.easymock.samples.ExampleTest.addAndChangeDocument":520,"org.easymock.tests2.ConstraintsToStringTest.notToString":157,"org.easymock.tests.UsageStrictMockTest.testVerify":429,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":522,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":426,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":421,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":356,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":526,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":254,"org.easymock.tests.LimitationsTest.abstractClass":71,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":281,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":255,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":265,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":492,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":124,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":233}}]

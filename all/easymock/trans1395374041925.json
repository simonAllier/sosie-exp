[{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[1,2,3,4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[20,21,22,23],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,25,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,136,137,137,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,25,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,136,137,137,138],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[139],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[140],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[164,165,166,167],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:110","sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","type":"CtReturnImpl"},"failures":[142,143,69,145,146,147,168,153,155,156,158,159,169,170,171,161,162,163,172],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[173,174,175,176,144,145,146,147,177,178,179,153,160,171,161,162,163],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:67","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[180,181],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[182],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[189],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[70,190,71,191],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[132],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":180,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":78,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":76,"org.easymock.tests2.UsageTest.argumentsOrdered":147,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":22,"org.easymock.tests2.NameTest.nameForNiceMock":150,"org.easymock.tests2.SerializationTest.testAllMockedMethod":71,"org.easymock.tests2.DelegateToTest.testReturnException":183,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":157,"org.easymock.tests.MockingTest.testPartialClassMocking":116,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":175,"org.easymock.samples.BasicClassMockTest.testPrintContent":135,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":129,"org.easymock.tests.MockClassControlTest.testToString":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":46,"org.easymock.tests2.DelegateToTest.testStubDelegate":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":38,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":191,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":34,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":154,"org.easymock.tests2.UsageConstraintsTest.greaterThan":21,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":32,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":96,"org.easymock.tests2.DelegateToTest.testWrongClass":185,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":128,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":97,"org.easymock.tests2.UsageTest.wrongArguments":145,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":0,"org.easymock.tests.UsageStrictMockTest.range":155,"org.easymock.samples.ConstructorCalledMockTest.testTax":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":72,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":90,"org.easymock.samples.ExampleTest.answerVsDelegate":188,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":137,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":121,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":74,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":112,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":26,"org.easymock.tests2.SerializationTest.test":190,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":10,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":87,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":107,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":63,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":65,"org.easymock.tests2.CaptureTest.testPrimitive":8,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":123,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":162,"org.easymock.tests.UsageTest.moreThanOneArgument":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":28,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":29,"org.easymock.tests2.CaptureTest.testCaptureNone":13,"org.easymock.tests2.CaptureTest.testCaptureFirst":18,"org.easymock.tests.UsageUnorderedTest.message":172,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":169,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":36,"org.easymock.tests.GenericTest.testPackageScope":130,"org.easymock.tests2.UsageTest.moreThanOneArgument":144,"org.easymock.tests2.CaptureTest.testCapture2_2446744":17,"org.easymock.tests.UsageVerifyTest.twoReturns":159,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":67,"org.easymock.tests.UsageTest.argumentsOrdered":163,"org.easymock.tests.GenericTest.testBridgedEquals":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":45,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":166,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":134,"org.easymock.tests2.NameTest.nameForMock":148,"org.easymock.tests2.CaptureTest.testCapture_2617107":7,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":176,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":56,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":68,"org.easymock.tests2.UsageStrictMockTest.differentMethods":143,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":62,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":4,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":3,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":25,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":126,"org.easymock.tests2.SerializationTest.testClass":70,"org.easymock.tests.LimitationsTest.mockNativeMethod":110,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":139,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":132,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":48,"org.easymock.tests2.CaptureTest.testAnd":5,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":83,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":93,"org.easymock.tests2.NameTest.nameForMocksControl":151,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":141,"org.easymock.tests2.MockedExceptionTest.testMockedException":54,"org.easymock.tests.MockingTest.testNiceClassMocking":119,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":75,"org.easymock.tests.MockingTest.testClassMocking":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":33,"org.easymock.tests2.NameTest.nameForStrictMock":149,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":57,"org.easymock.tests2.DelegateToTest.testDelegate":186,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":118,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":55,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":85,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":64,"org.easymock.tests.MockingTest.testNicePartialClassMocking":117,"org.easymock.tests2.UsageConstraintsTest.testFind":181,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":89,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":60,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":164,"org.easymock.tests.LimitationsTest.mockFinalMethod":111,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":88,"org.easymock.tests2.CaptureTest.testCaptureLast":12,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":27,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":125,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":79,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":91,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":58,"org.easymock.tests2.UsageStrictMockTest.range":142,"org.easymock.tests.MockingTest.testTwoMocks":115,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":81,"org.easymock.tests2.CaptureTest.testCapture1_2446744":9,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":167,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":146,"org.easymock.tests.UsageStrictMockTest.differentMethods":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":40,"org.easymock.tests2.CaptureTest.testCaptureRightOne":15,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":140,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":73,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":86,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":187,"org.easymock.tests.UsageTest.wrongArguments":161,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":124,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":170,"org.easymock.tests2.MockBuilderTest.testCreateMockString":69,"org.easymock.tests.MockClassControlTest.testHashCode":105,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":100,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":37,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":41,"org.easymock.tests.UsageVerifyTest.twoThrows":158,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":127,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":1,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":44,"org.easymock.samples.PartialClassMockTest.testGetArea":138,"org.easymock.tests2.CompareToTest.testLessOrEqual":23,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":95,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":39,"org.easymock.tests.LimitationsTest.privateConstructor":109,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":189,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":53,"org.easymock.tests.DefaultClassInstantiatorTest.object":122,"org.easymock.tests2.CaptureTest.testCaptureFromStub":16,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":61,"org.easymock.tests2.UsageTest.defaultResetToNice":24,"org.easymock.tests2.MockBuilderTest.testCreateMock":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":47,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":59,"org.easymock.tests.UsageTest.unexpectedCallWithArray":171,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":92,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":42,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":153,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":84,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":20,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":2,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":165,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":104,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":49,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":94,"org.easymock.tests.CapturesMatcherTest.test":19,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":77,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":182,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":14,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":50,"org.easymock.tests.MockClassControlTest.testEquals":106,"org.easymock.tests2.EasyMockSupportClassTest.testAll":31,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":11,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":82,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":131,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":120,"org.easymock.tests.LimitationsTest.abstractClass":108,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":178,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":174,"org.easymock.tests.MockingTest.testStrictClassMocking":113,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":80,"org.easymock.tests2.CaptureTest.testCaptureAll":6}}]

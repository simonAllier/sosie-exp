[{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"expected","myArgument":"actual"}},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[1,2,3,4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,45,46,46,47,48,49,50,51,52,53,54,1,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,2,72,73,74,75,76,77,78,79,80,81,82,83,3,84,85,86,13,87,88,14,89],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[90],"status":-1,"binaryOperator":"(\"eq(\" + (java.lang.Number))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[5,91,7,8,9,92,12,86,13,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:36","sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[94],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.RecordState:102","sourceCode":"this.org.easymock.internal.Result = org.easymock.internal.Result.createReturnResult(java.lang.Object)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[95,96,97,98,99],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult","value":"delegateTo","this":"lastResult"}},{"transplant":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[78],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[100],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:1878","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[15,101,102,16,103,104,105,106,107,108,109,110,111,112,113,114,115,18,116,19,117,118,119,120,121,122,23,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,50,51,52,55,56,57,58,60,62,63,65,66,68,75,78,80,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"failures":[173,174],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:51","sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","type":"CtClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[175,176,177,178,179,180,181,182,183,184,185,186,187,188],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[105,106,107,108,110,189,190,111,112,113,191,192,193,194,195,114,196,197,198,199,173,200,174,201,202,203,115,204,205,206,207,208,209,210,211,212,213,117,95,214,118,119,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,123,124,125,242,243,127,128,244,245,246,26,129,130,131,132,247,248,249,250,251,252,253,254,255,256,29,30,31,32,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,134,284,135,136,137,138,139,140,285,286,287,288,289,290,291,292,293,294,295,296,297,298,42,299,43,94,300,301,44,302,303,45,45,46,46,304,96,305,306,307,308,309,310,311,47,312,313,141,314,142,143,144,145,315,316,317,146,147,148,149,51,54,55,56,58,61,62,63,64,318,65,66,67,68,319,69,70,71,72,76,77,78,150,83,3,84,85,152,100,320,321,322,323,324,86,325,326,327,328,329,4,87,88,330,331,154,332,155,333,156,157,334,158,159,335,336,337,160,161,162,163,164,338,97,339,98,340,99,341,342,165,343,166,167,168,169,170,344,345,171,346,347,348,349,350,351,352,353,354,355,0,356,357,172,358,359,360,361,362,363,364,365,366,367,368,14,369,89,176,177,178,179,180,181,182,183,370,184,185,186,187,188,371,372],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[26,42,43,44,45,45,46,46,47,373,50,51,52,54,55,56,58,59,60,2,76,77,81,374,82,375,376,83,3,84,85,86,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[144,74],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockStatement:42","sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[312,313,150,152],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[207,208,209,210,211,212,215,216,217,377,378,342],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[78],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:187","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"expected"}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:111","sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","type":"CtForImpl"},"failures":[34,35,36,37,39,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":346,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":107,"org.easymock.tests2.UsageTest.argumentsOrdered":147,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":335,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":210,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":153,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":145,"org.easymock.tests2.StubTest.stubWithReturnValue":342,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":5,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":363,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":313,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":231,"org.easymock.tests2.SerializationTest.testAllMockedMethod":89,"org.easymock.tests2.DelegateToTest.testReturnException":97,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":244,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":208,"org.easymock.tests.MockingTest.testPartialClassMocking":30,"org.easymock.samples.SupportTest.voteForRemovals":303,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":41,"org.easymock.tests.MockClassControlTest.testToString":18,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":218,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":276,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":264,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":245,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":3,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":320,"org.easymock.tests.UsageExpectAndThrowTest.object":274,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":368,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":361,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests2.DelegateToTest.testWrongClass":98,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":247,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":248,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":352,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":200,"org.easymock.tests2.UsageTest.wrongArguments":143,"org.easymock.samples.ConstructorCalledMockTest.testTax":45,"org.easymock.tests.UsageStrictMockTest.range":138,"org.easymock.samples.ExampleTest.answerVsDelegate":96,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":334,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":61,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":16,"org.easymock.tests2.UsageConstraintsTest.testNull":348,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":275,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":55,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":22,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":159,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":81,"org.easymock.tests2.CaptureTest.testPrimitive":179,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":203,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":378,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":283,"org.easymock.tests.UsageTest.moreThanOneArgument":108,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":111,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":319,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":251,"org.easymock.tests2.CaptureTest.testCaptureNone":370,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":301,"org.easymock.tests.UsageUnorderedTest.message":132,"org.easymock.tests.UsageVerifyTest.twoReturns":131,"org.easymock.tests.UsageVarargTest.varargByteAccepted":198,"org.easymock.tests2.ThreadingTest.testThreadSafe":325,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":259,"org.easymock.tests.UsageTest.argumentsOrdered":112,"org.easymock.tests.UsageVarargTest.varargIntAccepted":193,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":243,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":310,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":294,"org.easymock.tests2.CaptureTest.testCapture_2617107":178,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":202,"org.easymock.tests2.UsageConstraintsTest.any":353,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":1,"org.easymock.tests2.StubTest.stub":341,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":298,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":217,"org.easymock.tests.UsageExpectAndThrowTest.longType":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":209,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":38,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":167,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests.LimitationsTest.mockNativeMethod":26,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":150,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":241,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":43,"org.easymock.tests2.AnswerTest.answer":100,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":375,"org.easymock.tests2.CaptureTest.testAnd":176,"org.easymock.tests2.UsageTest.strictResetToDefault":314,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":75,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":170,"org.easymock.tests2.NameTest.nameForMocksControl":164,"org.easymock.tests2.MockedExceptionTest.testMockedException":87,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":250,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":333,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":205,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":263,"org.easymock.tests2.DelegateToTest.testDelegate":99,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":268,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":32,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":67,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":56,"org.easymock.tests.MockingTest.testNicePartialClassMocking":31,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":279,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":6,"org.easymock.tests2.CaptureTest.testCaptureLast":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":211,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":106,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":351,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":362,"org.easymock.tests.MockingTest.testTwoMocks":29,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":105,"org.easymock.tests2.CaptureTest.testCapture1_2446744":180,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":222,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":277,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":272,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":146,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":365,"org.easymock.tests.UsageThrowableTest.throwError":286,"org.easymock.tests.UsageStrictMockTest.differentMethods":139,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":102,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":36,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":327,"org.easymock.tests2.MockBuilderTest.testCreateMockString":60,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":17,"org.easymock.tests.UsageExpectAndThrowTest.floatType":266,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":253,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":172,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":322,"org.easymock.tests.UsageVerifyTest.twoThrows":130,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":84,"org.easymock.samples.PartialClassMockTest.testGetArea":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":295,"org.easymock.samples.ExampleTest.voteAgainstRemoval":306,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":300,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":94,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":77,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":265,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":23,"org.easymock.tests2.UsageTest.niceToStrict":144,"org.easymock.tests.LimitationsTest.privateConstructor":25,"org.easymock.tests2.UsageConstraintsTest.testNotNull":364,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":293,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":54,"org.easymock.tests2.UsageTest.defaultResetToNice":317,"org.easymock.tests2.MockBuilderTest.testCreateMock":57,"org.easymock.samples.ExampleTest.voteAgainstRemovals":304,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":237,"org.easymock.tests.UsageVarargTest.differentLength":114,"org.easymock.tests2.CallbackTest.callback":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":73,"org.easymock.tests.UsageTest.openCallCountByLastCall":189,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":273,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":156,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":344,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":221,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":123,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":201,"org.easymock.tests.UsageCallCountTest.tooFewCalls":125,"org.easymock.tests.UsageOverloadedMethodTest.overloading":255,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":356,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":214,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":233,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":64,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":184,"org.easymock.tests.UsageThrowableTest.throwCheckedException":290,"org.easymock.tests2.EasyMockSupportClassTest.testAll":83,"org.easymock.tests.MockClassControlTest.testEquals":21,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":299,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":281,"org.easymock.tests.MockingTest.testStrictClassMocking":27,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":374,"org.easymock.tests2.CaptureTest.testCaptureAll":177,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":258,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":65,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":63,"org.easymock.tests.MockNameTest.defaultName":133,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":151,"org.easymock.tests2.UsageConstraintsTest.testMatches":357,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":318,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":324,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":252,"org.easymock.samples.ExampleTest.voteForRemovals":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":10,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":329,"org.easymock.tests2.NameTest.nameForNiceMock":163,"org.easymock.tests.UsageVarargTest.allKinds":173,"org.easymock.tests2.DependencyTest.testInterfaceMocking":367,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.samples.BasicClassMockTest.testPrintContent":311,"org.easymock.samples.ExampleTest.addDocument":307,"org.easymock.tests2.DelegateToTest.testStubDelegate":339,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":292,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":165,"org.easymock.tests2.AnswerTest.stubAnswer":323,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":340,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":212,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":136,"org.easymock.tests2.UsageConstraintsTest.greaterThan":358,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":12,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":204,"org.easymock.tests.UsageVarargTest.varargLongAccepted":197,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":78,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":140,"org.easymock.samples.ExampleTest.voteForRemoval":305,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":40,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":326,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":79,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":240,"org.easymock.tests.UsageExpectAndReturnTest.floatType":224,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":59,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":103,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":2,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":46,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":359,"org.easymock.tests.UsageThrowableTest.noUpperLimit":287,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":118,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":345,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":44,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":141,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":48,"org.easymock.tests2.SerializationTest.test":369,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":181,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":377,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":332,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":35,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":288,"org.easymock.tests2.UsageConstraintsTest.testSame":349,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":223,"org.easymock.samples.SupportTest.addDocument":302,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":207,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":338,"org.easymock.tests2.CaptureTest.testCaptureFirst":188,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":155,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":149,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":229,"org.easymock.tests.GenericTest.testPackageScope":42,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":328,"org.easymock.tests2.UsageTest.moreThanOneArgument":142,"org.easymock.tests2.CaptureTest.testCapture2_2446744":187,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":262,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":58,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":199,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":127,"org.easymock.tests2.NameTest.nameForMock":161,"org.easymock.tests.UsageExpectAndReturnTest.longType":225,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":331,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":282,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":246,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":280,"org.easymock.tests2.UsageStrictMockTest.differentMethods":169,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":249,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":216,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":74,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":226,"org.easymock.tests.UsageCallCountTest.tooManyCalls":128,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":278,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":206,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":124,"org.easymock.tests2.MockedExceptionTest.testRealException":330,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":230,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":104,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":269,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":291,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":174,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":62,"org.easymock.tests.MockingTest.testNiceClassMocking":33,"org.easymock.tests.MockingTest.testClassMocking":28,"org.easymock.tests2.UsageConstraintsTest.testContains":355,"org.easymock.tests2.NameTest.nameForStrictMock":162,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":88,"org.easymock.tests2.UsageConstraintsTest.testFind":347,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":256,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":371,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":70,"org.easymock.tests.MockTypeTest.fromEasyMockClass":101,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":372,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":134,"org.easymock.tests.UsageExpectAndReturnTest.object":232,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":49,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":360,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":37,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":72,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":51,"org.easymock.tests2.UsageStrictMockTest.range":168,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":90,"org.easymock.tests2.UsageConstraintsTest.lessThan":366,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":158,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests.UsageTest.exactCallCountByLastCall":113,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":373,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":257,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":92,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":154,"org.easymock.tests2.CaptureTest.testCaptureRightOne":185,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":260,"org.easymock.tests2.UsageConstraintsTest.testOr":350,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":13,"org.easymock.tests.UsageRangeTest.combination":115,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":68,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":191,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":95,"org.easymock.tests.UsageTest.wrongArguments":110,"org.easymock.tests.MockClassControlTest.testHashCode":20,"org.easymock.tests2.EasyMockSupportTest.testVerify":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":227,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":235,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":220,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":213,"org.easymock.tests.UsageVarargTest.varargShortAccepted":196,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":39,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":126,"org.easymock.tests2.UsageConstraintsTest.cmpTo":354,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":93,"org.easymock.tests.UsageVarargTest.varargCharAccepted":194,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":321,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":343,"org.easymock.tests2.UsageTest.openCallCountByLastCall":315,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":316,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":336,"org.easymock.tests.DefaultClassInstantiatorTest.object":34,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":219,"org.easymock.tests2.CaptureTest.testCaptureFromStub":186,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":52,"org.easymock.tests.UsageTest.unexpectedCallWithArray":109,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":271,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":135,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":242,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":236,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":76,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":19,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":137,"org.easymock.tests2.UsageConstraintsTest.constraints":171,"org.easymock.samples.ExampleTest.addAndChangeDocument":309,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":270,"org.easymock.tests.CapturesMatcherTest.test":175,"org.easymock.tests.UsageStrictMockTest.testVerify":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":239,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":215,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":312,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":85,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":116,"org.easymock.tests2.UsageTest.resumeIfFailure":148,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":182,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":296,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":228,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":15,"org.easymock.tests.LimitationsTest.abstractClass":24,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":297,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":119,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":192,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":157}}]

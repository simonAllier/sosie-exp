[{"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[12,13,14,15],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[26,27,21,28,29,30],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[31],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:249","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"shouldBeUsedInOneThread"}},{"transplant":{"position":"org.easymock.EasyMock:1304","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[63,64,65,66,67,68,69,70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[73,74,72],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[63,64,75,76,77,78,79,80,81,82,83,84,85,86,87],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[54,55,56,57,58,59,60,61,62],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[88],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[63,64,75,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,16,106,17,76,107,108,109,110,111,77,78,112,113,114,79,115,116,117,118,119,18,120,19,20,121,122,123,124,125,126,54,127,55,128,129,130,131,132,133,134,56,135,136,137,138,0,1,139,2,140,141,3,4,142,143,5,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,65,191,192,193,80,81,194,195,196,82,83,197,198,199,200,201,31,202,203,204,205,206,207,12,13,14,208,6,7,209,8,210,211,9,10,212,213,11,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,57,58,255,256,257,258,59,60,259,61,260,261,262,263,264,265,266,267,268,62,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,84,85,293,86,294,295,296,297,298,21,22,299,23,24,300,25,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,28,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,87,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:161","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    return java.lang.reflect.Constructor<T>;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:162","sourceCode":"return java.lang.reflect.Constructor<T>","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"ret"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:225","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[75,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,16,106,17,108,78,116,118,119,18,120,19,20,121,123,124,125,126,54,127,55,128,130,131,132,133,134,56,137,140,148,149,151,152,153,157,158,160,161,162,163,164,165,166,167,169,170,171,172,173,176,180,182,184,188,65,193,80,81,194,196,82,83,31,204,12,13,14,210,217,220,230,236,239,243,245,247,251,252,58,257,60,259,61,260,261,263,266,62,269,270,271,272,273,278,279,283,285,286,288,84,85,86,297,298,21,22,299,23,24,300,25,301,302,303,304,320,323,324,325,327,328,344,345,347,352,357,364,367,368,369,391,419,420,438,439,440,442,443,444,445,446,447,448,449,450,453,454,455,456,457,458,459,460,461,462,463,464,475,476,477,491,503,504,506,511,516],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[521,453],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer"}},{"position":"org.easymock.ConstructorArgs:77","failures":[522,72],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[118,18,56,151,152,153,157,158,162,163,165,166,167,169,170,205,239,241,59,62,297,22,301,304,364,367,368,420,455,457,458,460,461,462,463,464],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[93,31,203,204,206,239,280,282,283,408],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:318","failures":[457,460],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:210","failures":[63,63,64,64,109,185,186,65,191,12],"status":-1,"binaryOperator":"(org.easymock.ConstructorArgs) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[54,55,56,57,58,257,59,60,61,62,273],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[63,63,64,64,75,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,16,106,17,108,111,77,78,112,79,115,116,117,118,119,18,120,19,20,121,123,124,125,126,54,127,55,128,129,130,131,132,133,134,56,135,136,137,140,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,176,180,182,184,188,65,193,80,81,194,196,82,83,31,202,203,204,205,206,12,13,14,210,217,220,230,236,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,57,58,256,257,258,59,60,259,61,260,261,262,263,264,265,266,267,268,62,269,270,271,272,273,274,275,278,279,280,282,283,284,285,286,287,288,289,292,84,85,86,297,298,21,22,299,23,24,300,25,301,302,303,304,305,306,307,308,320,322,323,324,325,327,328,329,330,331,332,333,334,335,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,378,391,392,393,394,411,417,419,420,421,438,439,440,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,481,483,484,485,486,487,488,491,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[397],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","candidateMethods":"candidateMethods"}},{"transplant":{"position":"org.easymock.internal.ReplayState:52","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:57","sourceCode":"try {\n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.IMocksBehavior.addActual(org.easymock.internal.Invocation);\n    try {\n        return org.easymock.internal.Result.answer();\n    } catch (final java.lang.Throwable java.lang.Throwable) {\n        if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n            throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n        } \n        throw java.lang.Throwable;\n    }\n} finally {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation();\n}","type":"CtTryImpl"},"failures":[63,64,75,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,16,106,17,76,108,111,77,78,112,79,115,116,117,118,119,18,120,19,20,121,54,127,55,128,129,130,131,132,133,134,56,135,136,137,140,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,180,181,182,184,187,188,190,65,193,80,81,194,196,82,83,31,204,205,206,12,13,14,210,217,220,230,236,239,240,241,243,244,245,247,248,249,250,251,252,253,254,57,58,256,257,258,59,60,259,260,261,262,263,264,265,266,267,268,62,269,270,271,272,273,274,275,278,279,280,281,282,283,285,286,289,84,85,86,297,298,21,22,299,23,24,300,301,302,303,304,305,306,307,322,323,324,325,326,327,328,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,28,364,365,366,367,368,369,379,380,381,382,391,393,394,419,420,421,438,439,440,442,443,444,445,446,447,448,449,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,483,484,485,486,487,488,491,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[175,178,183,523,189,191,74,81,83,197,66,522,68,69,70,71],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[284,287,334,335],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[524,525,526],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[183,186,527,528,529,530,65,191,12],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"verified":"matched"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[89,102,138,0,1,4,5,208,6,7,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"f":"targetField"}},{"transplant":{"position":"org.easymock.EasyMock:1555","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:946","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[531],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[26,27,21,28,29,30],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[63,63,64,64,18,135,253,254,256,257,258,59,262,264,265,267,268,273,274,275,22,301,302,305,306,307,378,465,466,467,468,469,470,471,472,473,474,499],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:878","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"searchType","type":"searchType"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":58,"org.easymock.tests2.UsageTest.argumentsOrdered":158,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":362,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":405,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":153,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":89,"org.easymock.tests2.DelegateToTest.testReturnException":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":484,"org.easymock.tests.MockingTest.testPartialClassMocking":84,"org.easymock.tests.MockClassControlTest.testToString":385,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":122,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":414,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":224,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":220,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":342,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":279,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":53,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":527,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":259,"org.easymock.tests2.UsageTest.wrongArguments":151,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":301,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":5,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":381,"org.easymock.samples.ExampleTest.answerVsDelegate":93,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":375,"org.easymock.tests2.UsageConstraintsTest.testNull":257,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":295,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":16,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":390,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":170,"org.easymock.tests2.CaptureTest.testPrimitive":128,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":305,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":361,"org.easymock.tests.UsageTest.moreThanOneArgument":363,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":467,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":329,"org.easymock.tests.UsageTest.argumentsOrdered":368,"org.easymock.tests.UsageVarargTest.varargIntAccepted":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":410,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":470,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":174,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":213,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":181,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":397,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":474,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":37,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":525,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":140,"org.easymock.tests.ReplayStateInvalidUsageTest.times":316,"org.easymock.tests2.DependencyTest.testClassMocking":276,"org.easymock.tests2.AnswerTest.answer":31,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":412,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":147,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":372,"org.easymock.tests2.UsageTest.strictResetToDefault":149,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":178,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":111,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":466,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":165,"org.easymock.tests2.DelegateToTest.testDelegate":247,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":333,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":36,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":357,"org.easymock.tests.LimitationsTest.mockFinalMethod":492,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":487,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":341,"org.easymock.tests2.DependencyTest.testClassMockingSupport":277,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":334,"org.easymock.tests2.CaptureTest.testCapture1_2446744":129,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":107,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":355,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":145,"org.easymock.tests.UsageThrowableTest.throwError":457,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":310,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":374,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":11,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":469,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":238,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":40,"org.easymock.samples.PartialClassMockTest.testGetArea":75,"org.easymock.tests.MockingTest.testInterfaceMocking":293,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":311,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":471,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":494,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":427,"org.easymock.tests2.UsageTest.niceToStrict":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":395,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":72,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":180,"org.easymock.tests2.MockBuilderTest.testCreateMock":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":233,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":4,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":26,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":351,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":166,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":371,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":452,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":379,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":69,"org.easymock.tests.UsageOverloadedMethodTest.overloading":420,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":235,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":264,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":286,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":512,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":419,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":263,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":134,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":441,"org.easymock.tests.MockClassControlTest.testEquals":389,"org.easymock.tests2.EasyMockSupportClassTest.testAll":217,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":477,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":359,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":531,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":146,"org.easymock.tests2.CaptureTest.testCaptureAll":127,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":339,"org.easymock.tests.MockNameTest.defaultName":437,"org.easymock.tests2.UsageConstraintsTest.testMatches":265,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":468,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":308,"org.easymock.samples.ExampleTest.voteForRemovals":97,"org.easymock.tests.UsageVarargTest.allKinds":449,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":454,"org.easymock.samples.BasicClassMockTest.testPrintContent":91,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":340,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":463,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":488,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":9,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":246,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":530,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":435,"org.easymock.tests2.UsageConstraintsTest.greaterThan":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":218,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":392,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":112,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":41,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":436,"org.easymock.samples.ExampleTest.voteForRemoval":94,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":113,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":249,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":376,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":76,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":33,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":475,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":163,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":459,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":483,"org.easymock.tests2.CaptureTest.testCaptureFirst":137,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":164,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":160,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":289,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":508,"org.easymock.tests2.UsageTest.moreThanOneArgument":150,"org.easymock.tests2.CaptureTest.testCapture2_2446744":136,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":413,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":188,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":448,"org.easymock.tests.GenericTest.testBridgedEquals":479,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":70,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":67,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":327,"org.easymock.tests.UsageExpectAndReturnTest.longType":504,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":161,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":337,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":360,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":271,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":378,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":358,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":497,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":465,"org.easymock.tests.UsageCallCountTest.tooManyCalls":328,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":526,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":234,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":509,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":143,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":347,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":462,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":80,"org.easymock.tests.MockingTest.testNiceClassMocking":296,"org.easymock.tests.MockingTest.testClassMocking":291,"org.easymock.tests2.UsageConstraintsTest.testContains":262,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":321,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":116,"org.easymock.tests2.UsageConstraintsTest.testFind":256,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":421,"org.easymock.tests.MockTypeTest.fromEasyMockClass":373,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":282,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":297,"org.easymock.tests.UsageExpectAndReturnTest.object":511,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":108,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":142,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":169,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":528,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":443,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":425,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":71,"org.easymock.tests.UsageTest.exactCallCountByLastCall":369,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":499,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":480,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":191,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":517,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":438,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":285,"org.easymock.tests.MockClassControlTest.testHashCode":388,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":6,"org.easymock.tests2.EasyMockSupportTest.testVerify":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":227,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":524,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":331,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":451,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":144,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":207,"org.easymock.tests.UsageVarargTest.varargCharAccepted":442,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":428,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":418,"org.easymock.tests2.UsageTest.openCallCountByLastCall":154,"org.easymock.tests.DefaultClassInstantiatorTest.object":429,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":172,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":73,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":450,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":228,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":349,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":460,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":139,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":208,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":387,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":39,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":77,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":348,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":518,"org.easymock.tests.ReplayStateInvalidCallsTest.times":45,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":496,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":46,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":236,"org.easymock.tests2.UsageTest.resumeIfFailure":159,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":370,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":486,"org.easymock.tests2.StubTest.stubWithReturnValue":241,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":183,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":510,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":272,"org.easymock.tests2.SerializationTest.testAllMockedMethod":14,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":411,"org.easymock.samples.SupportTest.voteForRemovals":101,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":27,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":209,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":354,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":15,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":417,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":202,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":482,"org.easymock.tests.UsageExpectAndThrowTest.object":352,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":269,"org.easymock.tests2.DelegateToTest.testWrongClass":245,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":43,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":306,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":307,"org.easymock.tests.UsageStrictMockTest.range":23,"org.easymock.samples.ConstructorCalledMockTest.testTax":63,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":200,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":193,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":68,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":353,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":214,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":318,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":367,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":380,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":29,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":35,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":495,"org.easymock.tests2.CaptureTest.testCaptureNone":133,"org.easymock.tests.UsageUnorderedTest.message":453,"org.easymock.tests.UsageVerifyTest.twoReturns":456,"org.easymock.tests.UsageVarargTest.varargByteAccepted":447,"org.easymock.tests2.ThreadingTest.testThreadSafe":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":231,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":325,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":426,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":90,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":336,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":304,"org.easymock.tests2.UsageConstraintsTest.any":260,"org.easymock.tests2.StubTest.stub":240,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":315,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":498,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":416,"org.easymock.tests.UsageExpectAndThrowTest.longType":345,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":433,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":314,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":120,"org.easymock.tests2.SerializationTest.testClass":12,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests.LimitationsTest.mockNativeMethod":491,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":520,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":478,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":1,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":51,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":121,"org.easymock.tests2.NameTest.nameForMocksControl":126,"org.easymock.tests2.MockedExceptionTest.testMockedException":115,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":2,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":219,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":366,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":86,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":281,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":346,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":103,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":184,"org.easymock.tests.MockingTest.testNicePartialClassMocking":85,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":17,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":138,"org.easymock.tests2.CaptureTest.testCaptureLast":132,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":335,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":50,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":60,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":83,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":270,"org.easymock.tests.MockingTest.testTwoMocks":292,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":47,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":197,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":501,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":350,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":157,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":274,"org.easymock.samples.ExampleTest.removeNonExistingDocument":98,"org.easymock.tests.UsageStrictMockTest.differentMethods":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":3,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":312,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":7,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":431,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":250,"org.easymock.tests2.MockBuilderTest.testCreateMockString":190,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":221,"org.easymock.tests.UsageExpectAndThrowTest.floatType":344,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":216,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":204,"org.easymock.tests.UsageVerifyTest.twoThrows":455,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":192,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":230,"org.easymock.samples.ExampleTest.voteAgainstRemoval":95,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":78,"org.easymock.tests.LimitationsTest.privateConstructor":490,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":522,"org.easymock.tests2.UsageConstraintsTest.testNotNull":273,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":464,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":79,"org.easymock.tests2.UsageTest.defaultResetToNice":156,"org.easymock.samples.ExampleTest.voteAgainstRemovals":92,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":516,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":407,"org.easymock.tests.UsageVarargTest.differentLength":444,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":0,"org.easymock.tests2.CallbackTest.callback":239,"org.easymock.tests2.UsageConstraintsTest.equals":255,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":109,"org.easymock.tests.UsageTest.openCallCountByLastCall":365,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":253,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":303,"org.easymock.tests.UsageCallCountTest.tooFewCalls":323,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":194,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":382,"org.easymock.tests.UsageThrowableTest.throwCheckedException":461,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":30,"org.easymock.tests.MockingTest.testStrictClassMocking":290,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":500,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":82,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":141,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":81,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":317,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":196,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":206,"org.easymock.tests.ObjectMethodsTest.testHashCode":424,"org.easymock.tests2.NameTest.nameForNiceMock":125,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":49,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":252,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":44,"org.easymock.tests2.DependencyTest.testInterfaceMocking":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":529,"org.easymock.samples.ExampleTest.addDocument":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":237,"org.easymock.tests2.DelegateToTest.testStubDelegate":244,"org.easymock.tests2.AnswerTest.stubAnswer":205,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":22,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":185,"org.easymock.tests.UsageVarargTest.varargLongAccepted":446,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":519,"org.easymock.tests.UsageExpectAndReturnTest.floatType":503,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":65,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":64,"org.easymock.tests.UsageThrowableTest.noUpperLimit":458,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":212,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":268,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":287,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":254,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":198,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":130,"org.easymock.tests2.SerializationTest.test":13,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":502,"org.easymock.tests2.UsageConstraintsTest.testSame":258,"org.easymock.samples.SupportTest.addDocument":100,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":195,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":34,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":313,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":222,"org.easymock.tests.GenericTest.testPackageScope":476,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":10,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":294,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":32,"org.easymock.tests2.NameTest.nameForMock":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":513,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":189,"org.easymock.tests2.UsageStrictMockTest.differentMethods":20,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":110,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":505,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":356,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":422,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":394,"org.easymock.tests2.MockedExceptionTest.testRealException":117,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":409,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":408,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":302,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":319,"org.easymock.tests2.NameTest.nameForStrictMock":124,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":74,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":280,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":106,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":199,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":521,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":432,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":62,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":176,"org.easymock.tests2.UsageStrictMockTest.range":19,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":38,"org.easymock.tests2.UsageConstraintsTest.lessThan":275,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":162,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":226,"org.easymock.tests2.UsageConstraintsTest.testOr":59,"org.easymock.tests.UsageRangeTest.combination":391,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":104,"org.easymock.tests.UsageTest.wrongArguments":364,"org.easymock.tests2.MockBuilderTest.testWithConstructor":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":223,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":384,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":506,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":514,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":396,"org.easymock.tests.UsageVarargTest.varargShortAccepted":445,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":434,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":326,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":52,"org.easymock.tests2.UsageConstraintsTest.cmpTo":261,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":203,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":398,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":155,"org.easymock.tests2.CaptureTest.testCaptureFromStub":135,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":309,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":177,"org.easymock.tests.UsageTest.unexpectedCallWithArray":28,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":48,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":21,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":324,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":523,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":515,"org.easymock.tests2.UsageConstraintsTest.constraints":57,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":299,"org.easymock.samples.ExampleTest.addAndChangeDocument":99,"org.easymock.tests2.ConstraintsToStringTest.notToString":88,"org.easymock.tests.UsageStrictMockTest.testVerify":25,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":102,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":338,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":131,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":472,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":507,"org.easymock.tests.LimitationsTest.abstractClass":489,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":473,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":288,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":439,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":167}}]

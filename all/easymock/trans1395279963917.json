[{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.RecordState:163","failures":[3,4],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[5,6,7,8,9,10],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[11],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[12,13,14,15,16,17,18],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[19,20,21,12,22,9,23,24,25,13,14,26,15,10,16],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[27,28,29,30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[45,46,47,48,49,50],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"argType":"paramType","paramType":"paramType"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"threadSafe"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[51],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.Range:40","failures":[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,3,4,141,142,143,144,33,145,34,35,36,37,38,39,146,40,42,43,147,44,148,149,150,151,152,153,154,11,155,156,157,158,159,160,19,161,162,163,164,165,20,21,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,27,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,32,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,12,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,0,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,51,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,9,23,380,381,24,25,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,13,14,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,26,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,15,476,477,10,478,479,16,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[245,32],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[160,19,20,21,5,508,6,509,7,8,510,379,9,23,24,25,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[19,20,21,12,511,22,9,23,24,25,13,14,26,15,10,16],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[110,111,114,116,117,119,129,134,33,34,42],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1939","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","type":"CtInvocationImpl"},"failures":[145,35,39,146,40,44],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[143,273,296,297,304,311,357,383,384,391,398,488,497],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[54,56,57,59,68,441],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[69,110,126,150,158,19,161,162,20,21,166,167,169,173,174,177,184,194,195,197,199,210,212,263,266,12,267,325,350,378,9,23,24,25,382,13,14,15,476,10,479,16,480,505,506,507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Invocation:195","failures":[81,82,84,87,90,91,97,99,100,171,174,176,182,185,191,195,197,199,209,212,214,215,216,222,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,247,248,249,250,251,252,253,254,255,256,257,258,358,410,414,416],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[105,107,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,33,145,34,35,36,37,38,39,146,40,42,43,147,44,151,181,206,265,276,277,355,356,357,373,374,375,376,377,439,440,441,442,443,15,10,478,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[421,424],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"failures":[512],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:70","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : org.easymock.internal.InjectionPlan.getTestSubjectFields()) {\n    java.lang.reflect.Field.setAccessible(true);\n    java.lang.Object java.lang.Object;\n    try {\n        java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Object.getClass();\n    while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n        org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n        java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n    }\n}","type":"CtForEachImpl"},"failures":[64,65,228,229,230,232,234,235,236,239,247,248,249,251,253,254,255,258],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[52,53,108,109,113,114,115,116,122,124,125,127,128,134,135,136,43,265,270,276,356,357,373,374,377,439,440,441,442,443,478,494,495,496,497,498],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[70,71,72,513],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":111,"org.easymock.tests2.UsageTest.argumentsOrdered":21,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":378,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":178,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":454,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":162,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":65,"org.easymock.tests2.DelegateToTest.testReturnException":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":484,"org.easymock.tests.MockingTest.testPartialClassMocking":289,"org.easymock.tests.MockClassControlTest.testToString":331,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":240,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":90,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":383,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":227,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":28,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":118,"org.easymock.tests2.UsageTest.wrongArguments":19,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":373,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":239,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":273,"org.easymock.samples.ExampleTest.answerVsDelegate":55,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":415,"org.easymock.tests2.UsageConstraintsTest.testNull":114,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":294,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":201,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":177,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":336,"org.easymock.tests2.CaptureTest.testPrimitive":35,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":377,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":402,"org.easymock.tests.UsageTest.moreThanOneArgument":379,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":200,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":496,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":489,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.UsageVarargTest.varargIntAccepted":346,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":459,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":439,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":182,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":75,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":257,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":189,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":446,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":443,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":233,"org.easymock.tests.ReplayStateInvalidUsageTest.times":369,"org.easymock.tests2.DependencyTest.testClassMocking":224,"org.easymock.tests2.AnswerTest.answer":137,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":461,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":144,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":412,"org.easymock.tests2.CaptureTest.testAnd":33,"org.easymock.tests2.UsageTest.strictResetToDefault":159,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":186,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":209,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":495,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":172,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":327,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":493,"org.easymock.tests2.DelegateToTest.testDelegate":157,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":398,"org.easymock.tests.LimitationsTest.mockFinalMethod":432,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":487,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":472,"org.easymock.tests2.DependencyTest.testClassMockingSupport":225,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":316,"org.easymock.tests2.CaptureTest.testCapture1_2446744":36,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":205,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":396,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":142,"org.easymock.tests.UsageThrowableTest.throwError":421,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":363,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":414,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":258,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":358,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":498,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":104,"org.easymock.samples.PartialClassMockTest.testGetArea":66,"org.easymock.tests.MockingTest.testInterfaceMocking":291,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":364,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":440,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":408,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":384,"org.easymock.tests2.UsageTest.niceToStrict":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":91,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":444,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":188,"org.easymock.tests2.MockBuilderTest.testCreateMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":99,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":236,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":392,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":5,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":173,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":411,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":475,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":499,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":271,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":46,"org.easymock.tests.UsageOverloadedMethodTest.overloading":404,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":95,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":436,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":124,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":403,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":307,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":123,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":1,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":40,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":347,"org.easymock.tests2.EasyMockSupportClassTest.testAll":83,"org.easymock.tests.MockClassControlTest.testEquals":335,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":338,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":508,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":400,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":470,"org.easymock.tests2.CaptureTest.testCaptureAll":145,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":143,"org.easymock.tests.MockNameTest.defaultName":275,"org.easymock.tests2.UsageConstraintsTest.testMatches":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":497,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":361,"org.easymock.samples.ExampleTest.voteForRemovals":59,"org.easymock.tests.UsageVarargTest.allKinds":355,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":406,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":471,"org.easymock.samples.BasicClassMockTest.testPrintContent":63,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":427,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":488,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":156,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":254,"org.easymock.tests2.UsageConstraintsTest.greaterThan":127,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":31,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":84,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":326,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":212,"org.easymock.samples.ExampleTest.voteForRemoval":56,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":285,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":149,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":213,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":416,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":76,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":204,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":158,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":360,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":170,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":483,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":153,"org.easymock.tests2.CaptureTest.testCaptureFirst":44,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":450,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":171,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":26,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":303,"org.easymock.tests2.UsageTest.moreThanOneArgument":160,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":151,"org.easymock.tests2.CaptureTest.testCapture2_2446744":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":462,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":195,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":354,"org.easymock.tests.GenericTest.testBridgedEquals":340,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":47,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":506,"org.easymock.tests.UsageExpectAndReturnTest.longType":299,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":468,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":168,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":401,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":132,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":359,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":399,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":494,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":419,"org.easymock.tests.UsageCallCountTest.tooManyCalls":507,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":501,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":100,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":304,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":238,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":388,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":426,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":216,"org.easymock.tests.MockingTest.testNiceClassMocking":295,"org.easymock.tests.MockingTest.testClassMocking":287,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":500,"org.easymock.tests2.UsageConstraintsTest.testContains":122,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":261,"org.easymock.tests2.UsageConstraintsTest.testFind":113,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":405,"org.easymock.tests.MockTypeTest.fromEasyMockClass":413,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":476,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":107,"org.easymock.tests.UsageExpectAndReturnTest.object":306,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":206,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":237,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":176,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":29,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":349,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":322,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":512,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":48,"org.easymock.tests.UsageTest.exactCallCountByLastCall":382,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":449,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":490,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":341,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":510,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":32,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":312,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":344,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":248,"org.easymock.tests.MockClassControlTest.testHashCode":334,"org.easymock.tests2.EasyMockSupportTest.testVerify":180,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":93,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":491,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":474,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":433,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":141,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":181,"org.easymock.tests.UsageVarargTest.varargCharAccepted":348,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":278,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":264,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":467,"org.easymock.tests2.UsageTest.openCallCountByLastCall":163,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":49,"org.easymock.tests.DefaultClassInstantiatorTest.object":279,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":473,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":320,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":22,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":94,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":424,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":247,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":210,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":333,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":389,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":313,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":418,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":102,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":332,"org.easymock.tests2.UsageTest.resumeIfFailure":166,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":410,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":486,"org.easymock.tests2.StubTest.stubWithReturnValue":270,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":27,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":133,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":305,"org.easymock.tests2.SerializationTest.testAllMockedMethod":72,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":460,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":6,"org.easymock.samples.SupportTest.voteForRemovals":68,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":51,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":250,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":395,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":513,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":466,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":138,"org.easymock.tests.UsageExpectAndThrowTest.object":393,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":343,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":130,"org.easymock.tests2.DelegateToTest.testWrongClass":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":356,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":357,"org.easymock.tests.UsageStrictMockTest.range":16,"org.easymock.samples.ConstructorCalledMockTest.testTax":52,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":78,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":175,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":215,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":394,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":190,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":80,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":371,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":272,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":409,"org.easymock.tests2.CaptureTest.testCaptureNone":146,"org.easymock.tests.UsageUnorderedTest.message":15,"org.easymock.tests.UsageVerifyTest.twoReturns":14,"org.easymock.tests.UsageVarargTest.varargByteAccepted":353,"org.easymock.tests2.ThreadingTest.testThreadSafe":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":97,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":504,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":62,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":323,"org.easymock.tests2.CaptureTest.testCapture_2617107":34,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":509,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":464,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":376,"org.easymock.tests2.UsageConstraintsTest.any":120,"org.easymock.tests2.StubTest.stub":269,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":368,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":420,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":485,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":465,"org.easymock.tests.UsageExpectAndThrowTest.longType":386,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":367,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":266,"org.easymock.tests2.SerializationTest.testClass":70,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":252,"org.easymock.tests.LimitationsTest.mockNativeMethod":431,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":315,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":230,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests2.NameTest.nameForMocksControl":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":232,"org.easymock.tests2.MockedExceptionTest.testMockedException":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":85,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":381,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":387,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":106,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":292,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":198,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":191,"org.easymock.tests.MockingTest.testNicePartialClassMocking":290,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":203,"org.easymock.tests2.CaptureTest.testCaptureLast":39,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":228,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":317,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":117,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":222,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":131,"org.easymock.tests.MockingTest.testTwoMocks":288,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":223,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":391,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":20,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":135,"org.easymock.samples.ExampleTest.removeNonExistingDocument":60,"org.easymock.tests.UsageStrictMockTest.differentMethods":480,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":235,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":365,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":249,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":281,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":150,"org.easymock.tests2.MockBuilderTest.testCreateMockString":197,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":329,"org.easymock.tests.UsageExpectAndThrowTest.floatType":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":87,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":82,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":140,"org.easymock.tests.UsageVerifyTest.twoThrows":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":246,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":96,"org.easymock.samples.ExampleTest.voteAgainstRemoval":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":455,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":407,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":211,"org.easymock.tests.LimitationsTest.privateConstructor":430,"org.easymock.tests2.UsageConstraintsTest.testNotNull":134,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":428,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":259,"org.easymock.tests2.UsageTest.defaultResetToNice":165,"org.easymock.samples.ExampleTest.voteAgainstRemovals":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":311,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":229,"org.easymock.tests.UsageVarargTest.differentLength":350,"org.easymock.tests2.CallbackTest.callback":69,"org.easymock.tests2.UsageConstraintsTest.equals":112,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":207,"org.easymock.tests.UsageTest.openCallCountByLastCall":380,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":375,"org.easymock.tests.UsageCallCountTest.tooFewCalls":502,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":218,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":274,"org.easymock.tests.UsageThrowableTest.throwCheckedException":425,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests.MockingTest.testStrictClassMocking":286,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":221,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":277,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":234,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":370,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":220,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests.ObjectMethodsTest.testHashCode":321,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":152,"org.easymock.tests2.NameTest.nameForNiceMock":243,"org.easymock.tests2.DependencyTest.testInterfaceMocking":226,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":30,"org.easymock.samples.ExampleTest.addDocument":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":103,"org.easymock.tests2.DelegateToTest.testStubDelegate":11,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":478,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":192,"org.easymock.tests.UsageVarargTest.varargLongAccepted":352,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":453,"org.easymock.tests.UsageExpectAndReturnTest.floatType":298,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":314,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":245,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":53,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":437,"org.easymock.tests.UsageThrowableTest.noUpperLimit":422,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":128,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":256,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":109,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":73,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":37,"org.easymock.tests2.SerializationTest.test":71,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":280,"org.easymock.tests2.UsageConstraintsTest.testSame":115,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":297,"org.easymock.samples.SupportTest.addDocument":67,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":219,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":88,"org.easymock.tests.GenericTest.testPackageScope":337,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":492,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":255,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":293,"org.easymock.tests2.NameTest.nameForMock":241,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":308,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":196,"org.easymock.tests2.UsageStrictMockTest.differentMethods":267,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":300,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":397,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":319,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":328,"org.easymock.tests2.MockedExceptionTest.testRealException":262,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":79,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":511,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":457,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":265,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":372,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":374,"org.easymock.tests2.NameTest.nameForStrictMock":242,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":187,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":105,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":50,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":202,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":77,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":129,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":17,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":282,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":184,"org.easymock.tests2.UsageStrictMockTest.range":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":452,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":169,"org.easymock.tests2.CaptureTest.testCaptureRightOne":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":92,"org.easymock.tests2.UsageConstraintsTest.testOr":116,"org.easymock.tests.UsageRangeTest.combination":325,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":199,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":183,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":89,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":330,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":445,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":309,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":283,"org.easymock.tests.UsageVarargTest.varargShortAccepted":351,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":505,"org.easymock.tests2.UsageConstraintsTest.cmpTo":121,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":447,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":164,"org.easymock.tests2.CaptureTest.testCaptureFromStub":43,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":362,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":185,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":503,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":310,"org.easymock.tests2.CaptureTest.testCapture":41,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":479,"org.easymock.tests2.UsageConstraintsTest.constraints":110,"org.easymock.samples.ExampleTest.addAndChangeDocument":61,"org.easymock.tests.UsageStrictMockTest.testVerify":482,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":64,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":477,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":469,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":38,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":441,"org.easymock.tests.LimitationsTest.abstractClass":429,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":302,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":442,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":438,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":174,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":18,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":345}}]

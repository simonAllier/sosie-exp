[{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[1,2,3,4],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:30","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:95","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:209","sourceCode":"if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[5,6],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,0,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,7,78,79,80,81,82,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,2,97,10,11,98,12,99,13,14,100,101,102,103,104,105,106,107,3,108,16,109,110,4,17,111,112,113,114,115,116,117,118,119,120,121,21,122,123,124,125,126,127,128,128,129,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,28,189,190,191,192,193,194,195,196,197,198,199,32,200,201,202,203],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"returnType","throwableClass":"returnType"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[12,15,16,17],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[33,204,35,205,206,207,208,36,209,210,211,37,212,38,39,213,214,40,41,42,18,43,215,44,45,0,19,20,46,47,48,49,50,51,52,53,54,55,56,57,58,59,216,217,60,64,218,219,220,221,222,72,223,224,7,78,8,79,80,225,226,81,82,83,9,84,85,86,87,89,2,97,10,11,98,12,99,13,14,100,15,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,228,229,113,230,114,231,232,233,115,234,235,236,116,117,118,119,120,237,238,121,239,21,122,240,241,123,242,124,243,125,126,244,127,245,246,247,248,131,132,133,249,134,135,136,250,251,252,253,137,138,139,254,255,140,256,257,258,259,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,22,23,163,164,24,25,165,261,262,263,264,265,266,267,268,269,270,271,166,167,168,169,170,26,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,172,173,174,294,175,176,177,178,179,180,181,182,183,184,185,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,186,188,27,28,189,190,191,192,193,317,318,319,320,321,194,29,322,323,324,325,326,327,328,329,195,196,197,198,330,331,31,199,332,32,200,333,334,335,336,337,338,339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[42,218,219,220,221,121,122,240,162,264,265,266,188,27,28,199,200,333],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:557","failures":[33,34,35,36,209,210,211,37,212,38,39,213,214,40,41,42,43,44,45,0,46,47,48,49,50,51,52,53,54,55,56,57,58,59,217,60,61,62,63,64,65,66,67,68,69,70,71,222,72,73,74,75,76,77,7,78,79,80,81,82,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,2,97,10,11,98,12,99,13,14,100,101,102,103,104,105,106,107,3,108,16,109,110,4,17,111,112,228,229,113,230,114,232,233,115,234,235,236,116,117,118,119,120,121,21,122,123,124,243,125,126,127,246,128,128,129,129,130,248,131,132,133,249,134,135,136,137,138,139,254,255,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,163,164,165,261,262,263,265,166,167,168,169,170,26,340,171,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,173,174,294,175,176,177,178,179,180,181,182,183,184,341,185,342,300,301,302,303,304,305,186,187,188,27,28,189,190,191,192,193,317,319,320,194,322,323,324,195,196,197,198,199,32,200,201,202,203,335,336,337,338,339],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:280","failures":[233,115,234,236,243,319],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"failures":[343],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:346","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[344,335,338,339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[345,346,347],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:63","failures":[],"status":0,"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[36,40,42,18,44,45,19,20,47,218,219,220,221,12,99,101,102,17,111,236,121,21,122,243,136,161,162,23,163,164,24,25,165,266,268,271,26,175,306,316,186,188,27,28,31,199,32,200,336,337],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[62,66,348,349,350,351,352,353,354,355,356],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[357,358,359,360,361,33,204,362,363,364,365,366,34,35,367,205,206,207,208,36,209,210,211,37,212,368,369,38,39,213,370,214,40,41,42,18,43,215,44,45,0,19,20,46,47,371,372,373,374,375,376,377,48,49,50,51,52,53,54,55,56,57,58,59,216,217,60,61,62,63,378,64,65,66,348,67,349,379,380,381,382,68,383,384,69,385,386,387,388,389,390,391,392,393,70,394,395,396,397,398,71,399,400,401,218,219,220,221,222,72,402,350,73,403,351,404,74,405,75,352,76,406,407,408,77,354,409,410,7,78,8,79,80,225,226,81,82,83,9,84,85,86,87,88,89,90,91,92,411,412,93,413,414,415,94,95,96,416,417,2,97,10,11,418,98,12,99,13,14,100,15,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,228,229,113,230,419,420,421,422,423,114,231,424,425,426,427,428,232,233,115,234,235,236,116,117,118,119,120,237,238,121,239,21,122,240,241,123,242,124,243,125,126,244,127,245,246,247,128,129,130,429,430,248,131,132,133,249,134,135,136,250,251,252,253,137,138,139,254,255,140,431,432,433,256,257,434,258,259,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,22,23,163,164,24,25,165,261,262,263,264,435,265,266,267,268,269,270,271,166,167,168,169,170,26,436,272,437,438,439,345,440,441,442,273,443,444,445,446,447,340,448,449,450,451,452,453,454,455,171,456,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,172,173,457,174,294,175,176,177,178,179,180,181,182,458,459,460,461,462,463,464,465,344,466,467,468,469,470,471,472,183,473,474,475,476,477,184,478,341,185,342,295,296,297,298,299,479,300,301,302,303,304,305,306,307,308,480,309,310,311,312,313,314,315,316,5,186,481,187,6,482,483,484,485,486,487,488,489,188,27,28,189,190,191,192,193,317,318,319,320,321,194,29,322,323,324,490,325,326,327,328,329,195,196,197,198,330,331,31,199,332,32,200,333,334,491,492,493,201,202,494,203,495,496,497,335,336,337,338,339],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:62","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>()","type":"CtAssignmentImpl"},"failures":[213,214,410,7,78,8,79,80,225,226,81,82,83,9,84,85,86,93,2,97,10,11,98,12,99,13,14,100,15,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,119,121,133,249,138,139,254,255,140,166,167,168,169,170,26,181,182,304,316,31,199],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[498],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[222,255,445,472,184],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[33,34,35,367,36,209,210,211,37,212,38,39,213,214,40,41,42,18,43,215,44,45,0,19,20,46,47,48,49,50,51,52,53,54,55,56,57,58,59,216,217,60,61,62,63,64,65,66,67,68,69,70,71,218,219,220,221,222,72,402,73,74,75,76,77,7,78,8,79,80,225,226,81,82,83,9,84,85,86,87,88,89,90,91,92,411,93,415,94,95,96,2,97,10,11,98,12,99,13,14,100,15,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,228,229,113,230,114,232,233,115,234,235,236,116,117,118,119,120,237,238,121,239,21,122,240,241,123,242,124,243,125,126,244,127,245,246,247,128,128,129,129,130,429,430,248,131,132,133,249,134,135,136,250,137,138,139,254,255,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,22,23,163,164,24,25,165,261,262,263,264,265,266,267,268,270,271,166,167,168,169,170,26,272,171,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,172,173,174,294,175,176,177,178,179,180,181,182,183,184,185,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,186,481,187,482,188,27,28,189,190,191,192,193,317,318,319,320,321,194,322,323,324,195,196,197,198,330,331,31,199,332,32,200,333,334,493,201,202,203,335,336,337,338,339],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[19,418,24],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[34,35,367,205,206,207,208,36,211,37,212,38,213,214,40,41,42,18,43,215,44,45,0,19,20,46,47,217,61,62,65,66,67,222,72,402,74,405,7,78,8,79,80,225,226,81,82,83,9,84,85,86,87,88,89,90,91,92,411,93,415,95,2,97,10,11,98,12,99,13,14,100,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,228,229,113,230,233,115,234,236,116,117,118,119,120,238,121,239,21,122,240,124,243,125,126,244,127,246,133,249,134,135,136,250,251,252,253,138,139,254,255,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,23,163,164,24,25,165,265,266,267,268,270,271,166,167,168,169,170,26,447,171,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,173,174,294,175,176,177,178,179,180,181,182,300,301,302,303,304,305,306,307,308,309,310,312,313,314,315,316,186,481,188,27,28,189,190,191,192,193,317,319,320,194,325,326,327,328,329,195,197,198,331,31,199,332,32,200,333,201,202,203],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"toStringMethod","equalsMethod":"toStringMethod"}},{"position":"org.easymock.EasyMock:1291","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:122","sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:40","sourceCode":"return java.lang.Object.equals(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"position":"org.easymock.internal.ReflectionUtils:152","failures":[],"status":0,"binaryOperator":"(\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[350,353,354,413,128,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:734","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[15],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[34,35,367,499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"primitiveType"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.LastControl:92","failures":[15],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[40,45,72,228,229,113,230,249,136,254,255,161,164,262,263,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,174,175,176,177,178,179,180,300,301,302,303,304,305,27,320,323,324],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[34,62,66,348,67,349,380,381,382,68,383,384,69,385,386,387,388,389,390,391,392,393,70,394,395,396,397,398,71,399,400,350,351,352,407,353,354,355,356,128,129],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[34,35,367,499],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.Range:44","failures":[357,358,359,360,361,33,204,362,363,364,365,366,34,35,367,205,206,207,208,36,209,210,211,37,212,368,369,38,39,213,370,214,40,41,42,18,43,215,44,45,0,19,20,46,47,371,372,373,374,375,376,377,48,49,50,51,52,53,54,55,56,57,58,59,216,217,60,61,62,63,378,64,65,66,348,67,349,379,380,381,382,68,383,384,69,385,386,387,388,389,390,391,392,393,70,394,395,396,397,398,71,399,400,401,218,219,220,221,222,72,402,350,73,403,351,404,74,405,75,352,76,406,407,408,77,354,409,410,7,78,8,79,80,225,226,81,82,83,9,84,85,86,87,88,89,90,91,92,411,412,93,413,414,415,94,95,96,416,417,2,97,10,11,418,98,12,99,13,14,100,15,101,102,103,104,105,106,107,3,108,16,109,110,227,4,17,111,112,228,229,113,230,419,420,421,422,423,114,231,424,425,426,427,428,232,233,115,234,235,236,116,117,118,119,120,237,238,121,239,21,122,240,241,123,242,124,243,125,126,244,127,245,246,247,128,129,130,429,430,248,131,132,133,249,134,135,136,250,251,252,253,137,138,139,254,255,140,431,432,433,256,257,434,258,259,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,161,162,22,23,163,164,24,25,165,261,262,263,264,435,265,266,267,268,269,270,271,166,167,168,169,170,26,436,272,437,438,439,345,440,441,442,273,443,444,445,446,447,340,448,449,450,451,452,453,454,455,171,456,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,172,173,457,174,294,175,176,177,178,179,180,181,182,458,459,460,461,462,463,464,465,344,466,467,468,469,470,471,472,183,473,474,475,476,477,184,478,341,185,342,295,296,297,298,299,479,300,301,302,303,304,305,306,307,308,480,309,310,311,312,313,314,315,316,5,186,481,187,6,482,483,484,485,486,487,488,489,188,27,28,189,190,191,192,193,317,318,319,320,321,194,29,322,323,324,490,325,326,327,328,329,195,196,197,198,330,331,31,199,332,32,200,333,334,491,492,493,201,202,494,203,495,496,497,335,336,337,338,339],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":11,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":161,"org.easymock.tests2.UsageTest.argumentsOrdered":20,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":467,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":215,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":242,"org.easymock.tests2.DelegateToTest.testReturnException":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":301,"org.easymock.tests.MockingTest.testPartialClassMocking":201,"org.easymock.tests.MockClassControlTest.testToString":484,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":401,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":185,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":475,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":388,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":69,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":274,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":39,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":100,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":138,"org.easymock.tests2.UsageTest.wrongArguments":18,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":366,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":252,"org.easymock.samples.ExampleTest.answerVsDelegate":243,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":434,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":496,"org.easymock.tests2.UsageConstraintsTest.testNull":12,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":90,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":489,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":57,"org.easymock.tests2.CaptureTest.testPrimitive":79,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":140,"org.easymock.tests.UsageTest.moreThanOneArgument":162,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":293,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":89,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":191,"org.easymock.tests.UsageTest.argumentsOrdered":25,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":335,"org.easymock.tests.UsageVarargTest.varargIntAccepted":308,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":472,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":166,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":402,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":427,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":373,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":460,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":170,"org.easymock.tests.ReplayStateInvalidUsageTest.times":450,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":33,"org.easymock.tests2.DependencyTest.testClassMocking":368,"org.easymock.tests2.AnswerTest.answer":36,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":473,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":208,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":433,"org.easymock.tests2.CaptureTest.testAnd":7,"org.easymock.tests2.UsageTest.strictResetToDefault":41,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":415,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":351,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":52,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":197,"org.easymock.tests2.DelegateToTest.testDelegate":236,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":339,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":289,"org.easymock.tests.LimitationsTest.mockFinalMethod":456,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":304,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":329,"org.easymock.tests2.DependencyTest.testClassMockingSupport":369,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":172,"org.easymock.tests2.CaptureTest.testCapture1_2446744":80,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":412,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":287,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":206,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":445,"org.easymock.tests.UsageThrowableTest.throwError":174,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":257,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":490,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":428,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":193,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":400,"org.easymock.samples.PartialClassMockTest.testGetArea":130,"org.easymock.tests.MockingTest.testInterfaceMocking":494,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":446,"org.easymock.tests2.CompareToTest.testLessOrEqual":1,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":167,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":131,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":389,"org.easymock.tests2.UsageTest.niceToStrict":43,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":458,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":74,"org.easymock.tests2.MockBuilderTest.testCreateMock":408,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":396,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":363,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":283,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":53,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":432,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":324,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":264,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":250,"org.easymock.tests.UsageOverloadedMethodTest.overloading":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":393,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":105,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":320,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":152,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":134,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":104,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":346,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":83,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":480,"org.easymock.tests.MockClassControlTest.testEquals":488,"org.easymock.tests2.EasyMockSupportClassTest.testAll":68,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":481,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":291,"org.easymock.tests2.CaptureTest.testCaptureAll":78,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":207,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":327,"org.easymock.tests.MockNameTest.defaultName":273,"org.easymock.tests2.UsageConstraintsTest.testMatches":106,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":443,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":192,"org.easymock.samples.ExampleTest.voteForRemovals":127,"org.easymock.tests.UsageVarargTest.allKinds":316,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":188,"org.easymock.samples.BasicClassMockTest.testPrintContent":430,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":328,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":179,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":237,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":424,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":235,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":305,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":441,"org.easymock.tests2.UsageConstraintsTest.greaterThan":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":383,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":196,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":96,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":442,"org.easymock.samples.ExampleTest.voteForRemoval":125,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":416,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":117,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":258,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":374,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":411,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":40,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":260,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":465,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":50,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":175,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":381,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":300,"org.easymock.tests2.CaptureTest.testCaptureFirst":86,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":464,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":51,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":47,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":148,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":119,"org.easymock.tests2.UsageTest.moreThanOneArgument":42,"org.easymock.tests2.CaptureTest.testCapture2_2446744":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":474,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":77,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":315,"org.easymock.tests.GenericTest.testBridgedEquals":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":270,"org.easymock.tests.UsageExpectAndReturnTest.longType":144,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":48,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":325,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":292,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":137,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":227,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":290,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":189,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":262,"org.easymock.tests.UsageCallCountTest.tooManyCalls":271,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":397,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":149,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":365,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":279,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":178,"org.easymock.tests.MockingTest.testNiceClassMocking":497,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":61,"org.easymock.tests.MockingTest.testClassMocking":492,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":435,"org.easymock.tests2.UsageConstraintsTest.testContains":103,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":113,"org.easymock.tests2.UsageConstraintsTest.testFind":98,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":136,"org.easymock.tests.MockTypeTest.fromEasyMockClass":256,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":214,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":330,"org.easymock.tests.UsageExpectAndReturnTest.object":151,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":93,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":364,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":56,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":310,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":298,"org.easymock.tests.UsageTest.exactCallCountByLastCall":165,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":343,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":463,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":336,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":341,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":349,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":157,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":306,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":319,"org.easymock.tests.MockClassControlTest.testHashCode":487,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":420,"org.easymock.tests2.EasyMockSupportTest.testVerify":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":391,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":337,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":317,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":205,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":410,"org.easymock.tests.UsageVarargTest.varargCharAccepted":309,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":436,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":223,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":238,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":478,"org.easymock.tests2.UsageTest.openCallCountByLastCall":44,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":59,"org.easymock.tests.DefaultClassInstantiatorTest.object":272,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":322,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":296,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":392,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":281,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":176,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":360,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":419,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":486,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":94,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":280,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":158,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":261,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":71,"org.easymock.tests2.UsageTest.resumeIfFailure":46,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":431,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":372,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":303,"org.easymock.tests2.StubTest.stubWithReturnValue":72,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":352,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":150,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":4,"org.easymock.tests2.SerializationTest.testAllMockedMethod":367,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":183,"org.easymock.samples.SupportTest.voteForRemovals":123,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":5,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":422,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":286,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":499,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":184,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":209,"org.easymock.tests.UsageExpectAndThrowTest.object":284,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":342,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":109,"org.easymock.tests2.DelegateToTest.testWrongClass":234,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":181,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":182,"org.easymock.samples.ConstructorCalledMockTest.testTax":128,"org.easymock.tests.UsageStrictMockTest.range":32,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":376,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":285,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":75,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":452,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":380,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":251,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":132,"org.easymock.tests2.CaptureTest.testCaptureNone":82,"org.easymock.tests.UsageUnorderedTest.message":26,"org.easymock.tests.UsageVerifyTest.twoReturns":28,"org.easymock.tests.UsageVarargTest.varargByteAccepted":314,"org.easymock.tests2.ThreadingTest.testThreadSafe":116,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":394,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":268,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":429,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":299,"org.easymock.tests2.CaptureTest.testCapture_2617107":8,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":476,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":255,"org.easymock.tests2.UsageConstraintsTest.any":101,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":449,"org.easymock.tests2.StubTest.stub":222,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":477,"org.easymock.tests.UsageExpectAndThrowTest.longType":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":302,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":345,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":448,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":114,"org.easymock.tests2.SerializationTest.testClass":34,"org.easymock.tests.LimitationsTest.mockNativeMethod":171,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":187,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":160,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":359,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":240,"org.easymock.tests2.NameTest.nameForMocksControl":221,"org.easymock.tests2.MockedExceptionTest.testMockedException":229,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":384,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":164,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":203,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":278,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":370,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":87,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":76,"org.easymock.tests.MockingTest.testNicePartialClassMocking":202,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":92,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":357,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":173,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":14,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":110,"org.easymock.tests.MockingTest.testTwoMocks":493,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":348,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":141,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":282,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.samples.ExampleTest.removeNonExistingDocument":245,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":447,"org.easymock.tests.UsageStrictMockTest.differentMethods":200,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":362,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":421,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":438,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":118,"org.easymock.tests2.MockBuilderTest.testCreateMockString":409,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":482,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":385,"org.easymock.tests.UsageExpectAndThrowTest.floatType":276,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":382,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":211,"org.easymock.tests.UsageVerifyTest.twoThrows":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":379,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":70,"org.easymock.samples.ExampleTest.voteAgainstRemoval":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":468,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":248,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":95,"org.easymock.tests.LimitationsTest.privateConstructor":455,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":356,"org.easymock.tests2.UsageConstraintsTest.testNotNull":17,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":180,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":228,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.samples.ExampleTest.voteAgainstRemovals":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":469,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":156,"org.easymock.tests.UsageVarargTest.differentLength":311,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":358,"org.easymock.tests2.CallbackTest.callback":217,"org.easymock.tests2.UsageConstraintsTest.equals":418,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":413,"org.easymock.tests.UsageTest.openCallCountByLastCall":163,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":2,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":254,"org.easymock.tests.UsageCallCountTest.tooFewCalls":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":63,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":253,"org.easymock.tests.UsageThrowableTest.throwCheckedException":177,"org.easymock.tests.MockingTest.testStrictClassMocking":491,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":65,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":249,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":62,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":204,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":451,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":64,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":212,"org.easymock.tests.ObjectMethodsTest.testHashCode":297,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":120,"org.easymock.tests2.NameTest.nameForNiceMock":220,"org.easymock.tests2.DependencyTest.testInterfaceMocking":38,"org.easymock.samples.ExampleTest.addDocument":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":399,"org.easymock.tests2.DelegateToTest.testStubDelegate":115,"org.easymock.tests2.AnswerTest.stubAnswer":37,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":199,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":406,"org.easymock.tests.UsageVarargTest.varargLongAccepted":313,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":159,"org.easymock.tests.UsageExpectAndReturnTest.floatType":143,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":67,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":129,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":426,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":108,"org.easymock.tests.UsageThrowableTest.noUpperLimit":294,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":321,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":97,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":371,"org.easymock.tests2.SerializationTest.test":35,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":225,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":347,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":437,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":142,"org.easymock.tests2.UsageConstraintsTest.testSame":99,"org.easymock.samples.SupportTest.addDocument":241,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":378,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":340,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":386,"org.easymock.tests.GenericTest.testPackageScope":186,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":462,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":425,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":495,"org.easymock.tests2.NameTest.nameForMock":218,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":153,"org.easymock.tests2.UsageStrictMockTest.differentMethods":122,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":354,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":414,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":145,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":288,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":295,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":198,"org.easymock.tests2.MockedExceptionTest.testRealException":230,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":471,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":470,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":121,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":453,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":139,"org.easymock.tests2.NameTest.nameForStrictMock":219,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":404,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":213,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":91,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":375,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":439,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":16,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":73,"org.easymock.tests2.UsageStrictMockTest.range":21,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":423,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":498,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":344,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":390,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests2.UsageConstraintsTest.testOr":13,"org.easymock.tests.UsageRangeTest.combination":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":88,"org.easymock.tests.UsageTest.wrongArguments":23,"org.easymock.tests2.MockBuilderTest.testWithConstructor":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":387,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":483,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":154,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":440,"org.easymock.tests.UsageVarargTest.varargShortAccepted":312,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":269,"org.easymock.tests2.UsageConstraintsTest.cmpTo":102,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":461,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":45,"org.easymock.tests2.CaptureTest.testCaptureFromStub":84,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":444,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":403,"org.easymock.tests.UsageTest.unexpectedCallWithArray":22,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":267,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":353,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":155,"org.easymock.tests2.UsageConstraintsTest.constraints":10,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":332,"org.easymock.samples.ExampleTest.addAndChangeDocument":246,"org.easymock.tests.UsageStrictMockTest.testVerify":334,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":247,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":331,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":326,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":226,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":168,"org.easymock.tests.LimitationsTest.abstractClass":454,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":147,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":169,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":54,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":307}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:251","sourceCode":"java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:51","sourceCode":"if ((java.lang.String.length()) != 0) {\n    org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String);\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n} else {\n    java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection);\n}","type":"CtIfImpl"},"failures":[38,39,40,41,42,43,44,45],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[60,15,16,61,62,28,29,63,64,65,66,67,68,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:840","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[70,71,72,73],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:53","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[74,0,75,76,77,78,79,80,81,82,83,84,85,86,87,88,1,89,90,12,91,60,92,13,14,93,15,16,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,17,128,18,129,130,19,20,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,2,3,4,5,6,7,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,61,200,201,202,24,25,26,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,62,226,27,227,28,29,228,229,230,231,232,233,30,31,63,234,235,236,237,32,33,238,239,8,9,10,11,240,241,242,243,244,245,34,35,36,37,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,47,48,49,50,51,52,53,54,261,55,56,57,58,59,262,65,263,264,265,66,67,266,267,68,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,71,72,69],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[70,71,72,73],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[70,71,72,73],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[12,22],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[304,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:61","sourceCode":"org.easymock.internal.MocksBehavior.lastBehaviorList().addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[74,80,81,82,83,85,86,306,307,87,88,1,89,90,12,308,92,13,14,93,15,16,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,17,18,129,130,19,20,131,309,137,138,139,140,141,147,149,150,152,154,155,156,157,158,160,161,162,163,164,310,311,312,6,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,61,201,202,24,25,26,212,213,214,215,216,217,218,313,219,220,314,315,221,222,223,224,225,226,27,227,28,29,228,229,230,316,317,318,319,231,320,321,232,233,30,31,63,234,235,236,32,33,238,239,10,240,241,242,243,244,245,322,323,324,325,326,327,328,329,330,246,331,332,333,334,335,247,250,251,253,254,256,257,258,260,47,48,49,50,51,52,53,54,261,55,56,58,59,262,65,263,264,265,66,67,267,68,268,269,270,271,276,277,278,279,280,281,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,71,72,73,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[336,306,307,337,338,339,340,308,341,309,342,343,344,310,311,312,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,365,366,366,313,314,315,367,368,369,370,316,317,318,319,320,321,8,9,10,245,371,372,373,374,375,376,377,378,322,379,323,380,324,381,382,64,383,384,385,386,387,325,388,389,326,390,391,392,393,394,395,396,397,398,327,399,400,401,402,403,328,404,405,329,330,331,332,333,406,334,407,408,409,410,335,411,412,413,71,73],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"classMockingDisabled"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[414],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[74,0,75,76,77,78,79,80,81,82,83,84,85,86,306,307,337,87,88,1,89,90,12,91,415,416,417,418,419,420,421,422,423,424,425,308,60,92,13,14,93,15,16,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,17,128,18,129,130,19,20,131,132,133,134,135,136,309,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,426,427,169,344,310,311,312,2,3,4,5,6,7,170,171,172,173,174,175,176,348,349,350,351,352,353,354,355,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,61,200,201,202,24,25,26,203,204,205,206,357,207,208,209,210,211,212,213,214,215,216,217,428,218,365,365,366,366,313,219,220,314,315,221,222,223,224,225,62,226,27,227,28,29,228,229,230,316,317,318,319,231,320,321,232,233,30,31,63,234,235,236,237,32,33,238,239,8,9,10,11,240,241,242,243,244,245,34,35,36,37,373,375,322,379,323,324,382,64,384,325,326,327,328,329,330,246,331,332,333,406,334,409,410,335,411,247,248,249,250,251,252,253,254,255,256,257,258,259,260,47,48,49,50,51,52,53,54,261,55,56,57,58,59,262,65,263,264,265,66,67,266,267,68,268,269,270,429,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,71,72,73,69],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[430,431,432],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[279,286],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[0,75,76,77,1,89,96,98,99,100,101,102,103,127,130,134,135,136,150,2,3,4,5,6,7,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,25,230,232,236,8,9,10,11],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[433,294],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:388","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[434,435,436,437,438,439,440,371,380,441],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"parameterType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.internal.LastControl:95","failures":[47,49,56,278,279,281,283,284,286,296,301],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[442,248,251,252],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[165],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:69","sourceCode":"if (java.lang.Class<?> != null) {\n    java.lang.Class<?>[][int] = java.lang.Class<?>;\n} else {\n    java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n}","type":"CtIfImpl"},"failures":[70,71,72,73],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[346,324],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MocksControl:136","failures":[336,306,307,337,338,339,340,308,341,309,342,343,344,310,311,312,345,346,347,348,349,350,351,352,353,354,355,357,358,359,360,361,362,364,365,365,366,366,313,314,315,443,444,367,368,369,370,316,317,318,319,320,321,8,9,10,245,371,373,375,376,378,322,379,323,324,381,382,64,384,385,386,387,325,388,389,326,390,391,392,393,394,395,396,397,398,327,399,400,401,402,403,328,404,405,329,330,331,332,333,406,334,407,408,409,410,335,411,412,413,71,73],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[430,431,432],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[74,80,81,82,83,85,86,306,307,87,88,1,89,90,12,308,92,13,14,93,15,16,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,17,18,129,130,19,20,131,309,137,138,139,140,141,147,149,150,152,154,155,156,157,158,160,161,162,163,164,310,311,312,6,171,172,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,61,201,202,24,25,26,212,213,214,215,216,217,218,313,219,220,314,315,221,222,223,224,225,226,27,227,28,29,228,229,230,316,317,318,319,231,320,321,232,233,30,31,63,234,235,236,32,33,238,239,10,240,241,242,243,244,245,322,323,324,325,326,327,328,329,330,246,331,332,333,334,335,247,250,251,253,254,256,257,258,260,47,48,49,50,51,52,53,54,261,55,56,58,59,262,65,263,264,265,66,67,267,68,268,269,270,271,276,277,278,279,280,281,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,71,72,73,69],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,445,134,135,136,2,3,4,5,6,7,230,8,9,10,11],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[446,255,257],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[447,448,38,39,449,450,451,452,42,43,453,454],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[74,306,337,87,88,90,308,14,15,16,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,17,129,130,131,455,456,457,458,459,137,138,139,140,141,152,166,167,310,311,312,175,176,177,178,179,61,200,201,202,24,26,212,214,215,217,313,222,223,224,225,27,28,29,230,316,317,318,319,231,320,321,232,233,30,63,235,236,237,238,239,10,240,241,242,243,244,245,375,322,323,324,64,325,326,327,328,329,330,246,331,332,333,334,410,335,411,247,251,257,47,48,50,51,54,261,55,56,58,59,262,65,263,264,265,66,67,266,267,68,268,269,271,276,277,278,279,280,281,282,283,284,285,287,288,289,290,291,292,293,294,295,296,297,298,300,301,302,303,71,72],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[70,71,72,73],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":279,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":127,"org.easymock.tests2.UsageTest.argumentsOrdered":33,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":268,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":446,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":234,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":219,"org.easymock.tests2.DelegateToTest.testReturnException":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":3,"org.easymock.tests.MockingTest.testPartialClassMocking":310,"org.easymock.tests.MockClassControlTest.testToString":350,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":126,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":393,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":180,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":326,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":21,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":225,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":434,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":285,"org.easymock.tests2.UsageTest.wrongArguments":31,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":87,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":454,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":205,"org.easymock.samples.ExampleTest.answerVsDelegate":213,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":347,"org.easymock.tests2.UsageConstraintsTest.testNull":281,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":331,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":68,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":355,"org.easymock.tests2.CaptureTest.testPrimitive":50,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":90,"org.easymock.tests.UsageTest.moreThanOneArgument":17,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":199,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":209,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":170,"org.easymock.tests.UsageTest.argumentsOrdered":20,"org.easymock.tests.UsageVarargTest.varargIntAccepted":156,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":137,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":439,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":373,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":41,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":369,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":379,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":141,"org.easymock.tests.ReplayStateInvalidUsageTest.times":422,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":271,"org.easymock.tests2.DependencyTest.testClassMocking":443,"org.easymock.tests2.AnswerTest.answer":247,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":414,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":275,"org.easymock.tests2.CaptureTest.testAnd":47,"org.easymock.tests2.UsageTest.strictResetToDefault":233,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":409,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":377,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":208,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":201,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":265,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":174,"org.easymock.tests2.DelegateToTest.testDelegate":260,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":195,"org.easymock.tests.LimitationsTest.mockFinalMethod":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":6,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":146,"org.easymock.tests2.DependencyTest.testClassMockingSupport":444,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":124,"org.easymock.tests2.CaptureTest.testCapture1_2446744":51,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":273,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":416,"org.easymock.tests.UsageThrowableTest.throwError":96,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":450,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":405,"org.easymock.samples.PartialClassMockTest.testGetArea":313,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":417,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":138,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":166,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":394,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":181,"org.easymock.tests2.UsageTest.niceToStrict":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":432,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":322,"org.easymock.tests2.MockBuilderTest.testCreateMock":382,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":401,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":453,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":189,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":66,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":77,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":78,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":203,"org.easymock.tests.UsageOverloadedMethodTest.overloading":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":403,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":398,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":150,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":291,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":115,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":290,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":55,"org.easymock.tests2.EasyMockSupportClassTest.testAll":325,"org.easymock.tests.MockClassControlTest.testEquals":354,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":307,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":144,"org.easymock.tests2.CaptureTest.testCaptureAll":48,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":274,"org.easymock.tests2.UsageConstraintsTest.testMatches":292,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":210,"org.easymock.samples.ExampleTest.voteForRemovals":217,"org.easymock.tests.UsageVarargTest.allKinds":164,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":24,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":145,"org.easymock.samples.BasicClassMockTest.testPrintContent":315,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":102,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":39,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":7,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":259,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":440,"org.easymock.tests2.UsageConstraintsTest.greaterThan":294,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":388,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":200,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":411,"org.easymock.samples.ExampleTest.voteForRemoval":214,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":364,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":412,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":241,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":406,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":232,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":309,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":381,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":445,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":263,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":386,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":2,"org.easymock.tests2.CaptureTest.testCaptureFirst":59,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":442,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":264,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":239,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":153,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":111,"org.easymock.tests2.UsageTest.moreThanOneArgument":30,"org.easymock.tests2.CaptureTest.testCapture2_2446744":58,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":243,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":64,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":163,"org.easymock.tests.GenericTest.testBridgedEquals":338,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":85,"org.easymock.tests.UsageExpectAndReturnTest.longType":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":142,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":262,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":198,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":169,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":299,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":207,"org.easymock.tests.UsageCallCountTest.tooManyCalls":86,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":402,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":101,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":317,"org.easymock.tests.MockingTest.testNiceClassMocking":345,"org.easymock.tests.MockingTest.testClassMocking":343,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":79,"org.easymock.tests2.UsageConstraintsTest.testContains":289,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":10,"org.easymock.tests2.UsageConstraintsTest.testFind":280,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":179,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":60,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":254,"org.easymock.tests.UsageExpectAndReturnTest.object":114,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":334,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":267,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":435,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":158,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":427,"org.easymock.tests.UsageTest.exactCallCountByLastCall":131,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":74,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":171,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":371,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":154,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":120,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":149,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":447,"org.easymock.tests.MockClassControlTest.testHashCode":353,"org.easymock.tests2.EasyMockSupportTest.testVerify":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":396,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":172,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":147,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":76,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":272,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":429,"org.easymock.tests.UsageVarargTest.varargCharAccepted":157,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":356,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":459,"org.easymock.tests2.UsageTest.openCallCountByLastCall":235,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":430,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":269,"org.easymock.tests.DefaultClassInstantiatorTest.object":357,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":75,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":168,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":397,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":187,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":99,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":305,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":410,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":352,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":186,"org.easymock.tests.CapturesMatcherTest.test":46,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":121,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":328,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":351,"org.easymock.tests2.UsageTest.resumeIfFailure":238,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":346,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":368,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":5,"org.easymock.tests2.StubTest.stubWithReturnValue":230,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":380,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":300,"org.easymock.tests2.SerializationTest.testAllMockedMethod":73,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":132,"org.easymock.samples.SupportTest.voteForRemovals":222,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":336,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":304,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":192,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":70,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":133,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":248,"org.easymock.tests.UsageExpectAndThrowTest.object":190,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":297,"org.easymock.tests2.DelegateToTest.testWrongClass":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":175,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":176,"org.easymock.tests.UsageStrictMockTest.range":15,"org.easymock.samples.ConstructorCalledMockTest.testTax":365,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":266,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":316,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":323,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":385,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":19,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":204,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":167,"org.easymock.tests2.CaptureTest.testCaptureNone":261,"org.easymock.tests.UsageUnorderedTest.message":12,"org.easymock.tests.UsageVerifyTest.twoReturns":26,"org.easymock.tests.UsageVarargTest.varargByteAccepted":162,"org.easymock.tests2.ThreadingTest.testThreadSafe":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":399,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":83,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":314,"org.easymock.tests2.CaptureTest.testCapture_2617107":49,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":457,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":89,"org.easymock.tests2.UsageConstraintsTest.any":287,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":421,"org.easymock.tests2.StubTest.stub":229,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":4,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":361,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":420,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":227,"org.easymock.tests2.SerializationTest.testClass":71,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":223,"org.easymock.tests.LimitationsTest.mockNativeMethod":308,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":123,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":337,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":452,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests2.NameTest.nameForMocksControl":37,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":42,"org.easymock.tests2.MockedExceptionTest.testMockedException":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":389,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":130,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":184,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":312,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":329,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":324,"org.easymock.tests.MockingTest.testNicePartialClassMocking":311,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":333,"org.easymock.tests2.CaptureTest.testCaptureLast":54,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":125,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":284,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":321,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":298,"org.easymock.tests.MockingTest.testTwoMocks":344,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":104,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":188,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":32,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":302,"org.easymock.samples.ExampleTest.removeNonExistingDocument":428,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":418,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":43,"org.easymock.tests.UsageStrictMockTest.differentMethods":16,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":448,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":359,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":242,"org.easymock.tests2.MockBuilderTest.testCreateMockString":384,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":390,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":387,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":250,"org.easymock.tests.UsageVerifyTest.twoThrows":25,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":372,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":327,"org.easymock.samples.ExampleTest.voteAgainstRemoval":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":456,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":165,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":335,"org.easymock.tests.LimitationsTest.privateConstructor":340,"org.easymock.tests2.UsageConstraintsTest.testNotNull":301,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":103,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":8,"org.easymock.tests2.UsageTest.defaultResetToNice":237,"org.easymock.samples.ExampleTest.voteAgainstRemovals":212,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":119,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":451,"org.easymock.tests.UsageVarargTest.differentLength":159,"org.easymock.tests2.CallbackTest.callback":69,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":407,"org.easymock.tests.UsageTest.openCallCountByLastCall":129,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":276,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":1,"org.easymock.tests.UsageCallCountTest.tooFewCalls":81,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":206,"org.easymock.tests.UsageThrowableTest.throwCheckedException":100,"org.easymock.tests.MockingTest.testStrictClassMocking":342,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":0,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":320,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":318,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":423,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":252,"org.easymock.tests.ObjectMethodsTest.testHashCode":426,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":438,"org.easymock.tests2.NameTest.nameForNiceMock":36,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":244,"org.easymock.tests2.DependencyTest.testInterfaceMocking":224,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":436,"org.easymock.samples.ExampleTest.addDocument":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":404,"org.easymock.tests2.DelegateToTest.testStubDelegate":257,"org.easymock.tests2.AnswerTest.stubAnswer":251,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":14,"org.easymock.tests.UsageVarargTest.varargLongAccepted":161,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":122,"org.easymock.tests.UsageExpectAndReturnTest.floatType":106,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":245,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":366,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":151,"org.easymock.tests.UsageThrowableTest.noUpperLimit":97,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":40,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":295,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":277,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":367,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":52,"org.easymock.tests2.SerializationTest.test":72,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":358,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":105,"org.easymock.tests2.UsageConstraintsTest.testSame":282,"org.easymock.samples.SupportTest.addDocument":221,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":391,"org.easymock.tests.GenericTest.testPackageScope":306,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":173,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":449,"org.easymock.tests2.NameTest.nameForMock":34,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":116,"org.easymock.tests2.UsageStrictMockTest.differentMethods":29,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":383,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":408,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":108,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":194,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":202,"org.easymock.tests2.MockedExceptionTest.testRealException":11,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":441,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":27,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":425,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":88,"org.easymock.tests2.NameTest.nameForStrictMock":35,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":378,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":431,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":253,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":332,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":370,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":296,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":360,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":375,"org.easymock.tests2.UsageStrictMockTest.range":28,"org.easymock.tests2.UsageConstraintsTest.lessThan":303,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":437,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":395,"org.easymock.tests2.CaptureTest.testCaptureRightOne":56,"org.easymock.tests2.UsageConstraintsTest.testOr":283,"org.easymock.tests.UsageRangeTest.combination":61,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":330,"org.easymock.tests.UsageTest.wrongArguments":18,"org.easymock.tests2.MockBuilderTest.testWithConstructor":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":392,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":349,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":109,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":117,"org.easymock.tests.UsageVarargTest.varargShortAccepted":160,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":362,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":84,"org.easymock.tests2.UsageConstraintsTest.cmpTo":288,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":249,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":236,"org.easymock.tests2.CaptureTest.testCaptureFromStub":57,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":415,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":376,"org.easymock.tests.UsageTest.unexpectedCallWithArray":128,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":82,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":118,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":93,"org.easymock.tests2.UsageConstraintsTest.constraints":278,"org.easymock.samples.ExampleTest.addAndChangeDocument":218,"org.easymock.tests.UsageStrictMockTest.testVerify":95,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":220,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":92,"org.easymock.tests2.CompareToTest.testGreateThan":433,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":143,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":53,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":139,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":110,"org.easymock.tests.LimitationsTest.abstractClass":339,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":140,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":155,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":23,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":67}}]

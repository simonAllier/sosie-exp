[{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1847","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(float , float))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:80","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"failures":[15],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:174","sourceCode":"try {\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n} catch (final net.sf.cglib.core.CodeGenerationException net.sf.cglib.core.CodeGenerationException) {\n    net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader());\n    java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass();\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"failures":[29,30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[33,34],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.Or:47","sourceCode":"java.lang.StringBuffer.append(\"or(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[35,36,37],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[29,30,31,32],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,9,58,59,10,60,61,62,63,64,65,66,67,68,69,70,71,72,73,28,74,75,76,77,78,14,79,80],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:109","sourceCode":"org.easymock.internal.Invocation.clearCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"invocation"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:134","sourceCode":"final java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:44","sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[35,36,37],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[81],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[82,7,8,10,14],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:205","failures":[83,84,85,86,87,88,89,24,30,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[118],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1518","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(float))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[83,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,8,52,53,54,55,172,173,174,175,176,177,58,10,60,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,26,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,0,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,30,31,238,92,96,98,100,104,239,65,240,241,242,243,244,245,246,107,247,248,68,249,250,69,70,71,251,112,113,72,252,253,254,255,256,257,258,28,77,14,79,259,115,116,117],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":197,"org.easymock.tests2.UsageTest.argumentsOrdered":13,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":130,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":192,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":19,"org.easymock.tests2.StubTest.stubWithReturnValue":28,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":99,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":215,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":155,"org.easymock.tests2.SerializationTest.testAllMockedMethod":32,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":17,"org.easymock.tests.MockingTest.testPartialClassMocking":143,"org.easymock.samples.SupportTest.voteForRemovals":119,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":86,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":129,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":114,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":29,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":115,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":33,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":237,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":213,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":175,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":176,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":203,"org.easymock.tests2.UsageTest.wrongArguments":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":172,"org.easymock.samples.ConstructorCalledMockTest.testTax":84,"org.easymock.tests.UsageStrictMockTest.range":10,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":189,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":252,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":89,"org.easymock.tests2.UsageConstraintsTest.testNull":199,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":98,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":191,"org.easymock.tests2.CaptureTest.testPrimitive":228,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":174,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests.UsageTest.moreThanOneArgument":131,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":250,"org.easymock.tests2.CaptureTest.testCaptureNone":231,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":180,"org.easymock.tests.UsageUnorderedTest.message":1,"org.easymock.tests.UsageVerifyTest.twoReturns":8,"org.easymock.tests.UsageVarargTest.varargByteAccepted":48,"org.easymock.tests2.ThreadingTest.testThreadSafe":220,"org.easymock.tests.UsageTest.argumentsOrdered":6,"org.easymock.tests.UsageVarargTest.varargIntAccepted":42,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":166,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":90,"org.easymock.tests2.UsageConstraintsTest.any":204,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":97,"org.easymock.tests2.StubTest.stub":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":18,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":37,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":78,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":219,"org.easymock.tests2.SerializationTest.testClass":30,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":225,"org.easymock.tests.LimitationsTest.mockNativeMethod":125,"org.easymock.tests2.AnswerTest.answer":247,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":87,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":165,"org.easymock.tests2.CaptureTest.testAnd":226,"org.easymock.tests2.UsageTest.strictResetToDefault":65,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":94,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":80,"org.easymock.tests2.MockedExceptionTest.testMockedException":25,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":54,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":186,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":133,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":145,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":68,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":100,"org.easymock.tests.MockingTest.testNicePartialClassMocking":144,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":71,"org.easymock.tests2.CaptureTest.testCaptureLast":230,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":20,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":258,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":202,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":214,"org.easymock.tests2.CaptureTest.testCapture1_2446744":229,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":118,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":146,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":12,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":217,"org.easymock.tests.UsageThrowableTest.throwError":136,"org.easymock.tests.UsageStrictMockTest.differentMethods":60,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":222,"org.easymock.tests2.MockBuilderTest.testCreateMockString":106,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":51,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":210,"org.easymock.tests.UsageVerifyTest.twoThrows":7,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":116,"org.easymock.samples.PartialClassMockTest.testGetArea":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":167,"org.easymock.samples.ExampleTest.voteAgainstRemoval":122,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":178,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":179,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":113,"org.easymock.tests2.UsageTest.niceToStrict":241,"org.easymock.tests2.UsageConstraintsTest.testNotNull":216,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":24,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":142,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":81,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":96,"org.easymock.tests2.UsageTest.defaultResetToNice":244,"org.easymock.tests2.MockBuilderTest.testCreateMock":103,"org.easymock.samples.ExampleTest.voteAgainstRemovals":120,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":161,"org.easymock.tests.UsageVarargTest.differentLength":45,"org.easymock.tests2.CallbackTest.callback":74,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":111,"org.easymock.tests.UsageTest.openCallCountByLastCall":132,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":187,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":194,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":23,"org.easymock.tests.UsageOverloadedMethodTest.overloading":127,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":208,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":255,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":126,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":157,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":207,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":232,"org.easymock.tests.UsageThrowableTest.throwCheckedException":139,"org.easymock.tests2.EasyMockSupportClassTest.testAll":259,"org.easymock.tests.MockingTest.testStrictClassMocking":38,"org.easymock.tests2.CaptureTest.testCaptureAll":227,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":257,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":22,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":254,"org.easymock.tests2.UsageConstraintsTest.testMatches":209,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":256,"org.easymock.samples.ExampleTest.voteForRemovals":123,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":224,"org.easymock.tests.UsageVarargTest.allKinds":50,"org.easymock.tests2.DependencyTest.testInterfaceMocking":236,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":171,"org.easymock.tests2.DelegateToTest.testStubDelegate":238,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":141,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":75,"org.easymock.tests2.AnswerTest.stubAnswer":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":21,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":58,"org.easymock.tests2.UsageConstraintsTest.greaterThan":211,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":101,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":53,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":72,"org.easymock.tests.UsageVarargTest.varargLongAccepted":47,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":61,"org.easymock.samples.ExampleTest.voteForRemoval":121,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":221,"org.easymock.tests.UsageExpectAndReturnTest.floatType":148,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":164,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":110,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":85,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":0,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":239,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":195,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":63,"org.easymock.tests2.SerializationTest.test":31,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":15,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":184,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":137,"org.easymock.tests2.UsageConstraintsTest.testSame":200,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":147,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":16,"org.easymock.tests2.CaptureTest.testCaptureFirst":235,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":185,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":246,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":153,"org.easymock.tests.GenericTest.testPackageScope":124,"org.easymock.tests2.UsageTest.moreThanOneArgument":240,"org.easymock.tests2.CaptureTest.testCapture2_2446744":234,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":223,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":104,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":49,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":39,"org.easymock.tests.UsageExpectAndReturnTest.longType":149,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":158,"org.easymock.tests2.UsageStrictMockTest.differentMethods":79,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":150,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":35,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":55,"org.easymock.tests2.MockedExceptionTest.testRealException":27,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":154,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":77,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":140,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":173,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":253,"org.easymock.tests2.UsageConstraintsTest.testContains":206,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":26,"org.easymock.tests2.UsageConstraintsTest.testFind":198,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":128,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":95,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":66,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":70,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":67,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":56,"org.easymock.tests.UsageExpectAndReturnTest.object":156,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":212,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":251,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":92,"org.easymock.tests2.UsageStrictMockTest.range":14,"org.easymock.tests2.UsageConstraintsTest.lessThan":218,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":190,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":44,"org.easymock.tests.UsageTest.exactCallCountByLastCall":134,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":135,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":183,"org.easymock.tests2.CaptureTest.testCaptureRightOne":233,"org.easymock.tests2.UsageConstraintsTest.testOr":201,"org.easymock.tests.UsageRangeTest.combination":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":249,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":40,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":162,"org.easymock.tests.UsageTest.wrongArguments":4,"org.easymock.tests2.MockBuilderTest.testWithConstructor":91,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":151,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":159,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":36,"org.easymock.tests.UsageVarargTest.varargShortAccepted":46,"org.easymock.tests2.UsageConstraintsTest.cmpTo":205,"org.easymock.tests.UsageVarargTest.varargCharAccepted":43,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":34,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":76,"org.easymock.tests2.UsageTest.openCallCountByLastCall":242,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":243,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":193,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":93,"org.easymock.tests.UsageTest.unexpectedCallWithArray":3,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":181,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":2,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":138,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":160,"org.easymock.tests2.UsageConstraintsTest.constraints":196,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":59,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":112,"org.easymock.tests.UsageStrictMockTest.testVerify":62,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":163,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":117,"org.easymock.tests2.UsageTest.resumeIfFailure":245,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":64,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":168,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":88,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":152,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":169,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":177,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":82,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":41,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":188}}]

[{"position":"org.easymock.internal.ReflectionUtils:184","failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:262","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:217","sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException())","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[84,85,86,87,88,89],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[90,30,91,92,93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[94,95,96],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[97],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[64,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,90,114,115,10,116,117,118,95,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,30,91,152,153,154,155,156,157,158,159,160,161,92,162,163,51,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[182,183,184,185],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,186,187,188],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[189],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"qualifier":"org.easymock.internal.EasyMockProperties.PREFIX","this":"org.easymock.internal.EasyMockProperties.PREFIX"}},{"position":"org.easymock.internal.ReflectionUtils:194","failures":[2,3,5,6,7,190,191],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[192,193,159,165,194,195],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[196,197,64,65,66,67,68,69,70,71,73,198,199,200,201,202,94,203,204,74,75,205,206,76,77,207,208,209,210,211,212,213,98,78,79,81,214,215,216,217,82,83,218,219,220,99,100,221,222,101,102,223,182,224,225,183,184,0,186,103,226,105,227,106,228,107,108,229,109,110,230,231,232,233,112,90,114,10,234,116,118,235,11,236,121,122,237,123,238,239,96,240,241,242,243,125,127,244,12,245,246,247,248,249,250,1,251,252,253,254,255,13,14,15,16,130,256,132,133,135,17,18,19,257,258,141,259,260,20,21,261,22,23,24,25,26,27,262,263,264,265,266,267,268,269,270,28,29,271,151,30,91,272,273,274,275,153,160,92,162,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,276,51,164,277,52,169,278,279,280,281,282,53,54,55,56,57,58,170,283,284,285,286,287,59,173,288,289,290,176,291,60,61,62,292,63,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,322,323,323,324,325,326,327,328,329,330],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[331,332],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"qualifier"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[212],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.LastControl:124","failures":[196,197,64,65,66,67,68,69,70,71,73,198,199,200,201,202,94,203,204,74,75,205,333,206,76,77,207,209,210,211,213,98,78,79,80,81,214,334,335,215,216,217,82,83,218,219,220,99,100,221,222,101,102,223,225,183,184,336,337,338,339,0,186,187,103,226,105,227,106,228,107,108,229,109,110,230,231,340,232,233,111,341,112,113,90,114,115,10,234,116,117,118,95,235,11,236,119,120,121,122,237,123,238,239,96,240,342,241,124,242,243,125,127,244,12,245,246,247,248,249,250,1,251,252,253,254,255,13,14,15,16,129,130,256,343,132,133,134,135,136,257,344,141,345,345,259,260,20,21,261,22,23,24,25,26,27,262,263,264,265,266,267,268,269,270,28,29,271,346,347,348,349,350,151,30,91,272,273,274,153,154,351,352,155,156,157,158,353,159,160,161,92,162,163,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,276,51,164,165,166,277,52,167,168,169,278,279,280,281,282,53,54,55,56,57,58,170,284,285,286,287,59,174,354,355,356,357,291,358,359,360,361,362,177,363,364,365,366,367,292,63,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,321,322,323,324,325,326,327,368,328,329,369,370,371,330,372,373],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:205","sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cstr":"classConstructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[374],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[207,375],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:933","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[253],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[207,375],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[210],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[0,186,187,188],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[245],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:131","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    return \"Nothing captured yet\";\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"failures":[376,345],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[210],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[171,172,175,176],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:343","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int))","type":"CtInvocationImpl"},"failures":[90,114,92,162,35,39,40,42,45,297,301,302,304,307,314,317,318,377],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[378],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.MockInvocationHandler:37","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:178","failures":[133,142],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[196,197,64,65,66,67,68,69,70,71,73,198,199,200,201,202,94,203,204,74,75,205,206,76,77,207,209,210,211,213,98,78,79,80,81,214,334,335,215,216,217,82,83,218,219,99,100,101,102,223,225,183,184,336,337,338,339,0,186,187,232,111,341,112,113,90,114,115,10,234,116,117,118,95,235,11,236,119,120,121,122,237,123,238,239,96,240,241,124,243,244,12,245,246,1,251,252,253,254,255,13,14,15,16,379,129,256,343,135,136,137,138,139,140,257,344,141,260,20,21,261,22,23,24,25,26,27,262,263,264,265,266,267,268,380,269,270,28,29,271,346,347,348,349,350,151,30,91,272,273,274,152,381,153,154,351,352,158,353,159,160,161,92,162,163,382,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,276,51,164,165,166,277,52,167,168,169,278,279,280,281,282,53,54,55,56,57,58,170,283,284,285,173,354,355,356,357,176,291,358,359,360,361,362,363,364,365,366,367,383,292,63,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,324,325,326,327,368,328,329],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1191","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[64,94,98,105,107,108,110,111,113,90,114,10,117,118,95,119,120,121,122,123,242,125,130,134,135,136,141,30,91,155,156,157,158,159,161,92,162,51,165,166,167,168,169,170,384,385,177,386,387],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":65,"org.easymock.tests2.UsageTest.argumentsOrdered":120,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":51,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":230,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":104,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":95,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":370,"org.easymock.tests2.DelegateToTest.testReturnException":209,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":54,"org.easymock.tests.MockingTest.testPartialClassMocking":272,"org.easymock.tests.MockClassControlTest.testToString":178,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":313,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":31,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":248,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":5,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":71,"org.easymock.tests2.UsageTest.wrongArguments":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":269,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":356,"org.easymock.samples.ExampleTest.answerVsDelegate":325,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":145,"org.easymock.tests2.UsageConstraintsTest.testNull":67,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":239,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":110,"org.easymock.tests2.CaptureTest.testPrimitive":81,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":271,"org.easymock.tests.UsageTest.moreThanOneArgument":164,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":50,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":238,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":264,"org.easymock.tests.UsageTest.argumentsOrdered":168,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":314,"org.easymock.tests.UsageVarargTest.varargIntAccepted":360,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":278,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":191,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":343,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":282,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":127,"org.easymock.tests2.AnswerTest.answer":223,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":72,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":339,"org.easymock.tests2.CaptureTest.testAnd":78,"org.easymock.tests2.UsageTest.strictResetToDefault":234,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":124,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":228,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":284,"org.easymock.tests2.DelegateToTest.testDelegate":213,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":318,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":350,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":175,"org.easymock.tests2.CaptureTest.testCapture1_2446744":214,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":44,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":337,"org.easymock.tests.UsageThrowableTest.throwError":21,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":144,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":385,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":266,"org.easymock.samples.PartialClassMockTest.testGetArea":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":279,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":289,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":150,"org.easymock.tests2.UsageTest.niceToStrict":118,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":32,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":256,"org.easymock.tests2.MockBuilderTest.testCreateMock":134,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":40,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":192,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":107,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":19,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":152,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":354,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":59,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":201,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":304,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":200,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":217,"org.easymock.tests2.EasyMockSupportClassTest.testAll":247,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":344,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":48,"org.easymock.tests2.CaptureTest.testCaptureAll":79,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":348,"org.easymock.tests.MockNameTest.defaultName":181,"org.easymock.tests2.UsageConstraintsTest.testMatches":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":265,"org.easymock.samples.ExampleTest.voteForRemovals":328,"org.easymock.tests.UsageVarargTest.allKinds":367,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":349,"org.easymock.samples.BasicClassMockTest.testPrintContent":373,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":26,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":111,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":58,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":9,"org.easymock.tests2.UsageConstraintsTest.greaterThan":203,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":283,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":125,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":89,"org.easymock.samples.ExampleTest.voteForRemoval":326,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":252,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":146,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":342,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":10,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":291,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":4,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":227,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":208,"org.easymock.tests2.CaptureTest.testCaptureFirst":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":185,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":106,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":122,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":300,"org.easymock.tests2.UsageTest.moreThanOneArgument":116,"org.easymock.tests2.CaptureTest.testCapture2_2446744":218,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":254,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":135,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":366,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":156,"org.easymock.tests.UsageExpectAndReturnTest.longType":296,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":226,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":346,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":49,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":275,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":333,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":47,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":61,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":262,"org.easymock.tests.UsageCallCountTest.tooManyCalls":157,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":153,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":36,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":25,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":99,"org.easymock.tests2.UsageConstraintsTest.testContains":199,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":381,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":15,"org.easymock.tests2.UsageConstraintsTest.testFind":66,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":20,"org.easymock.tests.MockTypeTest.fromEasyMockClass":143,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":158,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":246,"org.easymock.tests.UsageExpectAndReturnTest.object":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":241,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":109,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":6,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":362,"org.easymock.tests.UsageTest.exactCallCountByLastCall":169,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":292,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":315,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":2,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":309,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":358,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":287,"org.easymock.tests2.EasyMockSupportTest.testVerify":340,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":316,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":18,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":286,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":386,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":336,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":379,"org.easymock.tests.UsageVarargTest.varargCharAccepted":361,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":341,"org.easymock.tests2.UsageTest.openCallCountByLastCall":235,"org.easymock.tests.DefaultClassInstantiatorTest.object":84,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":231,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":17,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":148,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":387,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":38,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":332,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":180,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":242,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":37,"org.easymock.tests.CapturesMatcherTest.test":345,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":310,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":60,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":250,"org.easymock.tests2.UsageTest.resumeIfFailure":121,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":56,"org.easymock.tests2.StubTest.stubWithReturnValue":12,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":3,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":206,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":302,"org.easymock.tests2.SerializationTest.testAllMockedMethod":187,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":319,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":193,"org.easymock.samples.SupportTest.voteForRemovals":330,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":331,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":43,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":188,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":320,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":182,"org.easymock.tests.UsageExpectAndThrowTest.object":41,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":75,"org.easymock.tests2.DelegateToTest.testWrongClass":211,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":267,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":268,"org.easymock.tests.UsageStrictMockTest.range":92,"org.easymock.samples.ConstructorCalledMockTest.testTax":322,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":229,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":220,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":132,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":167,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":355,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":194,"org.easymock.tests2.CaptureTest.testCaptureNone":216,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":290,"org.easymock.tests.UsageUnorderedTest.message":141,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":384,"org.easymock.tests.UsageVerifyTest.twoReturns":91,"org.easymock.tests.UsageVarargTest.varargByteAccepted":365,"org.easymock.tests2.ThreadingTest.testThreadSafe":251,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":352,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":149,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":372,"org.easymock.tests2.CaptureTest.testCapture_2617107":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":29,"org.easymock.tests2.UsageConstraintsTest.any":73,"org.easymock.tests2.StubTest.stub":244,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":62,"org.easymock.tests.UsageExpectAndThrowTest.longType":34,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":55,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":113,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":103,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":276,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":258,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":312,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":115,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":189,"org.easymock.tests2.NameTest.nameForMocksControl":140,"org.easymock.tests2.MockedExceptionTest.testMockedException":14,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":52,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":35,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":274,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":237,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":133,"org.easymock.tests.MockingTest.testNicePartialClassMocking":273,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":240,"org.easymock.tests2.CaptureTest.testCaptureLast":215,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":102,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":70,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":205,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":293,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":39,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":119,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":77,"org.easymock.tests.UsageStrictMockTest.differentMethods":162,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":380,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":86,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":253,"org.easymock.tests2.MockBuilderTest.testCreateMockString":136,"org.easymock.tests.UsageExpectAndThrowTest.floatType":33,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":94,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":225,"org.easymock.tests.UsageVerifyTest.twoThrows":30,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":249,"org.easymock.samples.ExampleTest.voteAgainstRemoval":327,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":288,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":243,"org.easymock.tests2.UsageConstraintsTest.testNotNull":76,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":27,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":13,"org.easymock.tests2.UsageTest.defaultResetToNice":236,"org.easymock.samples.ExampleTest.voteAgainstRemovals":324,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":308,"org.easymock.tests.UsageVarargTest.differentLength":177,"org.easymock.tests2.CallbackTest.callback":98,"org.easymock.tests.UsageTest.openCallCountByLastCall":277,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":196,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":28,"org.easymock.tests.UsageCallCountTest.tooFewCalls":154,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":221,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":357,"org.easymock.tests.UsageThrowableTest.throwCheckedException":24,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":195,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":101,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":63,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":128,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":100,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":222,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":190,"org.easymock.tests2.NameTest.nameForNiceMock":139,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":255,"org.easymock.tests2.DependencyTest.testInterfaceMocking":232,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":7,"org.easymock.samples.ExampleTest.addDocument":368,"org.easymock.tests2.DelegateToTest.testStubDelegate":210,"org.easymock.tests2.AnswerTest.stubAnswer":183,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":160,"org.easymock.tests.UsageVarargTest.varargLongAccepted":364,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":163,"org.easymock.tests.UsageExpectAndReturnTest.floatType":295,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":311,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":1,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":323,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":172,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":204,"org.easymock.tests.UsageThrowableTest.noUpperLimit":261,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":197,"org.easymock.tests2.SerializationTest.test":186,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":334,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":378,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":85,"org.easymock.tests2.UsageConstraintsTest.testSame":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":294,"org.easymock.samples.SupportTest.addDocument":371,"org.easymock.tests.GenericTest.testPackageScope":257,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":317,"org.easymock.tests2.NameTest.nameForMock":137,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":305,"org.easymock.tests2.UsageStrictMockTest.differentMethods":114,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":297,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":45,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":285,"org.easymock.tests2.MockedExceptionTest.testRealException":16,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":147,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":112,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":270,"org.easymock.tests2.NameTest.nameForStrictMock":138,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":96,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":74,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":87,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":130,"org.easymock.tests2.UsageStrictMockTest.range":90,"org.easymock.tests2.UsageConstraintsTest.lessThan":207,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":374,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":105,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":377,"org.easymock.tests2.CaptureTest.testCaptureRightOne":82,"org.easymock.tests2.UsageConstraintsTest.testOr":69,"org.easymock.tests.UsageRangeTest.combination":170,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":123,"org.easymock.tests.UsageTest.wrongArguments":166,"org.easymock.tests2.MockBuilderTest.testWithConstructor":97,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":383,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":298,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":306,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":88,"org.easymock.tests.UsageVarargTest.varargShortAccepted":363,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":155,"org.easymock.tests2.UsageConstraintsTest.cmpTo":198,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":224,"org.easymock.tests2.CompareToTest.testLessThan":375,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":11,"org.easymock.tests2.CaptureTest.testCaptureFromStub":83,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":131,"org.easymock.tests.UsageTest.unexpectedCallWithArray":165,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":159,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":351,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":307,"org.easymock.tests2.CaptureTest.testCapture":376,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":161,"org.easymock.tests2.UsageConstraintsTest.constraints":64,"org.easymock.samples.ExampleTest.addAndChangeDocument":329,"org.easymock.tests.UsageStrictMockTest.testVerify":382,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":369,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":353,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":347,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":335,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":299,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":173,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":281,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":108,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":93,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":359}}]

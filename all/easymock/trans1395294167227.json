[{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.UnorderedBehavior:57","sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[77,0,2,3,4,5,6,7,8,78,9,79,11],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:260","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:919","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,79,10,11,98,99,100,101,102,103,104,105,106,107,12,108,109,110,13,14,15,16,111,17,112,18,19,20,21,113,22,114,23,24,25,26,27,28,29,30,31,32,115,33,116,34,35,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,36,37,38,179,180,181,39,40,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,41,207,42,208,43,44,209,210,211,212,213,214,45,46,47,48,49,50,215,51,52,53,54,216,217,218,219,220,221,55,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,56,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,57,58,281,59,60,61,62,63,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,64,362,363,65,66,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,67,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,68,399,69,400,70,71,401,72,73,402,403,404,405,406,407,408,409,410,74,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,75,457,458,76,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[490],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:191","failures":[80,92,93,95,96,98,100,108,109,110,117,121,124,125,126,127,130,131,151,152,154,156,157,158,159,160,162,163,164,165,167,168,169,170,171,172,173,185,186,188,189,190,191,193,194,195,196,197,198,199,200,201,238,239,240,242,243,244,245,246,247,248,249,250,251,252,254,255,56,256,257,283,288,292,293,294,295,296,297,299,300,301,302,303,322,323,324,325,326,327,328,329,370,371,372,373,374,376,379,404,405,406,407,408,409],"status":-1,"binaryOperator":"org.easymock.ConstructorArgs != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1633","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(float[]))","type":"CtInvocationImpl"},"failures":[24],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:217","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,95,96,96,0,1,2,3,4,5,6,7,97,8,9,79,10,11,98,99,100,101,102,103,104,105,106,107,12,108,13,14,15,16,17,112,18,19,20,21,113,22,114,23,24,25,26,27,28,29,30,31,32,115,33,116,34,35,124,125,126,127,129,130,131,133,134,135,136,137,138,144,154,157,167,173,176,177,178,36,37,38,179,180,181,39,40,182,183,184,185,186,187,188,189,190,191,193,196,197,198,199,202,203,204,205,206,41,207,42,208,43,44,209,212,213,214,45,46,47,48,49,50,215,51,52,53,54,216,218,219,220,221,55,222,223,224,225,231,238,239,240,241,242,244,248,249,250,252,255,56,257,258,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,57,58,281,59,60,61,62,63,282,292,302,304,305,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,351,357,359,360,361,64,362,363,65,66,364,365,366,367,368,369,372,373,374,376,67,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,397,68,399,69,400,70,71,401,72,73,402,403,405,406,407,409,410,74,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,445,446,447,448,449,450,451,452,453,454,455,456,75,457,458,76,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,484,485,486],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[404,408],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"candidateMethod"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[0,2,9,15,16,112,19,20,113,30,116],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[404],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:108","sourceCode":"throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String))","type":"CtThrowImpl"},"failures":[491],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[28,492],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[178,493,494,495,496,497,498,42,43,44,282,499,500,501,360,71,72,73,426,427,428,430,433,434,435,442,443],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:243","sourceCode":"if (java.lang.Object == null) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType();\n    if (java.lang.Class<?>.isPrimitive()) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n    } \n    return ;\n} ","type":"CtIfImpl"},"failures":[405,407,410,438],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[80,82,83,84,85,87,89,91,95,95,96,96,0,1,2,3,4,5,6,7,97,8,9,79,10,11,98,99,101,102,103,104,105,106,107,12,108,13,14,15,16,17,112,18,19,20,21,113,22,114,23,24,25,26,27,28,29,30,31,32,115,33,116,34,35,124,125,126,127,129,130,131,133,134,135,136,137,138,144,154,157,167,173,176,177,178,37,179,180,181,182,183,185,186,187,188,189,190,193,197,198,199,202,203,204,205,206,42,43,44,212,213,214,45,46,47,48,49,50,215,51,52,53,54,55,231,238,239,240,241,244,248,250,252,56,258,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,57,58,281,59,60,61,62,63,282,302,315,316,317,318,319,320,321,330,331,332,333,334,351,357,359,360,362,363,364,373,374,376,67,380,381,382,387,388,389,390,391,392,393,394,397,68,399,70,71,72,73,405,407,409,410,74,411,412,413,414,415,416,419,426,427,428,429,431,432,434,436,437,438,439,440,441,443,75,457,458,76,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[502,503],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","argTypes":"argTypes","constructor":"constructor"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[502,192,503],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[109,504,505,506,507,508,509,510,251,511],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"parameterType"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[178,42,44,209,218,219,220,221,360,71,73,402,417,419,420,426,427,428],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[296,490,512],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[80,81,82,83,84,85,86,87,89,90,91,92,93,94,0,1,2,3,4,5,6,7,97,8,9,10,11,98,99,100,102,103,104,106,12,108,13,14,15,16,17,112,18,19,20,21,22,114,23,24,25,26,27,28,29,30,31,32,115,33,116,34,35,124,125,126,127,129,130,131,133,136,137,138,144,154,157,167,173,176,177,178,36,37,38,179,180,39,40,183,185,186,187,188,189,190,193,198,202,203,204,205,206,207,42,208,43,44,209,212,213,214,45,46,47,48,49,50,51,52,53,54,216,55,231,240,248,250,252,258,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,57,58,281,59,60,61,62,63,282,302,304,305,306,308,309,311,312,313,314,315,320,359,360,64,362,363,65,66,364,373,374,376,67,387,388,389,390,391,68,400,70,71,401,72,73,402,405,406,409,410,74,411,419,420,421,422,424,425,426,427,428,429,431,432,75,457,458,76,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:298","sourceCode":"return ","type":"CtReturnImpl"},"failures":[107,76],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[80,92,93,95,95,96,96,98,100,108,124,125,126,127,130,131,154,157,167,173,185,186,188,189,190,191,193,196,197,198,199,240,242,244,248,249,250,252,255,56,257,302,323,372,373,374,376,405,406,407,409],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[89,1,7,97,11,106,13,25,28,35,178,202,203,55,258,260,261,267,273,277,279,282,347,351,360,411,453,460,466,472,476,478],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:89","failures":[197,198,513,248],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1149","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,79,10,11,98,99,100,101,102,103,104,105,106,107,12,108,109,110,13,14,15,16,111,17,112,18,19,20,21,113,22,114,23,24,25,26,27,28,29,30,31,32,115,33,116,34,35,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,36,37,38,179,180,181,39,40,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,41,207,42,208,43,44,209,210,211,212,213,214,45,46,47,48,49,50,215,51,52,53,54,216,217,218,219,220,221,55,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,56,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,57,58,281,59,60,61,62,63,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,64,362,363,65,66,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,67,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,68,399,69,400,70,71,401,72,73,402,403,404,405,406,407,408,409,410,74,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,75,457,458,76,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:224","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[404],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[80,92,93,95,95,96,96,98,100,108,109,117,121,124,125,126,127,130,131,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,185,186,188,189,190,191,193,194,195,196,197,198,199,200,201,514,491,515,516,517,238,239,240,242,513,244,245,247,248,249,250,252,254,255,56,518,257,283,288,292,293,294,295,296,297,299,300,301,302,303,322,323,324,325,326,327,328,329,370,371,372,373,374,376,379,404,405,406,407,408,409,488],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[16],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[12],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":16,"org.easymock.tests2.UsageTest.argumentsOrdered":40,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":359,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":232,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":345,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":38,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":81,"org.easymock.tests2.DelegateToTest.testReturnException":102,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":317,"org.easymock.tests.MockingTest.testPartialClassMocking":373,"org.easymock.tests.MockClassControlTest.testToString":324,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":217,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":397,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":161,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":460,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":157,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":213,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":504,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":21,"org.easymock.tests2.UsageTest.wrongArguments":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":75,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":150,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":385,"org.easymock.samples.ExampleTest.answerVsDelegate":83,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":288,"org.easymock.tests2.UsageConstraintsTest.testNull":112,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":378,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":188,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":52,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":329,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":459,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":479,"org.easymock.tests.UsageTest.moreThanOneArgument":360,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":187,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":332,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":412,"org.easymock.tests.UsageTest.argumentsOrdered":66,"org.easymock.tests.UsageVarargTest.varargIntAccepted":306,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":387,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":509,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":242,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":119,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":236,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":249,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":337,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":391,"org.easymock.tests.ReplayStateInvalidUsageTest.times":453,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":144,"org.easymock.tests2.DependencyTest.testClassMocking":210,"org.easymock.tests2.AnswerTest.answer":133,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":113,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":352,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":225,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":285,"org.easymock.tests2.UsageTest.strictResetToDefault":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":196,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":331,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":48,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":381,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":416,"org.easymock.tests2.DelegateToTest.testDelegate":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":475,"org.easymock.tests.LimitationsTest.mockFinalMethod":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":320,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":369,"org.easymock.tests2.DependencyTest.testClassMockingSupport":211,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":442,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":192,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":473,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":223,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":447,"org.easymock.tests.UsageThrowableTest.throwError":57,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":287,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":395,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":237,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":334,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":175,"org.easymock.samples.PartialClassMockTest.testGetArea":80,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":448,"org.easymock.tests.MockingTest.testInterfaceMocking":375,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":388,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":437,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":488,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":461,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":162,"org.easymock.tests2.UsageTest.niceToStrict":37,"org.easymock.tests2.ThreadingTest.testChangeDefault":503,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":335,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":248,"org.easymock.tests2.MockBuilderTest.testCreateMock":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":170,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":147,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":494,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":469,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":49,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":284,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":441,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":417,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":383,"org.easymock.tests.UsageOverloadedMethodTest.overloading":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":166,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":432,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":25,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":410,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":272,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":490,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":24,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":307,"org.easymock.tests2.EasyMockSupportClassTest.testAll":154,"org.easymock.tests.MockClassControlTest.testEquals":328,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":406,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":477,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":514,"org.easymock.tests2.CaptureTest.testCaptureAll":1,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":224,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":367,"org.easymock.tests.MockNameTest.defaultName":489,"org.easymock.tests2.UsageConstraintsTest.testMatches":26,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":445,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":333,"org.easymock.samples.ExampleTest.voteForRemovals":87,"org.easymock.tests.UsageVarargTest.allKinds":315,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":426,"org.easymock.samples.BasicClassMockTest.testPrintContent":93,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":368,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":62,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":41,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":105,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":321,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":510,"org.easymock.tests2.UsageConstraintsTest.greaterThan":28,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":155,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":380,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":199,"org.easymock.samples.ExampleTest.voteForRemoval":84,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":299,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":200,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":203,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":289,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":120,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":191,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":409,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":176,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":254,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":342,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":46,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":316,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":101,"org.easymock.tests2.CaptureTest.testCaptureFirst":11,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":341,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":47,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":183,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":435,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":268,"org.easymock.tests2.UsageTest.moreThanOneArgument":178,"org.easymock.tests2.CaptureTest.testCapture2_2446744":10,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":205,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":353,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":314,"org.easymock.tests.GenericTest.testBridgedEquals":408,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":424,"org.easymock.tests.UsageExpectAndReturnTest.longType":264,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":214,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":365,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":518,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":478,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":482,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":476,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":393,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":330,"org.easymock.tests.UsageCallCountTest.tooManyCalls":425,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":171,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":149,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":465,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":61,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":125,"org.easymock.tests.MockingTest.testNiceClassMocking":379,"org.easymock.tests.MockingTest.testClassMocking":371,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":513,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":418,"org.easymock.tests2.UsageConstraintsTest.testContains":23,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":240,"org.easymock.tests2.UsageConstraintsTest.testFind":17,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":411,"org.easymock.tests.MockTypeTest.fromEasyMockClass":286,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":69,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":260,"org.easymock.tests.UsageExpectAndReturnTest.object":271,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":193,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":148,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":51,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":505,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":309,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":486,"org.easymock.tests.UsageTest.exactCallCountByLastCall":364,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":340,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":413,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":109,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":277,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":304,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":431,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":227,"org.easymock.tests.MockClassControlTest.testHashCode":327,"org.easymock.tests2.EasyMockSupportTest.testVerify":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":164,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":414,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":440,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":429,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":222,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":184,"org.easymock.tests.UsageVarargTest.varargCharAccepted":308,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":291,"org.easymock.tests2.CaptureTest.testCaptureMultiple":77,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":358,"org.easymock.tests2.UsageTest.openCallCountByLastCall":179,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":54,"org.easymock.tests.DefaultClassInstantiatorTest.object":292,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":439,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":484,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":501,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":165,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":517,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":59,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":142,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":226,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":197,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":466,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":278,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":392,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":496,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":173,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":325,"org.easymock.tests2.UsageTest.resumeIfFailure":182,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":283,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":319,"org.easymock.tests2.StubTest.stubWithReturnValue":12,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":251,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":33,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":270,"org.easymock.tests2.SerializationTest.testAllMockedMethod":100,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":351,"org.easymock.samples.SupportTest.voteForRemovals":91,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":404,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":472,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":357,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":134,"org.easymock.tests.UsageExpectAndThrowTest.object":470,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":398,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":31,"org.easymock.tests2.DelegateToTest.testWrongClass":104,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":480,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":481,"org.easymock.tests.UsageStrictMockTest.range":72,"org.easymock.samples.ConstructorCalledMockTest.testTax":95,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":122,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":215,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":471,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":250,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":455,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":151,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":65,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":384,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":438,"org.easymock.tests2.CaptureTest.testCaptureNone":97,"org.easymock.tests.UsageUnorderedTest.message":282,"org.easymock.tests.UsageVerifyTest.twoReturns":428,"org.easymock.tests.UsageVarargTest.varargByteAccepted":313,"org.easymock.tests2.ThreadingTest.testThreadSafe":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":168,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":422,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":487,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":92,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":444,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":355,"org.easymock.tests2.UsageConstraintsTest.any":22,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":452,"org.easymock.tests2.StubTest.stub":107,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":394,"org.easymock.tests.UsageExpectAndThrowTest.longType":463,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":356,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":296,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":451,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":208,"org.easymock.tests2.SerializationTest.testClass":98,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":231,"org.easymock.tests.LimitationsTest.mockNativeMethod":302,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":407,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":280,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":516,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":141,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":209,"org.easymock.tests2.NameTest.nameForMocksControl":221,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":143,"org.easymock.tests2.MockedExceptionTest.testMockedException":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":156,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":363,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":464,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":259,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":376,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":185,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":252,"org.easymock.tests.MockingTest.testNicePartialClassMocking":374,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":190,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":139,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":443,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":131,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":20,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":32,"org.easymock.tests.MockingTest.testTwoMocks":372,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":132,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":261,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":468,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":39,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":34,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":502,"org.easymock.samples.ExampleTest.removeNonExistingDocument":88,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":449,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":146,"org.easymock.tests.UsageStrictMockTest.differentMethods":73,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":228,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":294,"org.easymock.tests2.ConstraintsToStringTest.andToString":497,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":204,"org.easymock.tests2.MockBuilderTest.testCreateMockString":257,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":322,"org.easymock.tests.UsageExpectAndThrowTest.floatType":462,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":158,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":153,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":136,"org.easymock.tests.UsageVerifyTest.twoThrows":427,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":110,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":167,"org.easymock.samples.ExampleTest.voteAgainstRemoval":85,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":436,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":346,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":198,"org.easymock.tests.LimitationsTest.privateConstructor":301,"org.easymock.tests2.UsageConstraintsTest.testNotNull":116,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":63,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":238,"org.easymock.tests2.UsageTest.defaultResetToNice":181,"org.easymock.samples.ExampleTest.voteAgainstRemovals":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":347,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":140,"org.easymock.tests.UsageVarargTest.differentLength":310,"org.easymock.tests2.CallbackTest.callback":55,"org.easymock.tests2.UsageConstraintsTest.equals":111,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":194,"org.easymock.tests.UsageTest.openCallCountByLastCall":362,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":13,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":458,"org.easymock.tests.UsageCallCountTest.tooFewCalls":420,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":127,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":386,"org.easymock.tests.UsageThrowableTest.throwCheckedException":60,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":499,"org.easymock.tests.MockingTest.testStrictClassMocking":370,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":399,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":130,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":145,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":126,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":454,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":129,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":138,"org.easymock.tests.ObjectMethodsTest.testHashCode":485,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":508,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":206,"org.easymock.tests2.NameTest.nameForNiceMock":220,"org.easymock.tests2.DependencyTest.testInterfaceMocking":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":506,"org.easymock.samples.ExampleTest.addDocument":86,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":169,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":174,"org.easymock.tests2.DelegateToTest.testStubDelegate":103,"org.easymock.tests2.AnswerTest.stubAnswer":137,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":71,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":253,"org.easymock.tests.UsageVarargTest.varargLongAccepted":312,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":344,"org.easymock.tests.UsageExpectAndReturnTest.floatType":263,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":279,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":108,"org.easymock.tests2.ConstraintsToStringTest.orToString":493,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":96,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":433,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":29,"org.easymock.tests.UsageThrowableTest.noUpperLimit":58,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":235,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":14,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":117,"org.easymock.tests2.SerializationTest.test":99,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":512,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":293,"org.easymock.tests2.UsageConstraintsTest.testSame":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":262,"org.easymock.samples.SupportTest.addDocument":90,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":128,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":159,"org.easymock.tests.GenericTest.testPackageScope":405,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":339,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":234,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":377,"org.easymock.tests2.NameTest.nameForMock":218,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":273,"org.easymock.tests2.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":256,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":195,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":265,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":474,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":483,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":382,"org.easymock.tests2.MockedExceptionTest.testRealException":241,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":290,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":349,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":500,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":511,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":348,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":457,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":456,"org.easymock.tests2.NameTest.nameForStrictMock":219,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":247,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":258,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":189,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":121,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":30,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":295,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":244,"org.easymock.tests2.UsageStrictMockTest.range":43,"org.easymock.tests2.UsageConstraintsTest.lessThan":35,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":491,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":230,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":507,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":163,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests2.UsageConstraintsTest.testOr":19,"org.easymock.tests.UsageRangeTest.combination":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":186,"org.easymock.tests.UsageTest.wrongArguments":64,"org.easymock.tests2.MockBuilderTest.testWithConstructor":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":160,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":323,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":266,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":336,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":297,"org.easymock.tests.UsageVarargTest.varargShortAccepted":311,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":423,"org.easymock.tests2.UsageConstraintsTest.cmpTo":114,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":338,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":180,"org.easymock.tests2.CaptureTest.testCaptureFromStub":79,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":446,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":245,"org.easymock.tests.UsageTest.unexpectedCallWithArray":361,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":70,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":421,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":275,"org.easymock.tests2.CaptureTest.testCapture":78,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":401,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.samples.ExampleTest.addAndChangeDocument":89,"org.easymock.tests2.ConstraintsToStringTest.notToString":495,"org.easymock.tests.UsageStrictMockTest.testVerify":403,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":94,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":400,"org.easymock.tests2.CompareToTest.testGreateThan":492,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":366,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":515,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":389,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":267,"org.easymock.tests.LimitationsTest.abstractClass":300,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":390,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":50,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":305}}]

[{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[5,6],"status":-1,"binaryOperator":"int < 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[7,8],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[10,11,12,13,14,9,15,16,17,18,3,4,19,20,21,22,23,24,25,26,7,27,28,29,30,31,32,33,34,5,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:89","sourceCode":"return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object)","type":"CtReturnImpl"},"failures":[72,14,26,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,35,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,59,60,129,130,131,132,133,134,135,136,137,138,139,140,141,142,70,143,144,145,146,147,148,149,150,2,151,152,153,154,155,156,157],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:44","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:45","sourceCode":"synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n    if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n        org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n    } \n}","type":"CtSynchronizedImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:71","failures":[158,159,160,161,99,100,101,162,163,102,103,104,105,106,164,165,166,110,167,143,146,168],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:52","failures":[90,91,130,131,150,169,170],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[171,172,173,174,175,176,72,10,11,12,13,14,9,15,16,17,18,3,4,19,20,21,22,23,24,25,26,7,27,28,29,30,31,32,33,34,5,73,75,177,76,77,78,79,178,179,180,80,81,82,83,181,84,85,182,183,86,87,184,185,88,35,89,90,91,92,186,158,159,160,93,187,188,189,190,191,192,95,96,97,98,161,193,194,99,100,162,163,102,103,104,105,106,195,196,197,198,199,200,201,37,202,203,107,204,205,206,207,164,38,165,166,109,208,209,210,211,212,111,213,112,214,113,114,215,115,116,216,217,218,219,220,39,40,41,42,43,44,45,46,47,48,49,50,51,52,221,117,222,223,224,225,226,227,228,53,54,55,56,57,229,230,231,232,233,234,235,58,236,121,122,123,124,237,238,125,126,127,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,128,59,60,129,130,131,132,267,268,269,270,271,272,273,274,61,62,63,64,275,276,277,167,136,137,138,278,279,280,281,139,282,283,140,141,142,284,65,66,67,68,69,70,285,286,287,288,0,1,289,290,291,71,150,2,151,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,152,153,154,316,317,155,156,157,318,169,170,319,320,321,322,323,324,325,326,327,327,328,328,168,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"failures":[330],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:1249","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:243","failures":[173,181,84,85,182,183,86,87,184,185,35,90,91,186,158,159,160,100,162,102,103,105,198,37,203,107,204,205,206,207,38,165,166,109,221,226,227,228,53,54,55,56,57,60,130,131,267,268,269,270,273,61,62,138,278,279,280,65,291,295,296,297,298,299,300,303,304,306,307,308,310,311,312,313,314,315,321,323,324,325,168,329],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[272,273,274,331,332,333,334,335,291],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[161,193,194],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"matched"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[26,206],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[161,193,194,336],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:121","sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[14,9,16,18,3,19,28,33,39,41,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[56,260],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"genericParameters"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[171,172,173,174,175,176,72,10,11,12,13,14,9,15,16,17,18,3,4,19,20,21,22,23,24,25,26,7,27,28,29,30,31,32,33,34,5,73,75,177,76,77,78,79,178,179,180,80,81,82,83,181,84,85,182,183,86,87,184,185,88,35,89,90,91,92,186,158,159,160,93,187,188,189,190,191,192,95,96,97,98,161,193,194,99,100,162,163,102,103,104,105,106,195,196,197,198,199,200,201,37,202,203,107,204,205,206,207,164,38,165,166,109,208,209,210,211,212,111,213,112,214,113,114,215,115,116,216,217,218,219,220,39,40,41,42,43,44,45,46,47,48,49,50,51,52,221,117,222,223,224,225,226,227,228,53,54,55,56,57,229,230,231,232,233,234,235,58,236,121,122,123,124,237,238,125,126,127,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,128,59,60,129,130,131,132,267,268,269,270,271,272,273,274,61,62,63,64,275,276,277,167,136,137,138,278,279,280,281,139,282,283,140,141,142,284,65,66,67,68,69,70,285,286,287,288,0,1,289,290,291,71,150,2,151,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,152,153,154,316,317,155,156,157,318,169,170,319,320,321,322,323,324,325,326,327,327,328,328,168,329],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.Captures:53","failures":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,337],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[14,9,18,3,19,28,39,41,49],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[338,276,339],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[75,179,121,238,287,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[26,77,80,81,90,340,341,123,124,125,126,59,130,142,70,2,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"argument"}},{"transplant":{"position":"org.easymock.EasyMock:853","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[76,35,90,91,122,60,130,131,342,343,344,345,70,150,2,151],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[346],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[28],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":9,"org.easymock.tests2.UsageTest.argumentsOrdered":81,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":121,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":216,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":235,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":74,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":79,"org.easymock.tests2.StubTest.stubWithReturnValue":220,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":304,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":32,"org.easymock.tests2.SerializationTest.testAllMockedMethod":194,"org.easymock.tests2.DelegateToTest.testReturnException":172,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":275,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":233,"org.easymock.tests.MockingTest.testPartialClassMocking":226,"org.easymock.samples.SupportTest.voteForRemovals":329,"org.easymock.tests.MockClassControlTest.testToString":133,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":291,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":251,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":110,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":336,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":276,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":239,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":158,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":188,"org.easymock.tests.UsageExpectAndThrowTest.object":249,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":342,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":29,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":185,"org.easymock.tests2.DelegateToTest.testWrongClass":174,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":61,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":4,"org.easymock.tests2.UsageTest.wrongArguments":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":65,"org.easymock.samples.ConstructorCalledMockTest.testTax":327,"org.easymock.tests.UsageStrictMockTest.range":130,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":230,"org.easymock.samples.ExampleTest.answerVsDelegate":322,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":215,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":146,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":181,"org.easymock.tests2.UsageConstraintsTest.testNull":16,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":250,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":205,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":102,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":116,"org.easymock.tests2.CaptureTest.testPrimitive":42,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":69,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":258,"org.easymock.tests.UsageTest.moreThanOneArgument":122,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":125,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":229,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":269,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":274,"org.easymock.tests2.CaptureTest.testCaptureNone":47,"org.easymock.tests.UsageUnorderedTest.message":70,"org.easymock.tests.UsageVerifyTest.twoReturns":151,"org.easymock.tests2.ThreadingTest.testThreadSafe":199,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":318,"org.easymock.tests.UsageTest.argumentsOrdered":126,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":317,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":338,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":53,"org.easymock.tests2.CaptureTest.testCapture_2617107":41,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":333,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":68,"org.easymock.tests2.UsageConstraintsTest.any":20,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":163,"org.easymock.tests2.StubTest.stub":219,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":266,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":334,"org.easymock.tests.UsageExpectAndThrowTest.longType":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":234,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":89,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":73,"org.easymock.tests2.SerializationTest.testClass":161,"org.easymock.tests.LimitationsTest.mockNativeMethod":221,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":314,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":167,"org.easymock.tests2.AnswerTest.answer":187,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":19,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":197,"org.easymock.tests2.CaptureTest.testAnd":39,"org.easymock.tests2.UsageTest.strictResetToDefault":177,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":92,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":108,"org.easymock.tests2.NameTest.nameForMocksControl":98,"org.easymock.tests2.MockedExceptionTest.testMockedException":209,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":268,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":279,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":214,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":238,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":320,"org.easymock.tests2.DelegateToTest.testDelegate":176,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":243,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":228,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":203,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":103,"org.easymock.tests.MockingTest.testNicePartialClassMocking":227,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":254,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":207,"org.easymock.tests2.CaptureTest.testCaptureLast":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":58,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":137,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":87,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":3,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":263,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":30,"org.easymock.tests.MockingTest.testTwoMocks":225,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":136,"org.easymock.tests2.CaptureTest.testCapture1_2446744":43,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":295,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":247,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":195,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":80,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":34,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":339,"org.easymock.tests.UsageThrowableTest.throwError":285,"org.easymock.tests.UsageStrictMockTest.differentMethods":131,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":145,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":201,"org.easymock.tests2.MockBuilderTest.testCreateMockString":106,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests.UsageExpectAndThrowTest.floatType":241,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":26,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":190,"org.easymock.tests.UsageVerifyTest.twoThrows":2,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":159,"org.easymock.samples.PartialClassMockTest.testGetArea":168,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":54,"org.easymock.samples.ExampleTest.voteAgainstRemoval":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":332,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":273,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":272,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":166,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":240,"org.easymock.tests2.UsageTest.niceToStrict":78,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":119,"org.easymock.tests2.UsageConstraintsTest.testNotNull":33,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":290,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":208,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":162,"org.easymock.tests2.MockBuilderTest.testCreateMock":104,"org.easymock.tests2.UsageTest.defaultResetToNice":180,"org.easymock.samples.ExampleTest.voteAgainstRemovals":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":310,"org.easymock.tests.UsageVarargTest.differentLength":149,"org.easymock.tests2.CallbackTest.callback":72,"org.easymock.tests.UsageTest.openCallCountByLastCall":237,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":248,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":12,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":294,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":152,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":67,"org.easymock.tests.UsageCallCountTest.tooFewCalls":154,"org.easymock.tests.UsageOverloadedMethodTest.overloading":223,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":24,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":306,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":222,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":182,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":23,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":48,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":231,"org.easymock.tests.UsageThrowableTest.throwCheckedException":0,"org.easymock.tests2.EasyMockSupportClassTest.testAll":186,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":256,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":261,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":196,"org.easymock.tests2.CaptureTest.testCaptureAll":40,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":86,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":64,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":94,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":85,"org.easymock.tests.MockNameTest.defaultName":120,"org.easymock.tests2.UsageConstraintsTest.testMatches":25,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":183,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":270,"org.easymock.samples.ExampleTest.voteForRemovals":325,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":202,"org.easymock.tests2.NameTest.nameForNiceMock":97,"org.easymock.tests.UsageVarargTest.allKinds":71,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":150,"org.easymock.tests2.DependencyTest.testInterfaceMocking":184,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":262,"org.easymock.tests2.DelegateToTest.testStubDelegate":173,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":289,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":88,"org.easymock.tests2.AnswerTest.stubAnswer":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":236,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":175,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":60,"org.easymock.tests2.UsageConstraintsTest.greaterThan":7,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":278,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":109,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":331,"org.easymock.samples.ExampleTest.voteForRemoval":323,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":200,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":313,"org.easymock.tests.UsageExpectAndReturnTest.floatType":297,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":147,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":198,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":164,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":328,"org.easymock.tests.UsageThrowableTest.noUpperLimit":286,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":27,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":140,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":284,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":75,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":13,"org.easymock.tests2.SerializationTest.test":193,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":44,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":213,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":287,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":296,"org.easymock.tests2.UsageConstraintsTest.testSame":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":232,"org.easymock.tests2.CaptureTest.testCaptureFirst":52,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":346,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":112,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":83,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":142,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":302,"org.easymock.tests.GenericTest.testPackageScope":277,"org.easymock.tests2.UsageTest.moreThanOneArgument":76,"org.easymock.tests2.CaptureTest.testCapture2_2446744":51,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":37,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":319,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":105,"org.easymock.tests2.NameTest.nameForMock":95,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":156,"org.easymock.tests.UsageExpectAndReturnTest.longType":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":259,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":212,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":307,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":257,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":315,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":31,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":255,"org.easymock.tests2.UsageStrictMockTest.differentMethods":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":267,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":265,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":299,"org.easymock.tests.UsageCallCountTest.tooManyCalls":157,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":253,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":280,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":153,"org.easymock.tests2.MockedExceptionTest.testRealException":211,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":303,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":148,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":340,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":244,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":35,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":66,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":84,"org.easymock.tests2.UsageConstraintsTest.testContains":22,"org.easymock.tests2.NameTest.nameForStrictMock":96,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":210,"org.easymock.tests2.UsageConstraintsTest.testFind":15,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":224,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":10,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":206,"org.easymock.tests.MockTypeTest.fromEasyMockClass":144,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":11,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":128,"org.easymock.tests.UsageExpectAndReturnTest.object":305,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":343,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":28,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":38,"org.easymock.tests.ErrorMessageTest.testGetters":344,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":100,"org.easymock.tests2.UsageStrictMockTest.range":90,"org.easymock.tests2.UsageConstraintsTest.lessThan":5,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":115,"org.easymock.tests.UsageTest.exactCallCountByLastCall":127,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":63,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":330,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":111,"org.easymock.tests2.CaptureTest.testCaptureRightOne":49,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":169,"org.easymock.tests2.UsageConstraintsTest.testOr":18,"org.easymock.tests.UsageRangeTest.combination":138,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":311,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":107,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":282,"org.easymock.tests.UsageTest.wrongArguments":124,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":300,"org.easymock.tests2.EasyMockSupportTest.testVerify":218,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":308,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":170,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":293,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":281,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":155,"org.easymock.tests2.UsageConstraintsTest.cmpTo":21,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":36,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":189,"org.easymock.tests2.CompareToTest.testLessThan":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":335,"org.easymock.tests2.UsageTest.openCallCountByLastCall":178,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":179,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":217,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":292,"org.easymock.tests2.CaptureTest.testCaptureFromStub":50,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":101,"org.easymock.tests.UsageTest.unexpectedCallWithArray":123,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":117,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":341,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":246,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":288,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":59,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":316,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":309,"org.easymock.tests2.UsageConstraintsTest.constraints":14,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":129,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":135,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":165,"org.easymock.samples.ExampleTest.addAndChangeDocument":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":245,"org.easymock.tests.CapturesMatcherTest.test":337,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":312,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":264,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":260,"org.easymock.tests2.CompareToTest.testGreateThan":8,"org.easymock.tests2.UsageTest.resumeIfFailure":82,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":45,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":55,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":301,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":143,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":56,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":141,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":345,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":114}}]

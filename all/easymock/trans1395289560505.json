[{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[124,125,126,127,128,129,130,131,132,133,134,43,135,136,137,138,139,45,140,141,142,143,144,145,146,147,148,50,149,51,150,151,52,152,53,54,55,56,153,154,155,156,157,158,159,160,161,162,163,164,165,165,166,166,167,168,169],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[170],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:315","failures":[28,33,171,172,56,173,69,82,174,175,176,177,178,179,84,87,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,106,110,111],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[17,204,71,205,73,206,207,74,75,80],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:131","failures":[208],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[126,129,209,210,211,212,130,213,214,131,215,216,217,218,219,220,221,222,223,132,224,225,226,227,228,133,229,230,231,232,43,233,234,235,236,237,238,147,239,165,166],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"failures":[240],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[241],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.internal.Range:44","failures":[242,243,244,245,246,247,248,249,250,251,1,2,3,4,252,5,6,7,8,9,10,253,11,12,13,14,15,16,17,18,19,20,21,22,204,23,24,25,26,254,255,256,257,258,27,259,260,261,262,263,264,28,29,30,265,31,266,32,33,0,267,268,34,35,124,125,126,127,269,270,128,129,209,271,272,36,37,273,274,38,275,39,40,276,210,211,212,130,213,214,131,215,216,217,218,219,220,221,222,223,132,224,225,226,227,228,133,229,230,277,278,279,280,281,282,41,283,284,285,286,287,288,42,289,290,291,292,293,294,295,296,297,298,43,44,135,136,233,138,139,234,299,45,140,141,235,142,300,236,143,144,238,146,301,302,303,304,147,239,305,46,47,48,306,49,148,50,307,149,51,150,151,208,52,308,309,152,53,54,55,310,311,171,172,56,173,57,58,59,60,61,62,63,64,65,66,67,68,312,313,314,315,316,317,318,319,320,69,70,71,205,72,73,206,207,74,75,76,77,78,79,80,321,322,153,323,324,325,326,327,328,329,330,81,82,331,332,154,155,156,333,157,334,335,336,337,338,339,83,340,341,342,343,344,174,175,176,177,178,179,345,84,85,346,347,86,87,348,349,88,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,350,351,352,353,354,355,356,357,358,359,360,89,361,90,91,362,363,364,158,365,366,367,368,369,370,371,372,92,373,93,374,94,95,375,376,377,378,379,380,381,382,383,384,385,96,200,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,241,159,160,161,411,412,413,414,97,98,99,100,415,416,417,201,418,101,419,162,420,421,422,423,424,425,426,427,428,429,430,431,102,103,202,203,104,432,163,433,434,435,436,164,437,438,105,439,106,107,108,109,110,111,440,112,441,442,443,444,445,446,447,448,449,450,451,452,453,113,454,114,455,456,457,458,459,460,461,462,115,116,117,463,464,118,119,120,121,122,465,466,467,468,469,123,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,165,166,492,167,493,494,495,168,169],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[265,267,268,39,496,497,346,347,348,349,360,90,432,454,114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[498,499,500],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[152],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:218","failures":[131,132,165,166,167],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.CompareEqual:39","failures":[12,501,52],"status":-1,"binaryOperator":"int == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[241,411],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:213","sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"expected":"o"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[126,128,141,313,329,365,366,367,386,164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.ConstructorArgs:54","failures":[126,129,209,210,211,212,130,213,214,131,215,216,217,218,219,220,221,222,223,132,224,225,226,227,228,133,229,230,231,232,43,233,234,235,236,237,238,147,239,165,166],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[502,503,504,505,506],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[507],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:117","failures":[248,249,251,42,291,293,415,485],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"expected"}},{"position":"org.easymock.internal.RecordState:262","failures":[28,33,171,172,56,173,69,82,174,175,176,177,178,179,84,87,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,355,356,357,200,201,202,203,105,106,107,108,109,110,111,454,455,456,457],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:125","sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","type":"CtAssignmentImpl"},"failures":[243,244,245,247,248,249,251,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,204,23,24,25,26,27,28,29,30,265,31,266,32,33,0,267,268,34,35,124,125,126,127,270,128,129,36,37,273,274,38,275,39,40,276,130,131,132,133,41,42,291,292,293,43,44,135,136,138,45,140,141,142,143,144,146,301,302,303,304,147,46,47,48,306,49,148,50,307,149,51,150,151,52,152,53,54,55,171,172,56,173,57,58,59,60,61,62,63,64,65,66,67,68,312,320,69,70,71,205,72,73,206,207,74,75,76,77,78,79,80,153,330,81,82,155,156,157,337,338,339,83,340,341,342,343,344,174,175,176,177,178,179,84,85,346,347,86,87,348,349,88,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,350,351,352,353,354,358,359,360,89,361,90,91,362,371,372,92,373,93,375,376,96,200,159,160,97,99,100,415,417,201,419,162,102,103,202,203,104,432,105,439,106,107,108,109,110,111,508,508,442,443,444,446,447,448,449,450,451,452,453,113,454,114,458,459,460,461,462,115,116,117,463,464,118,119,120,121,122,465,466,467,468,469,472,473,474,475,476,477,478,484,485,486,487,488,489,491,165,166,492,167,493,494,495,168,169],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:178","failures":[142,163],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[80],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[124,125,126,127,128,129,130,131,132,133,43,135,136,138,139,45,140,141,142,143,144,146,147,148,50,149,51,150,151,52,152,53,54,55,311,56,153,329,154,155,156,157,364,158,365,366,367,368,369,370,159,160,161,411,162,163,164,165,165,166,166,167,168,169],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[124,125,126,127,128,129,130,131,132,133,43,135,136,138,139,45,140,141,142,143,144,146,147,148,50,149,51,150,151,52,152,53,54,55,311,56,153,329,154,155,156,157,364,158,365,366,367,368,369,370,159,160,161,411,162,163,164,165,165,166,166,167,168,169],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[43,44,135,509],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:39","sourceCode":"return int <= 0","type":"CtReturnImpl"},"failures":[1,3,18,23,510],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"this.org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[163],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[507],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"key"}},{"transplant":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[31,309],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[241],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":84,"org.easymock.tests2.UsageTest.argumentsOrdered":268,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":397,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":266,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":492,"org.easymock.tests2.DelegateToTest.testReturnException":243,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":175,"org.easymock.tests.MockingTest.testPartialClassMocking":155,"org.easymock.tests.MockClassControlTest.testToString":365,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":294,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":112,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":406,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":218,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":180,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":131,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":37,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":10,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":102,"org.easymock.tests2.UsageTest.wrongArguments":265,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":288,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":343,"org.easymock.samples.ExampleTest.answerVsDelegate":485,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":164,"org.easymock.tests2.UsageConstraintsTest.testNull":6,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":335,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":149,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":66,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":370,"org.easymock.tests2.CaptureTest.testPrimitive":72,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":104,"org.easymock.tests.UsageTest.moreThanOneArgument":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":199,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":307,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":92,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":479,"org.easymock.tests.UsageTest.argumentsOrdered":349,"org.easymock.tests.UsageVarargTest.varargIntAccepted":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":337,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":504,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":263,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":315,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":140,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":389,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":340,"org.easymock.tests.ReplayStateInvalidUsageTest.times":428,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":41,"org.easymock.tests2.DependencyTest.testClassMocking":271,"org.easymock.tests2.AnswerTest.answer":42,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":404,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":304,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":434,"org.easymock.tests2.CaptureTest.testAnd":70,"org.easymock.tests2.UsageTest.strictResetToDefault":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":152,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":234,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":372,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":99,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":61,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":483,"org.easymock.tests2.DelegateToTest.testDelegate":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":195,"org.easymock.tests.LimitationsTest.mockFinalMethod":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":178,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":354,"org.easymock.tests2.DependencyTest.testClassMockingSupport":272,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":412,"org.easymock.tests2.CaptureTest.testCapture1_2446744":73,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":208,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":193,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":302,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":422,"org.easymock.tests.UsageThrowableTest.throwError":105,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":436,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":386,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":93,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":230,"org.easymock.samples.PartialClassMockTest.testGetArea":167,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":423,"org.easymock.tests.MockingTest.testInterfaceMocking":333,"org.easymock.tests2.CompareToTest.testLessOrEqual":510,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":338,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":94,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":181,"org.easymock.tests2.UsageTest.niceToStrict":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":219,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":329,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":498,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":226,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":189,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":62,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":433,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":457,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":470,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":341,"org.easymock.tests.UsageOverloadedMethodTest.overloading":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":228,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":15,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":201,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":119,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":330,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":14,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":76,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":445,"org.easymock.tests2.EasyMockSupportClassTest.testAll":130,"org.easymock.tests.MockClassControlTest.testEquals":369,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":160,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":197,"org.easymock.tests2.CaptureTest.testCaptureAll":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":303,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":352,"org.easymock.tests.MockNameTest.defaultName":345,"org.easymock.tests2.UsageConstraintsTest.testMatches":16,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":420,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":373,"org.easymock.samples.ExampleTest.voteForRemovals":489,"org.easymock.tests.UsageVarargTest.allKinds":453,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":113,"org.easymock.samples.BasicClassMockTest.testPrintContent":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":353,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":110,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":179,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":246,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":260,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":384,"org.easymock.tests2.UsageConstraintsTest.greaterThan":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":213,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":98,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":55,"org.easymock.samples.ExampleTest.voteForRemoval":486,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":385,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":47,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":310,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":437,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":316,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":151,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":162,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":28,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":236,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":59,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":211,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":174,"org.easymock.tests2.CaptureTest.testCaptureFirst":80,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":242,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":393,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":60,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":35,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":419,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":117,"org.easymock.tests2.UsageTest.moreThanOneArgument":30,"org.easymock.tests2.CaptureTest.testCapture2_2446744":79,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":405,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":144,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":452,"org.easymock.tests.GenericTest.testBridgedEquals":411,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":477,"org.easymock.tests.UsageExpectAndReturnTest.longType":461,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":350,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":145,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":198,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":123,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":204,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":196,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":356,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":371,"org.easymock.tests.UsageCallCountTest.tooManyCalls":478,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":472,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":227,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":463,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":109,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":125,"org.easymock.tests.MockingTest.testNiceClassMocking":336,"org.easymock.tests.MockingTest.testClassMocking":332,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":471,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":137,"org.easymock.tests2.UsageConstraintsTest.testContains":13,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":56,"org.easymock.tests2.UsageConstraintsTest.testFind":5,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":82,"org.easymock.tests.MockTypeTest.fromEasyMockClass":435,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":251,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":358,"org.easymock.tests.UsageExpectAndReturnTest.object":118,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":52,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":65,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":447,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":327,"org.easymock.tests.UsageTest.exactCallCountByLastCall":88,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":392,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":480,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":440,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":239,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":466,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":442,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":417,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":255,"org.easymock.tests.MockClassControlTest.testHashCode":368,"org.easymock.tests2.EasyMockSupportTest.testVerify":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":221,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":481,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":456,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":415,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":301,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":277,"org.easymock.tests.UsageVarargTest.varargCharAccepted":446,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":377,"org.easymock.tests2.CaptureTest.testCaptureMultiple":240,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":410,"org.easymock.tests2.UsageTest.openCallCountByLastCall":32,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":499,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":68,"org.easymock.tests.DefaultClassInstantiatorTest.object":378,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":455,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":325,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":497,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":107,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":281,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":254,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":53,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":367,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":186,"org.easymock.tests.CapturesMatcherTest.test":508,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":467,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":133,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":366,"org.easymock.tests2.UsageTest.resumeIfFailure":34,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":163,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":314,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":177,"org.easymock.tests2.StubTest.stubWithReturnValue":69,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":235,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":464,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":23,"org.easymock.tests2.SerializationTest.testAllMockedMethod":135,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":403,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":506,"org.easymock.samples.SupportTest.voteForRemovals":495,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":241,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":257,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":192,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":509,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":409,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":289,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":441,"org.easymock.tests.UsageExpectAndThrowTest.object":190,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":21,"org.easymock.tests2.DelegateToTest.testWrongClass":245,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":375,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":376,"org.easymock.samples.ConstructorCalledMockTest.testTax":165,"org.easymock.tests.UsageStrictMockTest.range":90,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":318,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":64,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":124,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":191,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":141,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":430,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":210,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":348,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":342,"org.easymock.tests2.CaptureTest.testCaptureNone":75,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":95,"org.easymock.tests.UsageUnorderedTest.message":432,"org.easymock.tests.UsageVerifyTest.twoReturns":114,"org.easymock.tests.UsageVarargTest.varargByteAccepted":451,"org.easymock.tests2.ThreadingTest.testThreadSafe":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":224,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":475,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":168,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":328,"org.easymock.tests2.CaptureTest.testCapture_2617107":205,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":407,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":203,"org.easymock.tests2.UsageConstraintsTest.any":11,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":427,"org.easymock.tests2.StubTest.stub":320,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":408,"org.easymock.tests.UsageExpectAndThrowTest.longType":183,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":176,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":382,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":426,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":275,"org.easymock.tests2.SerializationTest.testClass":43,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":27,"org.easymock.tests.LimitationsTest.mockNativeMethod":153,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":469,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":161,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":280,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":276,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":507,"org.easymock.tests2.NameTest.nameForMocksControl":298,"org.easymock.tests2.MockedExceptionTest.testMockedException":172,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":214,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":184,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":157,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":250,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":148,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":142,"org.easymock.tests.MockingTest.testNicePartialClassMocking":156,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":150,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":502,"org.easymock.tests2.CompareToTest.testCompareEqual":501,"org.easymock.tests2.CaptureTest.testCaptureLast":74,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":278,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":413,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":129,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":9,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":22,"org.easymock.tests.MockingTest.testTwoMocks":154,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":209,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":458,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":188,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":267,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":25,"org.easymock.samples.ExampleTest.removeNonExistingDocument":490,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":424,"org.easymock.tests.UsageStrictMockTest.differentMethods":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":284,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":256,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":380,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":48,"org.easymock.tests2.MockBuilderTest.testCreateMockString":146,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":364,"org.easymock.tests.UsageExpectAndThrowTest.floatType":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":215,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":212,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":291,"org.easymock.tests.UsageVerifyTest.twoThrows":454,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":305,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":416,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":132,"org.easymock.samples.ExampleTest.voteAgainstRemoval":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":398,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":374,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":54,"org.easymock.tests.LimitationsTest.privateConstructor":322,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":232,"org.easymock.tests2.UsageConstraintsTest.testNotNull":24,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":171,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":111,"org.easymock.tests2.UsageTest.defaultResetToNice":0,"org.easymock.samples.ExampleTest.voteAgainstRemovals":484,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":465,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":399,"org.easymock.tests.UsageVarargTest.differentLength":448,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":279,"org.easymock.tests2.CallbackTest.callback":248,"org.easymock.tests2.UsageConstraintsTest.equals":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":308,"org.easymock.tests.UsageTest.openCallCountByLastCall":86,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":202,"org.easymock.tests.UsageCallCountTest.tooFewCalls":473,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":127,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":344,"org.easymock.tests.UsageThrowableTest.throwCheckedException":108,"org.easymock.tests.MockingTest.testStrictClassMocking":331,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":128,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":200,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":126,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":283,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":429,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":270,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":293,"org.easymock.tests.ObjectMethodsTest.testHashCode":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":503,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":49,"org.easymock.tests2.NameTest.nameForNiceMock":297,"org.easymock.tests2.DependencyTest.testInterfaceMocking":36,"org.easymock.samples.ExampleTest.addDocument":488,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":229,"org.easymock.tests2.DelegateToTest.testStubDelegate":244,"org.easymock.tests2.AnswerTest.stubAnswer":292,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":89,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":300,"org.easymock.tests.UsageVarargTest.varargLongAccepted":450,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":396,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":468,"org.easymock.tests.UsageExpectAndReturnTest.floatType":460,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":147,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":166,"org.easymock.tests.UsageThrowableTest.noUpperLimit":439,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":418,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":262,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":2,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":313,"org.easymock.tests2.SerializationTest.test":44,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":206,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":379,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":459,"org.easymock.tests2.UsageConstraintsTest.testSame":7,"org.easymock.samples.SupportTest.addDocument":494,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":269,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":216,"org.easymock.tests.GenericTest.testPackageScope":159,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":482,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":391,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":261,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":334,"org.easymock.tests2.NameTest.nameForMock":295,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":120,"org.easymock.tests2.UsageStrictMockTest.differentMethods":40,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":238,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":309,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":462,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":194,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":324,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":100,"org.easymock.tests2.MockedExceptionTest.testRealException":173,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":401,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":319,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":496,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":505,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":400,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":38,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":431,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":103,"org.easymock.tests2.NameTest.nameForStrictMock":296,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":299,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":500,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":249,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":51,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":317,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":20,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":381,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":138,"org.easymock.tests2.UsageStrictMockTest.range":39,"org.easymock.tests2.UsageConstraintsTest.lessThan":26,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":258,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":395,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":58,"org.easymock.tests2.CaptureTest.testCaptureRightOne":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":220,"org.easymock.tests2.UsageConstraintsTest.testOr":8,"org.easymock.tests.UsageRangeTest.combination":97,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":50,"org.easymock.tests.UsageTest.wrongArguments":347,"org.easymock.tests2.MockBuilderTest.testWithConstructor":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":217,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":388,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":121,"org.easymock.tests.UsageVarargTest.varargShortAccepted":449,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":383,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":476,"org.easymock.tests2.UsageConstraintsTest.cmpTo":12,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":390,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":33,"org.easymock.tests2.CaptureTest.testCaptureFromStub":78,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":421,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":139,"org.easymock.tests.UsageTest.unexpectedCallWithArray":346,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":360,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":474,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":237,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":122,"org.easymock.tests2.UsageConstraintsTest.constraints":3,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":361,"org.easymock.samples.ExampleTest.addAndChangeDocument":491,"org.easymock.tests.UsageStrictMockTest.testVerify":363,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":493,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":359,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":351,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":207,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":134,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":339,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":116,"org.easymock.tests.LimitationsTest.abstractClass":321,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":101,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":83,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":443,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":63}}]

[{"position":"org.easymock.ConstructorArgs:54","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[34,90,91,92],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:60","failures":[3,4,5,6,7,8,35,36,37,39,40],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:707","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[3,4,5,6,7,8,94,35,36,37,39,40],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:91","sourceCode":"java.lang.StringBuilder.append(\", \")","type":"CtInvocationImpl"},"failures":[83],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[54,95,96,97,98,99,100,101,102],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[43,44,103,74,75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[105,106,107,108,109],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:34","failures":[110,43,44,111,47,50,51,112,113,114,115,116,117,118,119,120,121,122,68,123,69,70,72,124,74,75,125,77,78,79,80,126,127,128,129,130,83,131,132,133,134,135,136],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[2,3,34,137,138,139,140,141,37,38],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"failures":[142],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:95","sourceCode":"return java.util.List<T>","type":"CtReturnImpl"},"failures":[143,144,145],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[3,4,5,6,7,8,94,35,36,37,39,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[146],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:226","sourceCode":"try {\n    net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"mockClass"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[147,148,149,0,0,1,1,150,2,151,152,4,153,154,5,12,15,25,31,34,91,155,156,157,60,158,159,160,161,162,61,62,163,63,164,64,165,166,167,168,169,103,65,170,66,171,172,173,174,175,176,177,178,179,180,181,182],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[183,184],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[97],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[185],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:72","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[186,187,188,189],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[43,47,50,51,68,69,70,72,74,77,78,79,80,83,134],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[190,191],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[43,47,50,51,68,69,70,72,74,77,78,79,80,83],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[15,60,62,65,192],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:235","failures":[0,1,2,3,34,35,36,37,38,39,40,193,194,195,196],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[197,198,199,200],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[201,202,105,203,204,205,206,207,208,147,148,209,210,149,0,0,1,1,211,212,150,213,2,214,215,216,151,152,4,153,217,154,5,218,41,219,110,42,43,44,220,221,222,223,224,45,46,225,111,47,48,49,226,227,228,50,51,52,53,229,230,12,15,25,31,231,232,233,234,235,198,236,54,95,237,238,239,96,97,93,240,241,242,243,244,245,55,199,246,99,247,248,200,249,250,251,252,253,254,255,256,257,106,258,107,108,100,144,101,259,260,261,262,263,264,265,102,266,145,267,268,56,269,270,271,57,58,272,273,59,274,275,276,34,90,91,277,278,279,280,156,159,160,161,162,62,63,164,64,281,165,166,167,169,103,170,282,283,284,285,286,287,67,288,289,290,171,172,291,292,293,294,295,296,297,68,123,69,70,71,298,72,124,73,74,75,299,300,76,125,77,78,301,302,79,80,81,176,303,304,305,306,307,308,177,309,146,310,311,312,313,133,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,179,180,181,384,385,386,387,388,389,182,390,391,392,393,394],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[95,96,98],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[356,359],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[395,186,396],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[110,397,198,236,54,95,237,238,239,96,97,93,98,240,241,242,243,244,245,55,199,246,99,247,248,398,200,249,250,251,256,257,100,144,101,259,260,261,262,263,264,265,102,266,145,267,169,296,297,68,72,124,307,314,315,316,317,318,319,320,321,322,323,344,345,355],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:39","sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[52,229,288,289,290,104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastRange":"org.easymock.internal.MocksControl.ZERO_OR_MORE"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":95,"org.easymock.tests2.UsageTest.argumentsOrdered":51,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":76,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":274,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":49,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":201,"org.easymock.tests2.DelegateToTest.testReturnException":106,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":304,"org.easymock.tests.MockingTest.testPartialClassMocking":179,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":19,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":364,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":216,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":137,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":93,"org.easymock.tests2.UsageTest.wrongArguments":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":314,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":286,"org.easymock.samples.ExampleTest.answerVsDelegate":105,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":175,"org.easymock.tests2.UsageConstraintsTest.testNull":238,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":165,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":59,"org.easymock.tests2.CaptureTest.testPrimitive":259,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":318,"org.easymock.tests.UsageTest.moreThanOneArgument":125,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":383,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":392,"org.easymock.tests.UsageTest.argumentsOrdered":80,"org.easymock.tests.UsageVarargTest.varargIntAccepted":348,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":319,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":156,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":323,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":116,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":214,"org.easymock.tests2.AnswerTest.answer":277,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":104,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":224,"org.easymock.tests2.CaptureTest.testAnd":100,"org.easymock.tests2.UsageTest.strictResetToDefault":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":103,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":391,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":271,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":289,"org.easymock.tests2.DelegateToTest.testDelegate":108,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":307,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":295,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":135,"org.easymock.tests2.CaptureTest.testCapture1_2446744":260,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":377,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":222,"org.easymock.tests.UsageThrowableTest.throwError":356,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":89,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":394,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":193,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":33,"org.easymock.samples.PartialClassMockTest.testGetArea":149,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":146,"org.easymock.tests2.CompareToTest.testLessOrEqual":197,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":320,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":20,"org.easymock.tests2.UsageTest.niceToStrict":48,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":365,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":396,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.MockBuilderTest.testCreateMock":61,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":28,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":113,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":373,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":57,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":384,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":284,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":187,"org.easymock.tests.UsageOverloadedMethodTest.overloading":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":24,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":244,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":335,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":243,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":265,"org.easymock.tests2.EasyMockSupportClassTest.testAll":12,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":172,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":118,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":381,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":185,"org.easymock.tests2.CaptureTest.testCaptureAll":144,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":293,"org.easymock.tests2.UsageConstraintsTest.testMatches":245,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":393,"org.easymock.samples.ExampleTest.voteForRemovals":206,"org.easymock.tests.UsageVarargTest.allKinds":355,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":123,"org.easymock.samples.BasicClassMockTest.testPrintContent":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":294,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":362,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":41,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":308,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":141,"org.easymock.tests2.UsageConstraintsTest.greaterThan":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":13,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":288,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":66,"org.easymock.samples.ExampleTest.voteForRemoval":203,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":232,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":168,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":177,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":46,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":38,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":269,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":10,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":303,"org.easymock.tests2.CaptureTest.testCaptureFirst":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":270,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":53,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":134,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":331,"org.easymock.tests2.CaptureTest.testCapture2_2446744":145,"org.easymock.tests2.UsageTest.moreThanOneArgument":111,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":234,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":62,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":354,"org.easymock.tests.GenericTest.testBridgedEquals":191,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":188,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":86,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":94,"org.easymock.tests.UsageExpectAndReturnTest.longType":327,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":268,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":291,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":163,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":382,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":398,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":380,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":390,"org.easymock.tests.UsageCallCountTest.tooManyCalls":87,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":127,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":29,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":332,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":369,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":361,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":152,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":385,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":157,"org.easymock.tests2.UsageConstraintsTest.testContains":242,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":150,"org.easymock.tests2.UsageConstraintsTest.testFind":237,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":283,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":71,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":257,"org.easymock.tests.UsageExpectAndReturnTest.object":334,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":273,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":138,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":350,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":189,"org.easymock.tests.UsageTest.exactCallCountByLastCall":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":344,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":130,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":3,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":340,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":346,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":109,"org.easymock.tests2.EasyMockSupportTest.testVerify":276,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":22,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":115,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":82,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":221,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":397,"org.easymock.tests.UsageVarargTest.varargCharAccepted":349,"org.easymock.tests2.CaptureTest.testCaptureMultiple":143,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":219,"org.easymock.tests2.UsageTest.openCallCountByLastCall":226,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":395,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":275,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":23,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":371,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":359,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":65,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":370,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":341,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":31,"org.easymock.tests2.UsageTest.resumeIfFailure":52,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":306,"org.easymock.tests2.StubTest.stubWithReturnValue":230,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":37,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":200,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":333,"org.easymock.tests2.SerializationTest.testAllMockedMethod":91,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":195,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":120,"org.easymock.samples.SupportTest.voteForRemovals":210,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":190,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":376,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":92,"org.easymock.tests.UsageExpectAndThrowTest.object":374,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":247,"org.easymock.tests2.DelegateToTest.testWrongClass":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":297,"org.easymock.samples.ConstructorCalledMockTest.testTax":0,"org.easymock.tests.UsageStrictMockTest.range":74,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":272,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":151,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":375,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":9,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":79,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":285,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":126,"org.easymock.tests2.CaptureTest.testCaptureNone":264,"org.easymock.tests.UsageUnorderedTest.message":68,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":88,"org.easymock.tests.UsageVerifyTest.twoReturns":70,"org.easymock.tests.UsageVarargTest.varargByteAccepted":353,"org.easymock.tests2.ThreadingTest.testThreadSafe":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":26,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":389,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":147,"org.easymock.tests2.CaptureTest.testCapture_2617107":101,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":317,"org.easymock.tests2.UsageConstraintsTest.any":240,"org.easymock.tests2.StubTest.stub":229,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":305,"org.easymock.tests.UsageExpectAndThrowTest.longType":367,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":311,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":42,"org.easymock.tests2.SerializationTest.testClass":34,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":218,"org.easymock.tests.LimitationsTest.mockNativeMethod":176,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":173,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":343,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":220,"org.easymock.tests2.NameTest.nameForMocksControl":255,"org.easymock.tests2.MockedExceptionTest.testMockedException":212,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":14,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":302,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":181,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":368,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":164,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":162,"org.easymock.tests.MockingTest.testNicePartialClassMocking":180,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":167,"org.easymock.tests2.CaptureTest.testCaptureLast":263,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":136,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":97,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":5,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":248,"org.easymock.tests.MockingTest.testTwoMocks":178,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":324,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":372,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":50,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":250,"org.easymock.tests.UsageStrictMockTest.differentMethods":75,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":310,"org.easymock.tests2.ConstraintsToStringTest.andToString":119,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":233,"org.easymock.tests2.MockBuilderTest.testCreateMockString":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":16,"org.easymock.tests.UsageExpectAndThrowTest.floatType":366,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":11,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":278,"org.easymock.tests.UsageVerifyTest.twoThrows":69,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":25,"org.easymock.samples.ExampleTest.voteAgainstRemoval":204,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":170,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":8,"org.easymock.tests2.UsageConstraintsTest.testNotNull":249,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":211,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":363,"org.easymock.tests2.UsageTest.defaultResetToNice":228,"org.easymock.samples.ExampleTest.voteAgainstRemovals":202,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":339,"org.easymock.tests.UsageVarargTest.differentLength":84,"org.easymock.tests2.CallbackTest.callback":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":196,"org.easymock.tests.UsageTest.openCallCountByLastCall":301,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":198,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":316,"org.easymock.tests.UsageCallCountTest.tooFewCalls":387,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":153,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":287,"org.easymock.tests.UsageThrowableTest.throwCheckedException":360,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":128,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":154,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":345,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":4,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":312,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":217,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":280,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":235,"org.easymock.tests2.NameTest.nameForNiceMock":254,"org.easymock.tests2.DependencyTest.testInterfaceMocking":215,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":139,"org.easymock.samples.ExampleTest.addDocument":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":27,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":32,"org.easymock.tests2.DelegateToTest.testStubDelegate":258,"org.easymock.tests2.AnswerTest.stubAnswer":279,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":124,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":142,"org.easymock.tests.UsageVarargTest.varargLongAccepted":352,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":299,"org.easymock.tests.UsageExpectAndReturnTest.floatType":326,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":342,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":2,"org.easymock.tests2.ConstraintsToStringTest.orToString":112,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":1,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":132,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":246,"org.easymock.tests.UsageThrowableTest.noUpperLimit":357,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":236,"org.easymock.tests2.SerializationTest.test":90,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":261,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":183,"org.easymock.tests2.UsageConstraintsTest.testSame":239,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":325,"org.easymock.samples.SupportTest.addDocument":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":17,"org.easymock.tests.GenericTest.testPackageScope":171,"org.easymock.tests2.NameTest.nameForMock":252,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":336,"org.easymock.tests2.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":40,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":328,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":378,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":290,"org.easymock.tests2.MockedExceptionTest.testRealException":213,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":129,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":194,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":110,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":313,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":315,"org.easymock.tests2.NameTest.nameForStrictMock":253,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":186,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":256,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":166,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":99,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":60,"org.easymock.tests2.UsageStrictMockTest.range":43,"org.easymock.tests2.UsageConstraintsTest.lessThan":251,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":140,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":56,"org.easymock.tests2.CaptureTest.testCaptureRightOne":102,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":21,"org.easymock.tests2.UsageConstraintsTest.testOr":96,"org.easymock.tests.UsageRangeTest.combination":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":64,"org.easymock.tests.UsageTest.wrongArguments":78,"org.easymock.tests2.MockBuilderTest.testWithConstructor":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":18,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":329,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":337,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":184,"org.easymock.tests.UsageVarargTest.varargShortAccepted":351,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":85,"org.easymock.tests2.UsageConstraintsTest.cmpTo":241,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":227,"org.easymock.tests2.CaptureTest.testCaptureFromStub":266,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":309,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":158,"org.easymock.tests.UsageTest.unexpectedCallWithArray":77,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":72,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":388,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":39,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":338,"org.easymock.tests2.UsageConstraintsTest.constraints":54,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.samples.ExampleTest.addAndChangeDocument":207,"org.easymock.tests2.ConstraintsToStringTest.notToString":114,"org.easymock.tests.UsageStrictMockTest.testVerify":300,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":208,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":292,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":262,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":155,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":321,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":330,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":133,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":58,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":347}}]

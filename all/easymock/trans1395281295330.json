[{"position":"org.easymock.internal.matchers.Null:35","failures":[0,1,2,3],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:57","sourceCode":"java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[4],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:83","sourceCode":"if (java.lang.Object[] == null) {\n    java.lang.Object[] = new java.lang.Object[0];\n} ","type":"CtIfImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:134","failures":[6],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[2,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[10,11,12,13,13,14,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:164","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:47","sourceCode":"org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:111","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,6],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[15,80,16,81],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[82,83,84,85,86],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[29,35],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.EasyMock:1495","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[87,88,89,90],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:151","sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"toMock":"toMock","argTypes":"argTypes","constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,91,92,93,94,95,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1,113,114,115,116,117,34,35,2,118,119,120,121,122,123,124,125,3,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[147,143],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[148,149,150,151,152,138],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:124","sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","type":"CtIfImpl"},"failures":[10,153,154,155,156,157,158,159,160,161,162,11,12,163,13,14,66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,80,16,164,165,166,167,147,168,17,91,92,93,94,95,0,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,1,113,114,115,116,18,19,20,21,169,22,23,170,171,172,173,174,24,25,26,27,175,176,177,178,179,180,181,182,183,184,185,186,187,28,29,188,30,31,32,33,34,35,36,37,38,189,190,191,2,192,118,193,119,120,87,88,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,40,218,41,43,45,46,47,48,49,50,52,121,122,123,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,124,55,246,247,248,249,250,251,252,253,254,255,3,126,256,257,258,127,128,259,260,261,262,263,264,265,152,266,267,268,269,270,271,272,273,274,275,276,58,59,60,277,278,279,280,281,282,283,129,130,131,132,133,135,136,137,284,138,139,285,89,90,286,61,62,64,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,140,141,142,143,144,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,145,146,6,6],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:86","sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","type":"CtReturnImpl"},"failures":[324,325,326],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[177,178,184,185,148,327,149,328,150,151,329,265,152,266,269,270,138],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1494","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(char))","type":"CtInvocationImpl"},"failures":[94,98,110],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:130","failures":[63],"status":-1,"binaryOperator":"(((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName())))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"failures":[330],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[10,153,154,155,156,157,158,159,331,160,161,162,11,12,163,13,14,66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,80,16,332,164,165,166,333,167,147,168,17,334,91,92,93,94,335,95,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1,113,114,115,116,336,337,338,339,18,19,20,21,340,169,22,23,341,170,342,343,171,172,173,344,345,346,347,348,174,349,350,351,352,353,354,355,356,357,24,358,359,25,360,361,362,363,364,365,366,367,368,26,369,370,371,372,373,27,374,375,175,176,177,178,179,180,181,182,183,184,185,186,187,28,29,188,30,31,32,33,65,34,376,377,35,36,37,38,378,379,189,190,191,2,192,118,193,119,120,87,88,194,380,381,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,382,383,384,385,386,210,211,212,213,214,387,388,389,390,391,215,392,393,394,395,396,397,216,217,40,218,41,43,44,398,45,46,47,48,399,49,50,52,121,330,122,123,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,124,53,400,401,402,403,54,404,405,125,406,407,408,409,410,411,412,413,55,414,246,247,248,415,249,250,251,252,253,254,255,3,126,256,257,258,127,128,324,56,416,417,418,325,419,420,259,260,261,262,263,82,421,422,423,83,84,424,425,426,427,428,429,430,431,85,432,433,434,435,86,436,437,438,439,264,265,152,266,267,268,269,270,271,272,273,274,275,276,440,441,57,58,59,442,60,443,444,445,277,446,278,279,280,281,282,283,129,130,131,132,133,134,447,448,7,449,8,135,136,137,284,138,139,285,89,90,286,450,451,61,62,63,452,64,287,288,289,453,454,455,456,457,458,459,290,291,292,293,294,295,296,297,298,299,300,460,301,302,461,462,303,463,464,465,466,467,468,469,470,471,472,473,474,475,476,9,477,478,479,480,481,482,140,141,142,143,144,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,145,146,483,484,485,326,486,487,488,489],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[334,490,491,492,493,494,495],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[168,175,182,216,217,40,218,238,240,241,242,243,244,245,126,256,257,258,127,128,264,268,136,289,298,302,142,143,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[10,154,155,156,157,159,160,162,13,13,14,14,66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,80,332,164,165,166,333,167,147,168,17,91,92,93,94,95,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1,113,114,115,116,18,19,20,21,169,22,23,170,342,343,171,172,173,174,24,25,26,27,175,176,177,178,179,180,181,182,183,184,185,186,187,28,29,188,30,31,32,33,34,35,36,37,38,189,190,191,2,192,118,119,120,87,88,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,213,214,215,216,217,40,218,41,43,45,46,47,48,49,50,52,121,122,123,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,124,55,3,126,256,257,258,127,128,259,260,261,262,263,433,438,264,265,152,266,267,268,269,270,271,272,273,274,275,276,57,58,59,60,277,446,278,279,280,281,282,283,129,130,131,132,133,134,447,448,449,135,136,137,138,139,285,89,90,286,61,63,64,287,288,289,453,454,455,456,457,290,297,298,299,300,460,301,302,461,462,303,463,464,465,466,467,468,469,470,140,141,142,143,144,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,145,146,483],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[496],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[35],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl() : org.easymock.EasyMockSupport.createStrictControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"failures":[497],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"argType":"type","paramType":"type"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[406,407,408,410,411],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[10,153,154,155,156,157,158,159,331,160,161,162,11,12,163,13,14,66,67,68,69,70,71,72,73,74,75,76,77,78,79,15,80,16,332,164,165,166,333,167,147,168,17,334,498,91,92,93,94,335,95,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1,113,114,115,116,336,499,500,501,337,338,339,18,19,20,21,340,169,22,23,341,170,342,343,171,172,173,344,345,346,347,348,174,349,350,351,352,353,354,355,356,357,24,358,359,25,360,361,362,363,364,365,366,367,368,26,369,370,371,372,373,27,374,375,175,176,177,178,179,180,181,182,183,184,185,186,187,117,28,29,188,30,31,32,33,65,34,376,377,35,36,37,38,378,379,189,190,191,2,192,118,193,119,120,87,88,194,380,381,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,382,383,384,385,386,210,211,212,213,214,387,388,389,390,391,215,392,393,394,395,396,397,216,217,40,218,41,502,43,44,496,398,45,46,47,495,48,503,399,49,50,504,52,121,330,122,123,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,124,53,400,401,402,403,54,404,405,505,125,406,407,408,409,410,506,411,412,413,55,414,246,247,248,415,249,250,251,252,253,254,255,3,126,256,257,258,127,128,324,56,416,417,418,325,419,420,259,260,261,262,263,82,421,422,423,83,84,424,425,426,427,428,429,430,431,85,432,433,434,435,86,436,437,438,439,264,265,152,266,267,268,269,270,271,272,273,274,275,276,440,441,57,58,59,442,60,443,444,445,277,446,278,279,280,281,282,283,129,130,131,132,133,134,447,448,507,7,449,8,135,136,137,284,138,139,285,89,90,286,450,451,61,62,63,452,64,287,288,289,453,454,455,456,457,458,459,290,291,292,293,294,295,296,297,298,299,300,460,301,302,461,462,303,463,464,465,466,467,468,469,470,471,472,473,474,475,476,9,477,478,479,480,481,482,140,141,142,143,144,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,145,146,483,484,485,326,486,487,488,489],"status":-1,"binaryOperator":"(int >= 0)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[10,154,155,156,157,159,160,162,13,13,14,14,66,67,69,70,73,74,75,76,77,78,79,15,80,332,164,165,166,333,167,147,168,17,91,92,93,94,95,0,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,18,19,20,21,169,22,23,170,342,343,171,172,173,174,24,25,26,27,175,176,177,179,181,182,183,186,187,28,29,188,30,31,32,34,36,37,38,189,190,191,2,192,119,87,88,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,215,216,217,40,218,43,45,47,48,50,121,122,123,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,124,55,126,256,257,258,127,128,259,260,261,262,263,433,438,264,265,267,268,271,58,59,60,277,446,278,279,129,130,131,132,133,134,447,448,7,449,8,135,136,139,89,90,61,63,64,287,288,289,453,454,455,456,457,290,297,298,299,300,301,302,462,463,464,465,466,467,468,470,9,140,141,142,143,144,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,145,146,483],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[10,11,12,13,13,14,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,508,39,509,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":94,"org.easymock.tests2.UsageTest.argumentsOrdered":185,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":264,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":207,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":428,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":180,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":153,"org.easymock.tests2.DelegateToTest.testReturnException":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":256,"org.easymock.tests.MockingTest.testPartialClassMocking":58,"org.easymock.tests.MockClassControlTest.testToString":416,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":382,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":86,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":363,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":25,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":304,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":196,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":490,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":99,"org.easymock.tests2.UsageTest.wrongArguments":178,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":140,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":282,"org.easymock.samples.ExampleTest.answerVsDelegate":155,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":54,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":444,"org.easymock.tests2.UsageConstraintsTest.testNull":0,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":30,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":420,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":206,"org.easymock.tests2.CaptureTest.testPrimitive":69,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":144,"org.easymock.tests.UsageTest.moreThanOneArgument":265,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":323,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":188,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":261,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":453,"org.easymock.tests.UsageTest.argumentsOrdered":270,"org.easymock.tests.UsageVarargTest.varargIntAccepted":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":432,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":494,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":41,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":396,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":422,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests.ReplayStateInvalidUsageTest.times":479,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":174,"org.easymock.tests2.DependencyTest.testClassMocking":380,"org.easymock.tests2.AnswerTest.answer":170,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":100,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":434,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":214,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":401,"org.easymock.tests2.CaptureTest.testAnd":66,"org.easymock.tests2.UsageTest.strictResetToDefault":176,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":496,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":35,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":260,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":201,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":278,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":457,"org.easymock.tests2.DelegateToTest.testDelegate":167,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":319,"org.easymock.tests.LimitationsTest.mockFinalMethod":414,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":127,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":276,"org.easymock.tests2.DependencyTest.testClassMockingSupport":381,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":469,"org.easymock.tests2.CaptureTest.testCapture1_2446744":70,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":65,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":317,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":212,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":474,"org.easymock.tests.UsageThrowableTest.throwError":238,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":403,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":507,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":397,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":375,"org.easymock.samples.PartialClassMockTest.testGetArea":10,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":475,"org.easymock.tests.MockingTest.testInterfaceMocking":442,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":464,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":488,"org.easymock.tests2.UsageTest.niceToStrict":179,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":82,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":45,"org.easymock.tests2.MockBuilderTest.testCreateMock":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":351,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":148,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":313,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":202,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":400,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":468,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":458,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":280,"org.easymock.tests.UsageOverloadedMethodTest.overloading":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":373,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":105,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":229,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":287,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":104,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":75,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":415,"org.easymock.tests.MockClassControlTest.testEquals":419,"org.easymock.tests2.EasyMockSupportClassTest.testAll":24,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":62,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":321,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":327,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":508,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":497,"org.easymock.tests2.CaptureTest.testCaptureAll":67,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":213,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":274,"org.easymock.tests.MockNameTest.defaultName":489,"org.easymock.tests2.UsageConstraintsTest.testMatches":106,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":472,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":262,"org.easymock.samples.ExampleTest.voteForRemovals":159,"org.easymock.tests.UsageVarargTest.allKinds":3,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":297,"org.easymock.samples.BasicClassMockTest.testPrintContent":12,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":275,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":244,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":393,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":128,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":333,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":506,"org.easymock.tests2.UsageConstraintsTest.greaterThan":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":446,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":38,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":411,"org.easymock.samples.ExampleTest.voteForRemoval":156,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":378,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":404,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":501,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":33,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":175,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":64,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":425,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":199,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":126,"org.easymock.tests2.CaptureTest.testCaptureFirst":79,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":424,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":200,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":187,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":303,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":225,"org.easymock.tests2.UsageTest.moreThanOneArgument":177,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":2,"org.easymock.tests2.CaptureTest.testCapture2_2446744":78,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":435,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":50,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":255,"org.easymock.tests.GenericTest.testBridgedEquals":452,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":4,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":295,"org.easymock.tests.UsageExpectAndReturnTest.longType":221,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":197,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":272,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":51,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":322,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":483,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":1,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":320,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":447,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":259,"org.easymock.tests.UsageCallCountTest.tooManyCalls":296,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":372,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":226,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":353,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":309,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":243,"org.easymock.tests.MockingTest.testNiceClassMocking":445,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":19,"org.easymock.tests.MockingTest.testClassMocking":441,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":459,"org.easymock.tests2.UsageConstraintsTest.testContains":103,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":42,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":40,"org.easymock.tests2.UsageConstraintsTest.testFind":95,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":289,"org.easymock.tests.MockTypeTest.fromEasyMockClass":402,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":137,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":122,"org.easymock.tests.UsageExpectAndReturnTest.object":228,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":34,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":352,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":491,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":250,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":486,"org.easymock.tests.UsageTest.exactCallCountByLastCall":271,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":84,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":454,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":7,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":329,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":334,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":234,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":246,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":301,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":388,"org.easymock.tests.MockClassControlTest.testHashCode":325,"org.easymock.tests2.EasyMockSupportTest.testVerify":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":366,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":455,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":467,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":300,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":5,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":211,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":117,"org.easymock.tests.UsageVarargTest.varargCharAccepted":249,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":505,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":439,"org.easymock.tests2.UsageTest.openCallCountByLastCall":181,"org.easymock.tests.DefaultClassInstantiatorTest.object":125,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":208,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":466,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":485,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":367,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":241,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":347,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":387,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":418,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":36,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":310,"org.easymock.tests.CapturesMatcherTest.test":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":134,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":417,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":27,"org.easymock.tests2.UsageTest.resumeIfFailure":186,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":53,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":499,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":258,"org.easymock.tests2.StubTest.stubWithReturnValue":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":495,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":113,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":227,"org.easymock.tests2.SerializationTest.testAllMockedMethod":16,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":433,"org.easymock.samples.SupportTest.voteForRemovals":162,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":149,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":451,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":390,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":316,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":81,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":438,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":342,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":8,"org.easymock.tests.UsageExpectAndThrowTest.object":314,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":111,"org.easymock.tests2.DelegateToTest.testWrongClass":166,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":145,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":146,"org.easymock.samples.ConstructorCalledMockTest.testTax":13,"org.easymock.tests.UsageStrictMockTest.range":89,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":338,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":204,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":18,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":315,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":47,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":481,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":281,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":150,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":465,"org.easymock.tests2.CaptureTest.testCaptureNone":74,"org.easymock.tests.UsageUnorderedTest.message":124,"org.easymock.tests.UsageVerifyTest.twoReturns":299,"org.easymock.tests.UsageVarargTest.varargByteAccepted":254,"org.easymock.tests2.ThreadingTest.testThreadSafe":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":369,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":293,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":487,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":11,"org.easymock.tests2.CaptureTest.testCapture_2617107":68,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":328,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":436,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":143,"org.easymock.tests2.UsageConstraintsTest.any":101,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":478,"org.easymock.tests2.StubTest.stub":147,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":448,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":437,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":257,"org.easymock.tests.UsageExpectAndThrowTest.longType":307,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":409,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":477,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":120,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":215,"org.easymock.tests.LimitationsTest.mockNativeMethod":55,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":63,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":237,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":509,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":346,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":194,"org.easymock.tests2.NameTest.nameForMocksControl":386,"org.easymock.tests2.MockedExceptionTest.testMockedException":217,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":359,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":268,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":60,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":308,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":330,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":28,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":48,"org.easymock.tests.MockingTest.testNicePartialClassMocking":59,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":32,"org.easymock.tests2.CaptureTest.testCaptureLast":73,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":344,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":470,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":98,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":23,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":112,"org.easymock.tests.MockingTest.testTwoMocks":57,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":341,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":123,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":312,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":184,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":115,"org.easymock.samples.ExampleTest.removeNonExistingDocument":331,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":476,"org.easymock.tests.UsageStrictMockTest.differentMethods":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":350,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":389,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":407,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":191,"org.easymock.tests2.MockBuilderTest.testCreateMockString":52,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":324,"org.easymock.tests.UsageExpectAndThrowTest.floatType":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":360,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":171,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":498,"org.easymock.tests.UsageVerifyTest.twoThrows":298,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":460,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":26,"org.easymock.samples.ExampleTest.voteAgainstRemoval":157,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":429,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":37,"org.easymock.tests.LimitationsTest.privateConstructor":413,"org.easymock.tests2.UsageConstraintsTest.testNotNull":114,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":216,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":245,"org.easymock.tests2.UsageTest.defaultResetToNice":183,"org.easymock.samples.ExampleTest.voteAgainstRemovals":154,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":430,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":233,"org.easymock.tests.UsageVarargTest.differentLength":251,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":345,"org.easymock.tests2.CallbackTest.callback":210,"org.easymock.tests2.UsageConstraintsTest.equals":335,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":376,"org.easymock.tests.UsageTest.openCallCountByLastCall":267,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":142,"org.easymock.tests.UsageCallCountTest.tooFewCalls":291,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":21,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":283,"org.easymock.tests.UsageThrowableTest.throwCheckedException":242,"org.easymock.tests.MockingTest.testStrictClassMocking":440,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":151,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":136,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":22,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":20,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":349,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":480,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":169,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":173,"org.easymock.tests.ObjectMethodsTest.testHashCode":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":493,"org.easymock.tests2.NameTest.nameForNiceMock":385,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":192,"org.easymock.tests2.DependencyTest.testInterfaceMocking":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":492,"org.easymock.samples.ExampleTest.addDocument":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":370,"org.easymock.tests2.DelegateToTest.testStubDelegate":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":374,"org.easymock.tests2.AnswerTest.stubAnswer":172,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":139,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":503,"org.easymock.tests.UsageVarargTest.varargLongAccepted":253,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":286,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageExpectAndReturnTest.floatType":220,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":236,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":17,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":14,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":461,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":395,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":109,"org.easymock.tests.UsageThrowableTest.noUpperLimit":239,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":92,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":336,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":71,"org.easymock.tests2.SerializationTest.test":80,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":406,"org.easymock.tests2.UsageConstraintsTest.testSame":96,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":219,"org.easymock.samples.SupportTest.addDocument":161,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":340,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":361,"org.easymock.tests.GenericTest.testPackageScope":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":456,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":394,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":443,"org.easymock.tests2.NameTest.nameForMock":383,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":230,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":504,"org.easymock.tests2.UsageStrictMockTest.differentMethods":88,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":377,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":222,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":318,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":484,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":279,"org.easymock.tests2.MockedExceptionTest.testRealException":218,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":85,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":431,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":119,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":482,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":141,"org.easymock.tests2.NameTest.nameForStrictMock":384,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":398,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":121,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":31,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":337,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":408,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":110,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":43,"org.easymock.tests2.UsageStrictMockTest.range":87,"org.easymock.tests2.UsageConstraintsTest.lessThan":116,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":426,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":198,"org.easymock.tests2.CaptureTest.testCaptureRightOne":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":365,"org.easymock.tests2.UsageConstraintsTest.testOr":97,"org.easymock.tests.UsageRangeTest.combination":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":29,"org.easymock.tests.UsageTest.wrongArguments":266,"org.easymock.tests2.MockBuilderTest.testWithConstructor":502,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":362,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":56,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":421,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":231,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":410,"org.easymock.tests.UsageVarargTest.varargShortAccepted":252,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":294,"org.easymock.tests2.UsageConstraintsTest.cmpTo":102,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":343,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":423,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":182,"org.easymock.tests2.CaptureTest.testCaptureFromStub":77,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":473,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":44,"org.easymock.tests.UsageTest.unexpectedCallWithArray":152,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":138,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":292,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":232,"org.easymock.tests2.UsageConstraintsTest.constraints":93,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":285,"org.easymock.samples.ExampleTest.addAndChangeDocument":160,"org.easymock.tests.UsageStrictMockTest.testVerify":450,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":163,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":284,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":273,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":72,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":39,"org.easymock.tests.LimitationsTest.abstractClass":412,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":224,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":203,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":247}}]

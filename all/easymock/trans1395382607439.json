[{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:65","sourceCode":"throw java.lang.Throwable","type":"CtThrowImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[6,7,8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:40","sourceCode":"java.lang.StringBuffer.append(\"not(\")","type":"CtInvocationImpl"},"failures":[10],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:137","sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:63","sourceCode":"throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable)","type":"CtThrowImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:36","sourceCode":"try {\n    if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n        org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n    } \n    return org.easymock.internal.MocksControl.getState().invoke(new org.easymock.internal.Invocation(java.lang.Object , java.lang.reflect.Method , java.lang.Object[]));\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace();\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace();\n} catch (final org.easymock.internal.ThrowableWrapper org.easymock.internal.ThrowableWrapper) {\n    throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace();\n}","type":"CtTryImpl"},"failures":[60,61,62,63,64,65,66,66,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,0,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,12,172,173,174,175,176,177,13,178,179,180,181,182,14,15,16,17,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,1,198,2,199,200,201,202,18,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,19,20,21,22,23,24,241,242,243,244,245,246,25,247,248,26,249,250,251,252,253,254,255,256,257,258,259,260,261,27,262,263,264,265,266,28,267,268,269,270,29,271,272,273,274,275,276,277,278,279,280,281,282,283,30,31,284,285,286,287,288,289,290,291,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,292,52,293,53,54,55,56,57,58,294,295,296,297,298,299,300,301,3,302,4,59,303,304,305],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[306,307],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:212","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:65","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","type":"CtInvocationImpl"},"failures":[212,221,222,229,236,286],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[74,76,77,78,87,102,133,141,143,151,155,156,159,164,169,170,171,12,174,175,176,179,180,181,182,201,214,215,217,218,219,241,25,247,308,309,310,311,312,313,314,28,268,269,271,272,273,315,292],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[143],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[306,307],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[60,61,62,63,316,64,317,65,70,318,319,320,321,322,72,73,74,323,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,0,129,130,131,324,132,133,134,135,136,137,138,139,325,140,141,142,143,326,144,145,146,147,148,149,163,164,327,328,165,166,169,170,171,12,172,173,174,175,176,177,13,178,179,180,181,182,14,15,16,17,185,186,189,190,191,192,329,330,331,332,333,1,198,2,200,201,202,18,203,204,205,206,207,334,209,210,211,212,213,335,214,336,215,216,217,218,219,220,337,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,19,20,21,22,23,24,241,242,243,244,246,25,247,248,26,250,338,339,340,254,255,341,256,342,343,344,260,261,27,345,346,347,348,349,350,351,352,353,262,354,355,263,356,357,358,310,311,312,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,28,267,268,269,270,29,271,272,273,379,380,381,382,383,315,384,385,386,387,274,275,276,277,278,279,281,282,283,30,31,284,285,286,287,288,289,290,291,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,292,52,293,53,54,55,56,57,58,3,302,4,59,304,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[14,15,16,17,18,19,20,21,22,23,24,26,388,369,264,265,266,30],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[389],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[390,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[60,61,62,63,316,64,65,391,392,393,69,394,395,70,71,72,73,74,323,75,76,77,78,79,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,0,129,130,131,132,133,134,135,136,137,139,143,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,12,172,173,174,175,176,177,13,179,180,181,182,14,15,16,17,183,184,187,188,192,329,193,1,198,2,200,201,202,18,207,334,396,209,210,211,212,213,214,336,215,216,217,218,219,220,337,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,19,20,21,22,23,24,241,243,244,246,25,247,248,26,260,261,27,397,347,262,263,356,357,358,311,312,377,378,28,267,269,270,29,271,272,273,379,380,381,382,383,315,384,385,386,387,274,275,276,277,278,279,281,282,283,30,31,284,285,286,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,292,52,293,53,54,55,56,57,58,295,296,3,4,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[245,398,399,400,401,402,257,258,259],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:48","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","type":"CtInvocationImpl"},"failures":[278,288],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:310","sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","type":"CtReturnImpl"},"failures":[60,62,63,64,66,66,67,67,68,69,70,71,75,77,78,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,116,117,120,121,122,123,124,125,126,0,130,132,133,134,135,136,137,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,165,167,168,170,12,172,173,175,177,13,178,181,182,16,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,18,207,208,209,210,211,212,213,216,218,219,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,255,256,258,259,260,261,27,262,28,267,270,29,273,275,276,277,278,279,280,282,283,284,285,286,52,53,54,55,56,57,58,304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:162","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[403],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[77,218,25,247,404],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:153","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":88,"org.easymock.tests2.UsageTest.argumentsOrdered":180,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":28,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":160,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":176,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":392,"org.easymock.tests2.DelegateToTest.testReturnException":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":20,"org.easymock.tests.MockingTest.testPartialClassMocking":254,"org.easymock.tests.MockClassControlTest.testToString":373,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":5,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":32,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":194,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":71,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":94,"org.easymock.tests2.UsageTest.wrongArguments":174,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":282,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":205,"org.easymock.samples.ExampleTest.answerVsDelegate":61,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":351,"org.easymock.tests2.UsageConstraintsTest.testNull":90,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":343,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":135,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":159,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":378,"org.easymock.tests2.CaptureTest.testPrimitive":116,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":284,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":51,"org.easymock.tests.UsageTest.moreThanOneArgument":267,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":134,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":211,"org.easymock.tests.UsageTest.argumentsOrdered":272,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":294,"org.easymock.tests.UsageVarargTest.varargIntAccepted":381,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":275,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":163,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":319,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":279,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":84,"org.easymock.tests.ReplayStateInvalidUsageTest.times":367,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":390,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":83,"org.easymock.tests2.CaptureTest.testAnd":113,"org.easymock.tests2.UsageTest.strictResetToDefault":172,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":140,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":154,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":243,"org.easymock.tests2.DelegateToTest.testDelegate":200,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":23,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":291,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":249,"org.easymock.tests2.CaptureTest.testCapture1_2446744":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":45,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":81,"org.easymock.tests.UsageThrowableTest.throwError":52,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":361,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":350,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":309,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":213,"org.easymock.samples.PartialClassMockTest.testGetArea":68,"org.easymock.tests.MockingTest.testInterfaceMocking":341,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":362,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":276,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":258,"org.easymock.tests2.UsageTest.niceToStrict":175,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":33,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":165,"org.easymock.tests2.MockBuilderTest.testCreateMock":169,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":41,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":155,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":301,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":354,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":203,"org.easymock.tests.UsageOverloadedMethodTest.overloading":261,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":100,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":59,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":232,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":260,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":99,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":7,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":122,"org.easymock.tests2.EasyMockSupportClassTest.testAll":193,"org.easymock.tests.MockClassControlTest.testEquals":377,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":334,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":49,"org.easymock.tests2.CaptureTest.testCaptureAll":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":82,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":289,"org.easymock.tests2.UsageConstraintsTest.testMatches":101,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":212,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":359,"org.easymock.samples.ExampleTest.voteForRemovals":64,"org.easymock.tests.UsageVarargTest.allKinds":274,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":246,"org.easymock.samples.BasicClassMockTest.testPrintContent":395,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":290,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":57,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":24,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":199,"org.easymock.tests2.UsageConstraintsTest.greaterThan":103,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":242,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":143,"org.easymock.samples.ExampleTest.voteForRemoval":62,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":146,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":326,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":352,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":320,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":138,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":12,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":388,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":152,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":19,"org.easymock.tests2.CaptureTest.testCaptureFirst":126,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":197,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":153,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":182,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":228,"org.easymock.tests2.UsageTest.moreThanOneArgument":173,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":148,"org.easymock.tests2.CaptureTest.testCapture2_2446744":125,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":170,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":387,"org.easymock.tests.GenericTest.testBridgedEquals":396,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":311,"org.easymock.tests.UsageExpectAndReturnTest.longType":224,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":287,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":50,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":108,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":280,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":209,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":265,"org.easymock.tests.UsageCallCountTest.tooManyCalls":312,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":263,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":37,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":56,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":185,"org.easymock.tests.MockingTest.testNiceClassMocking":344,"org.easymock.tests.MockingTest.testClassMocking":340,"org.easymock.tests2.UsageConstraintsTest.testContains":98,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":355,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":16,"org.easymock.tests2.UsageConstraintsTest.testFind":89,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":27,"org.easymock.tests.MockTypeTest.fromEasyMockClass":349,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":73,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":214,"org.easymock.tests.UsageExpectAndReturnTest.object":231,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":158,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":383,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":347,"org.easymock.tests.UsageTest.exactCallCountByLastCall":273,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":248,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":295,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":237,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":379,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":4,"org.easymock.tests.MockClassControlTest.testHashCode":376,"org.easymock.tests2.EasyMockSupportTest.testVerify":162,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":296,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":3,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":300,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":80,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":313,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":324,"org.easymock.tests.UsageVarargTest.varargCharAccepted":382,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":402,"org.easymock.tests2.UsageTest.openCallCountByLastCall":177,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":161,"org.easymock.tests.DefaultClassInstantiatorTest.object":335,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":299,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":345,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":314,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":39,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":54,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":141,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":375,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":38,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":238,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":196,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":374,"org.easymock.tests2.UsageTest.resumeIfFailure":181,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":348,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":22,"org.easymock.tests2.StubTest.stubWithReturnValue":18,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":109,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":230,"org.easymock.tests2.SerializationTest.testAllMockedMethod":329,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":251,"org.easymock.samples.SupportTest.voteForRemovals":69,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":9,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":44,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":252,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":127,"org.easymock.tests.UsageExpectAndThrowTest.object":42,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":106,"org.easymock.tests2.DelegateToTest.testWrongClass":2,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":285,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":286,"org.easymock.samples.ConstructorCalledMockTest.testTax":66,"org.easymock.tests.UsageStrictMockTest.range":218,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":157,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":184,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":11,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":43,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":167,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":271,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":369,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":204,"org.easymock.tests2.CaptureTest.testCaptureNone":121,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":259,"org.easymock.tests.UsageUnorderedTest.message":292,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":308,"org.easymock.tests.UsageVerifyTest.twoReturns":247,"org.easymock.tests.UsageVarargTest.varargByteAccepted":386,"org.easymock.tests2.ThreadingTest.testThreadSafe":145,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":358,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":394,"org.easymock.tests2.CaptureTest.testCapture_2617107":115,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":400,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":31,"org.easymock.tests2.UsageConstraintsTest.any":96,"org.easymock.tests2.StubTest.stub":202,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":366,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":401,"org.easymock.tests.UsageExpectAndThrowTest.longType":35,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":21,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":6,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":365,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":76,"org.easymock.tests2.SerializationTest.testClass":191,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":183,"org.easymock.tests.LimitationsTest.mockNativeMethod":262,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":208,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":240,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":79,"org.easymock.tests2.NameTest.nameForMocksControl":333,"org.easymock.tests2.MockedExceptionTest.testMockedException":15,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":36,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":256,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":132,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":168,"org.easymock.tests.MockingTest.testNicePartialClassMocking":255,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":137,"org.easymock.tests2.CaptureTest.testCaptureLast":120,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":250,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":93,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":107,"org.easymock.tests.MockingTest.testTwoMocks":253,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":221,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":40,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":179,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":111,"org.easymock.samples.ExampleTest.removeNonExistingDocument":317,"org.easymock.tests.UsageStrictMockTest.differentMethods":219,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":363,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":147,"org.easymock.tests2.MockBuilderTest.testCreateMockString":171,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":371,"org.easymock.tests.UsageExpectAndThrowTest.floatType":34,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":102,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":129,"org.easymock.tests.UsageVerifyTest.twoThrows":25,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":195,"org.easymock.samples.ExampleTest.voteAgainstRemoval":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":399,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":257,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":142,"org.easymock.tests2.UsageConstraintsTest.testNotNull":110,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":14,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":58,"org.easymock.tests2.UsageTest.defaultResetToNice":178,"org.easymock.samples.ExampleTest.voteAgainstRemovals":60,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":236,"org.easymock.tests.UsageVarargTest.differentLength":315,"org.easymock.tests2.CallbackTest.callback":201,"org.easymock.tests.UsageTest.openCallCountByLastCall":270,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":30,"org.easymock.tests.UsageCallCountTest.tooFewCalls":356,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":206,"org.easymock.tests.UsageThrowableTest.throwCheckedException":55,"org.easymock.tests.MockingTest.testStrictClassMocking":339,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":26,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":186,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":368,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":188,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":131,"org.easymock.tests.ObjectMethodsTest.testHashCode":346,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":149,"org.easymock.tests2.NameTest.nameForNiceMock":332,"org.easymock.tests2.DependencyTest.testInterfaceMocking":70,"org.easymock.samples.ExampleTest.addDocument":316,"org.easymock.tests2.DelegateToTest.testStubDelegate":198,"org.easymock.tests2.AnswerTest.stubAnswer":130,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":216,"org.easymock.tests.UsageVarargTest.varargLongAccepted":385,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":220,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":398,"org.easymock.tests.UsageExpectAndReturnTest.floatType":223,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":239,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":144,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":67,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":104,"org.easymock.tests.UsageThrowableTest.noUpperLimit":293,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":303,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":86,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":118,"org.easymock.tests2.SerializationTest.test":192,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":8,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":306,"org.easymock.tests2.UsageConstraintsTest.testSame":91,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":222,"org.easymock.samples.SupportTest.addDocument":393,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":364,"org.easymock.tests.GenericTest.testPackageScope":207,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":297,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":342,"org.easymock.tests2.NameTest.nameForMock":330,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":233,"org.easymock.tests2.UsageStrictMockTest.differentMethods":78,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":325,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":225,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":46,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":397,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":244,"org.easymock.tests2.MockedExceptionTest.testRealException":17,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":353,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":322,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":75,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":283,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":370,"org.easymock.tests2.NameTest.nameForStrictMock":331,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":328,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":72,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":136,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":321,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":105,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":164,"org.easymock.tests2.UsageStrictMockTest.range":77,"org.easymock.tests2.UsageConstraintsTest.lessThan":112,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":151,"org.easymock.tests2.CaptureTest.testCaptureRightOne":123,"org.easymock.tests2.UsageConstraintsTest.testOr":92,"org.easymock.tests.UsageRangeTest.combination":241,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":133,"org.easymock.tests.UsageTest.wrongArguments":269,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":372,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":226,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":234,"org.easymock.tests.UsageVarargTest.varargShortAccepted":384,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":307,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":310,"org.easymock.tests2.UsageConstraintsTest.cmpTo":97,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":128,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":13,"org.easymock.tests2.CaptureTest.testCaptureFromStub":124,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":360,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":327,"org.easymock.tests.UsageTest.unexpectedCallWithArray":268,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":215,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":357,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":235,"org.easymock.tests2.CaptureTest.testCapture":403,"org.easymock.tests2.UsageConstraintsTest.constraints":87,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":217,"org.easymock.samples.ExampleTest.addAndChangeDocument":65,"org.easymock.tests2.ConstraintsToStringTest.notToString":10,"org.easymock.tests.UsageStrictMockTest.testVerify":337,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":391,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":336,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":288,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":119,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":277,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":227,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":278,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":304,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":404,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":156,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":380}}]

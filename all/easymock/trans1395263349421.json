[{"position":"org.easymock.internal.MocksControl:136","failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,35,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"status":-1,"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[110,111,112],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[113],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[10,14],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[114,71,115,72],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[14],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1987","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Byte>(org.easymock.Capture<java.lang.Byte>))","type":"CtInvocationImpl"},"failures":[116],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:53","failures":[117],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[23,118,119],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"clazz"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:305","failures":[120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,6,7,8,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,11,193,17,194,195,196,197,198,199,200,201,202,203,204,205,34,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,40,43,45,46,49,221,222,53,54,223,55,56,57,59,63,64,65,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,117,240,241,113,242,243,244,245,246,247,248,249,250,251,70,252,253,254,255,256,257,258,259,260,261,262,71,115,73,263,264,265,266,267,268,269,270,271,272,273,274,82,85,95,101,275,276,277,278,279,104,105,106,107,280,108,109,281,282,283,116,284,285,286,287,288,289,290],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[120,123,125,126,129,131,132,133,134,136,137,138,139,141,142,143,144,157,291,164,193,292,212,217,279],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:147","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[226,227,229,231,232,293,113,246,281,283,288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[294,295,296,297,298,299,164,165,300,196,301,302,303,277],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[304],"status":-1,"binaryOperator":"(int >= 0)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"failures":[305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:415","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForEachImpl"},"failures":[10],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[35,36,306,73],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[307,308,309,310,311,312,74],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"failures":[213],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:237","sourceCode":"return org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.reflect.Method.getParameterTypes())","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name"}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[313],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"position":"org.easymock.internal.RecordState:108","failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,153,157,291,164,186,188,189,190,191,192,193,279],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[314,315,316,317,6,7,8,147,148,149,150,160,166,167,168,169,170,171,174,175,177,178,179,181,182,183,184,185,17,195,196,197,198,199,201,202,203,204,205,34,206,208,209,210,211,40,43,45,46,49,221,222,53,54,223,55,56,57,59,63,64,65,255,260,73,82,85,95,101,276,277,278,104,105,106,107,280,108,109],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"returnedType","type":"returnedType"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:127","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[262],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[114,71,115,72],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[294,295,296,297,298,318,299,164,165,300,196,301,302,303,277],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[122,123,319,147,157,163,320,321,196,197,322,323,216,217,231,241,277,278],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[114,71,115,72],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:356","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.EasyMock:1433","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1789","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","type":"CtInvocationImpl"},"failures":[239],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[324,300,237],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":227,"org.easymock.tests2.UsageTest.argumentsOrdered":303,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":120,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":273,"org.easymock.tests2.StubTest.stubWithReturnValue":279,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":307,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":245,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":175,"org.easymock.tests2.SerializationTest.testAllMockedMethod":72,"org.easymock.tests2.DelegateToTest.testReturnException":259,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":194,"org.easymock.tests.MockingTest.testPartialClassMocking":6,"org.easymock.samples.SupportTest.voteForRemovals":211,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":10,"org.easymock.tests.MockClassControlTest.testToString":28,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":67,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":137,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":89,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":114,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":85,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":125,"org.easymock.tests.UsageExpectAndThrowTest.object":135,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":242,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":222,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":308,"org.easymock.tests2.DelegateToTest.testWrongClass":261,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":198,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":199,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":233,"org.easymock.tests2.UsageTest.wrongArguments":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":160,"org.easymock.tests.UsageStrictMockTest.range":196,"org.easymock.samples.ConstructorCalledMockTest.testTax":35,"org.easymock.samples.ExampleTest.answerVsDelegate":207,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":270,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":1,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":104,"org.easymock.tests2.UsageConstraintsTest.testNull":229,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":272,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":33,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":45,"org.easymock.tests2.CaptureTest.testPrimitive":116,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":162,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":79,"org.easymock.tests.UsageTest.moreThanOneArgument":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":144,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":223,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":316,"org.easymock.tests2.CaptureTest.testCaptureNone":286,"org.easymock.tests.UsageUnorderedTest.message":299,"org.easymock.tests.UsageVerifyTest.twoReturns":165,"org.easymock.tests2.ThreadingTest.testThreadSafe":252,"org.easymock.tests.UsageTest.argumentsOrdered":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":96,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":37,"org.easymock.tests2.CaptureTest.testCapture_2617107":283,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":201,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":312,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":39,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":305,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":291,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":77,"org.easymock.tests2.UsageConstraintsTest.any":234,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":205,"org.easymock.tests.UsageExpectAndThrowTest.longType":128,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":23,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":258,"org.easymock.tests2.SerializationTest.testClass":71,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":275,"org.easymock.tests.LimitationsTest.mockNativeMethod":17,"org.easymock.tests2.DependencyTest.testClassMocking":51,"org.easymock.tests2.AnswerTest.answer":249,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":13,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":185,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":293,"org.easymock.tests2.CaptureTest.testAnd":281,"org.easymock.tests2.UsageTest.strictResetToDefault":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":62,"org.easymock.tests2.MockedExceptionTest.testMockedException":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":84,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":149,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":123,"org.easymock.tests2.DelegateToTest.testDelegate":262,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":8,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":129,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":46,"org.easymock.tests.MockingTest.testNicePartialClassMocking":7,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":140,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":57,"org.easymock.tests.LimitationsTest.mockFinalMethod":18,"org.easymock.tests2.CaptureTest.testCaptureLast":285,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":193,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":159,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":232,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":109,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":243,"org.easymock.tests2.DependencyTest.testClassMockingSupport":52,"org.easymock.tests.MockingTest.testTwoMocks":5,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":158,"org.easymock.tests2.CaptureTest.testCapture1_2446744":284,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":166,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":138,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":133,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":302,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":247,"org.easymock.tests.UsageThrowableTest.throwError":186,"org.easymock.tests.UsageStrictMockTest.differentMethods":197,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":21,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":254,"org.easymock.tests2.MockBuilderTest.testCreateMockString":50,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":26,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":86,"org.easymock.tests.UsageExpectAndThrowTest.floatType":127,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":81,"org.easymock.tests.UsageVerifyTest.twoThrows":164,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":95,"org.easymock.samples.PartialClassMockTest.testGetArea":34,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":202,"org.easymock.samples.ExampleTest.voteAgainstRemoval":209,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":200,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":64,"org.easymock.tests2.UsageTest.niceToStrict":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":90,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":126,"org.easymock.tests.LimitationsTest.privateConstructor":16,"org.easymock.tests2.UsageConstraintsTest.testNotNull":246,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":192,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":68,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":43,"org.easymock.tests2.UsageTest.defaultResetToNice":218,"org.easymock.tests2.MockBuilderTest.testCreateMock":48,"org.easymock.samples.ExampleTest.voteAgainstRemovals":206,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":98,"org.easymock.tests2.CallbackTest.callback":257,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":60,"org.easymock.tests.UsageTest.openCallCountByLastCall":122,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":134,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":268,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":224,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":112,"org.easymock.tests.UsageOverloadedMethodTest.overloading":156,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":94,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":100,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":238,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":153,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":107,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":177,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":237,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":118,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":287,"org.easymock.tests.UsageThrowableTest.throwCheckedException":189,"org.easymock.tests2.EasyMockSupportClassTest.testAll":82,"org.easymock.tests.MockClassControlTest.testEquals":32,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":12,"org.easymock.tests.MockingTest.testStrictClassMocking":3,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":142,"org.easymock.tests2.CaptureTest.testCaptureAll":282,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":108,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":146,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":106,"org.easymock.tests2.UsageConstraintsTest.testMatches":239,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":280,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":251,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":317,"org.easymock.samples.ExampleTest.voteForRemovals":210,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":311,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":256,"org.easymock.tests.UsageVarargTest.allKinds":324,"org.easymock.tests2.DependencyTest.testInterfaceMocking":221,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":163,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":310,"org.easymock.samples.BasicClassMockTest.testPrintContent":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":97,"org.easymock.tests2.DelegateToTest.testStubDelegate":260,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":102,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":191,"org.easymock.tests2.AnswerTest.stubAnswer":250,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":195,"org.easymock.tests2.UsageConstraintsTest.greaterThan":240,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":83,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":148,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":65,"org.easymock.samples.ExampleTest.voteForRemoval":208,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":25,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":253,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":66,"org.easymock.tests.UsageExpectAndReturnTest.floatType":168,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":184,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":73,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":58,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":36,"org.easymock.tests.UsageThrowableTest.noUpperLimit":320,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":241,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":225,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":212,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":2,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":75,"org.easymock.tests2.SerializationTest.test":115,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":47,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":119,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":265,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":20,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":187,"org.easymock.tests2.UsageConstraintsTest.testSame":230,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":80,"org.easymock.tests2.CaptureTest.testCaptureFirst":290,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":266,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":220,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":87,"org.easymock.tests.GenericTest.testPackageScope":11,"org.easymock.tests2.CaptureTest.testCapture2_2446744":289,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":255,"org.easymock.tests2.UsageTest.moreThanOneArgument":214,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":304,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":49,"org.easymock.tests.GenericTest.testBridgedEquals":14,"org.easymock.tests.UsageExpectAndReturnTest.longType":169,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":263,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":143,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":178,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":244,"org.easymock.tests2.UsageStrictMockTest.differentMethods":278,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":61,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":139,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":150,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":99,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":174,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":276,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":130,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":161,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":190,"org.easymock.tests.MockingTest.testNiceClassMocking":9,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":105,"org.easymock.tests.MockingTest.testClassMocking":4,"org.easymock.tests2.UsageConstraintsTest.testContains":236,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":70,"org.easymock.tests2.UsageConstraintsTest.testFind":228,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":157,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":42,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":56,"org.easymock.tests.UsageExpectAndReturnTest.object":176,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":78,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":113,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":59,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":277,"org.easymock.tests2.UsageConstraintsTest.lessThan":248,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":271,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":309,"org.easymock.tests.UsageTest.exactCallCountByLastCall":124,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":145,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":313,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":264,"org.easymock.tests2.CaptureTest.testCaptureRightOne":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":91,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":322,"org.easymock.tests2.UsageConstraintsTest.testOr":231,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":74,"org.easymock.tests.UsageRangeTest.combination":147,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":182,"org.easymock.tests.UsageTest.wrongArguments":295,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":152,"org.easymock.tests.MockClassControlTest.testHashCode":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":88,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":179,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":92,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":323,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":24,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":111,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":151,"org.easymock.tests2.UsageConstraintsTest.cmpTo":235,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":292,"org.easymock.tests2.UsageTest.openCallCountByLastCall":216,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":217,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":274,"org.easymock.tests.DefaultClassInstantiatorTest.object":19,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":110,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":41,"org.easymock.tests.UsageTest.unexpectedCallWithArray":294,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":298,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":93,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":132,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":300,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":188,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":180,"org.easymock.tests2.UsageConstraintsTest.constraints":226,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":63,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":131,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":183,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":101,"org.easymock.tests2.UsageTest.resumeIfFailure":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":203,"org.easymock.tests.LimitationsTest.abstractClass":15,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":0,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":172,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":204,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":154,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":269,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":76}}]

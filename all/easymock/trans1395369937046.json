[{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:47","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short.valueOf(((short)(0))))","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:83","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[18,19,20,21,22,23,24,25,25,26,26,27,2,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,4,6,8,9,10,11,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,14,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,15,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,0,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"failures":[2,3,102,103,323,4,6,7,8,324,9,10,325,11,13,14,152,153,154,15,16,17],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:642","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"failures":[57,218],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[140,319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[326],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[18,20,21,23,2,30,33,34,39,41,42,94,95,96,97,98,99,100,102,103,104,105,109,6,8,9,10,11,142,143,144,145,146,147,148,151,152,153,154,161,170,171,172,173,178,180,181,184,185,186,187,188,189,192,193,195,196,197,199,200,201,202,203,210,211,212,213,225,226,227,235,0,265,266,267,268,271,276,277],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.RecordState.primitiveToWrapperType":"org.easymock.internal.RecordState.primitiveToWrapperType","returnedType":"returnedType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:152","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","type":"CtThrowImpl"},"failures":[327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Matches:40","sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[328],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[329,330,331],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:318","sourceCode":"return true","type":"CtReturnImpl"},"failures":[300,303],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[332,74,75,76,77,78,79,80,81,83,333,84,85,86,87,334],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[2,31,32,335,94,95,97,98,99,3,100,336,101,102,103,104,337,323,105,4,6,7,338,8,324,9,10,325,11,13,137,138,139,142,143,145,147,150,151,152,153,154,168,169,15,339,340,224,225,226,227,341,16,17,235,342,343,344,345,346,347,348,349,270],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:189","sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[14,149,150],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"failures":[350],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[351,352,177,353,354,355],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[356,357,358],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.Capture:110","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[326,359,243,244,245],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:180","sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"methodName","key":"methodName"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[51,66,71],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[41,127,133,134,177,180,216,217,360,361,355,248,251,252,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[137,138,139,140,167,204,205,206,207,208,209,219,326,359,244,245,273],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[362],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":49,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":246,"org.easymock.tests2.UsageTest.argumentsOrdered":134,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":207,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":129,"org.easymock.tests2.StubTest.stubWithReturnValue":167,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":193,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":70,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":28,"org.easymock.tests2.SerializationTest.testAllMockedMethod":150,"org.easymock.tests2.DelegateToTest.testReturnException":160,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":222,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":205,"org.easymock.tests.MockingTest.testPartialClassMocking":225,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":352,"org.easymock.samples.SupportTest.voteForRemovals":30,"org.easymock.tests.MockClassControlTest.testToString":344,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":214,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":323,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":291,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":279,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":223,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":152,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":89,"org.easymock.tests.UsageExpectAndThrowTest.object":289,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":67,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":34,"org.easymock.tests2.DelegateToTest.testWrongClass":162,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":276,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":277,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":271,"org.easymock.tests2.UsageTest.wrongArguments":127,"org.easymock.samples.ConstructorCalledMockTest.testTax":25,"org.easymock.tests.UsageStrictMockTest.range":180,"org.easymock.samples.ExampleTest.answerVsDelegate":19,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":118,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":17,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":142,"org.easymock.tests2.UsageConstraintsTest.testNull":51,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":290,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":97,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":349,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":9,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":120,"org.easymock.tests2.CaptureTest.testPrimitive":77,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":275,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":359,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":298,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":251,"org.easymock.tests.UsageTest.moreThanOneArgument":247,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":96,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":353,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":172,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":230,"org.easymock.tests2.CaptureTest.testCaptureNone":82,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":357,"org.easymock.tests.UsageUnorderedTest.message":299,"org.easymock.tests.UsageVerifyTest.twoReturns":217,"org.easymock.tests.UsageVarargTest.varargByteAccepted":262,"org.easymock.tests2.ThreadingTest.testThreadSafe":106,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":308,"org.easymock.tests.UsageTest.argumentsOrdered":252,"org.easymock.tests.UsageVarargTest.varargIntAccepted":256,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":240,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":31,"org.easymock.tests2.CaptureTest.testCapture_2617107":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":0,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":274,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":324,"org.easymock.tests2.UsageConstraintsTest.any":57,"org.easymock.tests2.StubTest.stub":166,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":268,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":245,"org.easymock.tests.UsageExpectAndThrowTest.longType":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":206,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":40,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":141,"org.easymock.tests.LimitationsTest.mockNativeMethod":235,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":203,"org.easymock.tests2.AnswerTest.answer":88,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":15,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":56,"org.easymock.tests2.CaptureTest.testAnd":74,"org.easymock.tests2.UsageTest.strictResetToDefault":125,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":43,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":101,"org.easymock.tests2.NameTest.nameForMocksControl":158,"org.easymock.tests2.MockedExceptionTest.testMockedException":138,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":171,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":115,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":250,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":312,"org.easymock.tests2.DelegateToTest.testDelegate":164,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":350,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":283,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":227,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":94,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":10,"org.easymock.tests.MockingTest.testNicePartialClassMocking":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":294,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":99,"org.easymock.tests2.CaptureTest.testCaptureLast":81,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":208,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":221,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":54,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":148,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":68,"org.easymock.tests.MockingTest.testTwoMocks":224,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":220,"org.easymock.tests2.CaptureTest.testCapture1_2446744":78,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":184,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":292,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":287,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":133,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":72,"org.easymock.tests.UsageThrowableTest.throwError":300,"org.easymock.tests.UsageStrictMockTest.differentMethods":181,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":358,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":108,"org.easymock.tests2.MockBuilderTest.testCreateMockString":13,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":342,"org.easymock.tests.UsageExpectAndThrowTest.floatType":281,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":174,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":63,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":91,"org.easymock.tests.UsageVerifyTest.twoThrows":216,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":153,"org.easymock.samples.PartialClassMockTest.testGetArea":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":265,"org.easymock.samples.ExampleTest.voteAgainstRemoval":21,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":229,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":228,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":103,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":280,"org.easymock.tests2.UsageTest.niceToStrict":128,"org.easymock.tests2.UsageConstraintsTest.testNotNull":71,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":307,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":137,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":8,"org.easymock.tests2.MockBuilderTest.testCreateMock":325,"org.easymock.tests2.UsageTest.defaultResetToNice":132,"org.easymock.samples.ExampleTest.voteAgainstRemovals":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":199,"org.easymock.tests.UsageVarargTest.differentLength":259,"org.easymock.tests2.CallbackTest.callback":165,"org.easymock.tests.UsageTest.openCallCountByLastCall":249,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":351,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":288,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":46,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":315,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":236,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":273,"org.easymock.tests.UsageCallCountTest.tooFewCalls":238,"org.easymock.tests.UsageOverloadedMethodTest.overloading":232,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":319,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":61,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":231,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":145,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":60,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":83,"org.easymock.tests.UsageThrowableTest.throwCheckedException":304,"org.easymock.tests.MockClassControlTest.testEquals":348,"org.easymock.tests2.EasyMockSupportClassTest.testAll":151,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":169,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":354,"org.easymock.tests.MockingTest.testStrictClassMocking":339,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":296,"org.easymock.tests2.CaptureTest.testCaptureAll":75,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":1,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":219,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":147,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":144,"org.easymock.tests2.UsageConstraintsTest.testMatches":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":146,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":173,"org.easymock.samples.ExampleTest.voteForRemovals":23,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":328,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":110,"org.easymock.tests2.NameTest.nameForNiceMock":157,"org.easymock.tests.UsageVarargTest.allKinds":264,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":215,"org.easymock.tests2.DependencyTest.testInterfaceMocking":33,"org.easymock.samples.BasicClassMockTest.testPrintContent":32,"org.easymock.samples.ExampleTest.addDocument":22,"org.easymock.tests2.DelegateToTest.testStubDelegate":161,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":306,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":37,"org.easymock.tests2.AnswerTest.stubAnswer":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":209,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":163,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":178,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":330,"org.easymock.tests2.UsageConstraintsTest.greaterThan":64,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":211,"org.easymock.tests.UsageVarargTest.varargLongAccepted":261,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":104,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":182,"org.easymock.samples.ExampleTest.voteForRemoval":20,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":337,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":107,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":202,"org.easymock.tests.UsageExpectAndReturnTest.floatType":186,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":3,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":105,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":26,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests.UsageThrowableTest.noUpperLimit":301,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":65,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":270,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":47,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":124,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":79,"org.easymock.tests2.SerializationTest.test":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":113,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":302,"org.easymock.tests2.UsageConstraintsTest.testSame":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":185,"org.easymock.samples.SupportTest.addDocument":29,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":204,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":331,"org.easymock.tests2.CaptureTest.testCaptureFirst":87,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":114,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":136,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":322,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":191,"org.easymock.tests.GenericTest.testPackageScope":168,"org.easymock.tests2.CaptureTest.testCapture2_2446744":86,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":109,"org.easymock.tests2.UsageTest.moreThanOneArgument":126,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":311,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":11,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":263,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":241,"org.easymock.tests2.NameTest.nameForMock":155,"org.easymock.tests.UsageExpectAndReturnTest.longType":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":278,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":111,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":297,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":196,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":12,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":269,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":69,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":295,"org.easymock.tests2.UsageStrictMockTest.differentMethods":42,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":170,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":336,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":188,"org.easymock.tests.UsageCallCountTest.tooManyCalls":242,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":293,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":213,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":237,"org.easymock.tests2.MockedExceptionTest.testRealException":140,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":192,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":360,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":284,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":39,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":305,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":272,"org.easymock.tests.MockingTest.testNiceClassMocking":341,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":143,"org.easymock.tests.MockingTest.testClassMocking":340,"org.easymock.tests2.UsageConstraintsTest.testContains":59,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":5,"org.easymock.tests2.NameTest.nameForStrictMock":156,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":139,"org.easymock.tests2.UsageConstraintsTest.testFind":50,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":233,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":338,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":35,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":98,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":36,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":175,"org.easymock.tests.UsageExpectAndReturnTest.object":194,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":335,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":66,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":100,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":6,"org.easymock.tests2.UsageStrictMockTest.range":41,"org.easymock.tests2.UsageConstraintsTest.lessThan":73,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":119,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":258,"org.easymock.tests.UsageTest.exactCallCountByLastCall":253,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":218,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":327,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":112,"org.easymock.tests2.CaptureTest.testCaptureRightOne":84,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":356,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":309,"org.easymock.tests2.UsageConstraintsTest.testOr":53,"org.easymock.tests.UsageRangeTest.combination":210,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":254,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":200,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":95,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":318,"org.easymock.tests.UsageTest.wrongArguments":248,"org.easymock.tests.MockClassControlTest.testHashCode":347,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":343,"org.easymock.tests2.EasyMockSupportTest.testVerify":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":189,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":197,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":310,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":316,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":314,"org.easymock.tests.UsageVarargTest.varargShortAccepted":260,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":44,"org.easymock.tests2.UsageConstraintsTest.cmpTo":58,"org.easymock.tests.UsageVarargTest.varargCharAccepted":257,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":329,"org.easymock.tests2.CaptureTest.testCaptureMultiple":332,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":90,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":38,"org.easymock.tests2.UsageTest.openCallCountByLastCall":130,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":131,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":122,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":313,"org.easymock.tests2.CaptureTest.testCaptureFromStub":85,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":7,"org.easymock.tests.UsageTest.unexpectedCallWithArray":355,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":234,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":361,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":286,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":303,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":177,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":239,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":198,"org.easymock.tests2.CaptureTest.testCapture":333,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":346,"org.easymock.tests2.UsageConstraintsTest.constraints":48,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":102,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":179,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":285,"org.easymock.samples.ExampleTest.addAndChangeDocument":24,"org.easymock.tests.CapturesMatcherTest.test":334,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":201,"org.easymock.tests.UsageStrictMockTest.testVerify":183,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":243,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":27,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":154,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":176,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":80,"org.easymock.tests2.UsageTest.resumeIfFailure":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":266,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":16,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":190,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":267,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":255,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":117}}]

[{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[1,2,3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:289","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:53","sourceCode":"return true","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[20,21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"failures":[22],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:149","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","type":"CtThrowImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:958","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[45],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[46,47,48,49,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:46","sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","type":"CtThrowImpl"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[1,2,3,4],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[101,102,70,103,104,77,81,82,84,87,105,106,107,108,109,110,111,112],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1361","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[113],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"position":"org.easymock.internal.BridgeMethodResolver:210","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[114,115,115,116,116,117,118,119,120,121,122,123,2,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[149],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[150],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[151],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[152,153,154,155,142,143,144,156,157,158,159,160,161,162,163],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:986","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod","bridgeMethod":"bridgeMethod"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[165,166,167,168,169,170],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:157","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":20,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":162,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":62,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":160,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":60,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":46,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":56,"org.easymock.tests2.StubTest.stubWithReturnValue":100,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":40,"org.easymock.tests2.SerializationTest.testAllMockedMethod":4,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":150,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":35,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":54,"org.easymock.tests.MockingTest.testPartialClassMocking":121,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":102,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":170,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":52,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":68,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":85,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":1,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":58,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":73,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":106,"org.easymock.tests.UsageExpectAndThrowTest.object":83,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":45,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":144,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":44,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":108,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":32,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":34,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":156,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":132,"org.easymock.samples.ConstructorCalledMockTest.testTax":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":141,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":134,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":24,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":158,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":120,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":98,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":11,"org.easymock.tests2.SerializationTest.test":3,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":84,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":129,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":135,"org.easymock.tests2.CaptureTest.testPrimitive":9,"org.easymock.tests.UsageTest.moreThanOneArgument":101,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":92,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":165,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.CaptureTest.testCaptureNone":14,"org.easymock.tests2.CaptureTest.testCaptureFirst":19,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":25,"org.easymock.tests.GenericTest.testPackageScope":117,"org.easymock.tests2.UsageTest.moreThanOneArgument":109,"org.easymock.tests2.CaptureTest.testCapture2_2446744":18,"org.easymock.tests.UsageVerifyTest.twoReturns":103,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":49,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":151,"org.easymock.tests2.CaptureTest.testCapture_2617107":8,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":125,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":104,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":91,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":47,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":72,"org.easymock.tests2.UsageStrictMockTest.differentMethods":111,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":89,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":55,"org.easymock.tests.UsageExpectAndThrowTest.longType":76,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":28,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":87,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests.LimitationsTest.mockNativeMethod":119,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":118,"org.easymock.tests2.MockedExceptionTest.testRealException":97,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":138,"org.easymock.tests2.CaptureTest.testAnd":6,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":51,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":155,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":112,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":0,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":110,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":78,"org.easymock.tests2.MockedExceptionTest.testMockedException":95,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":67,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":159,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":61,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":123,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":77,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":96,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":130,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":27,"org.easymock.tests.MockingTest.testNicePartialClassMocking":122,"org.easymock.tests2.UsageConstraintsTest.testFind":21,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":88,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":59,"org.easymock.tests2.CaptureTest.testCaptureLast":13,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":163,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":149,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":41,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":164,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":152,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":126,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":29,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":38,"org.easymock.tests2.CaptureTest.testCapture1_2446744":10,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":81,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongNumberOfArgs":22,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":50,"org.easymock.tests.UsageThrowableTest.throwError":63,"org.easymock.tests.UsageStrictMockTest.differentMethods":107,"org.easymock.tests2.CaptureTest.testCaptureRightOne":16,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":140,"org.easymock.tests2.MockBuilderTest.testCreateMockString":133,"org.easymock.tests.UsageExpectAndThrowTest.floatType":75,"org.easymock.tests.UsageVerifyTest.twoThrows":70,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":147,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":31,"org.easymock.samples.PartialClassMockTest.testGetArea":114,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":33,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":143,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":74,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":99,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":69,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":48,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":128,"org.easymock.tests2.CaptureTest.testCaptureFromStub":17,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":127,"org.easymock.tests.UsageTest.unexpectedCallWithArray":167,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":153,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":39,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":169,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":80,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":82,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":168,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":139,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":65,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":71,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":142,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":30,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":79,"org.easymock.tests.CapturesMatcherTest.test":5,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":93,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":161,"org.easymock.tests.ReplayStateInvalidCallsTest.times":36,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":113,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":15,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":37,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":148,"org.easymock.tests.UsageThrowableTest.throwCheckedException":66,"org.easymock.tests2.EasyMockSupportClassTest.testAll":145,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":12,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":137,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":166,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":105,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":90,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":136,"org.easymock.tests2.CaptureTest.testCaptureAll":7}}]

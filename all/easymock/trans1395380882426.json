[{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"failures":[14,15,16,17],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","type":"CtIfImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"key"}},{"transplant":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,2,5,8,91,12,13,92],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[93,94,95,96,97,98,99,100,101,102,103,104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if (java.lang.reflect.Constructor<T> == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"transplant":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[120],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[121,122,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"failures":[124],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:69","sourceCode":"continue","type":"CtContinueImpl"},"failures":[106,125,126,108,127,128,129,130,131,132,133],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:305","failures":[134,135,136,137,138,139,140,19,141,20,21,22,23,24,25,142,143,144,145,146,26,27,147,148,28,149,29,30,31,32,150,33,34,35,36,151,37,38,39,40,41,42,43,152,153,154,44,45,155,156,157,158,46,159,160,161,162,163,164,165,166,167,168,47,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,53,195,196,197,198,199,54,55,56,57,58,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,59,215,60,216,61,62,217,63,64,65,66,67,105,68,69,218,107,219,220,221,222,223,224,225,226,227,70,228,229,129,230,231,232,130,71,72,73,233,234,74,75,76,235,77,78,79,80,236,237,81,238,82,239,83,84,85,86,87,120,240,241,242,243,88,89,90,244,245,246,247,248,249,250,251,252,253,254,1,2,3,4,5,8,91,9,10,12,13,255,256,92,257,258,259],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ClassProxyFactory:157","failures":[],"status":0,"binaryOperator":"(((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[260,261,134,262,136,137,138,139,263,140,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,19,141,20,21,22,281,282,23,24,283,284,25,142,143,285,286,287,288,26,27,147,148,28,149,29,30,31,32,150,33,34,35,36,151,37,38,39,40,289,290,291,41,292,42,43,293,294,295,296,297,298,152,153,154,44,299,14,45,155,300,301,302,303,156,304,157,158,305,46,306,307,308,309,310,159,311,160,161,162,163,164,165,312,313,314,315,121,122,123,316,317,318,319,320,321,322,323,167,168,47,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,324,193,16,325,326,327,194,328,53,195,196,197,198,199,329,330,331,332,333,334,335,336,337,338,54,55,56,57,339,340,17,58,200,201,202,203,204,205,206,207,208,209,210,211,341,212,213,214,59,215,60,342,216,343,61,62,217,344,345,63,64,346,347,65,348,66,67,349,105,350,351,352,353,68,354,355,356,69,218,357,358,359,360,219,231,71,72,73,233,234,74,75,76,235,77,78,79,80,236,237,361,81,238,82,239,83,84,85,86,87,120,240,241,242,243,88,89,90,244,246,254,362,1,2,3,4,5,6,7,8,91,9,10,11,12,13,255,363,364,256,92,257,365,258,366,367,259,368],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[19,23,24,43,47,369,54,61,62,67,75,76,77,79,80,82,84,87,89],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:117","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[370,371],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:433","sourceCode":"do {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n} while (java.lang.Class<?> != null )","type":"CtDoImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"leafClass"}},{"transplant":{"position":"org.easymock.internal.ReplayState:32","sourceCode":"new java.util.concurrent.locks.ReentrantLock()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[372,373,374],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[375,369,376,377,378,379,380,381,382,48,383,49,384,385,386,15,387,388,389,50,51,52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[92],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[134,135,136,138,139,140,19,20,21,22,23,24,25,144,145,146,26,27,147,148,28,149,29,30,31,32,150,33,34,35,36,151,37,38,39,40,41,42,43,296,297,298,152,154,44,45,46,160,161,162,163,164,166,390,167,168,47,189,190,191,194,53,195,196,197,198,199,54,55,56,57,58,200,201,202,203,204,205,206,207,208,209,210,211,212,213,59,215,60,216,61,62,217,63,64,65,66,67,105,69,107,219,220,221,222,223,224,225,226,227,70,228,229,129,230,231,232,130,71,72,73,233,234,74,75,76,235,77,78,79,80,236,237,81,238,82,239,83,84,85,86,87,120,240,241,243,88,89,90,244,245,246,247,248,249,250,251,252,253,254,1,2,4,5,8,91,9,10,12,13,255,92,259],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":235,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":21,"org.easymock.tests2.UsageTest.argumentsOrdered":345,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":210,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":383,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":343,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":262,"org.easymock.tests2.DelegateToTest.testReturnException":256,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":308,"org.easymock.tests.MockingTest.testPartialClassMocking":144,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":389,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":169,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":221,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":213,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":113,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":237,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":154,"org.easymock.tests2.UsageTest.wrongArguments":342,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":104,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":302,"org.easymock.samples.ExampleTest.answerVsDelegate":137,"org.easymock.tests2.UsageConstraintsTest.testNull":78,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":247,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":209,"org.easymock.tests2.CaptureTest.testPrimitive":4,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":45,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":188,"org.easymock.tests.UsageTest.moreThanOneArgument":22,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":246,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":336,"org.easymock.tests.UsageTest.argumentsOrdered":284,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":329,"org.easymock.tests.UsageVarargTest.varargIntAccepted":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":15,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":160,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":376,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":164,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":255,"org.easymock.tests2.AnswerTest.answer":68,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":361,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":387,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":360,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":215,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":126,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":335,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":56,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":204,"org.easymock.tests2.DelegateToTest.testDelegate":258,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":333,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":159,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":315,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":142,"org.easymock.tests2.CaptureTest.testCapture1_2446744":5,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":182,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":358,"org.easymock.tests.UsageThrowableTest.throwError":194,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":286,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":98,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":338,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":132,"org.easymock.samples.PartialClassMockTest.testGetArea":135,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":161,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":170,"org.easymock.tests2.UsageTest.niceToStrict":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":375,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":225,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":103,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":178,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":205,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":267,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":316,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":300,"org.easymock.tests.UsageOverloadedMethodTest.overloading":168,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":158,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":83,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":167,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":33,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":239,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":373,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":9,"org.easymock.tests2.EasyMockSupportClassTest.testAll":220,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":186,"org.easymock.tests2.CaptureTest.testCaptureAll":2,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":313,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":359,"org.easymock.tests.MockNameTest.defaultName":279,"org.easymock.tests2.UsageConstraintsTest.testMatches":84,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":337,"org.easymock.samples.ExampleTest.voteForRemovals":140,"org.easymock.tests.UsageVarargTest.allKinds":278,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":19,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":314,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":198,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":346,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":96,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":311,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":365,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":119,"org.easymock.tests2.UsageConstraintsTest.greaterThan":86,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":55,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":253,"org.easymock.samples.ExampleTest.voteForRemoval":138,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":72,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":287,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":59,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":381,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":202,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":53,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":307,"org.easymock.tests2.CaptureTest.testCaptureFirst":13,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":380,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":203,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":64,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":30,"org.easymock.tests2.CaptureTest.testCapture2_2446744":12,"org.easymock.tests2.UsageTest.moreThanOneArgument":60,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":233,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":388,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":70,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":277,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":322,"org.easymock.tests.UsageExpectAndReturnTest.longType":148,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":165,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":200,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":187,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":242,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":280,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":185,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":122,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":334,"org.easymock.tests.UsageCallCountTest.tooManyCalls":323,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":317,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":31,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":174,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":197,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":229,"org.easymock.tests2.UsageConstraintsTest.testContains":82,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":259,"org.easymock.tests2.UsageConstraintsTest.testFind":77,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":47,"org.easymock.tests.MockTypeTest.fromEasyMockClass":285,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":289,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":340,"org.easymock.tests.UsageExpectAndReturnTest.object":150,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":250,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":208,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":114,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":272,"org.easymock.tests.UsageTest.exactCallCountByLastCall":25,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":152,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":330,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":37,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":268,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":157,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":93,"org.easymock.tests2.EasyMockSupportTest.testVerify":341,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":331,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":156,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":266,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":357,"org.easymock.tests.UsageVarargTest.varargCharAccepted":271,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":52,"org.easymock.tests2.UsageTest.openCallCountByLastCall":61,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":211,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":265,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":325,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":176,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":195,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":251,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":175,"org.easymock.tests.CapturesMatcherTest.test":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":38,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":223,"org.easymock.tests2.UsageTest.resumeIfFailure":63,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":310,"org.easymock.tests2.StubTest.stubWithReturnValue":58,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":108,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":32,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":243,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":193,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":111,"org.easymock.samples.SupportTest.voteForRemovals":134,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":181,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":16,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":354,"org.easymock.tests.UsageExpectAndThrowTest.object":179,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":240,"org.easymock.tests2.DelegateToTest.testWrongClass":257,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":190,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":191,"org.easymock.tests.UsageStrictMockTest.range":42,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":207,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":228,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":180,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":226,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":301,"org.easymock.tests2.CaptureTest.testCaptureNone":91,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":297,"org.easymock.tests.UsageUnorderedTest.message":192,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests.UsageVarargTest.varargByteAccepted":276,"org.easymock.tests2.ThreadingTest.testThreadSafe":71,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":320,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":327,"org.easymock.tests2.CaptureTest.testCapture_2617107":3,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":50,"org.easymock.tests2.UsageConstraintsTest.any":81,"org.easymock.tests2.StubTest.stub":17,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":123,"org.easymock.tests.UsageExpectAndThrowTest.longType":172,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":51,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":309,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":372,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":348,"org.easymock.tests2.SerializationTest.testClass":107,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":254,"org.easymock.tests.LimitationsTest.mockNativeMethod":189,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":40,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":100,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":349,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":18,"org.easymock.tests2.NameTest.nameForMocksControl":353,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":101,"org.easymock.tests2.MockedExceptionTest.testMockedException":367,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":24,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":173,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":146,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":244,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":227,"org.easymock.tests.MockingTest.testNicePartialClassMocking":145,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":249,"org.easymock.tests2.CompareToTest.testNotComparable":124,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":112,"org.easymock.tests2.CaptureTest.testCaptureLast":8,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":143,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":236,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":241,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":131,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":177,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":344,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":89,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":102,"org.easymock.tests.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":94,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":73,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":324,"org.easymock.tests.UsageExpectAndThrowTest.floatType":171,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":85,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":356,"org.easymock.tests.UsageVerifyTest.twoThrows":141,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":222,"org.easymock.samples.ExampleTest.voteAgainstRemoval":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":49,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":295,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":252,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":133,"org.easymock.tests2.UsageConstraintsTest.testNotNull":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":199,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":366,"org.easymock.tests2.UsageTest.defaultResetToNice":217,"org.easymock.samples.ExampleTest.voteAgainstRemovals":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":384,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":151,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":99,"org.easymock.tests.UsageVarargTest.differentLength":273,"org.easymock.tests2.CallbackTest.callback":214,"org.easymock.tests.UsageTest.openCallCountByLastCall":23,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":299,"org.easymock.tests.UsageCallCountTest.tooFewCalls":318,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":230,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":303,"org.easymock.tests.UsageThrowableTest.throwCheckedException":196,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":153,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":232,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":129,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":363,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":231,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":218,"org.easymock.tests.ObjectMethodsTest.testHashCode":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":117,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":234,"org.easymock.tests2.NameTest.nameForNiceMock":352,"org.easymock.tests2.DependencyTest.testInterfaceMocking":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":115,"org.easymock.samples.ExampleTest.addDocument":263,"org.easymock.tests2.DelegateToTest.testStubDelegate":92,"org.easymock.tests2.AnswerTest.stubAnswer":69,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":41,"org.easymock.tests.UsageVarargTest.varargLongAccepted":275,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":48,"org.easymock.tests.UsageExpectAndReturnTest.floatType":147,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":39,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":105,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":87,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageThrowableTest.noUpperLimit":328,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":75,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":6,"org.easymock.tests2.SerializationTest.test":219,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":374,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":27,"org.easymock.tests2.UsageConstraintsTest.testSame":79,"org.easymock.samples.SupportTest.addDocument":261,"org.easymock.tests.GenericTest.testPackageScope":166,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":378,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":97,"org.easymock.tests2.NameTest.nameForMock":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":34,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":128,"org.easymock.tests2.UsageStrictMockTest.differentMethods":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":28,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":183,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":57,"org.easymock.tests2.MockedExceptionTest.testRealException":368,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":288,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":385,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":65,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":44,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":371,"org.easymock.tests2.NameTest.nameForStrictMock":351,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":339,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":248,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":120,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":224,"org.easymock.tests2.UsageStrictMockTest.range":66,"org.easymock.tests2.UsageConstraintsTest.lessThan":90,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":116,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":382,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests2.UsageConstraintsTest.testOr":80,"org.easymock.tests.UsageRangeTest.combination":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":245,"org.easymock.tests.UsageTest.wrongArguments":282,"org.easymock.tests2.MockBuilderTest.testWithConstructor":125,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":369,"org.easymock.tests.UsageVarargTest.varargShortAccepted":274,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":321,"org.easymock.tests2.UsageConstraintsTest.cmpTo":238,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":377,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":62,"org.easymock.tests2.CaptureTest.testCaptureFromStub":11,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":370,"org.easymock.tests.UsageTest.unexpectedCallWithArray":281,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":291,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":319,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":127,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":36,"org.easymock.tests2.UsageConstraintsTest.constraints":76,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":292,"org.easymock.samples.ExampleTest.addAndChangeDocument":264,"org.easymock.tests.UsageStrictMockTest.testVerify":294,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":260,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":290,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":312,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":7,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":162,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":163,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":46,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":206,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":269}}]

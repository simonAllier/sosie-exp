[{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:38","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[0,1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[2,3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:88","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,0,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,1,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.EasyMock:2124","failures":[353,354,355,369,372,373,448],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[456,457,458,459,460,461,462,463,464,465,466,467,418,468,427,430,469,469,470,470],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"args"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:82","failures":[380,382,383,384,385,386,387,389,471,390,391,393],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[472,473,424],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[85,208,213],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:134","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[5,6,7,8,9,10,474,475,11,476,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,0,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,1,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,456,457,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,458,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,459,330,331,477,460,333,334,335,336,337,338,339,340,341,342,343,344,461,345,346,347,348,349,350,351,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,462,403,463,404,405,406,407,478,464,408,479,480,409,465,410,411,412,413,414,415,416,466,467,417,418,419,420,421,422,423,424,425,468,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,469,469,470,470,446,447,448,449,450,451,452,453,454,455],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[258,262],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[458,284,285],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[5,6,7,16,17,20,22,23,62,63,67,68,69,70,72,73,74,75,76,77,78,0,79,80,81,83,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,1,118,119,120,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,159,160,161,162,164,165,167,168,170,193,194,197,199,200,201,202,203,204,214,215,219,221,222,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,251,259,260,261,263,264,270,277,278,279,280,281,282,283,284,285,286,287,288,289,291,292,293,294,295,296,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,323,324,325,326,327,328,330,331,348,349,350,351,353,355,356,357,358,359,360,361,362,363,365,366,367,368,369,372,373,374,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,403,417,418,419,420,421,422,425,430,435,436,441,442,443,444,445,447,448,449,450,451,452,454,455],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[458,284,285],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[58,481,482],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:52","sourceCode":"org.easymock.internal.InjectionPlan.blockDuplicateQualifiers(java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"qualifier","key":"qualifier"}},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[167,169,170],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:52","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1121","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[483,484,91,150,485,486],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[10,474,475,476,108,167,168,169,171,174,197,209,487,488,489,456,458,285,328,329,459,330,477,460,337,490,338,339,341,342,343,344,345,346,491,347,350,403,405,410,416,417,418,420,421,422,423,425,427,428,429,430,443,444,469,469,470,470,446],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[492],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"message":"defaultValue"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[42,219,264,353,355,369,371,372,374,448],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[288,289,294,295,297,307,380,382,390],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((this.java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + (org.easymock.Capture<T>.getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[493,494,380,381,382,383,384,385,386,387,389,471,390,391,392,393],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ThrowableWrapper:32","sourceCode":"return java.lang.Throwable","type":"CtReturnImpl"},"failures":[6,63,81,109,111,112,113,114,115,116,118,119,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,153,199,200,201,202,203,204,222,348,349,350,351,356,363,395],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:61","sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[166],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:88","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[166,169,456,457,495,458,496,497,341,498,499,461,345,500,347,405,410,468,429,432,469,469,470,470,446],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","args":"args","cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:117","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[219,264,353,355,369,372,374,448],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":289,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":148,"org.easymock.tests2.UsageTest.argumentsOrdered":366,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":325,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":39,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":361,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":445,"org.easymock.tests2.DelegateToTest.testReturnException":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":200,"org.easymock.tests.MockingTest.testPartialClassMocking":474,"org.easymock.tests.MockClassControlTest.testToString":210,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":375,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":48,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":464,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":405,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":128,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":436,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":296,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":117,"org.easymock.tests2.UsageTest.wrongArguments":359,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":276,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":179,"org.easymock.samples.ExampleTest.answerVsDelegate":448,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":174,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":13,"org.easymock.tests2.UsageConstraintsTest.testNull":292,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":420,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":215,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":324,"org.easymock.tests2.CaptureTest.testPrimitive":383,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":120,"org.easymock.tests.UsageTest.moreThanOneArgument":149,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":147,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":419,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":105,"org.easymock.tests.UsageTest.argumentsOrdered":155,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":15,"org.easymock.tests.UsageVarargTest.varargIntAccepted":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":44,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":98,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":337,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":256,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":342,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":31,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":102,"org.easymock.tests.ReplayStateInvalidUsageTest.times":189,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":270,"org.easymock.tests2.DependencyTest.testClassMocking":433,"org.easymock.tests2.AnswerTest.answer":369,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":297,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":46,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":336,"org.easymock.tests2.CaptureTest.testAnd":380,"org.easymock.tests2.UsageTest.strictResetToDefault":357,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":497,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":427,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":104,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":319,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":19,"org.easymock.tests2.DelegateToTest.testDelegate":263,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":143,"org.easymock.tests.LimitationsTest.mockFinalMethod":198,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":203,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":28,"org.easymock.tests2.DependencyTest.testClassMockingSupport":434,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":125,"org.easymock.tests2.CaptureTest.testCapture1_2446744":384,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":424,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":141,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":334,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":183,"org.easymock.tests.UsageThrowableTest.throwError":109,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":173,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":257,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":467,"org.easymock.samples.PartialClassMockTest.testGetArea":446,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":184,"org.easymock.tests.MockingTest.testInterfaceMocking":11,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":99,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":408,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":129,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":88,"org.easymock.tests2.UsageTest.niceToStrict":360,"org.easymock.tests2.ThreadingTest.testChangeDefault":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":29,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":4,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":341,"org.easymock.tests2.MockBuilderTest.testCreateMock":345,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":413,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":273,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":485,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":137,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":320,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":207,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":157,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":177,"org.easymock.tests.UsageOverloadedMethodTest.overloading":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":415,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":222,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":302,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":79,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":237,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":481,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":301,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":389,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":71,"org.easymock.tests2.EasyMockSupportClassTest.testAll":403,"org.easymock.tests.MockClassControlTest.testEquals":214,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":168,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":145,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":487,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":26,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":335,"org.easymock.tests2.CaptureTest.testCaptureAll":381,"org.easymock.tests.MockNameTest.defaultName":121,"org.easymock.tests2.UsageConstraintsTest.testMatches":303,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":181,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":106,"org.easymock.samples.ExampleTest.voteForRemovals":452,"org.easymock.tests.UsageVarargTest.allKinds":0,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":5,"org.easymock.samples.BasicClassMockTest.testPrintContent":444,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":27,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":115,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":204,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":253,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":262,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":60,"org.easymock.tests2.UsageConstraintsTest.greaterThan":305,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":463,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":21,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":430,"org.easymock.samples.ExampleTest.voteForRemoval":449,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":61,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":431,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":397,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":175,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":423,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":108,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":356,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":461,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":36,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":317,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":402,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":199,"org.easymock.tests2.CaptureTest.testCaptureFirst":393,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":318,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":368,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":225,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":233,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":399,"org.easymock.tests2.CaptureTest.testCapture2_2446744":392,"org.easymock.tests2.UsageTest.moreThanOneArgument":358,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":47,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":346,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":78,"org.easymock.tests.GenericTest.testBridgedEquals":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":164,"org.easymock.tests.UsageExpectAndReturnTest.longType":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":24,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":315,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":491,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":146,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":82,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":310,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":144,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":103,"org.easymock.tests.UsageCallCountTest.tooManyCalls":165,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":159,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":414,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":275,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":133,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":114,"org.easymock.tests.MockingTest.testNiceClassMocking":14,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":329,"org.easymock.tests.MockingTest.testClassMocking":9,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":490,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":158,"org.easymock.tests2.UsageConstraintsTest.testContains":300,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":350,"org.easymock.tests2.UsageConstraintsTest.testFind":291,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":81,"org.easymock.tests.MockTypeTest.fromEasyMockClass":172,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":89,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":355,"org.easymock.tests.UsageExpectAndReturnTest.object":236,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":425,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":323,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":73,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":86,"org.easymock.tests.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":34,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":16,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":216,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":457,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":68,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":242,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":221,"org.easymock.tests.MockClassControlTest.testHashCode":213,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":247,"org.easymock.tests2.EasyMockSupportTest.testVerify":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":480,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":17,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":206,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":219,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":333,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":352,"org.easymock.tests.UsageVarargTest.varargCharAccepted":72,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":53,"org.easymock.tests2.CaptureTest.testCaptureMultiple":494,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":52,"org.easymock.tests2.UsageTest.openCallCountByLastCall":362,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":2,"org.easymock.tests.DefaultClassInstantiatorTest.object":54,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":326,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":205,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":409,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":135,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":268,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":428,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":212,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":134,"org.easymock.tests.CapturesMatcherTest.test":493,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":416,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":211,"org.easymock.tests2.UsageTest.resumeIfFailure":367,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":171,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":202,"org.easymock.tests2.StubTest.stubWithReturnValue":395,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":498,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":235,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":311,"org.easymock.tests2.SerializationTest.testAllMockedMethod":285,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":45,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":486,"org.easymock.samples.SupportTest.voteForRemovals":442,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":166,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":249,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":140,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":51,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":370,"org.easymock.tests.UsageExpectAndThrowTest.object":138,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":218,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":308,"org.easymock.tests2.DelegateToTest.testWrongClass":261,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":193,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":194,"org.easymock.samples.ConstructorCalledMockTest.testTax":469,"org.easymock.tests.UsageStrictMockTest.range":94,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":439,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":322,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":139,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":343,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":401,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":191,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":154,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":178,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":483,"org.easymock.tests2.CaptureTest.testCaptureNone":388,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":66,"org.easymock.tests.UsageUnorderedTest.message":67,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests.UsageVarargTest.varargByteAccepted":77,"org.easymock.tests2.ThreadingTest.testThreadSafe":396,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":411,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":162,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":443,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":87,"org.easymock.tests2.CaptureTest.testCapture_2617107":382,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":49,"org.easymock.tests2.UsageConstraintsTest.any":298,"org.easymock.tests2.StubTest.stub":394,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":124,"org.easymock.tests.UsageExpectAndThrowTest.longType":131,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":50,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":201,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":58,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":187,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":280,"org.easymock.tests2.SerializationTest.testClass":458,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":251,"org.easymock.tests.LimitationsTest.mockNativeMethod":197,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":169,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":245,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":489,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":267,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":283,"org.easymock.tests2.NameTest.nameForMocksControl":379,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":269,"org.easymock.tests2.MockedExceptionTest.testMockedException":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":404,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":476,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":132,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":354,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":417,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":344,"org.easymock.tests.MockingTest.testNicePartialClassMocking":475,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":422,"org.easymock.tests2.CaptureTest.testCaptureLast":387,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":265,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":126,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":460,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":295,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":309,"org.easymock.tests.MockingTest.testTwoMocks":10,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":332,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":226,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":136,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":365,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":313,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":472,"org.easymock.samples.ExampleTest.removeNonExistingDocument":453,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":185,"org.easymock.tests.UsageStrictMockTest.differentMethods":95,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":272,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":248,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":56,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":398,"org.easymock.tests2.MockBuilderTest.testCreateMockString":347,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":406,"org.easymock.tests.UsageExpectAndThrowTest.floatType":130,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":462,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":372,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":495,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":410,"org.easymock.samples.ExampleTest.voteAgainstRemoval":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":40,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":64,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":429,"org.easymock.tests.LimitationsTest.privateConstructor":196,"org.easymock.tests2.UsageConstraintsTest.testNotNull":312,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":116,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":348,"org.easymock.tests2.UsageTest.defaultResetToNice":364,"org.easymock.samples.ExampleTest.voteAgainstRemovals":447,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":41,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":241,"org.easymock.tests.UsageVarargTest.differentLength":74,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":266,"org.easymock.tests2.CallbackTest.callback":264,"org.easymock.tests2.UsageConstraintsTest.equals":290,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":468,"org.easymock.tests.UsageTest.openCallCountByLastCall":152,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":286,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":118,"org.easymock.tests.UsageCallCountTest.tooFewCalls":160,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":330,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":180,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":492,"org.easymock.tests.UsageThrowableTest.throwCheckedException":113,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":484,"org.easymock.tests.MockingTest.testStrictClassMocking":8,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":477,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":459,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":271,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":190,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":331,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":374,"org.easymock.tests.ObjectMethodsTest.testHashCode":85,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":400,"org.easymock.tests2.NameTest.nameForNiceMock":378,"org.easymock.tests2.DependencyTest.testInterfaceMocking":435,"org.easymock.samples.ExampleTest.addDocument":451,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":466,"org.easymock.tests2.DelegateToTest.testStubDelegate":260,"org.easymock.tests2.AnswerTest.stubAnswer":373,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":92,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":499,"org.easymock.tests.UsageVarargTest.varargLongAccepted":76,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":38,"org.easymock.tests.UsageExpectAndReturnTest.floatType":228,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":244,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":456,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":470,"org.easymock.tests.UsageThrowableTest.noUpperLimit":110,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":255,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":306,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":287,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":437,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":385,"org.easymock.tests2.SerializationTest.test":284,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":482,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":227,"org.easymock.tests2.UsageConstraintsTest.testSame":293,"org.easymock.samples.SupportTest.addDocument":441,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":407,"org.easymock.tests.GenericTest.testPackageScope":167,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":18,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":33,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":254,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":12,"org.easymock.tests2.NameTest.nameForMock":376,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":238,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":500,"org.easymock.tests2.UsageStrictMockTest.differentMethods":282,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":426,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":142,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":83,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":23,"org.easymock.tests2.MockedExceptionTest.testRealException":351,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":176,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":43,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":42,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":279,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":1,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":192,"org.easymock.tests2.NameTest.nameForStrictMock":377,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":340,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":3,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":353,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":421,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":438,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":57,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":307,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":338,"org.easymock.tests2.UsageStrictMockTest.range":281,"org.easymock.tests2.UsageConstraintsTest.lessThan":314,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":37,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":479,"org.easymock.tests2.CaptureTest.testCaptureRightOne":390,"org.easymock.tests2.UsageConstraintsTest.testOr":294,"org.easymock.tests.UsageRangeTest.combination":20,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":418,"org.easymock.tests.UsageTest.wrongArguments":151,"org.easymock.tests2.MockBuilderTest.testWithConstructor":496,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":478,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":209,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":30,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":239,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":59,"org.easymock.tests.UsageVarargTest.varargShortAccepted":75,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":163,"org.easymock.tests2.UsageConstraintsTest.cmpTo":299,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":32,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":363,"org.easymock.tests2.CaptureTest.testCaptureFromStub":391,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":182,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":339,"org.easymock.tests.UsageTest.unexpectedCallWithArray":150,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":91,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":161,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":240,"org.easymock.tests2.CaptureTest.testCapture":471,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":93,"org.easymock.tests2.UsageConstraintsTest.constraints":288,"org.easymock.samples.ExampleTest.addAndChangeDocument":454,"org.easymock.tests.UsageStrictMockTest.testVerify":97,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":455,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":90,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":25,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":386,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":488,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":100,"org.easymock.tests.LimitationsTest.abstractClass":195,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":232,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":101,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":224,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":69,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":321}}]

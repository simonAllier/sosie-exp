[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"variableMapping":{"result":"toStringMethod","bridgeMethod":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.ObjectMethodsFilter:55","type":"CtTryImpl"},"status":-1},{"failures":[107],"binaryOperator":"((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","name":"conditionalBoundary","position":"org.easymock.internal.matchers.Contains:36","type":"mutation","status":-1},{"failures":[108,109,110,111,5,8,18,24,27,112,113,114,115,116,117,29,118,30,119,120,121,122,123,124,125,126,107,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,31,32,151,33,34,35,37,42,152,153,48,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,53,55,56,61,62,63,64,189,65,66,190,191,192,193,194,195,196,197,198,67,68,199,200,201,202,203,204,205,71,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,74,236,237,238,239,240,241,242,243,244,245,246,247,248,249,78,79,80,250,251,252,253,254,255,256,257,258,259,260,261,262,84,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,103,104,302,303,304,305,306,307,308,309,310,311],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.internal.Result>.add(org.easymock.internal.Result)","position":"org.easymock.internal.Results:45","type":"CtInvocationImpl"},"status":-1},{"failures":[312,313,314,315,192,316,317,318,319,320,321,322,295,323,324,325,326],"variableMapping":{"buffer":"buffer"},"name":"replace","transplant":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.And:51","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:40","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:315","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.BridgeMethodResolver:382","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)","position":"org.easymock.internal.Injector:131","type":"CtInvocationImpl"},"status":-2},{"failures":[134],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-2689588759855326190L","position":"org.easymock.internal.matchers.NotNull:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-4434322855124959723L","position":"org.easymock.internal.ThrowableWrapper:23","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:665","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.ExpectedInvocation","position":"org.easymock.internal.ExpectedInvocationAndResult:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","position":"org.easymock.internal.Results:81","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.Injection>.add(org.easymock.internal.Injection)","position":"org.easymock.internal.InjectionPlan:53","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:958","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-2},{"failures":[112,120,121,123,125,126,130,133,136,143,195,196,197,210,240,249,270,296,297,299,300,301],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.Results:53","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"cls":"clazz","type":"clazz"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.BridgeMethodResolver:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:388","type":"CtAssignmentImpl"},"status":0},{"failures":[126,128,146,167,173,174,178,250,251,252,253,254,255,256,257,258,259,260,261,262,264,269,327,293],"name":"returnValue","position":"org.easymock.internal.matchers.Any:36","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{"toAssign":"toAssign","injection":"toAssign"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:193","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","position":"org.easymock.internal.ReflectionUtils:107","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:173","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = ((org.easymock.internal.ExpectedInvocation)(java.lang.Object))","position":"org.easymock.internal.ExpectedInvocation:73","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:158","type":"CtIfImpl"},"status":-2},{"failures":[5,159],"variableMapping":{"controls":"controls"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToStrict();\n}","position":"org.easymock.EasyMockSupport:594","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.ExpectedInvocationAndResult.getResult()","position":"org.easymock.internal.MocksBehavior:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.io.ObjectOutputStream.writeObject(null);\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:129","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:471","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:280","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"))","position":"org.easymock.internal.ClassProxyFactory:230","type":"CtThrowImpl"},"status":-2},{"failures":[59,60,328,329,330,331,332],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.matchers.EqualsWithDelta:39","type":"CtLocalVariableImpl"},"status":-2},{"failures":[333,334,335],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","position":"org.easymock.internal.MockBuilder:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","position":"org.easymock.internal.RecordState:257","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.fieldsOf(java.lang.Class<?>)","position":"org.easymock.internal.Injector:159","type":"CtLocalVariableImpl"},"status":-2},{"failures":[122,107,127,128,131,137,138,139,141,146,32,34,42,157,163,164,176,194,317,318,239,240,242,243,244,245,246,248,264,270,271,272,336,337,293,325,326],"variableMapping":{"results":"results"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount())) {\n        return false;\n    } \n}","position":"org.easymock.internal.UnorderedBehavior:74","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.boolean) != boolean) {\n    return false;\n} else if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:102","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1709","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"status":-2},{"failures":[336,337],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.createTypeVariableMap(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:111","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","position":"org.easymock.internal.RecordState:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","position":"org.easymock.EasyMockSupport:530","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.easymock.internal.MocksBehavior:124","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.regex.Pattern.java.util.regex.Pattern.compile(java.lang.String)","position":"org.easymock.internal.matchers.Find:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:222","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"otherArgument","o":"otherArgument"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"status":0},{"failures":[0,338,339,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,340,341,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106],"binaryOperator":"org.easymock.internal.IProxyFactory != null","name":"negateConditional","position":"org.easymock.internal.MocksControl:136","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"capture(\").append(org.easymock.Capture<T>).append(\")\")","position":"org.easymock.internal.matchers.Captures:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:320","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","position":"org.easymock.internal.MethodSerializationWrapper:30","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.AndroidClassProxyFactory.MockHandler.java.lang.reflect.InvocationHandler","position":"org.easymock.internal.AndroidClassProxyFactory:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Properties.getProperty(java.lang.String)","position":"org.easymock.internal.EasyMockProperties:101","type":"CtReturnImpl"},"status":-2},{"failures":[342],"variableMapping":{"actual":"o"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Compare:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:119","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","position":"org.easymock.internal.JavaProxyFactory:30","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n        continue;\n    } \n    if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n        continue;\n    } \n    final org.easymock.internal.Result org.easymock.internal.Result = org.easymock.internal.ExpectedInvocationAndResults.getResults().next();\n    org.easymock.internal.Invocation.validateCaptures();\n    return org.easymock.internal.Result;\n} finally {\n    org.easymock.internal.Invocation.clearCaptures();\n}","position":"org.easymock.internal.UnorderedBehavior:51","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"value"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Injector:208","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.BridgeMethodResolver:413","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n    break;\n} ","position":"org.easymock.internal.BridgeMethodResolver:199","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","position":"org.easymock.internal.Invocation:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:282","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:157","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:551","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"status":-2},{"failures":[108,109,110,111,27,113,114,115,116,117,29,118,119,120,121,122,123,124,125,126,107,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,343,146,147,148,149,150,31,151,33,35,152,153,166,167,168,169,170,171,172,173,175,176,344,177,178,180,182,183,184,185,187,53,59,60,62,63,65,66,190,191,192,316,193,194,195,196,317,318,198,200,201,204,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,345,239,241,242,243,244,245,246,248,249,78,79,80,250,251,252,253,254,255,256,346,347,348,349,350,258,259,260,261,262,84,351,352,322,264,265,266,267,268,353,354,355,356,357,269,327,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,358,293,294,295,323,324,296,297,325,326,298,299],"variableMapping":{"this":"this","mocks":"mocks"},"name":"add","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","position":"org.easymock.ConstructorArgs:60","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int += org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<org.easymock.IMocksControl>.add(org.easymock.IMocksControl)","position":"org.easymock.EasyMockSupport:481","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:109","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","position":"org.easymock.internal.ReflectionUtils:39","type":"CtInvocationImpl"},"status":-2},{"failures":[190,196,241,271,294,297],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","position":"org.easymock.internal.RecordState:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:108","type":"CtIfImpl"},"status":-1},{"failures":[],"binaryOperator":"((java.lang.Object + \" isn\\'t of type \") + java.lang.Class<?>)","name":"math","position":"org.easymock.ConstructorArgs:87","type":"mutation","status":-2},{"failures":[0,338,339,1,359,360,108,361,362,109,110,111,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,112,113,363,114,115,116,364,117,365,29,118,30,119,120,121,122,366,123,124,125,126,107,127,367,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,343,145,146,147,148,149,150,31,32,151,33,34,35,36,368,37,38,39,40,41,42,43,44,45,152,369,153,46,47,48,370,154,155,156,157,158,159,160,371,161,162,163,164,165,372,373,374,375,376,377,166,167,168,169,170,171,172,173,174,175,176,344,177,178,378,379,380,381,382,179,383,384,385,386,387,388,180,389,181,182,183,184,185,390,391,392,393,394,395,396,397,398,186,399,400,401,402,403,404,340,341,187,188,49,50,51,52,53,54,55,56,405,57,58,59,60,61,62,63,64,406,189,65,66,407,408,328,329,330,331,190,191,192,316,193,194,195,196,409,317,318,197,198,67,68,199,200,201,202,203,204,410,205,69,70,71,206,207,208,209,411,412,413,414,415,210,211,212,213,416,214,215,417,418,419,420,421,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,72,422,423,424,425,73,426,427,74,236,428,237,238,429,345,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,239,240,241,242,243,244,245,246,247,248,249,75,76,77,78,79,458,80,459,460,81,250,251,461,333,462,252,253,254,255,256,346,347,348,349,257,350,258,259,260,261,262,82,83,84,85,463,334,464,465,466,467,351,468,469,470,471,472,473,474,352,263,322,264,265,266,267,268,475,353,354,355,356,357,86,87,88,89,90,91,92,93,269,327,270,271,272,476,477,478,479,480,94,481,335,482,483,484,485,486,487,336,337,488,489,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,490,358,491,293,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,95,96,97,98,99,100,101,294,295,323,324,296,297,325,326,298,299,514,300,301,102,103,104,105,106,302,303,304,515,305,306,516,307,308,309,310,311],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    synchronized(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) {\n        if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n            org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n        } \n    }\n} ","position":"org.easymock.internal.EasyMockProperties:44","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:354","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Method not found (or private): \" + java.lang.String)","name":"math","position":"org.easymock.internal.MockBuilder:90","type":"mutation","status":-2},{"failures":[],"binaryOperator":"(\"Failed to mock \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.AndroidClassProxyFactory:58","type":"mutation","status":-2},{"failures":[443,445,454,455,457,461,333,462,335],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()))","position":"org.easymock.internal.Injector:233","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Number","position":"org.easymock.internal.RecordState:207","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1080","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[113,119,120,121,122,123,125,126,107,127,128,130,131,132,133,134,135,136,137,138,139,141,143,144,343,146,148,149,155,156,157,158,159,160,161,162,163,164,166,167,168,169,170,171,172,173,175,176,177,178,185,59,316,193,194,317,318,239,240,242,243,244,245,246,248,258,261,352,322,264,266,267,269,324,325,326,299],"variableMapping":{"result":"actual"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.ClassProxyFactory:212","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"status":0},{"failures":[517,518],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","position":"org.easymock.Capture:135","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","position":"org.easymock.internal.ArgumentToString:93","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[]","position":"org.easymock.internal.Invocation:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:1012","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"status":-2},{"failures":[461],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":242,"org.easymock.tests2.MockedExceptionTest.testRealException":370,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":9,"org.easymock.tests.UsageVarargTest.varargIntAccepted":304,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":500,"org.easymock.tests.LimitationsTest.mockFinalMethod":85,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":119,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":27,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":89,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":20,"org.easymock.tests.UsageCallCountTest.tooManyCalls":215,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":467,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":407,"org.easymock.tests2.StubTest.stubWithReturnValue":113,"org.easymock.tests.UsageVarargTest.allKinds":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":26,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":486,"org.easymock.tests2.CaptureTest.testCaptureAll":167,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":250,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":134,"org.easymock.tests2.CaptureTest.testAnd":166,"org.easymock.tests.UsageStrictMockTest.testVerify":475,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":237,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":72,"org.easymock.tests.MockClassControlTest.testToString":88,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":61,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":473,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":159,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":494,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":229,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":289,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":186,"org.easymock.tests.UsageThrowableTest.throwError":239,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":509,"org.easymock.samples.SupportTest.addDocument":206,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":262,"org.easymock.tests2.StubTest.stub":112,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":336,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":351,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":394,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":255,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":368,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":512,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":258,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":235,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":457,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":44,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":310,"org.easymock.tests.UsageExpectAndThrowTest.object":283,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":348,"org.easymock.tests2.UsageTest.moreThanOneArgument":192,"org.easymock.tests.UsageVarargTest.varargByteAccepted":309,"org.easymock.tests.MockClassControlTest.testEquals":92,"org.easymock.tests.UsageTest.wrongArguments":324,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":492,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":420,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":479,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":398,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":284,"org.easymock.tests2.UsageTest.defaultResetToNice":409,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":320,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":312,"org.easymock.tests.MockingTest.testNiceClassMocking":81,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":48,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":183,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":56,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":184,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":464,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":468,"org.easymock.samples.ExampleTest.voteAgainstRemovals":199,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":343,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":397,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":428,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":300,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":247,"org.easymock.tests2.CaptureTest.testCapture1_2446744":170,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":364,"org.easymock.samples.ExampleTest.voteForRemoval":201,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":359,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":213,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":462,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":483,"org.easymock.tests2.CaptureTest.testCaptureRightOne":176,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":222,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":465,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":362,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":35,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":514,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":466,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":488,"org.easymock.tests2.UsageConstraintsTest.cmpTo":129,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":376,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":99,"org.easymock.tests.MockTypeTest.fromEasyMockClass":424,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":402,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":405,"org.easymock.tests2.MockedExceptionTest.testMockedException":47,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":141,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":292,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":355,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":441,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":249,"org.easymock.samples.ConstructorCalledMockTest.testTax":69,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":406,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":338,"org.easymock.tests2.UsageTest.argumentsOrdered":318,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":361,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":422,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":360,"org.easymock.samples.ExampleTest.removeNonExistingDocument":410,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":97,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":111,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":334,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":221,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":417,"org.easymock.tests2.AnswerTest.answer":108,"org.easymock.tests.MockingTest.testNicePartialClassMocking":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":403,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":264,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":256,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":337,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":357,"org.easymock.tests.UsageExpectAndThrowTest.longType":276,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":427,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":18,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":371,"org.easymock.tests.UsageTest.argumentsOrdered":326,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":55,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":122,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":234,"org.easymock.tests2.MockBuilderTest.testCreateMockString":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":260,"org.easymock.tests2.NameTest.nameForStrictMock":329,"org.easymock.tests2.CaptureTest.testCaptureNone":174,"org.easymock.tests2.SerializationTest.testClass":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":454,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":94,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":67,"org.easymock.tests.MockingTest.testInterfaceMocking":458,"org.easymock.tests2.EasyMockSupportTest.testVerify":165,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":477,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":400,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":278,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":460,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":140,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":190,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests.GenericTest.testBridgedEquals":106,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":233,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":127,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":189,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":31,"org.easymock.tests2.UsageConstraintsTest.testOr":126,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":181,"org.easymock.tests.MockClassControlTest.testHashCode":91,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":379,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":408,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":73,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":228,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":246,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":251,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":25,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":64,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":373,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":496,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":6,"org.easymock.tests2.UsageConstraintsTest.testSame":125,"org.easymock.tests2.UsageTest.resumeIfFailure":197,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":313,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":495,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":412,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":65,"org.easymock.tests.UsageOverloadedMethodTest.overloading":248,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":38,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":426,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":14,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":433,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":13,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":104,"org.easymock.tests.UsageTest.openCallCountByLastCall":296,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":279,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":332,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":432,"org.easymock.tests2.NameTest.nameForNiceMock":330,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":470,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":399,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":301,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":353,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":499,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":151,"org.easymock.tests2.CaptureTest.testPrimitive":169,"org.easymock.samples.BasicClassMockTest.testPrintContent":68,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":252,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":40,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":152,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":214,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":415,"org.easymock.tests2.UsageStrictMockTest.differentMethods":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":15,"org.easymock.tests.MockingTest.testClassMocking":76,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":156,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":105,"org.easymock.tests2.CaptureTest.testCaptureLast":173,"org.easymock.tests2.UsageConstraintsTest.equals":366,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":274,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":416,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":212,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":188,"org.easymock.tests.UsageStrictMockTest.range":266,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":297,"org.easymock.tests.InvocationTest.testEquals":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":16,"org.easymock.tests.UsageTest.unexpectedCallWithArray":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":437,"org.easymock.samples.ExampleTest.addDocument":203,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":459,"org.easymock.tests2.UsageConstraintsTest.lessThan":144,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":325,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":236,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":487,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":446,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":0,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":101,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":314,"org.easymock.tests2.UsageStrictMockTest.range":148,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests.UsageTest.moreThanOneArgument":295,"org.easymock.tests2.UsageTest.openCallCountByLastCall":195,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":50,"org.easymock.tests.UsageStrictMockTest.differentMethods":267,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":1,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":277,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":461,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":216,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":257,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":7,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":372,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":37,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":265,"org.easymock.tests2.DependencyTest.testClassMockingSupport":341,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":396,"org.easymock.tests.ReplayStateInvalidCallsTest.times":505,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":288,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":269,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":381,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":209,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":481,"org.easymock.tests2.UsageConstraintsTest.testContains":130,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":507,"org.easymock.tests2.UsageConstraintsTest.testFind":123,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":171,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":98,"org.easymock.samples.ExampleTest.addAndChangeDocument":205,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":49,"org.easymock.tests.UsageVarargTest.varargCharAccepted":305,"org.easymock.tests2.CaptureTest.testCaptureFromStub":344,"org.easymock.tests.UsageVerifyTest.twoThrows":271,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":404,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":423,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":259,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":306,"org.easymock.tests2.DelegateToTest.testReturnException":114,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":28,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":194,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":164,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":102,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":145,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":413,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":100,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":474,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":175,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":285,"org.easymock.tests2.UsageConstraintsTest.testMatches":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":445,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":456,"org.easymock.tests.LimitationsTest.abstractClass":82,"org.easymock.tests2.UsageConstraintsTest.testNull":124,"org.easymock.tests2.EasyMockSupportClassTest.testAll":5,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":74,"org.easymock.tests2.UsageConstraintsTest.greaterThan":135,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":302,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":469,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":137,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":161,"org.easymock.tests.UsageExpectAndReturnTest.object":226,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":150,"org.easymock.tests2.DelegateToTest.testWrongClass":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":436,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":506,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":319,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":280,"org.easymock.samples.ExampleTest.voteAgainstRemoval":202,"org.easymock.tests.CapturesMatcherTest.test":518,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":245,"org.easymock.tests.UsageVarargTest.varargShortAccepted":307,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":489,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":480,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":387,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":254,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":4,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":86,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":395,"org.easymock.tests2.SerializationTest.testAllMockedMethod":30,"org.easymock.tests2.NameTest.nameForMocksControl":331,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":497,"org.easymock.tests.MockingTest.testStrictClassMocking":75,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":261,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":12,"org.easymock.tests.LimitationsTest.mockNativeMethod":84,"org.easymock.tests2.DelegateToTest.testStubDelegate":115,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":333,"org.easymock.tests.UsageUnorderedTest.message":293,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":429,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":448,"org.easymock.samples.ExampleTest.answerVsDelegate":200,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":482,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":511,"org.easymock.tests.UsageCallCountTest.tooFewCalls":211,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":225,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":21,"org.easymock.tests.UsageVerifyTest.twoReturns":272,"org.easymock.tests2.ThreadingTest.testChangeDefault":389,"org.easymock.tests2.DependencyTest.testInterfaceMocking":187,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":220,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":282,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":447,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":154,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":315,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":449,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":157,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":393,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":107,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":374,"org.easymock.tests.MockingTest.testTwoMocks":77,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":210,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":484,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":46,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":10,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":227,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":63,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":3,"org.easymock.tests.UsageThrowableTest.throwCheckedException":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":425,"org.easymock.samples.ExampleTest.voteForRemovals":204,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":241,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":132,"org.easymock.tests.ReplayStateInvalidUsageTest.times":471,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":513,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":11,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":238,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":349,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":34,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":434,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":217,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":339,"org.easymock.tests2.UsageConstraintsTest.any":128,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":380,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":224,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":438,"org.easymock.tests2.CaptureTest.testCapture":517,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":163,"org.easymock.tests.LimitationsTest.privateConstructor":83,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":153,"org.easymock.tests2.CallbackTest.callback":185,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":502,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":508,"org.easymock.tests2.NameTest.nameForMock":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":442,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":131,"org.easymock.tests.MockNameTest.defaultName":463,"org.easymock.tests2.SerializationTest.test":118,"org.easymock.tests.UsageExpectAndReturnTest.longType":219,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":172,"org.easymock.tests2.CaptureTest.testCaptureFirst":178,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":501,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":491,"org.easymock.tests2.UsageTest.niceToStrict":193,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":346,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":421,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":335,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":2,"org.easymock.tests2.UsageTest.strictResetToDefault":191,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":286,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":42,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":327,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":273,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":223,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":390,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":36,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":52,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":33,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":136,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":303,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":350,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":80,"org.easymock.tests2.DelegateToTest.testDelegate":117,"org.easymock.tests2.UsageConstraintsTest.testNotNull":142,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":147,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":179,"org.easymock.tests2.CaptureTest.testCapture_2617107":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":451,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":472,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests2.ThreadingTest.testThreadSafe":180,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":196,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":452,"org.easymock.tests.UsageThrowableTest.noUpperLimit":240,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":515,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":162,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":155,"org.easymock.tests.UsageExpectAndReturnTest.floatType":218,"org.easymock.tests2.UsageTest.wrongArguments":316,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":367,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":392,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":90,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":57,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":503,"org.easymock.samples.SupportTest.voteForRemovals":207,"org.easymock.tests.UsageRangeTest.combination":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":17,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":244,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":143,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":139,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":23,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":388,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":146,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":287,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":485,"org.easymock.tests.UsageExpectAndThrowTest.floatType":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":19,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":32,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":231,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":377,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":378,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":39,"org.easymock.tests.UsageTest.exactCallCountByLastCall":298,"org.easymock.tests2.AnswerTest.stubAnswer":110,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":160,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":493,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":504,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":8,"org.easymock.tests.MockingTest.testPartialClassMocking":78,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":232,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":317,"org.easymock.tests2.UsageConstraintsTest.constraints":121,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":391,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":365,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":498,"org.easymock.tests.UsageVarargTest.varargLongAccepted":308,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":356,"org.easymock.tests.ObjectMethodsTest.testHashCode":478,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":41,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":43,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":322,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":24,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":431,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":51,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":358,"org.easymock.tests2.DependencyTest.testClassMocking":340,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":93,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":253,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":476,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":386,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":158,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":87,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":120,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":53,"org.easymock.tests.DefaultClassInstantiatorTest.object":95,"org.easymock.tests.UsageVarargTest.differentLength":516,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":450,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":510,"org.easymock.tests2.CaptureTest.testCapture2_2446744":177,"org.easymock.tests.GenericTest.testPackageScope":103}}]

[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[10,11,12,13,14,15,16,17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,4,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"toStringMethod"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[111,112,113,114],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[115,116,71,87,117,118],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:920","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[119,120],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[23,25,28,36,37,39,40,41,64,4,65,115,121,116,122,70,71,73,76,86,87,88,89,90,117,118,123],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:363","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:52","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double.valueOf(0))","type":"CtInvocationImpl"},"failures":[124,125,126,127,128,129,130,131,132,133,134,135,136],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[137],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[19,20,21,22,24,26,27,29,30,31,32,33,34,36,37,40,41,45,47,48,50,52,53,54,56,57,58,59,60,61,62,63,71,72,74,75,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,105,107,108,109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[138,139,140,141,142,143,144,145,146,147,148,149,150,132,151,152,153,154],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[21],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:109","sourceCode":"java.util.List<T>.add(T)","type":"CtInvocationImpl"},"failures":[155,156,157,158,159],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:326","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"position":"org.easymock.internal.Range:36","failures":[160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,19,178,179,180,181,182,183,184,185,186,20,187,188,21,189,22,138,139,140,141,23,190,24,25,26,27,28,191,29,30,31,32,1,156,2,192,193,194,195,196,197,198,3,157,158,199,200,201,202,203,204,33,34,205,206,207,208,209,210,211,124,212,35,213,36,37,38,39,214,215,216,40,41,42,43,217,44,218,45,219,46,47,220,48,49,221,222,223,50,224,51,52,225,226,227,228,53,229,54,230,231,55,56,232,57,233,234,235,236,58,59,237,238,239,60,61,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,111,112,113,255,256,257,258,259,62,63,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,64,137,142,290,291,292,293,294,295,296,297,298,299,300,301,302,4,5,303,304,305,306,6,7,307,8,308,309,310,311,312,313,65,314,315,9,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,66,331,332,67,68,69,333,334,335,336,337,338,339,340,341,342,70,343,71,72,73,74,75,76,344,345,346,143,347,348,349,125,350,351,352,353,354,355,356,357,358,359,144,360,77,361,78,79,362,363,80,81,82,364,365,366,367,368,83,84,369,370,371,372,373,374,126,127,375,376,377,378,379,380,128,381,382,383,384,385,386,129,387,388,389,390,85,86,87,88,391,392,89,90,91,92,393,394,93,94,95,96,97,395,396,397,130,398,399,400,98,99,100,401,402,403,101,404,405,406,407,408,409,410,411,412,413,145,414,10,415,11,416,417,418,419,420,421,422,423,12,13,424,14,425,426,427,428,102,429,430,103,104,431,432,433,434,435,436,437,438,439,105,440,441,442,443,444,445,106,446,447,448,449,450,451,452,453,454,107,108,109,110,455,456,457,458,459,460,461,462,463,464,465,131,466,467,468,469,470,471,472,473,474,475,476,0,477,15,478,146,147,148,149,150,132,479,480,481,482,16,17,18,151,152,153,483,154,133,134,484,485,486,487,488,489,135,490,491,492,493,494,495,136,496,497,498,499],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,19,178,179,180,181,182,183,184,185,186,20,187,188,21,189,22,138,139,140,141,23,190,24,25,26,27,28,191,29,30,31,32,1,156,2,192,193,194,195,196,197,198,3,157,158,199,200,201,202,203,204,33,34,205,206,207,208,209,210,211,124,212,35,213,36,37,38,39,214,215,216,40,41,42,43,217,44,218,45,219,46,47,220,48,49,221,222,223,50,224,51,52,225,226,227,228,53,229,54,230,231,55,56,232,57,233,234,235,236,58,59,237,238,239,60,61,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,111,112,113,255,256,257,258,259,62,63,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,64,137,142,290,291,292,293,294,295,296,297,298,299,300,301,302,4,5,303,304,305,306,6,7,307,8,308,309,310,311,312,313,65,314,315,9,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,66,331,332,67,68,69,333,334,335,336,337,338,339,340,341,342,70,343,71,72,73,74,75,76,344,345,346,143,347,348,349,125,350,351,352,353,354,355,356,357,358,359,144,360,77,361,78,79,362,363,80,81,82,364,365,366,367,368,83,84,369,370,371,372,373,374,126,127,375,376,377,378,379,380,128,381,382,383,384,385,386,129,387,388,389,390,85,86,87,88,391,392,89,90,91,92,393,394,93,94,95,96,97,395,396,397,130,398,399,400,98,99,100,401,402,403,101,404,405,406,407,408,409,410,411,412,413,145,414,10,415,11,416,417,418,419,420,421,422,423,12,13,424,14,425,426,427,428,102,429,430,103,104,431,432,433,434,435,436,437,438,439,105,440,441,442,443,444,445,106,446,447,448,449,450,451,452,453,454,107,108,109,110,455,456,457,458,459,460,461,462,463,464,465,131,466,467,468,469,470,471,472,473,474,475,476,0,477,15,478,146,147,148,149,150,132,479,480,481,482,16,17,18,151,152,153,483,154,133,134,484,485,486,487,488,489,135,490,491,492,493,494,495,136,496,497,498,499],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[111,112,113,114],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[473,0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[16],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"toStringMethod"}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[24,27,28,36,68,72,75,76,369,377,128,381,383,386,86,108,109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[40,303,89],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:95","sourceCode":"int = java.lang.Integer.int","type":"CtAssignmentImpl"},"failures":[26,27,42,137,302,4,304,306,6,310,313,315,321,74,75,78,101,404,405,406,456],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"max"}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:94","sourceCode":"if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n    int = java.lang.Integer.int;\n} else {\n    int += org.easymock.internal.Range.getMaximum();\n}","type":"CtIfImpl"},"failures":[162,163,164,165,166,167,168,169,170,171,173,174,175,176,177,19,178,179,180,181,184,187,188,21,140,23,190,24,25,26,27,28,29,30,31,32,1,156,2,192,194,195,196,197,198,3,199,33,35,213,36,37,38,39,40,41,42,43,217,44,218,45,219,46,47,48,49,221,222,223,51,227,53,54,56,233,236,58,59,237,239,60,61,248,251,252,253,111,112,113,62,268,271,281,287,64,137,142,291,292,295,296,297,300,301,302,4,5,304,305,306,6,7,307,308,309,310,311,312,313,65,314,315,9,316,317,319,320,321,322,325,326,327,329,68,336,337,339,70,343,71,72,73,74,75,76,345,346,143,347,348,349,125,77,78,79,362,363,81,82,126,127,375,376,377,378,379,380,128,381,382,383,384,385,386,129,387,388,389,390,85,86,88,89,90,91,101,404,405,406,426,427,440,441,442,444,445,106,446,447,448,449,450,107,108,109,110,456,457,467,468,469,470,471,472,474,475,150,481,483,133,134,484,485,486,487,488,489,135,490,491,492,493,494,495,136,496,497,498,499],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Integer.MAX_VALUE":"max"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[26,37,40,41,71,74,87,88,89,90,500,107,109,110],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[501,431,438],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1660","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[83],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:946","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[5,8],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,19,178,179,180,181,182,183,184,185,186,20,187,188,21,189,22,138,139,140,141,23,190,24,25,26,27,28,191,29,30,31,32,1,156,2,192,193,194,195,196,197,198,3,157,158,199,200,201,202,203,204,33,34,205,206,207,208,209,210,211,124,212,35,213,36,37,38,39,214,215,216,40,41,42,43,217,44,218,45,219,46,47,220,48,49,221,222,223,50,224,51,52,225,226,227,228,53,229,54,230,231,55,56,232,57,233,234,235,236,58,59,237,238,239,60,61,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,111,112,113,255,256,257,258,259,62,63,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,64,137,142,290,291,292,293,294,295,296,297,298,299,300,301,302,4,5,303,304,305,306,6,7,307,8,308,309,310,311,312,313,65,314,315,9,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,66,331,332,67,68,69,333,334,335,336,337,338,339,340,341,342,70,343,71,72,73,74,75,76,344,345,346,143,347,348,349,125,350,351,352,353,354,355,356,357,358,359,144,360,77,361,78,79,362,363,80,81,82,364,365,366,367,368,83,84,369,370,371,372,373,374,126,127,375,376,377,378,379,380,128,381,382,383,384,385,386,129,387,388,389,390,85,86,87,88,391,392,89,90,91,92,393,394,93,94,95,96,97,395,396,397,130,398,399,400,98,99,100,401,402,403,101,404,405,406,407,408,409,410,411,412,413,145,414,10,415,11,416,417,418,419,420,421,422,423,12,13,424,14,425,426,427,428,102,429,430,103,104,431,432,433,434,435,436,437,438,439,105,440,441,442,443,444,445,106,446,447,448,449,450,451,452,453,454,107,108,109,110,455,456,457,458,459,460,461,462,463,464,465,131,466,467,468,469,470,471,472,473,474,475,476,0,477,15,478,146,147,148,149,150,132,479,480,481,482,16,17,18,151,152,153,483,154,133,134,484,485,486,487,488,489,135,490,491,492,493,494,495,136,496,497,498,499],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:176","failures":[502,503,504,505,506,507,508,233],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[299,355,477,478],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[138,139,140,141,142,146,147,148,149,150,132,151,152,153,154],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:269","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","type":"CtThrowImpl"},"failures":[452,453,152,153],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[509,510],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[229,503,504,505,506,507,234],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,177,19,178,179,180,181,182,184,20,187,188,21,138,139,140,141,23,190,24,25,26,27,28,1,156,2,192,193,194,195,196,197,198,3,157,158,199,33,210,211,124,212,35,213,36,37,38,39,214,215,216,40,41,42,43,217,44,218,45,219,46,47,220,48,49,221,222,223,50,51,227,228,53,54,55,56,57,233,236,58,59,237,239,60,61,248,251,252,253,111,112,113,62,268,271,281,287,64,137,142,291,292,293,295,296,297,298,299,300,301,302,4,5,304,305,306,6,7,307,308,309,310,311,312,313,65,314,315,9,316,317,318,319,320,321,322,325,326,327,329,330,331,332,69,336,337,339,70,343,71,72,73,74,75,76,345,346,143,347,348,349,125,78,79,362,363,80,81,82,370,371,372,373,374,126,127,375,376,377,378,379,380,128,381,382,383,384,385,386,129,387,388,389,390,85,86,87,88,391,392,89,90,91,396,397,130,398,101,405,406,425,426,427,440,441,442,444,445,106,446,447,448,449,450,107,108,109,110,455,456,457,458,459,460,461,462,463,464,465,131,466,467,468,469,470,471,472,474,475,159,159,146,147,148,149,150,132,481,483,154,133,134,484,485,486,487,488,489,135,490,491,492,493,494,495,136,496,497,498,499],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[163,164,165,166,168,169,170,171,173,174,175,176,190,25,26,27,28,156,2,194,195,196,197,199,39,45,49,221,222,223,227,113,137,318,343,73,74,75,76,143,78,79,362,363,81,82,440,441,442,444,445,446,447,448,449,450,107,456,472,475],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests2.UsageTest.argumentsOrdered":41,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":85,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":221,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":415,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":39,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":163,"org.easymock.tests2.DelegateToTest.testReturnException":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":147,"org.easymock.tests.MockingTest.testPartialClassMocking":336,"org.easymock.tests.MockClassControlTest.testToString":98,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":191,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":15,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":423,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":22,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":126,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":271,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":326,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":503,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":307,"org.easymock.tests2.UsageTest.wrongArguments":37,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":345,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":209,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":130,"org.easymock.samples.ExampleTest.answerVsDelegate":167,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":95,"org.easymock.tests2.UsageConstraintsTest.testNull":305,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":341,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":179,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":49,"org.easymock.tests2.CaptureTest.testPrimitive":192,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":348,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":390,"org.easymock.tests.UsageTest.moreThanOneArgument":86,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":465,"org.easymock.tests.UsageTest.argumentsOrdered":90,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":364,"org.easymock.tests.UsageVarargTest.varargIntAccepted":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":419,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":467,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":507,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":243,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":263,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":228,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":409,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":471,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":33,"org.easymock.tests.ReplayStateInvalidUsageTest.times":358,"org.easymock.tests2.DependencyTest.testClassMocking":323,"org.easymock.tests2.AnswerTest.answer":248,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":421,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":212,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":394,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":213,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":20,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":225,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":464,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":405,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":219,"org.easymock.tests2.DelegateToTest.testDelegate":295,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":368,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":129,"org.easymock.tests.LimitationsTest.mockFinalMethod":482,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":374,"org.easymock.tests2.DependencyTest.testClassMockingSupport":324,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":83,"org.easymock.tests2.CaptureTest.testCapture1_2446744":193,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":183,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":385,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":211,"org.easymock.tests.UsageThrowableTest.throwError":455,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":352,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":94,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":454,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":289,"org.easymock.samples.PartialClassMockTest.testGetArea":162,"org.easymock.tests.MockingTest.testInterfaceMocking":338,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":353,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":468,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":17,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":127,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":104,"org.easymock.tests2.UsageTest.niceToStrict":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":407,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":227,"org.easymock.tests2.MockBuilderTest.testCreateMock":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":206,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":115,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":381,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":46,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":393,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":453,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":77,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":396,"org.easymock.tests.UsageOverloadedMethodTest.overloading":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":286,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":312,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":332,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":492,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":425,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":509,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":311,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":198,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":443,"org.easymock.tests.MockClassControlTest.testEquals":402,"org.easymock.tests2.EasyMockSupportClassTest.testAll":268,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":475,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":388,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":121,"org.easymock.tests2.CaptureTest.testCaptureAll":156,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":372,"org.easymock.tests.MockNameTest.defaultName":105,"org.easymock.tests2.UsageConstraintsTest.testMatches":313,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":131,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":350,"org.easymock.samples.ExampleTest.voteForRemovals":171,"org.easymock.tests.UsageVarargTest.allKinds":450,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":108,"org.easymock.samples.BasicClassMockTest.testPrintContent":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":373,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":461,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":23,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":132,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":260,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":294,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":508,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":438,"org.easymock.tests2.UsageConstraintsTest.greaterThan":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":404,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":21,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":439,"org.easymock.samples.ExampleTest.voteForRemoval":168,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":189,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":297,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":96,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":244,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":182,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":472,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":35,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":231,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":145,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":218,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":457,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":266,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":146,"org.easymock.tests2.CaptureTest.testCaptureFirst":199,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":45,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":69,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":489,"org.easymock.tests2.CaptureTest.testCapture2_2446744":158,"org.easymock.tests2.UsageTest.moreThanOneArgument":36,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":422,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":56,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":449,"org.easymock.tests.GenericTest.testBridgedEquals":0,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":81,"org.easymock.tests.UsageExpectAndReturnTest.longType":485,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":370,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":389,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":395,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":318,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":463,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":152,"org.easymock.tests.UsageCallCountTest.tooManyCalls":82,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":285,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":135,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":208,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":378,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":460,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":58,"org.easymock.tests.MockingTest.testNiceClassMocking":342,"org.easymock.tests.MockingTest.testClassMocking":334,"org.easymock.tests2.UsageConstraintsTest.testContains":310,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":361,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":140,"org.easymock.tests2.UsageConstraintsTest.testFind":304,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":427,"org.easymock.tests.MockTypeTest.fromEasyMockClass":93,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":70,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":329,"org.easymock.tests.UsageExpectAndReturnTest.object":491,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":184,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":207,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":48,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":504,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":445,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":430,"org.easymock.tests.UsageTest.exactCallCountByLastCall":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":412,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":477,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":365,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":123,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":234,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":496,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":440,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":331,"org.easymock.tests.MockClassControlTest.testHashCode":401,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":256,"org.easymock.tests2.EasyMockSupportTest.testVerify":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":278,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":366,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":452,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":330,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":210,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":254,"org.easymock.tests.UsageVarargTest.varargCharAccepted":444,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":431,"org.easymock.tests2.CaptureTest.testCaptureMultiple":155,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":190,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":14,"org.easymock.tests2.UsageTest.openCallCountByLastCall":214,"org.easymock.tests.DefaultClassInstantiatorTest.object":432,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":222,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":451,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":102,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":500,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":380,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":458,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":203,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":255,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":187,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":100,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":379,"org.easymock.tests.CapturesMatcherTest.test":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":497,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":151,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":99,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":287,"org.easymock.tests2.UsageTest.resumeIfFailure":42,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":92,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":149,"org.easymock.tests2.StubTest.stubWithReturnValue":142,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":229,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":490,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":319,"org.easymock.tests2.SerializationTest.testAllMockedMethod":113,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":420,"org.easymock.samples.SupportTest.voteForRemovals":175,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":116,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":473,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":258,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":384,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":114,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":424,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":249,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":478,"org.easymock.tests.UsageExpectAndThrowTest.object":382,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":316,"org.easymock.tests2.DelegateToTest.testWrongClass":293,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":349,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":125,"org.easymock.samples.ConstructorCalledMockTest.testTax":160,"org.easymock.tests.UsageStrictMockTest.range":74,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":246,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":220,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":383,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":53,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":144,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":265,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":397,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":117,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":18,"org.easymock.tests2.CaptureTest.testCaptureNone":197,"org.easymock.tests.UsageUnorderedTest.message":107,"org.easymock.tests.UsageVerifyTest.twoReturns":110,"org.easymock.tests.UsageVarargTest.varargByteAccepted":448,"org.easymock.tests2.ThreadingTest.testThreadSafe":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":282,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":363,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":164,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":103,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":122,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":12,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":347,"org.easymock.tests2.UsageConstraintsTest.any":308,"org.easymock.tests2.StubTest.stub":137,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":357,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":13,"org.easymock.tests.UsageExpectAndThrowTest.longType":376,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":436,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":356,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":25,"org.easymock.tests2.SerializationTest.testClass":111,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":62,"org.easymock.tests.LimitationsTest.mockNativeMethod":481,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":499,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":476,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":202,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":28,"org.easymock.tests2.NameTest.nameForMocksControl":32,"org.easymock.tests2.MockedExceptionTest.testMockedException":139,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":270,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":392,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":328,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":339,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":377,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":177,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":54,"org.easymock.tests.MockingTest.testNicePartialClassMocking":337,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":181,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":502,"org.easymock.tests2.CaptureTest.testCaptureLast":196,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":200,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":84,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":61,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":317,"org.easymock.tests.MockingTest.testTwoMocks":335,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":240,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":133,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":128,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":40,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":321,"org.easymock.samples.ExampleTest.removeNonExistingDocument":172,"org.easymock.tests.UsageStrictMockTest.differentMethods":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":205,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":354,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":257,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":434,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":120,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":298,"org.easymock.tests2.MockBuilderTest.testCreateMockString":57,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":399,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":272,"org.easymock.tests.UsageExpectAndThrowTest.floatType":375,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":267,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":251,"org.easymock.tests.UsageVerifyTest.twoThrows":109,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":235,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":281,"org.easymock.samples.ExampleTest.voteAgainstRemoval":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":11,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":16,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":188,"org.easymock.tests.LimitationsTest.privateConstructor":480,"org.easymock.tests2.UsageConstraintsTest.testNotNull":320,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":462,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":138,"org.easymock.tests2.UsageTest.defaultResetToNice":216,"org.easymock.samples.ExampleTest.voteAgainstRemovals":166,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":416,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":136,"org.easymock.tests.UsageVarargTest.differentLength":106,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":201,"org.easymock.tests2.CallbackTest.callback":64,"org.easymock.tests2.UsageConstraintsTest.equals":303,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":185,"org.easymock.tests.UsageTest.openCallCountByLastCall":391,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":143,"org.easymock.tests.UsageCallCountTest.tooFewCalls":79,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":237,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":398,"org.easymock.tests.UsageThrowableTest.throwCheckedException":459,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":118,"org.easymock.tests.MockingTest.testStrictClassMocking":333,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":154,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":60,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":34,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":59,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":359,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":239,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":253,"org.easymock.tests.ObjectMethodsTest.testHashCode":429,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":506,"org.easymock.tests2.NameTest.nameForNiceMock":31,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":300,"org.easymock.tests2.DependencyTest.testInterfaceMocking":325,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":505,"org.easymock.samples.ExampleTest.addDocument":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":283,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":288,"org.easymock.tests2.DelegateToTest.testStubDelegate":292,"org.easymock.tests2.AnswerTest.stubAnswer":252,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":72,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":230,"org.easymock.tests.UsageVarargTest.varargLongAccepted":447,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":10,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":498,"org.easymock.tests.UsageExpectAndReturnTest.floatType":484,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":233,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":161,"org.easymock.tests.UsageThrowableTest.noUpperLimit":456,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":262,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":315,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":302,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":241,"org.easymock.tests2.SerializationTest.test":112,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":194,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":510,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":433,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":134,"org.easymock.tests2.UsageConstraintsTest.testSame":306,"org.easymock.samples.SupportTest.addDocument":174,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":501,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":238,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":273,"org.easymock.tests.GenericTest.testPackageScope":474,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":411,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":261,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":340,"org.easymock.tests2.NameTest.nameForMock":29,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":493,"org.easymock.tests2.UsageStrictMockTest.differentMethods":27,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":232,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":186,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":486,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":386,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":428,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":406,"org.easymock.tests2.MockedExceptionTest.testRealException":141,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":418,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":417,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":24,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":346,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":360,"org.easymock.tests2.NameTest.nameForStrictMock":30,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":226,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":180,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":245,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":435,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":51,"org.easymock.tests2.UsageStrictMockTest.range":26,"org.easymock.tests2.UsageConstraintsTest.lessThan":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":414,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":44,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":277,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":119,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests.UsageRangeTest.combination":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":19,"org.easymock.tests.UsageTest.wrongArguments":88,"org.easymock.tests2.MockBuilderTest.testWithConstructor":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":274,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":400,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":487,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":494,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":408,"org.easymock.tests.UsageVarargTest.varargShortAccepted":446,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":437,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":80,"org.easymock.tests2.UsageConstraintsTest.cmpTo":309,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":410,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":215,"org.easymock.tests2.CaptureTest.testCaptureFromStub":157,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":351,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":52,"org.easymock.tests.UsageTest.unexpectedCallWithArray":87,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":71,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":362,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":495,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.samples.ExampleTest.addAndChangeDocument":173,"org.easymock.tests.UsageStrictMockTest.testVerify":344,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":176,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":343,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":371,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":195,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":469,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":488,"org.easymock.tests.LimitationsTest.abstractClass":479,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":470,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":68,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":441,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":47}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:260","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:135","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:557","sourceCode":"if (org.easymock.internal.MocksControl == null) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers();\n    throw new java.lang.IllegalStateException(\"no last call on a mock available\");\n} ","type":"CtIfImpl"},"failures":[17,18,19,20,21],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:243","failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,1,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,13,102,103,20],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[104,105,106],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[74,86,90,98,107],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[108,109],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[110,111,7,9,112,113],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1065","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[114,115,116,117],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1902","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:344","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[138],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[22,139,140,141,142,4,27,28,29,30,31,143,144,145,146,147,148,149,150,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,151,152,153,154,155,156,157,47,48,49,50,51,52,158,159,53,54,160,55,56,57,161,58,59,60,61,62,63,64,65,162,163,164,165,166,66,67,68,69,70,71,72,73,74,75,76,167,168,169,170,118,119,121,171,172,173,174,122,175,176,77,78,79,80,81,82,83,84,85,177,178,179,180,181,182,183,184,185,186,187,188,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,13,102,189,103,190,191,192,20,193,194,195,196,197,124,125,126,127,128,129,130,131,133,198,199,200,201,202,203,204,205,134,135,206,207,136,137,109,208,209,210,211,212,213,214,215,216],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[217],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:34","failures":[114,115,141,2,116,117,142,3,4,110,218,111,219,220,5,6,7,34,8,35,163,9,10,11,12,221,112,222,223,224,225,226,227,113,228,229,101,13,102,210,14,15,16],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:218","failures":[230,231,71,74,75],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[195,232],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:40","sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[22,139,140,233,234,235,141,142,3,4,236,27,237,238,239,31,143,240,241,144,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,6,262,150,33,263,264,265,266,267,268,269,270,271,7,34,272,8,35,273,274,36,37,38,39,40,41,42,43,44,45,46,151,275,152,153,154,155,156,157,276,277,278,279,280,281,282,283,284,285,286,47,48,49,50,51,52,158,159,53,54,160,55,56,57,161,58,59,60,61,62,63,64,65,162,163,10,164,165,11,12,166,287,66,67,288,68,69,289,70,290,291,292,293,294,71,295,72,296,297,73,74,75,76,167,168,298,169,170,118,119,120,121,171,299,300,172,173,174,122,175,176,301,302,77,78,79,80,81,82,83,84,85,177,178,179,180,181,182,183,184,185,186,187,188,303,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,304,305,101,306,13,102,307,189,103,190,191,192,20,193,21,308,194,309,310,311,312,313,314,195,232,196,197,124,125,126,127,128,129,130,131,133,198,199,200,201,202,203,204,205,134,135,206,315,207,136,137,109,208,209,210,14,211,316,212,213,214,15,16,215,216],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[167,317,318,103,319,320,321,322,323],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1135","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[324,167,168,298],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[194],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:110","sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","type":"CtReturnImpl"},"failures":[2,3,4,325,326,6,7,8,35,9,10,11,12,327,13,102,14,15,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[328,329,104,330,331,17,332,333,334,335,336,337,22,139,140,233,114,234,235,141,2,117,142,3,4,338,339,340,23,24,25,26,341,27,31,143,144,342,343,344,345,346,347,348,349,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,6,350,351,352,353,262,354,150,355,356,357,358,359,360,33,361,362,363,270,7,34,272,8,35,273,274,36,37,38,39,40,41,42,43,44,45,46,151,152,153,154,155,156,157,47,48,49,50,51,52,158,159,53,54,160,55,56,57,161,58,59,60,61,62,63,64,65,364,365,366,367,162,163,9,10,164,165,11,12,166,230,230,231,231,67,288,69,368,71,295,72,296,297,73,74,75,76,369,370,371,372,167,168,169,170,118,121,171,174,122,123,175,77,78,79,80,81,82,83,84,85,177,178,179,180,181,182,183,184,185,186,187,188,303,373,87,374,88,89,375,90,327,91,92,93,94,95,96,376,97,377,98,99,100,304,101,306,13,102,307,378,379,189,380,103,190,191,192,20,193,194,313,195,232,196,197,124,125,126,127,128,129,130,131,133,198,199,200,201,202,203,204,205,134,135,206,207,136,137,109,208,209,210,14,211,212,213,214,15,16,215,216],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:34","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>.getName(), java.lang.Byte.java.lang.Class<java.lang.Byte>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:89","failures":[381,87,98,99],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[382,383,81,85,384,385,386,317,387,388,319],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Not:42","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[222],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[389,0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[110,111,7,9,112,113],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:839","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[207],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MocksControl:131","failures":[390],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":125,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":162,"org.easymock.tests2.UsageTest.argumentsOrdered":16,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":187,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":316,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":293,"org.easymock.tests2.DelegateToTest.testReturnException":295,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":351,"org.easymock.tests.MockingTest.testPartialClassMocking":63,"org.easymock.tests.MockClassControlTest.testToString":344,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":32,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":107,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":74,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":242,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":320,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":131,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":31,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":366,"org.easymock.samples.ExampleTest.answerVsDelegate":288,"org.easymock.tests2.UsageConstraintsTest.testNull":127,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":94,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":186,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":349,"org.easymock.tests2.CaptureTest.testPrimitive":121,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":144,"org.easymock.tests.UsageTest.moreThanOneArgument":163,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":261,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":25,"org.easymock.tests.UsageTest.argumentsOrdered":12,"org.easymock.tests.UsageVarargTest.varargIntAccepted":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":105,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":228,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":42,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":373,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":374,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":46,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":224,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":170,"org.easymock.tests.ReplayStateInvalidUsageTest.times":334,"org.easymock.tests2.AnswerTest.answer":313,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":132,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":372,"org.easymock.tests2.CaptureTest.testAnd":118,"org.easymock.tests2.UsageTest.strictResetToDefault":209,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":386,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":377,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":24,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":38,"org.easymock.tests2.DelegateToTest.testDelegate":297,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":257,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":360,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":116,"org.easymock.tests2.CaptureTest.testCapture1_2446744":171,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":390,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":255,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":370,"org.easymock.tests.UsageThrowableTest.throwError":151,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":104,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":341,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":382,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":330,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":43,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":29,"org.easymock.tests2.UsageTest.niceToStrict":211,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":243,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":87,"org.easymock.tests2.MockBuilderTest.testCreateMock":375,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":112,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":251,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":182,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":263,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":364,"org.easymock.tests.UsageOverloadedMethodTest.overloading":139,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":201,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":235,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":22,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":55,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":200,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":217,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":174,"org.easymock.tests2.EasyMockSupportClassTest.testAll":73,"org.easymock.tests.MockClassControlTest.testEquals":348,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":237,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":226,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":259,"org.easymock.tests2.CaptureTest.testCaptureAll":119,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":358,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":371,"org.easymock.tests2.UsageConstraintsTest.testMatches":202,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":26,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":328,"org.easymock.samples.ExampleTest.voteForRemovals":70,"org.easymock.tests.UsageVarargTest.allKinds":286,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":142,"org.easymock.samples.BasicClassMockTest.testPrintContent":292,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":359,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":156,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":354,"org.easymock.tests2.UsageConstraintsTest.greaterThan":204,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":323,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":37,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":100,"org.easymock.samples.ExampleTest.voteForRemoval":68,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":191,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":376,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":208,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":236,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":318,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":179,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":350,"org.easymock.tests2.CaptureTest.testCaptureFirst":176,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":180,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":216,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":2,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests2.CaptureTest.testCapture2_2446744":175,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":20,"org.easymock.tests2.UsageTest.moreThanOneArgument":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":90,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":285,"org.easymock.tests.GenericTest.testBridgedEquals":0,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":268,"org.easymock.tests.UsageExpectAndReturnTest.longType":50,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":177,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":356,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":260,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":1,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":315,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":258,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":23,"org.easymock.tests.UsageCallCountTest.tooManyCalls":269,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":218,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":53,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":247,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":155,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":80,"org.easymock.tests2.UsageConstraintsTest.testContains":199,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":362,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":381,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":189,"org.easymock.tests2.UsageConstraintsTest.testFind":126,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":140,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":270,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":302,"org.easymock.tests.UsageExpectAndReturnTest.object":160,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":185,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":280,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":321,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":340,"org.easymock.tests.UsageTest.exactCallCountByLastCall":166,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":150,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":18,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":238,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":220,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":319,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":59,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":276,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":234,"org.easymock.tests.MockClassControlTest.testHashCode":347,"org.easymock.tests2.EasyMockSupportTest.testVerify":303,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":223,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":239,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":233,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":369,"org.easymock.tests.UsageVarargTest.varargCharAccepted":279,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":305,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":149,"org.easymock.tests2.UsageTest.openCallCountByLastCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":188,"org.easymock.tests.DefaultClassInstantiatorTest.object":361,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":338,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":249,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":153,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":98,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":346,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":248,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":76,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":225,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":345,"org.easymock.tests2.UsageTest.resumeIfFailure":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":353,"org.easymock.tests2.StubTest.stubWithReturnValue":194,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":317,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":54,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":207,"org.easymock.tests2.SerializationTest.testAllMockedMethod":298,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":113,"org.easymock.samples.SupportTest.voteForRemovals":66,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":389,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":254,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":324,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":106,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":19,"org.easymock.tests.UsageExpectAndThrowTest.object":252,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":135,"org.easymock.tests2.DelegateToTest.testWrongClass":296,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":40,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":41,"org.easymock.tests.UsageStrictMockTest.range":8,"org.easymock.samples.ConstructorCalledMockTest.testTax":230,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":184,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":79,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":253,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":88,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":11,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":365,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":110,"org.easymock.tests2.CaptureTest.testCaptureNone":173,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":30,"org.easymock.tests.UsageUnorderedTest.message":6,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":325,"org.easymock.tests.UsageVerifyTest.twoReturns":4,"org.easymock.tests.UsageVarargTest.varargByteAccepted":284,"org.easymock.tests2.ThreadingTest.testThreadSafe":190,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":267,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":291,"org.easymock.tests2.CaptureTest.testCapture_2617107":120,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":147,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":241,"org.easymock.tests2.UsageConstraintsTest.any":133,"org.easymock.tests2.StubTest.stub":308,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":148,"org.easymock.tests.UsageExpectAndThrowTest.longType":245,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":352,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":332,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":306,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":169,"org.easymock.tests2.SerializationTest.testClass":167,"org.easymock.tests.LimitationsTest.mockNativeMethod":33,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":28,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":62,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":307,"org.easymock.tests2.NameTest.nameForMocksControl":312,"org.easymock.tests2.MockedExceptionTest.testMockedException":379,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":165,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":65,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":246,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":91,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":89,"org.easymock.tests.MockingTest.testNicePartialClassMocking":64,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":96,"org.easymock.tests2.CaptureTest.testCaptureLast":172,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":117,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":130,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":85,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":206,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":384,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":47,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":250,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":137,"org.easymock.samples.ExampleTest.removeNonExistingDocument":368,"org.easymock.tests.UsageStrictMockTest.differentMethods":35,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":331,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":192,"org.easymock.tests2.ConstraintsToStringTest.andToString":227,"org.easymock.tests2.MockBuilderTest.testCreateMockString":327,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":342,"org.easymock.tests.UsageExpectAndThrowTest.floatType":244,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":203,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":314,"org.easymock.tests.UsageVerifyTest.twoThrows":3,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":114,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":75,"org.easymock.samples.ExampleTest.voteAgainstRemoval":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":146,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":99,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":383,"org.easymock.tests2.UsageConstraintsTest.testNotNull":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":157,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":378,"org.easymock.tests2.UsageTest.defaultResetToNice":214,"org.easymock.samples.ExampleTest.voteAgainstRemovals":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":58,"org.easymock.tests.UsageVarargTest.differentLength":281,"org.easymock.tests2.CallbackTest.callback":21,"org.easymock.tests.UsageTest.openCallCountByLastCall":164,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":196,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":240,"org.easymock.tests.UsageCallCountTest.tooFewCalls":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":82,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":367,"org.easymock.tests.UsageThrowableTest.throwCheckedException":154,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":84,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":355,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":81,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":335,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":83,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":232,"org.easymock.tests.ObjectMethodsTest.testHashCode":339,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":193,"org.easymock.tests2.NameTest.nameForNiceMock":311,"org.easymock.tests2.DependencyTest.testInterfaceMocking":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":322,"org.easymock.samples.ExampleTest.addDocument":289,"org.easymock.tests2.DelegateToTest.testStubDelegate":72,"org.easymock.tests2.AnswerTest.stubAnswer":195,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":34,"org.easymock.tests.UsageVarargTest.varargLongAccepted":283,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":273,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":145,"org.easymock.tests.UsageExpectAndReturnTest.floatType":49,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":61,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":103,"org.easymock.tests2.ConstraintsToStringTest.orToString":221,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":231,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":115,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":205,"org.easymock.tests.UsageThrowableTest.noUpperLimit":275,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":197,"org.easymock.tests2.SerializationTest.test":168,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":299,"org.easymock.tests2.UsageConstraintsTest.testSame":128,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":48,"org.easymock.samples.SupportTest.addDocument":287,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":17,"org.easymock.tests.GenericTest.testPackageScope":27,"org.easymock.tests2.NameTest.nameForMock":309,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":56,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":388,"org.easymock.tests2.UsageStrictMockTest.differentMethods":102,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":256,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":39,"org.easymock.tests2.MockedExceptionTest.testRealException":380,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":138,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":219,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":143,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":337,"org.easymock.tests2.NameTest.nameForStrictMock":310,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":301,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":95,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":134,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":86,"org.easymock.tests2.UsageStrictMockTest.range":13,"org.easymock.tests2.UsageConstraintsTest.lessThan":109,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":178,"org.easymock.tests2.CaptureTest.testCaptureRightOne":122,"org.easymock.tests2.UsageConstraintsTest.testOr":129,"org.easymock.tests.UsageRangeTest.combination":36,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":92,"org.easymock.tests.UsageTest.wrongArguments":10,"org.easymock.tests2.MockBuilderTest.testWithConstructor":385,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":343,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":57,"org.easymock.tests.UsageVarargTest.varargShortAccepted":282,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":363,"org.easymock.tests2.UsageConstraintsTest.cmpTo":198,"org.easymock.tests2.CompareToTest.testLessThan":108,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":213,"org.easymock.tests2.CaptureTest.testCaptureFromStub":123,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":329,"org.easymock.tests.UsageTest.unexpectedCallWithArray":9,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":266,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":161,"org.easymock.tests2.UsageConstraintsTest.constraints":124,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":272,"org.easymock.samples.ExampleTest.addAndChangeDocument":290,"org.easymock.tests2.ConstraintsToStringTest.notToString":222,"org.easymock.tests.UsageStrictMockTest.testVerify":274,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":294,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":271,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":357,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":300,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":44,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":141,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":183,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":277}}]

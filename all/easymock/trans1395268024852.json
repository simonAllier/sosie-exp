[{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0,1,2],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[3,4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:49","sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","type":"CtInvocationImpl"},"failures":[17,18,19,20,21],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[22,23,24,25,21],"status":-1,"binaryOperator":"int <= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMockSupport:530","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createNiceControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","type":"CtLocalVariableImpl"},"failures":[38,64,65,66,67,68],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[69,70,71,72,73,66,67],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:116","sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[74,75],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (this.org.easymock.Capture<T>.hasCaptured()) {\n    this.org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[5,76,6,7,8,9,10,11,12,14,15,77,16,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"capture"}},{"transplant":{"position":"org.easymock.internal.Injector:208","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"failures":[79],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"failures":[80,37,81,42],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1360","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[82],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[22,24,25,21],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[83,74,75,84],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[26,27,28,29,85,86,87,30,88,89,31,90,32,91,92,93,94,22,95,23,96,97,98,99,100,101,102,103,104,105,0,106,107,108,24,109,82,110,111,25,112,113,114,33,115,116,35,36,37,38,117,118,119,120,39,121,122,123,124,125,40,126,127,128,129,130,131,132,133,134,135,136,137,138,139,5,76,6,7,8,9,10,11,140,12,14,15,77,16,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,64,65,159,43,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,74,75,45,175,176,177,178,47,48,179,180,49,50,181,182,66,66,67,67,183,68,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,1,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,2,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:232","sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[108,123,165,263],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:122","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[334],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"failures":[96,101,82],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[335],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[23,96,98,100,101,336,82,112,5,6,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:124","failures":[85,86,87,30,88,89,31,90,32,91,92,93,94,22,95,23,96,97,98,99,100,101,102,103,104,105,0,106,107,108,24,109,82,110,111,337,25,112,113,114,33,80,115,116,35,36,338,37,38,117,118,119,120,39,121,122,123,124,339,125,40,81,126,41,127,128,129,130,131,132,133,134,135,136,137,138,139,5,76,6,7,8,9,10,11,140,12,14,15,77,16,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,64,65,159,43,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,74,75,45,175,176,177,178,47,48,179,180,49,50,181,182,66,67,183,68,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,78,78,340,207,208,209,210,211,212,213,341,214,215,216,217,1,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,254,255,256,257,342,343,344,258,259,266,267,268,269,270,271,272,273,274,2,275,276,277,278,279,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,322,323,324,325,326,327,328,329,330,331,332,345,346,347,348],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.internal.Invocation> == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:800","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[25],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1471","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[349,350,351,352,162,163,169,170,353,354,355,2,283,284,285,288,289],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[356,33,80,34,115,35,36,37,357,38,117,39,339,81,126,41,358,359,360,361,362,150,158,64,65,159,66,66,67,67,68,218,363,266,281,330,331,332],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:137","sourceCode":"java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"position":"org.easymock.internal.ClassProxyFactory:230","failures":[],"status":0,"binaryOperator":"(((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:72","sourceCode":"return org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, java.lang.String, ((java.lang.Class<?>[])(null)))","type":"CtReturnImpl"},"failures":[33,3,80,34,115,116,35,36,338,37,4,38,117,339,360,68,363,57,60],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:208","sourceCode":"final java.lang.SecurityException java.lang.SecurityException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:282","sourceCode":"final net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(java.lang.Object))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[26,27,28,29,22,95,23,96,97,98,99,100,101,102,103,104,105,0,106,107,108,24,109,82,110,111,25,112,113,114,33,115,116,117,118,119,120,121,122,123,124,125,40,126,127,128,129,130,131,132,135,136,137,139,5,76,6,7,9,10,11,140,12,14,16,142,144,145,146,147,148,149,150,152,153,156,157,161,162,164,165,168,171,173,174,74,75,175,176,177,47,48,49,50,187,188,189,190,191,192,193,195,196,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,1,218,219,220,221,222,223,224,226,227,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,266,268,269,270,271,272,274,275,278,279,280,281,283,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,322,323,324,325,326,327,328,329,330,331,332,333],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[364,365,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[78],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[23,96,98,100,101,336,82,112,5,6,14],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:59","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1263","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1542","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(long))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[349,351,144,353,354,226,2,275,284,285,286,287,288,289,290],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[367,368,369,370,371,372],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[101],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[106,20],"status":-1,"binaryOperator":"int >= 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1803","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[373],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[173],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":96,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":282,"org.easymock.tests2.UsageTest.argumentsOrdered":170,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":294,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":46,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":165,"org.easymock.tests2.StubTest.stubWithReturnValue":145,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":367,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":310,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":25,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":183,"org.easymock.tests2.SerializationTest.testAllMockedMethod":119,"org.easymock.tests2.DelegateToTest.testReturnException":136,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":292,"org.easymock.tests.MockingTest.testPartialClassMocking":330,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":351,"org.easymock.samples.SupportTest.voteForRemovals":186,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":373,"org.easymock.tests.MockClassControlTest.testToString":54,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":243,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":42,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":231,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":64,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":83,"org.easymock.tests.UsageExpectAndThrowTest.object":241,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":110,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":143,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":368,"org.easymock.tests2.DelegateToTest.testWrongClass":138,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":102,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":226,"org.easymock.tests2.UsageTest.wrongArguments":163,"org.easymock.tests.UsageStrictMockTest.range":277,"org.easymock.samples.ConstructorCalledMockTest.testTax":66,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":299,"org.easymock.samples.ExampleTest.answerVsDelegate":188,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":90,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":60,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":178,"org.easymock.tests2.UsageConstraintsTest.testNull":98,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":242,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":122,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":91,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":35,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":358,"org.easymock.tests2.CaptureTest.testPrimitive":7,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":230,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":288,"org.easymock.tests.UsageTest.moreThanOneArgument":283,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":250,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":298,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":121,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":353,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":327,"org.easymock.tests2.CaptureTest.testCaptureNone":140,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":364,"org.easymock.tests.UsageUnorderedTest.message":267,"org.easymock.tests.UsageVerifyTest.twoReturns":324,"org.easymock.tests.UsageVarargTest.varargByteAccepted":216,"org.easymock.tests2.ThreadingTest.testThreadSafe":131,"org.easymock.tests.UsageTest.argumentsOrdered":289,"org.easymock.tests.UsageVarargTest.varargIntAccepted":211,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":257,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":52,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":181,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":202,"org.easymock.tests2.CaptureTest.testCapture_2617107":6,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":352,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":33,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":229,"org.easymock.tests2.UsageConstraintsTest.any":103,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":116,"org.easymock.tests2.StubTest.stub":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":206,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":293,"org.easymock.tests.UsageExpectAndThrowTest.longType":234,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":263,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":154,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":45,"org.easymock.tests2.SerializationTest.testClass":117,"org.easymock.tests.LimitationsTest.mockNativeMethod":266,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":43,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":363,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":320,"org.easymock.tests2.AnswerTest.answer":173,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":336,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":130,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":361,"org.easymock.tests2.CaptureTest.testAnd":5,"org.easymock.tests2.UsageTest.strictResetToDefault":161,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":40,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":157,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":334,"org.easymock.tests2.NameTest.nameForMocksControl":29,"org.easymock.tests2.MockedExceptionTest.testMockedException":147,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":326,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":222,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":88,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":287,"org.easymock.tests2.DelegateToTest.testDelegate":139,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":332,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":235,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":120,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":36,"org.easymock.tests.MockingTest.testNicePartialClassMocking":331,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":246,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":124,"org.easymock.tests2.CompareToTest.testCompareEqual":19,"org.easymock.tests2.CaptureTest.testCaptureLast":11,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":295,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":321,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":50,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":101,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":272,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":111,"org.easymock.tests2.CaptureTest.testCapture1_2446744":8,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":301,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":244,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":239,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":128,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":169,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":113,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":366,"org.easymock.tests.UsageThrowableTest.throwError":194,"org.easymock.tests.UsageStrictMockTest.differentMethods":278,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":262,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":59,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":365,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":133,"org.easymock.tests2.MockBuilderTest.testCreateMockString":38,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":329,"org.easymock.tests.UsageExpectAndThrowTest.floatType":233,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":108,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":174,"org.easymock.tests.UsageVerifyTest.twoThrows":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":65,"org.easymock.samples.PartialClassMockTest.testGetArea":68,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":261,"org.easymock.tests2.CompareToTest.testLessOrEqual":21,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":203,"org.easymock.samples.ExampleTest.voteAgainstRemoval":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":126,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":232,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":53,"org.easymock.tests2.UsageTest.niceToStrict":164,"org.easymock.tests2.UsageConstraintsTest.testNotNull":112,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":201,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":146,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":115,"org.easymock.tests2.MockBuilderTest.testCreateMock":338,"org.easymock.tests2.UsageTest.defaultResetToNice":168,"org.easymock.samples.ExampleTest.voteAgainstRemovals":187,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":316,"org.easymock.tests.UsageVarargTest.differentLength":341,"org.easymock.tests2.CallbackTest.callback":177,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":73,"org.easymock.tests.UsageTest.openCallCountByLastCall":286,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":349,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":240,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":89,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":22,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":252,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":228,"org.easymock.tests.UsageCallCountTest.tooFewCalls":255,"org.easymock.tests.UsageOverloadedMethodTest.overloading":207,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":347,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":106,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":340,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":312,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":179,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":12,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":300,"org.easymock.tests.UsageThrowableTest.throwCheckedException":198,"org.easymock.tests2.EasyMockSupportClassTest.testAll":158,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":219,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":354,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":248,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":359,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":270,"org.easymock.tests2.CaptureTest.testCaptureAll":76,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":129,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":225,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":49,"org.easymock.tests.MockNameTest.defaultName":63,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":48,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":44,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":264,"org.easymock.tests2.UsageConstraintsTest.testMatches":107,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":180,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":75,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":328,"org.easymock.tests2.CompareToTest.testGreateOrEqual":20,"org.easymock.samples.ExampleTest.voteForRemovals":192,"org.easymock.tests2.NameTest.nameForNiceMock":28,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":135,"org.easymock.tests.UsageVarargTest.allKinds":1,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":322,"org.easymock.tests2.DependencyTest.testInterfaceMocking":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":370,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":271,"org.easymock.samples.BasicClassMockTest.testPrintContent":182,"org.easymock.samples.ExampleTest.addDocument":191,"org.easymock.tests2.DelegateToTest.testStubDelegate":137,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":200,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":151,"org.easymock.tests2.AnswerTest.stubAnswer":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":296,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":275,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":371,"org.easymock.tests2.UsageConstraintsTest.greaterThan":24,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":221,"org.easymock.tests.UsageVarargTest.varargLongAccepted":215,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":41,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.samples.ExampleTest.voteForRemoval":189,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":132,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":319,"org.easymock.tests.UsageExpectAndReturnTest.floatType":303,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":357,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":61,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":339,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":150,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":67,"org.easymock.tests.UsageThrowableTest.noUpperLimit":195,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":109,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":95,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":160,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":9,"org.easymock.tests2.SerializationTest.test":118,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":87,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":302,"org.easymock.tests2.UsageConstraintsTest.testSame":99,"org.easymock.samples.SupportTest.addDocument":185,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":291,"org.easymock.tests2.CaptureTest.testCaptureFirst":16,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":84,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":30,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":172,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":348,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":308,"org.easymock.tests.GenericTest.testPackageScope":218,"org.easymock.tests2.CaptureTest.testCapture2_2446744":77,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":134,"org.easymock.tests2.UsageTest.moreThanOneArgument":162,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":79,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":37,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":217,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":343,"org.easymock.tests2.NameTest.nameForMock":26,"org.easymock.tests.UsageExpectAndReturnTest.longType":304,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":268,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":85,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":313,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":249,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":4,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":337,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":247,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":72,"org.easymock.tests2.UsageStrictMockTest.differentMethods":156,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":325,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":305,"org.easymock.tests.UsageCallCountTest.tooManyCalls":344,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":245,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":223,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":254,"org.easymock.tests2.MockedExceptionTest.testRealException":149,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":309,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":62,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":236,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":153,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":265,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":227,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":199,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":47,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":253,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":3,"org.easymock.tests2.NameTest.nameForStrictMock":27,"org.easymock.tests2.UsageConstraintsTest.testContains":105,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":148,"org.easymock.tests2.UsageConstraintsTest.testFind":97,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":208,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":175,"org.easymock.tests.MockTypeTest.fromEasyMockClass":58,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":123,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":273,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":176,"org.easymock.tests.UsageExpectAndReturnTest.object":311,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":82,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":125,"org.easymock.tests.ErrorMessageTest.testGetters":335,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":80,"org.easymock.tests2.UsageStrictMockTest.range":155,"org.easymock.tests2.UsageConstraintsTest.lessThan":114,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":32,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":369,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":213,"org.easymock.tests.UsageTest.exactCallCountByLastCall":290,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":356,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":224,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":86,"org.easymock.tests2.CaptureTest.testCaptureRightOne":14,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":355,"org.easymock.tests2.UsageConstraintsTest.testOr":100,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":372,"org.easymock.tests.UsageRangeTest.combination":220,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":317,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":209,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":39,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":346,"org.easymock.tests.UsageTest.wrongArguments":285,"org.easymock.tests2.MockBuilderTest.testWithConstructor":69,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":251,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":306,"org.easymock.tests2.EasyMockSupportTest.testVerify":94,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":314,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":345,"org.easymock.tests.UsageVarargTest.varargShortAccepted":214,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":342,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":127,"org.easymock.tests2.UsageConstraintsTest.cmpTo":104,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":141,"org.easymock.tests.UsageVarargTest.varargCharAccepted":212,"org.easymock.tests2.CompareToTest.testLessThan":17,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":152,"org.easymock.tests2.UsageTest.openCallCountByLastCall":166,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":167,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":93,"org.easymock.tests2.CaptureTest.testCaptureFromStub":15,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":260,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":34,"org.easymock.tests.UsageTest.unexpectedCallWithArray":284,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":238,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":362,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":197,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":2,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":256,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":70,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":315,"org.easymock.tests2.CaptureTest.testCapture":13,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":276,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":81,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":56,"org.easymock.tests2.UsageConstraintsTest.constraints":23,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":237,"org.easymock.samples.ExampleTest.addAndChangeDocument":193,"org.easymock.tests.CapturesMatcherTest.test":78,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":318,"org.easymock.tests.UsageStrictMockTest.testVerify":280,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":184,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":274,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":159,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":269,"org.easymock.tests2.CompareToTest.testGreateThan":18,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":10,"org.easymock.tests2.UsageTest.resumeIfFailure":171,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":360,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":204,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":307,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":57,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":333,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":205,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":210,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":31}}]

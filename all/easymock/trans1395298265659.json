[{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[2,3,4,5],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[6,7,8,9,10,2,4,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,47,48,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:230","sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[62],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:253","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:92","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[8,9,2,22,25,26,29,30,32,34,35,37,38,39,49,53,59,60],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cls":"clazz"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[1,64],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,6,101,102,103,2,3,4,104,105,11,12,13,14,106,15,16,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,0,154,155,156,157,158,159,160,161,162,163,17,18,164,19,20,21,22,23,24,25,26,27,28,30,32,33,34,35,36,37,39,165,166,167,40,168,41,42,43,44,169,45,46,170,171,172,173,174,175,176,47,48,177,178,179,49,180,181,182,183,184,185,50,51,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,54,56,57,58,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,61,306,307,308,309,310,311],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[29,38],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[104,312,63,313,204],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[6,314,47,48],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"position":"org.easymock.internal.RecordState:126","failures":[134,136,137,171,303],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[6,315,2,314,316,13,16,317,318,319,320,321,322,323,324,325,326,41,327,328,42,329,330,331,332,333,334,335,336,337,43,338,339,340,341,342,44,343,344,47,48],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[345,346,347],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:34","sourceCode":"return org.easymock.internal.AndroidSupport.boolean","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[75,79,80,84,86,88,89,92,93,94,101,117,125,126,131,141,146,147,148,151,156,157,158,160,18,26,37,180,186,191,192,227,228,230,231,232,233,234,278,282,285,294],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Contains:40","sourceCode":"java.lang.StringBuffer.append(((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[348],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[107,109,117,140,141,143,145,146,349,156,161],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[350,351,188,352,353,289],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:92","failures":[107,109,117,140,141,145,146,349,156],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:94","failures":[107,108,109,110,117,118,140,141,142,143,144,145,146,147,349,148,156,157,161,162],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,63,369,370,371,372,373,374],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","failures":[375],"status":-1,"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[151],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:49","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:318","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n    final java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getTypeParameters();\n    for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n        if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n        } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n            final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n            java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n            if (java.lang.reflect.Type == null) {\n                java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n            } \n            if (java.lang.reflect.Type != null) {\n                java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n            } \n        } \n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:305","failures":[376,377,378],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:193","sourceCode":"if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[315,379,380,381,382,383,320],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[384,350,385,386,387,388,77,79,80,123,180,189,191,192,353,389,390,281,282,283,288,377,378,391,392,393,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[141],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[170,172,173,175,178,264],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[75,79,80,84,88,89,92,101,125,37,186,191,192,278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":141,"org.easymock.tests2.UsageTest.argumentsOrdered":131,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":287,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":93,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":364,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":126,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":179,"org.easymock.tests2.DelegateToTest.testReturnException":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":307,"org.easymock.tests.MockingTest.testPartialClassMocking":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":371,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":332,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":42,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":207,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":70,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":379,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":147,"org.easymock.tests2.UsageTest.wrongArguments":124,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":201,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":298,"org.easymock.samples.ExampleTest.answerVsDelegate":171,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":60,"org.easymock.tests2.UsageConstraintsTest.testNull":143,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":19,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":92,"org.easymock.tests2.CaptureTest.testPrimitive":110,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":226,"org.easymock.tests.UsageTest.moreThanOneArgument":288,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":164,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":183,"org.easymock.tests.UsageTest.argumentsOrdered":294,"org.easymock.tests.UsageVarargTest.varargIntAccepted":269,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":62,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":63,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":262,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":383,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":266,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":82,"org.easymock.tests2.AnswerTest.answer":71,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":369,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":68,"org.easymock.tests2.CaptureTest.testAnd":107,"org.easymock.tests2.UsageTest.strictResetToDefault":122,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":24,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":319,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":182,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":87,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":279,"org.easymock.tests2.DelegateToTest.testDelegate":137,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":222,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":310,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":261,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":377,"org.easymock.tests2.CaptureTest.testCapture1_2446744":111,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":220,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":66,"org.easymock.tests.UsageThrowableTest.throwError":227,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":312,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":185,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":344,"org.easymock.samples.PartialClassMockTest.testGetArea":49,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":263,"org.easymock.tests2.UsageTest.niceToStrict":125,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":333,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":347,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":354,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":32,"org.easymock.tests2.MockBuilderTest.testCreateMock":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":340,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":216,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":350,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":88,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":296,"org.easymock.tests.UsageOverloadedMethodTest.overloading":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":342,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":152,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":246,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":284,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":151,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":116,"org.easymock.tests2.EasyMockSupportClassTest.testAll":41,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":224,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":7,"org.easymock.tests2.CaptureTest.testCaptureAll":108,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":67,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":259,"org.easymock.tests2.UsageConstraintsTest.testMatches":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":184,"org.easymock.samples.ExampleTest.voteForRemovals":175,"org.easymock.tests.UsageVarargTest.allKinds":277,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":281,"org.easymock.samples.BasicClassMockTest.testPrintContent":46,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":260,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":233,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":311,"org.easymock.tests2.UsageConstraintsTest.greaterThan":154,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":327,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":27,"org.easymock.samples.ExampleTest.voteForRemoval":172,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":97,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":22,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":121,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":61,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":361,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":85,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":325,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":306,"org.easymock.tests2.CaptureTest.testCaptureFirst":120,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":360,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":86,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":133,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":242,"org.easymock.tests2.UsageTest.moreThanOneArgument":123,"org.easymock.tests2.CaptureTest.testCapture2_2446744":119,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":99,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":370,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":276,"org.easymock.tests.GenericTest.testBridgedEquals":64,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":199,"org.easymock.tests.UsageExpectAndReturnTest.longType":238,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":257,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":38,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":225,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":159,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":223,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":181,"org.easymock.tests.UsageCallCountTest.tooManyCalls":200,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":341,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":212,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":232,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":12,"org.easymock.tests2.UsageConstraintsTest.testContains":150,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":29,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":40,"org.easymock.tests2.UsageConstraintsTest.testFind":142,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":286,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":186,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":103,"org.easymock.tests.UsageExpectAndReturnTest.object":245,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":23,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":375,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":91,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":271,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":380,"org.easymock.tests.UsageTest.exactCallCountByLastCall":295,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":315,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":251,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":267,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":303,"org.easymock.tests2.EasyMockSupportTest.testVerify":95,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":335,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":65,"org.easymock.tests.UsageVarargTest.varargCharAccepted":270,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":374,"org.easymock.tests2.UsageTest.openCallCountByLastCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":94,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":345,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":390,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":336,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":10,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":230,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":25,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":213,"org.easymock.tests.CapturesMatcherTest.test":206,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":252,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":44,"org.easymock.tests2.UsageTest.resumeIfFailure":132,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":59,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":309,"org.easymock.tests2.StubTest.stubWithReturnValue":105,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":320,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":160,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":244,"org.easymock.tests2.SerializationTest.testAllMockedMethod":4,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":376,"org.easymock.samples.SupportTest.voteForRemovals":178,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":351,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":1,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":219,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":5,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":313,"org.easymock.tests.UsageExpectAndThrowTest.object":217,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":157,"org.easymock.tests2.DelegateToTest.testWrongClass":136,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":300,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":301,"org.easymock.tests.UsageStrictMockTest.range":191,"org.easymock.samples.ConstructorCalledMockTest.testTax":47,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":90,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":11,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":34,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":324,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":297,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":352,"org.easymock.tests2.CaptureTest.testCaptureNone":115,"org.easymock.tests.UsageUnorderedTest.message":180,"org.easymock.tests.UsageVerifyTest.twoReturns":283,"org.easymock.tests.UsageVarargTest.varargByteAccepted":275,"org.easymock.tests2.ThreadingTest.testThreadSafe":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":338,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":197,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":45,"org.easymock.tests2.CaptureTest.testCapture_2617107":109,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":372,"org.easymock.tests2.UsageConstraintsTest.any":148,"org.easymock.tests2.StubTest.stub":104,"org.easymock.tests.UsageExpectAndThrowTest.longType":210,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":373,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":78,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":165,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests.LimitationsTest.mockNativeMethod":54,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":52,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":254,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":9,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":81,"org.easymock.tests2.MockedExceptionTest.testMockedException":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":328,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":58,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":211,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":17,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":35,"org.easymock.tests.MockingTest.testNicePartialClassMocking":57,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":21,"org.easymock.tests2.CaptureTest.testCaptureLast":114,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":378,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":146,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":16,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":158,"org.easymock.tests.MockingTest.testTwoMocks":55,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":317,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":215,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":130,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":162,"org.easymock.tests.UsageStrictMockTest.differentMethods":192,"org.easymock.tests2.ConstraintsToStringTest.andToString":387,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":98,"org.easymock.tests2.MockBuilderTest.testCreateMockString":39,"org.easymock.tests.UsageExpectAndThrowTest.floatType":209,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":329,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":326,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":72,"org.easymock.tests.UsageVerifyTest.twoThrows":282,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":43,"org.easymock.samples.ExampleTest.voteAgainstRemoval":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":365,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":26,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":316,"org.easymock.tests2.UsageConstraintsTest.testNotNull":161,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":166,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":234,"org.easymock.tests2.UsageTest.defaultResetToNice":129,"org.easymock.samples.ExampleTest.voteAgainstRemovals":170,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":250,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":366,"org.easymock.tests.UsageVarargTest.differentLength":272,"org.easymock.tests2.CallbackTest.callback":101,"org.easymock.tests.UsageTest.openCallCountByLastCall":291,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":138,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":203,"org.easymock.tests.UsageCallCountTest.tooFewCalls":195,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":14,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":299,"org.easymock.tests.UsageThrowableTest.throwCheckedException":231,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":353,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":15,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":256,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":13,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":106,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":74,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":382,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":100,"org.easymock.tests2.DependencyTest.testInterfaceMocking":69,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":381,"org.easymock.samples.ExampleTest.addDocument":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":339,"org.easymock.tests2.DelegateToTest.testStubDelegate":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":343,"org.easymock.tests2.AnswerTest.stubAnswer":73,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":189,"org.easymock.tests.UsageVarargTest.varargLongAccepted":274,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":363,"org.easymock.tests.UsageExpectAndReturnTest.floatType":237,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":253,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":6,"org.easymock.tests2.ConstraintsToStringTest.orToString":384,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":48,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":392,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":155,"org.easymock.tests.UsageThrowableTest.noUpperLimit":228,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":139,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":112,"org.easymock.tests2.SerializationTest.test":3,"org.easymock.tests2.UsageConstraintsTest.testSame":144,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":236,"org.easymock.samples.SupportTest.addDocument":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":330,"org.easymock.tests.GenericTest.testPackageScope":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":358,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":247,"org.easymock.tests2.UsageStrictMockTest.differentMethods":80,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":323,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":239,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":221,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":280,"org.easymock.tests2.MockedExceptionTest.testRealException":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":368,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":389,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":77,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":367,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":202,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":102,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":346,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":20,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":156,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":30,"org.easymock.tests2.UsageStrictMockTest.range":79,"org.easymock.tests2.UsageConstraintsTest.lessThan":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":84,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":362,"org.easymock.tests2.CaptureTest.testCaptureRightOne":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":334,"org.easymock.tests2.UsageConstraintsTest.testOr":145,"org.easymock.tests.UsageRangeTest.combination":278,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":18,"org.easymock.tests.UsageTest.wrongArguments":290,"org.easymock.tests2.MockBuilderTest.testWithConstructor":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":331,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":53,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":240,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":355,"org.easymock.tests.UsageVarargTest.varargShortAccepted":273,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":198,"org.easymock.tests2.UsageConstraintsTest.cmpTo":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":357,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":128,"org.easymock.tests2.CaptureTest.testCaptureFromStub":118,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":31,"org.easymock.tests.UsageTest.unexpectedCallWithArray":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":188,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":196,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":322,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":249,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":190,"org.easymock.tests2.UsageConstraintsTest.constraints":140,"org.easymock.samples.ExampleTest.addAndChangeDocument":176,"org.easymock.tests2.ConstraintsToStringTest.notToString":385,"org.easymock.tests2.ConstraintsToStringTest.containsToString":348,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":169,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":187,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":258,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":113,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":8,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":264,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":241,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":393,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":265,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":89,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":268}}]

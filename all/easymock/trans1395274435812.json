[{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[0],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:665","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:72","sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>()","type":"CtAssignmentImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[30,31,32,33,34,35,36,37,11,38,39,40,41,42,43,44,45,20,46,47,48,49,50,51,52,53,54,21,55,56,57,58,59,22,60,61,62,63,64,65,66],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[11,12,67,68],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"failures":[69,70],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Invocation:195","failures":[71,72,73,74,75,76,77,1,3,7,9,10,78,79,17,18,41,42,44,46,49,50,55,57,58,80,81,82,83,84,23,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,63,105,27,106,107],"status":-1,"binaryOperator":"(((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[71,72,73,74,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,1,4,5,11,12,67,134,135,136,137,138,14,79,16,19,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,0,158,159,160,161,162,163,164,38,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,104,62,182,63,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,26,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,29,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:156","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[159],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"verified":"lastInvocationUsed"}},{"position":"org.easymock.internal.MockBuilder:80","failures":[1,302,2,3,4,5,6,7,8,9,303,304,10,11,13,24,25,27,28],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"transplant":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[305],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[306],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.internal.RecordState:217","failures":[71,72,73,74,307,308,309,75,310,311,76,312,77,313,314,315,316,108,109,110,111,112,113,114,115,116,117,317,118,119,120,121,122,123,124,125,126,127,128,129,318,130,131,132,133,1,2,4,5,6,7,8,9,10,11,12,67,134,78,135,136,137,138,13,14,79,15,16,17,19,139,140,141,142,143,305,319,144,320,145,146,321,322,147,148,149,150,151,323,152,153,154,155,156,157,324,325,0,326,158,327,159,160,161,162,163,164,38,328,165,166,329,330,167,168,43,20,21,22,23,331,169,170,332,171,172,333,334,173,335,336,174,337,175,338,339,176,177,178,96,179,180,181,103,104,62,340,341,182,63,342,343,65,65,66,66,344,24,345,346,347,183,184,185,186,187,188,348,189,349,190,191,350,351,352,353,354,192,193,194,195,196,355,356,357,197,198,199,200,201,202,203,358,204,205,206,207,208,209,210,25,26,211,212,213,214,359,215,216,360,361,217,362,363,364,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,365,238,366,367,368,369,370,371,239,240,241,242,243,244,372,373,374,29,245,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,246,392,393,394,395,396,397,398,399,400,247,248,249,250,251,401,252,402,253,403,404,254,255,256,257,405,258,406,407,408,409,410,411,412,413,414,415,259,260,261,262,263,264,265,266,267,268,416,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,417,418,290,291,292,293,294,295,296,297,419,298,299,300,420,421,422,423,424,301,425],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[127],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[34,35,426,427,11,428,429,430,431,432,433,434,38,39],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[330,332,335,336,435,400,402,404,406,407,410,411,291,292,425],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[436,437],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[110,111,115,116,317,127,148,150,157],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"cls":"type","type":"type"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[306,438],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:583","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"failures":[439,71,72,73,74,307,308,309,75,310,311,76,312,77,313,314,315,316,108,109,110,111,440,112,113,114,115,116,117,317,118,119,120,121,122,123,124,125,126,127,128,129,318,130,131,132,133,441,436,442,443,444,437,1,2,3,445,4,5,6,7,446,35,8,9,10,11,12,67,134,78,135,136,137,138,13,447,14,448,449,79,15,16,17,450,18,19,139,140,141,142,451,143,305,319,144,320,145,146,321,322,147,148,149,150,151,323,152,153,154,155,156,157,324,325,0,452,453,454,455,456,457,326,458,459,158,327,159,160,161,162,163,164,38,39,328,165,166,329,330,167,168,40,41,42,43,44,45,20,46,47,48,49,50,51,52,53,54,21,55,56,57,58,59,22,60,61,80,81,82,83,84,23,85,86,87,88,89,90,331,169,170,332,171,172,333,334,173,335,336,174,337,175,338,339,176,177,178,91,92,93,94,95,96,97,98,99,100,101,102,179,460,180,181,103,104,62,340,461,341,182,63,64,342,343,65,66,344,24,345,346,347,183,184,185,186,187,188,348,189,349,190,191,350,351,352,353,354,192,193,194,195,196,462,355,463,356,357,197,198,199,200,201,464,202,203,358,204,205,206,207,208,306,209,210,25,438,26,211,212,213,214,359,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,215,216,360,361,217,487,362,363,364,488,489,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,365,238,366,367,368,369,370,371,239,240,241,242,243,244,372,373,374,27,490,491,492,106,28,107,493,29,245,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,494,495,246,496,392,393,394,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,395,513,514,515,516,517,396,518,397,398,399,400,247,248,249,250,251,401,252,402,253,403,404,254,255,256,257,405,258,406,407,408,409,410,411,412,413,414,415,259,260,261,262,263,264,265,266,267,268,416,519,520,521,522,523,524,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,417,418,289,290,291,292,293,294,295,296,297,525,526,527,419,298,299,528,300,529,530,531,420,421,422,423,424,301,425],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[330,167,332,335,336,532,105,533,435,400,402,404,254,406,407,410,411,291,292],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[534,535,536,537,402,406],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[330,332,335,336,435,400,402,404,406,407,410,411,291,292],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:93","sourceCode":"if ((java.lang.Class<?>.getConstructors().int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:381","sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:84","sourceCode":"java.lang.Object[] = new java.lang.Object[0]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:93","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]))","type":"CtInvocationImpl"},"failures":[308,311,76,313,110,124,78,15,17,328,329,330,331,332,171,172,335,336,337,181,358,435,400,401,402,403,404,405,406,407,410,411,412,291,292,425],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arguments":"arguments"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[159,361,382,512,396],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:111","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":111,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":405,"org.easymock.tests2.UsageTest.argumentsOrdered":336,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":314,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":507,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":172,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":344,"org.easymock.tests2.DelegateToTest.testReturnException":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":260,"org.easymock.tests.MockingTest.testPartialClassMocking":298,"org.easymock.tests.MockClassControlTest.testToString":366,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":439,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":515,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":49,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":218,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":327,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":486,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":429,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":117,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":215,"org.easymock.tests2.UsageTest.wrongArguments":332,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":90,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":267,"org.easymock.samples.ExampleTest.answerVsDelegate":184,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":28,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":530,"org.easymock.tests2.UsageConstraintsTest.testNull":113,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":136,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":313,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":371,"org.easymock.tests2.CaptureTest.testPrimitive":151,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":217,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":237,"org.easymock.tests.UsageTest.moreThanOneArgument":258,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":135,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":295,"org.easymock.tests.UsageTest.argumentsOrdered":411,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":375,"org.easymock.tests.UsageVarargTest.varargIntAccepted":201,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":512,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":192,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":433,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":1,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":454,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":101,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":196,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":470,"org.easymock.tests.ReplayStateInvalidUsageTest.times":388,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":23,"org.easymock.tests2.DependencyTest.testClassMocking":458,"org.easymock.tests2.AnswerTest.answer":175,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":513,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":141,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":491,"org.easymock.tests2.CaptureTest.testAnd":148,"org.easymock.tests2.UsageTest.strictResetToDefault":169,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":79,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":294,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":310,"org.easymock.tests2.DelegateToTest.testDelegate":147,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":379,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":469,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":233,"org.easymock.tests.LimitationsTest.mockFinalMethod":496,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":263,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":251,"org.easymock.tests2.DependencyTest.testClassMockingSupport":459,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":417,"org.easymock.tests2.CaptureTest.testCapture1_2446744":323,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":447,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":231,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":139,"org.easymock.tests.UsageThrowableTest.throwError":349,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":382,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":106,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":105,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":297,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":61,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":473,"org.easymock.samples.PartialClassMockTest.testGetArea":24,"org.easymock.tests.MockingTest.testInterfaceMocking":528,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":383,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":193,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":393,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":489,"org.easymock.tests2.UsageTest.niceToStrict":171,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":50,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":219,"org.easymock.tests2.ThreadingTest.testChangeDefault":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":497,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":4,"org.easymock.tests2.MockBuilderTest.testCreateMock":8,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":57,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":87,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":534,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":227,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":311,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":490,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":399,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":239,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":265,"org.easymock.tests.UsageOverloadedMethodTest.overloading":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":59,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":423,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":280,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":357,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":121,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":156,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":464,"org.easymock.tests2.EasyMockSupportClassTest.testAll":43,"org.easymock.tests.MockClassControlTest.testEquals":370,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":210,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":235,"org.easymock.tests2.CaptureTest.testCaptureAll":149,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":140,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":249,"org.easymock.tests.MockNameTest.defaultName":525,"org.easymock.tests2.UsageConstraintsTest.testMatches":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":296,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":380,"org.easymock.samples.ExampleTest.voteForRemovals":188,"org.easymock.tests.UsageVarargTest.allKinds":208,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":290,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":250,"org.easymock.samples.BasicClassMockTest.testPrintContent":343,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":353,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":328,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":98,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":264,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":322,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":434,"org.easymock.tests2.UsageConstraintsTest.greaterThan":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":44,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":211,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":17,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":474,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":524,"org.easymock.samples.ExampleTest.voteForRemoval":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":450,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":143,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":303,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":107,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":13,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":466,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":257,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":331,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":504,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":309,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":41,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":259,"org.easymock.tests2.CaptureTest.testCaptureFirst":0,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":503,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":75,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":337,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":425,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":276,"org.easymock.tests2.UsageTest.moreThanOneArgument":170,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":319,"org.easymock.tests2.CaptureTest.testCapture2_2446744":325,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":514,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":9,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":207,"org.easymock.tests.GenericTest.testBridgedEquals":438,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":373,"org.easymock.tests.UsageExpectAndReturnTest.longType":272,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":247,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":307,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":236,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":304,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":318,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":356,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":234,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":414,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":293,"org.easymock.tests.UsageCallCountTest.tooManyCalls":374,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":58,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":89,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":223,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":352,"org.easymock.tests.MockingTest.testNiceClassMocking":531,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":104,"org.easymock.tests.MockingTest.testClassMocking":527,"org.easymock.tests2.UsageConstraintsTest.testContains":120,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":240,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":302,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":163,"org.easymock.tests2.UsageConstraintsTest.testFind":112,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":198,"org.easymock.tests.MockTypeTest.fromEasyMockClass":492,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":401,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":180,"org.easymock.tests.UsageExpectAndReturnTest.object":279,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":14,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":88,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":77,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":430,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":203,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":364,"org.easymock.tests.UsageTest.exactCallCountByLastCall":412,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":502,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":462,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":376,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":39,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":199,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":285,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":422,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":92,"org.easymock.tests.MockClassControlTest.testHashCode":369,"org.easymock.tests2.EasyMockSupportTest.testVerify":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":52,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":377,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":420,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":398,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":533,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":19,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":326,"org.easymock.tests.UsageVarargTest.varargCharAccepted":202,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":518,"org.easymock.tests2.UsageTest.openCallCountByLastCall":333,"org.easymock.tests.DefaultClassInstantiatorTest.object":416,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":315,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":397,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":362,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":225,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":350,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":83,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":91,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":472,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":15,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":368,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":224,"org.easymock.tests.CapturesMatcherTest.test":70,"org.easymock.tests.ReplayStateInvalidCallsTest.times":478,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":286,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":413,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":22,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":367,"org.easymock.tests2.UsageTest.resumeIfFailure":174,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":27,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":453,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":262,"org.easymock.tests2.StubTest.stubWithReturnValue":160,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":34,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":130,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":278,"org.easymock.tests2.SerializationTest.testAllMockedMethod":67,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":395,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":427,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":535,"org.easymock.samples.SupportTest.voteForRemovals":347,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":306,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":94,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":230,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":68,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":396,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":338,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":463,"org.easymock.tests.UsageExpectAndThrowTest.object":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":128,"org.easymock.tests2.DelegateToTest.testWrongClass":321,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":476,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":29,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":245,"org.easymock.tests.UsageStrictMockTest.range":404,"org.easymock.samples.ConstructorCalledMockTest.testTax":65,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":456,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":312,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":103,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":229,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":6,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":410,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":40,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":266,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":536,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":468,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":394,"org.easymock.tests2.CaptureTest.testCaptureNone":155,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":436,"org.easymock.tests.UsageUnorderedTest.message":400,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":532,"org.easymock.tests.UsageVerifyTest.twoReturns":292,"org.easymock.tests.UsageVarargTest.varargByteAccepted":206,"org.easymock.tests2.ThreadingTest.testThreadSafe":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":55,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":244,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":488,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":342,"org.easymock.tests2.CaptureTest.testCapture_2617107":150,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":516,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":361,"org.easymock.tests2.UsageConstraintsTest.any":118,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":387,"org.easymock.tests2.StubTest.stub":159,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":415,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":517,"org.easymock.tests.UsageExpectAndThrowTest.longType":221,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":261,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":522,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":386,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":329,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":96,"org.easymock.tests2.SerializationTest.testClass":11,"org.easymock.tests.LimitationsTest.mockNativeMethod":246,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":25,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":288,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":82,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":484,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":168,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":442,"org.easymock.tests2.NameTest.nameForMocksControl":74,"org.easymock.tests2.MockedExceptionTest.testMockedException":162,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":84,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":45,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":409,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":460,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":222,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":300,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":134,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":7,"org.easymock.tests.MockingTest.testNicePartialClassMocking":299,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":138,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":428,"org.easymock.tests2.CaptureTest.testCaptureLast":154,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":80,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":418,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":483,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":116,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":63,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":129,"org.easymock.tests.MockingTest.testTwoMocks":419,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":480,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":64,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":269,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":226,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":335,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":132,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":437,"org.easymock.samples.ExampleTest.removeNonExistingDocument":348,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":384,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":86,"org.easymock.tests.UsageStrictMockTest.differentMethods":254,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":93,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":520,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":444,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":305,"org.easymock.tests2.MockBuilderTest.testCreateMockString":10,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":46,"org.easymock.tests.UsageExpectAndThrowTest.floatType":220,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":42,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":176,"org.easymock.tests.UsageVerifyTest.twoThrows":291,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":421,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":21,"org.easymock.samples.ExampleTest.voteAgainstRemoval":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":508,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":392,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":16,"org.easymock.tests.LimitationsTest.privateConstructor":495,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":31,"org.easymock.tests2.UsageConstraintsTest.testNotNull":131,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":161,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":354,"org.easymock.tests2.UsageTest.defaultResetToNice":173,"org.easymock.samples.ExampleTest.voteAgainstRemovals":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":509,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":284,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":81,"org.easymock.tests.UsageVarargTest.differentLength":358,"org.easymock.tests2.CallbackTest.callback":181,"org.easymock.tests2.UsageConstraintsTest.equals":440,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":448,"org.easymock.tests.UsageTest.openCallCountByLastCall":408,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":108,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":360,"org.easymock.tests.UsageCallCountTest.tooFewCalls":242,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":340,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":268,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":443,"org.easymock.tests.UsageThrowableTest.throwCheckedException":351,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":537,"org.easymock.tests.MockingTest.testStrictClassMocking":526,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":182,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":359,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":62,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":85,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":389,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":341,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":178,"org.easymock.tests.ObjectMethodsTest.testHashCode":363,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":432,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":482,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":144,"org.easymock.tests2.NameTest.nameForNiceMock":73,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":477,"org.easymock.tests2.DependencyTest.testInterfaceMocking":158,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":431,"org.easymock.samples.ExampleTest.addDocument":187,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":56,"org.easymock.tests2.DelegateToTest.testStubDelegate":146,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":60,"org.easymock.tests2.AnswerTest.stubAnswer":177,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":253,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":446,"org.easymock.tests.UsageVarargTest.varargLongAccepted":205,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":255,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":506,"org.easymock.tests.UsageExpectAndReturnTest.floatType":271,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":287,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":38,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":66,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":424,"org.easymock.tests.UsageThrowableTest.noUpperLimit":190,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":126,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":100,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":109,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":452,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":152,"org.easymock.tests2.SerializationTest.test":12,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":519,"org.easymock.tests2.UsageConstraintsTest.testSame":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":270,"org.easymock.samples.SupportTest.addDocument":346,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":461,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":467,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":47,"org.easymock.tests.GenericTest.testPackageScope":209,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":378,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":501,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":99,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":529,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":465,"org.easymock.tests2.NameTest.nameForMock":71,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":281,"org.easymock.tests2.UsageStrictMockTest.differentMethods":167,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":37,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":449,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":273,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":232,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":487,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":213,"org.easymock.tests2.MockedExceptionTest.testRealException":164,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":511,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":457,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":426,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":510,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":391,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":216,"org.easymock.tests2.NameTest.nameForStrictMock":72,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":445,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":179,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":137,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":455,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":521,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":127,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":2,"org.easymock.tests2.UsageStrictMockTest.range":330,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":471,"org.easymock.tests2.UsageConstraintsTest.lessThan":133,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":505,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":308,"org.easymock.tests2.CaptureTest.testCaptureRightOne":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":51,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":441,"org.easymock.tests2.UsageConstraintsTest.testOr":115,"org.easymock.tests.UsageRangeTest.combination":26,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":78,"org.easymock.tests.UsageTest.wrongArguments":407,"org.easymock.tests2.MockBuilderTest.testWithConstructor":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":48,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":274,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":498,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":282,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":523,"org.easymock.tests.UsageVarargTest.varargShortAccepted":204,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":372,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":485,"org.easymock.tests2.UsageConstraintsTest.cmpTo":119,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":339,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":500,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":334,"org.easymock.tests2.CaptureTest.testCaptureFromStub":324,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":381,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":3,"org.easymock.tests.UsageTest.unexpectedCallWithArray":406,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":481,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":402,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":243,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":283,"org.easymock.tests2.CaptureTest.testCapture":69,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":403,"org.easymock.tests2.UsageConstraintsTest.constraints":110,"org.easymock.samples.ExampleTest.addAndChangeDocument":189,"org.easymock.tests.UsageStrictMockTest.testVerify":256,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":345,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":252,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":248,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":153,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":194,"org.easymock.tests.LimitationsTest.abstractClass":494,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":275,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":195,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":76,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":200}}]

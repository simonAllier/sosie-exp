[{"position":"org.easymock.EasyMock:1277","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[0,1,2,3,4],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[5,6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:250","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:93","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[13,14,15,16,17],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[19,20,21,22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,17,52,53,54,5,55,56,57,58,59,60,6],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1221","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:192","sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","type":"CtReturnImpl"},"failures":[61,31,62,63],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:150","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[23,24,64,56,57,65],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[66],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[73],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,17,52,53,54,5,55,56,57,58,59,60,6],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockInvocationHandler:37","failures":[],"status":0,"binaryOperator":"(org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[74,75,76],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:35","sourceCode":"new java.lang.ThreadLocal<org.easymock.internal.MocksControl>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[77,78,79],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1747","sourceCode":"return null","type":"CtReturnImpl"},"failures":[80,81,82,83,84,85,86],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:131","failures":[73,113,114,115,116],"status":-1,"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[79],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[117,118],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[5,6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:79","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgedCandidateFor(java.lang.reflect.Method, java.lang.reflect.Method)) {\n        java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:365","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[119,120,121,122,123],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[124,125,126,127,128,129],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[5,6,7,8,9,10,11],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:70","failures":[130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,19,67,173,20,174,175,124,176,177,178,179,180,181,182,183,184,185,186,187,87,188,88,189,190,89,90,191,192,193,194,195,196,197,198,199,200,201,202,203,204,91,205,206,207,208,209,98,99,210,80,81,82,211,212,77,213,214,215,78,216,217,79,218,219,220,221,222,223,224,225,226,227,228,229,83,84,85,86,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,110],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[249,250,251],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[139,140,141,252,253,254,255,187,188,88,89,90,191,197,91,256,96,97,257,98,258,100,101,259,260,261,212,224,262,263,264,265,266,103,267,268,104,105,269,270,271,272,273,274,275,276,277,111,112],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[212,77,214,78,216,79,227,85,234,236,244],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[216,217,234,235,236,237,244,245],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"failures":[202,98,221],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[135,136,137,138,140,141,149,150,154,155,156,157,158,159,160,161,124,176,177,178,179,180,181,187,87,189,190,191,192,193,194,195,196,198,199,200,201,202,278,203,114,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,125,301,126,302,303,304,305,306,307,308,309,310,311,312,313,314,127,128,13,14,15,91,205,206,207,208,209,256,315,316,317,95,96,97,318,99,258,100,101,319,320,321,68,322,323,324,325,326,120,121,327,328,329,330,331,332,333,334,31,41,47,335,336,50,337,338,16,51,80,81,82,211,212,77,213,214,215,78,216,217,218,219,220,221,222,223,224,225,226,227,228,229,83,84,85,86,230,52,339,340,341,342,343,266,344,102,267,268,345,346,270,347,348,349,350,122,351,352,353,354,272,355,274,356,357,358,123,60,359,275,360,361,362,231,363,364,232,233,69,70,71,72,234,235,236,237,239,240,241,242,243,244,247,365,110,277,111,112,366],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":77,"org.easymock.tests2.UsageTest.argumentsOrdered":105,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":187,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":169,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":268,"org.easymock.tests2.StubTest.stubWithReturnValue":364,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":5,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":306,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":84,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":120,"org.easymock.tests2.SerializationTest.testAllMockedMethod":340,"org.easymock.tests2.DelegateToTest.testReturnException":69,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":167,"org.easymock.tests.MockingTest.testPartialClassMocking":13,"org.easymock.samples.SupportTest.voteForRemovals":328,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":73,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":35,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":279,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":31,"org.easymock.tests.UsageExpectAndThrowTest.object":289,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":92,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":233,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":228,"org.easymock.tests2.DelegateToTest.testWrongClass":71,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":7,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":124,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":176,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":217,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":205,"org.easymock.tests2.UsageTest.wrongArguments":103,"org.easymock.samples.ConstructorCalledMockTest.testTax":23,"org.easymock.tests.UsageStrictMockTest.range":100,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":164,"org.easymock.samples.ExampleTest.answerVsDelegate":68,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":335,"org.easymock.tests2.UsageConstraintsTest.testNull":214,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":333,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":290,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":342,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":274,"org.easymock.tests2.CaptureTest.testPrimitive":237,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":209,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":298,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":89,"org.easymock.tests.UsageTest.moreThanOneArgument":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":25,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":332,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":163,"org.easymock.tests2.CaptureTest.testCaptureNone":242,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":147,"org.easymock.tests.UsageUnorderedTest.message":91,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":252,"org.easymock.tests.UsageVerifyTest.twoReturns":97,"org.easymock.tests.UsageVarargTest.varargByteAccepted":200,"org.easymock.tests2.ThreadingTest.testThreadSafe":360,"org.easymock.tests.UsageTest.argumentsOrdered":90,"org.easymock.tests.UsageVarargTest.varargIntAccepted":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":42,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":138,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":329,"org.easymock.tests2.CaptureTest.testCapture_2617107":236,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":177,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":11,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":208,"org.easymock.tests2.UsageConstraintsTest.any":218,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":62,"org.easymock.tests2.StubTest.stub":363,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":181,"org.easymock.tests.UsageExpectAndThrowTest.longType":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":168,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":76,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":277,"org.easymock.tests2.SerializationTest.testClass":52,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":122,"org.easymock.tests.LimitationsTest.mockNativeMethod":278,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":123,"org.easymock.tests2.AnswerTest.answer":347,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":115,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":128,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":79,"org.easymock.tests2.CaptureTest.testAnd":234,"org.easymock.tests2.UsageTest.strictResetToDefault":344,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":366,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":54,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":18,"org.easymock.tests2.NameTest.nameForMocksControl":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":354,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":30,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests2.DelegateToTest.testDelegate":72,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":283,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":15,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":331,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":343,"org.easymock.tests.MockingTest.testNicePartialClassMocking":14,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":294,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":334,"org.easymock.tests2.CaptureTest.testCaptureLast":241,"org.easymock.tests2.CompareToTest.testCompareEqual":2,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":170,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":22,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":216,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":51,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":229,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":186,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":21,"org.easymock.tests2.CaptureTest.testCapture1_2446744":238,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":17,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":299,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":292,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":287,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":86,"org.easymock.tests.UsageThrowableTest.throwError":154,"org.easymock.tests.UsageStrictMockTest.differentMethods":101,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":361,"org.easymock.tests2.MockBuilderTest.testCreateMockString":265,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":253,"org.easymock.tests.UsageExpectAndThrowTest.floatType":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":32,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":27,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":348,"org.easymock.tests.UsageVerifyTest.twoThrows":96,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":65,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":19,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":41,"org.easymock.samples.PartialClassMockTest.testGetArea":320,"org.easymock.tests2.CompareToTest.testLessOrEqual":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":178,"org.easymock.samples.ExampleTest.voteAgainstRemoval":323,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":145,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":146,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":280,"org.easymock.tests2.UsageTest.niceToStrict":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":36,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":59,"org.easymock.tests2.UsageConstraintsTest.testNotNull":85,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":63,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":161,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":249,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":341,"org.easymock.tests2.MockBuilderTest.testCreateMock":263,"org.easymock.samples.ExampleTest.voteAgainstRemovals":321,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":312,"org.easymock.tests.UsageVarargTest.differentLength":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":44,"org.easymock.tests2.CallbackTest.callback":275,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":64,"org.easymock.tests.UsageTest.openCallCountByLastCall":189,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":288,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":272,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":82,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":133,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":207,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":162,"org.easymock.tests.UsageCallCountTest.tooFewCalls":136,"org.easymock.tests.UsageOverloadedMethodTest.overloading":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":46,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":222,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":173,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":337,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":308,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":148,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":221,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":243,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":165,"org.easymock.tests.UsageThrowableTest.throwCheckedException":158,"org.easymock.tests2.EasyMockSupportClassTest.testAll":28,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":296,"org.easymock.tests2.CaptureTest.testCaptureAll":235,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":184,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":204,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":16,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":50,"org.easymock.tests2.UsageConstraintsTest.testMatches":223,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":12,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":338,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":350,"org.easymock.tests2.CompareToTest.testGreateOrEqual":3,"org.easymock.tests.ObjectMethodsTest.testHashCode":152,"org.easymock.samples.ExampleTest.voteForRemovals":325,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":10,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":231,"org.easymock.tests2.NameTest.nameForNiceMock":108,"org.easymock.tests.UsageVarargTest.allKinds":202,"org.easymock.tests2.DependencyTest.testInterfaceMocking":232,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":9,"org.easymock.samples.BasicClassMockTest.testPrintContent":330,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":185,"org.easymock.samples.ExampleTest.addDocument":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":43,"org.easymock.tests2.DelegateToTest.testStubDelegate":70,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":48,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":160,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests2.AnswerTest.stubAnswer":349,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":171,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":99,"org.easymock.tests2.UsageConstraintsTest.greaterThan":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":29,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":261,"org.easymock.tests.UsageVarargTest.varargLongAccepted":199,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":319,"org.easymock.samples.ExampleTest.voteForRemoval":322,"org.easymock.tests.UsageExpectAndReturnTest.floatType":125,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":127,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":119,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":61,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":60,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":24,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":226,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":20,"org.easymock.tests.UsageThrowableTest.noUpperLimit":155,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":317,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":266,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":211,"org.easymock.tests2.SerializationTest.test":339,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":239,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":55,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":352,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":117,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":156,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":300,"org.easymock.tests2.UsageConstraintsTest.testSame":215,"org.easymock.samples.SupportTest.addDocument":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":166,"org.easymock.tests2.CaptureTest.testCaptureFirst":247,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":353,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":270,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":175,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":33,"org.easymock.tests.GenericTest.testPackageScope":113,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":362,"org.easymock.tests2.CaptureTest.testCapture2_2446744":246,"org.easymock.tests2.UsageTest.moreThanOneArgument":102,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":264,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":201,"org.easymock.tests.GenericTest.testBridgedEquals":116,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":66,"org.easymock.tests2.NameTest.nameForMock":106,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":140,"org.easymock.tests.UsageExpectAndReturnTest.longType":301,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":351,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":309,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":297,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":83,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":295,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":57,"org.easymock.tests2.UsageStrictMockTest.differentMethods":112,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":129,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":143,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":126,"org.easymock.tests.UsageCallCountTest.tooManyCalls":141,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":293,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":74,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":316,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":135,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":45,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":284,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":110,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":206,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":159,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":336,"org.easymock.tests2.UsageConstraintsTest.testContains":220,"org.easymock.tests2.NameTest.nameForStrictMock":107,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":134,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":359,"org.easymock.tests2.UsageConstraintsTest.testFind":213,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":150,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":251,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":80,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":257,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":81,"org.easymock.tests.UsageExpectAndReturnTest.object":307,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":227,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":93,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":210,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":262,"org.easymock.tests2.UsageStrictMockTest.range":111,"org.easymock.tests2.UsageConstraintsTest.lessThan":230,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":355,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":196,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":8,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":153,"org.easymock.tests.UsageTest.exactCallCountByLastCall":191,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":203,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":271,"org.easymock.tests2.CaptureTest.testCaptureRightOne":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":37,"org.easymock.tests2.UsageConstraintsTest.testOr":78,"org.easymock.tests.UsageRangeTest.combination":256,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":6,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":313,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":259,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":192,"org.easymock.tests.UsageTest.wrongArguments":88,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":67,"org.easymock.tests2.MockBuilderTest.testWithConstructor":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":34,"org.easymock.tests2.EasyMockSupportTest.testVerify":358,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":38,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":75,"org.easymock.tests.UsageVarargTest.varargShortAccepted":198,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":118,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":131,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":172,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":254,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":139,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":248,"org.easymock.tests2.UsageConstraintsTest.cmpTo":219,"org.easymock.tests.UsageVarargTest.varargCharAccepted":195,"org.easymock.tests2.CompareToTest.testLessThan":0,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":365,"org.easymock.tests2.UsageTest.openCallCountByLastCall":345,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":346,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":357,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":250,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":130,"org.easymock.tests2.CaptureTest.testCaptureFromStub":245,"org.easymock.tests.UsageTest.unexpectedCallWithArray":188,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":151,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":255,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":39,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":98,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":157,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":137,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":56,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":311,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":260,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":258,"org.easymock.tests2.UsageConstraintsTest.constraints":212,"org.easymock.samples.ExampleTest.addAndChangeDocument":326,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":285,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":314,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":142,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":121,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":318,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":47,"org.easymock.tests2.CompareToTest.testGreateThan":1,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":183,"org.easymock.tests2.UsageTest.resumeIfFailure":269,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":240,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":303,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":174,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":180,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":273,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":193,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":94}}]

[{"transplant":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"m","name":"methodName"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,0,1,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,4,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,3,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[489,351,352,353],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[490,491,492],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[59,256,320,322,390,393,395,449],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"failures":[23,27,35,38,40,80,81,82,85,86,188,225,226,237,238,239,247,248,250,251,372,373,379,380,388,405,435,484,486,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:184","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; ++int) {\n    java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n    } \n    if (!(java.lang.Class<?>.isInstance(java.lang.Object[][int]))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[362,443,493,494,495,496,497],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[498,499,81,247,500,501],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:83","sourceCode":"return (this.int) == (this.int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"maximum":"maximum","java.lang.Integer.MAX_VALUE":"minimum"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:35","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[333,339,350,502],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[5,6,7,8,9,10,11,12,13,14,15,16,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,0,1,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,4,344,345,346,347,348,349,350,351,352,353,354,356,357,359,3,360,361,363,364,365,366,367,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,525,526,527,528,529,530,442,443,445,446,447,448,449,450,531,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[498,499,532,80,81,82,85,86,245,247,249,252,325,341,372,373,375,379,380,500,533,501,534,449,482,485,488],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[490,491,492],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[199,535,536],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.Range:52","failures":[11,13,16,33,43,79,80,82,83,84,85,86,87,88,99,188,237,238,239,241,242,247,248,250,251,256,329,330,335,336,348,349,370,372,373,376,377,379,380,382,390,426,427,428,429,466,484,486,487],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[20,25,105,110,111,112,180,181,182,184,229,236,254,263,263,264,264,269,270,271,272,274,275,276,277,279,282,0,1,283,289,292,302,308,311,312,313,314,317,318,351,353,354,2,356,357,3,360,361,363,366,367,537,369,442,538,539,540,447],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[212,451,452],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[358],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"position":"org.easymock.internal.ArgumentToString:83","failures":[65,541,542,81,82,85,86,188,238,239,247,250,373,379,380,486],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[351,362,365,442,443,493,494,495,543,544],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:158","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[109],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:52","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[5,6,7,8,10,11,12,13,14,15,16,17,18,19,23,24,26,27,28,29,30,31,32,33,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,101,107,108,110,130,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,188,189,190,191,192,193,195,215,216,217,218,219,220,221,222,223,224,225,226,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,255,256,257,258,259,260,262,265,266,267,268,273,316,320,322,323,324,325,326,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,4,344,345,346,347,348,349,350,351,352,370,371,372,373,374,375,376,377,378,379,380,381,382,390,391,392,393,394,395,396,397,398,399,405,406,412,413,414,415,416,417,418,419,420,421,422,423,424,426,427,428,429,435,436,445,446,447,448,449,450,451,452,453,454,455,456,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,482,483,484,485,486,487,488],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[545],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[451,452],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:212","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"matched","value":"matched"}},{"position":"org.easymock.ConstructorArgs:60","failures":[313,318,319,355,358,362,546,368,547,548,443],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:438","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[109,110,111,112,113],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"type":"leafClass"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[272,282,283,313,319],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[132,242],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:167","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:56","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1459","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[308,359],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:327","failures":[6,7,18,19],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":326,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":79,"org.easymock.tests2.UsageTest.argumentsOrdered":380,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":422,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":124,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":375,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":265,"org.easymock.tests2.DelegateToTest.testReturnException":462,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":54,"org.easymock.tests.MockingTest.testPartialClassMocking":181,"org.easymock.tests.MockClassControlTest.testToString":230,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":425,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":133,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":285,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":296,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":138,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":292,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":460,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":524,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":493,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":333,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":189,"org.easymock.tests2.UsageTest.wrongArguments":373,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":441,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":51,"org.easymock.samples.ExampleTest.answerVsDelegate":256,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":25,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":186,"org.easymock.tests2.UsageConstraintsTest.testNull":329,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":274,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":421,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":235,"org.easymock.tests2.CaptureTest.testPrimitive":470,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":193,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":157,"org.easymock.tests.UsageTest.moreThanOneArgument":80,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":273,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":221,"org.easymock.tests.UsageTest.argumentsOrdered":86,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":240,"org.easymock.tests.UsageVarargTest.varargIntAccepted":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":129,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":69,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":497,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":354,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":410,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":385,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":73,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":508,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":435,"org.easymock.tests.ReplayStateInvalidUsageTest.times":211,"org.easymock.tests2.DependencyTest.testClassMocking":457,"org.easymock.tests2.AnswerTest.answer":390,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":334,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":131,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":399,"org.easymock.tests2.CaptureTest.testAnd":467,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":22,"org.easymock.tests2.UsageTest.strictResetToDefault":371,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":282,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":358,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":220,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":416,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":217,"org.easymock.tests2.DelegateToTest.testDelegate":466,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":244,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":507,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":153,"org.easymock.tests.LimitationsTest.mockFinalMethod":106,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":57,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":78,"org.easymock.tests2.DependencyTest.testClassMockingSupport":458,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":225,"org.easymock.tests2.CaptureTest.testCapture1_2446744":471,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":278,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":151,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":397,"org.easymock.tests.UsageThrowableTest.throwError":41,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":205,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":24,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":411,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":68,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":223,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":547,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":310,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":511,"org.easymock.samples.PartialClassMockTest.testGetArea":254,"org.easymock.tests.MockingTest.testInterfaceMocking":183,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":70,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":29,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":139,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":297,"org.easymock.tests2.UsageTest.niceToStrict":374,"org.easymock.tests2.ThreadingTest.testChangeDefault":531,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":490,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":114,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":3,"org.easymock.tests2.MockBuilderTest.testCreateMock":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":305,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":438,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":500,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":147,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":417,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":21,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":8,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":49,"org.easymock.tests.UsageOverloadedMethodTest.overloading":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":307,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":62,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":339,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":169,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":31,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":535,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":338,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":476,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":91,"org.easymock.tests.MockClassControlTest.testEquals":234,"org.easymock.tests2.EasyMockSupportClassTest.testAll":289,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":111,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":533,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":155,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":538,"org.easymock.tests2.CaptureTest.testCaptureAll":468,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":398,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":76,"org.easymock.tests.MockNameTest.defaultName":40,"org.easymock.tests2.UsageConstraintsTest.testMatches":340,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":203,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":222,"org.easymock.samples.ExampleTest.voteForRemovals":260,"org.easymock.tests.UsageVarargTest.allKinds":99,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":237,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":77,"org.easymock.samples.BasicClassMockTest.testPrintContent":270,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":47,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":482,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":465,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":407,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":544,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":201,"org.easymock.tests2.UsageConstraintsTest.greaterThan":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":290,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":216,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":283,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":512,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":202,"org.easymock.samples.ExampleTest.voteForRemoval":257,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":451,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":284,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":545,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":26,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":386,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":277,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":504,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":236,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":370,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":121,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":414,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":43,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":287,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":53,"org.easymock.tests2.CaptureTest.testCaptureFirst":480,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":461,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":120,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":415,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":382,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":65,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":165,"org.easymock.tests2.CaptureTest.testCapture2_2446744":479,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":453,"org.easymock.tests2.UsageTest.moreThanOneArgument":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":132,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":367,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":98,"org.easymock.tests.GenericTest.testBridgedEquals":113,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":15,"org.easymock.tests.UsageExpectAndReturnTest.longType":161,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":412,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":74,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":537,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":156,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":224,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":346,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":154,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":18,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":219,"org.easymock.tests.UsageCallCountTest.tooManyCalls":16,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":306,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":166,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":440,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":143,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":46,"org.easymock.tests.MockingTest.testNiceClassMocking":187,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":312,"org.easymock.tests.MockingTest.testClassMocking":179,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":9,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":2,"org.easymock.tests2.UsageConstraintsTest.testContains":337,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":447,"org.easymock.tests2.UsageConstraintsTest.testFind":328,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":33,"org.easymock.tests.MockTypeTest.fromEasyMockClass":23,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":245,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":322,"org.easymock.tests.UsageExpectAndReturnTest.object":168,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":279,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":439,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":420,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":494,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":93,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":37,"org.easymock.tests.UsageTest.exactCallCountByLastCall":87,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":107,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":119,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":100,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":241,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":532,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":443,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":174,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":88,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":61,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":401,"org.easymock.tests.MockClassControlTest.testHashCode":233,"org.easymock.tests2.EasyMockSupportTest.testVerify":424,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":299,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":242,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":6,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":59,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":541,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":396,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":481,"org.easymock.tests.UsageVarargTest.varargCharAccepted":92,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":194,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":483,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":137,"org.easymock.tests2.UsageTest.openCallCountByLastCall":376,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":491,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":423,"org.easymock.tests.DefaultClassInstantiatorTest.object":195,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":5,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":35,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":542,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":300,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":433,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":400,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":510,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":0,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":232,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":144,"org.easymock.tests.ReplayStateInvalidCallsTest.times":516,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":175,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":17,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":517,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":308,"org.easymock.tests2.UsageTest.resumeIfFailure":381,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":20,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":384,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":56,"org.easymock.tests2.StubTest.stubWithReturnValue":456,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":362,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":167,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":347,"org.easymock.tests2.SerializationTest.testAllMockedMethod":353,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":130,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":501,"org.easymock.samples.SupportTest.voteForRemovals":268,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":109,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":403,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":150,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":489,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":136,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":391,"org.easymock.tests.UsageExpectAndThrowTest.object":148,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":102,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":344,"org.easymock.tests2.DelegateToTest.testWrongClass":464,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":514,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":66,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":67,"org.easymock.tests.UsageStrictMockTest.range":250,"org.easymock.samples.ConstructorCalledMockTest.testTax":263,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":388,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":419,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":311,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":149,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":361,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":85,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":286,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":50,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":498,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":506,"org.easymock.tests2.CaptureTest.testCaptureNone":475,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":30,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":526,"org.easymock.tests.UsageUnorderedTest.message":188,"org.easymock.tests.UsageVerifyTest.twoReturns":239,"org.easymock.tests.UsageVarargTest.varargByteAccepted":97,"org.easymock.tests2.ThreadingTest.testThreadSafe":450,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":303,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":13,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":38,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":269,"org.easymock.tests2.CaptureTest.testCapture_2617107":469,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":534,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":227,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":192,"org.easymock.tests2.UsageConstraintsTest.any":335,"org.easymock.tests2.StubTest.stub":455,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":210,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":19,"org.easymock.tests.UsageExpectAndThrowTest.longType":141,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":55,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":199,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":209,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":485,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":405,"org.easymock.tests2.SerializationTest.testClass":351,"org.easymock.tests.LimitationsTest.mockNativeMethod":105,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":177,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":112,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":540,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":432,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":522,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":488,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":527,"org.easymock.tests2.NameTest.nameForMocksControl":429,"org.easymock.tests2.MockedExceptionTest.testMockedException":446,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":291,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":84,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":142,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":321,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":271,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":363,"org.easymock.tests.MockingTest.testNicePartialClassMocking":182,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":276,"org.easymock.tests2.CaptureTest.testCaptureLast":474,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":430,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":226,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":521,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":318,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":332,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":345,"org.easymock.tests.MockingTest.testTwoMocks":180,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":518,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":319,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":158,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":146,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":379,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":349,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":530,"org.easymock.samples.ExampleTest.removeNonExistingDocument":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":437,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":207,"org.easymock.tests.UsageStrictMockTest.differentMethods":251,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":402,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":529,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":197,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":452,"org.easymock.tests2.MockBuilderTest.testCreateMockString":369,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":228,"org.easymock.tests.UsageExpectAndThrowTest.floatType":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":293,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":288,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":393,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":444,"org.easymock.tests.UsageVerifyTest.twoThrows":238,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":302,"org.easymock.samples.ExampleTest.voteAgainstRemoval":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":125,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":28,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":1,"org.easymock.tests.LimitationsTest.privateConstructor":104,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":548,"org.easymock.tests2.UsageConstraintsTest.testNotNull":348,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":445,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":48,"org.easymock.tests2.UsageTest.defaultResetToNice":378,"org.easymock.samples.ExampleTest.voteAgainstRemovals":255,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":126,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":431,"org.easymock.tests.UsageVarargTest.differentLength":94,"org.easymock.tests2.CallbackTest.callback":449,"org.easymock.tests2.UsageConstraintsTest.equals":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":280,"org.easymock.tests.UsageTest.openCallCountByLastCall":83,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":323,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":191,"org.easymock.tests.UsageCallCountTest.tooFewCalls":11,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":314,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":52,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":528,"org.easymock.tests.UsageThrowableTest.throwCheckedException":45,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":499,"org.easymock.tests.MockingTest.testStrictClassMocking":178,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":108,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":317,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":436,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":313,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":316,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":395,"org.easymock.tests2.CompareToTest.testGreateOrEqual":502,"org.easymock.tests.ObjectMethodsTest.testHashCode":36,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":496,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":520,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":454,"org.easymock.tests2.NameTest.nameForNiceMock":428,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":515,"org.easymock.tests2.DependencyTest.testInterfaceMocking":459,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":495,"org.easymock.samples.ExampleTest.addDocument":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":304,"org.easymock.tests2.DelegateToTest.testStubDelegate":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":309,"org.easymock.tests2.AnswerTest.stubAnswer":394,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":248,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":364,"org.easymock.tests.UsageVarargTest.varargLongAccepted":96,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":252,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":123,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":176,"org.easymock.tests.UsageExpectAndReturnTest.floatType":160,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":442,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":264,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":409,"org.easymock.tests.UsageThrowableTest.noUpperLimit":42,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":63,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":343,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":324,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":383,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":472,"org.easymock.tests2.SerializationTest.test":352,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":536,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":159,"org.easymock.tests2.UsageConstraintsTest.testSame":330,"org.easymock.samples.SupportTest.addDocument":267,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":315,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":505,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":294,"org.easymock.tests.GenericTest.testPackageScope":110,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":243,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":118,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":408,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":185,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":503,"org.easymock.tests2.NameTest.nameForMock":426,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":170,"org.easymock.tests2.UsageStrictMockTest.differentMethods":487,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":368,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":281,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":162,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":152,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":34,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":218,"org.easymock.tests2.MockedExceptionTest.testRealException":448,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":27,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":389,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":128,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":127,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":190,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":214,"org.easymock.tests2.NameTest.nameForStrictMock":427,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":492,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":320,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":275,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":387,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":198,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":356,"org.easymock.tests2.UsageStrictMockTest.range":486,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":509,"org.easymock.tests2.UsageConstraintsTest.lessThan":350,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":404,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":543,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":122,"org.easymock.tests2.CaptureTest.testCaptureRightOne":477,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":298,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":525,"org.easymock.tests2.UsageConstraintsTest.testOr":331,"org.easymock.tests.UsageRangeTest.combination":215,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":272,"org.easymock.tests.UsageTest.wrongArguments":82,"org.easymock.tests2.MockBuilderTest.testWithConstructor":355,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":295,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":229,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":163,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":115,"org.easymock.tests.UsageVarargTest.varargShortAccepted":95,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":200,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":14,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":523,"org.easymock.tests2.UsageConstraintsTest.cmpTo":336,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":392,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":513,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":117,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":377,"org.easymock.tests2.CaptureTest.testCaptureFromStub":478,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":204,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":357,"org.easymock.tests.UsageTest.unexpectedCallWithArray":81,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":519,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":247,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":12,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":546,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":172,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":249,"org.easymock.tests2.UsageConstraintsTest.constraints":325,"org.easymock.samples.ExampleTest.addAndChangeDocument":262,"org.easymock.tests.UsageStrictMockTest.testVerify":253,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":266,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":75,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":473,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":539,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":71,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":164,"org.easymock.tests.LimitationsTest.abstractClass":103,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":64,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":72,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":418,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":89}}]

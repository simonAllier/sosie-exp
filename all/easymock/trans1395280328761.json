[{"transplant":{"position":"org.easymock.internal.LastControl:95","sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"count":"count","stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:215","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:191","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,1,62,2,63,3,4,64,65,66,67,68,69,70,71,72,73,6,74,75,76,7,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,8,114,115,116,117,118,119,10,120,121,122,123,124,125],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"failures":[126,127,128,129,130,131,13,14,15,132,16,17,18,19,20,21,133,134,135,136,137,138,139,140,141,142,22,143,144,145,146,147,23,148,149,150,151,152,153,24,25,154,155,26,27,156,157,28,158,159,160,161,162,163,164,165,166,167,168,30,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,31,32,33,197,198,34,35,36,37,38,199,200,201,202,203,204,205,206,207,39,40,208,209,41,210,42,43,44,45,211,212,46,213,47,214,215,216,49,217,50,218,219,220,51,221,52,53,222,223,224,225,226,227,228,229,230,231,54,232,233,55,234,56,235,58,236,237,238,239,240,241,60,61,0,1,62,2,63,3,4,64,65,66,67,68,69,70,71,72,73,6,74,75,76,7,77,78,79,80,242,243,81,244,245,246,82,83,84,247,85,248,86,87,88,249,250,89,90,91,251,252,253,254,255,256,257,258,259,260,261,262,263,264,106,265,266,107,108,109,267,110,268,111,112,269,270,271,272,8,114,9,115,116,273,274,117,118,119,10,120,121,122,275,276,277,123,278,124,125,279],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[280,79,80,242],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[281,282,283,284,285,286],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[287,55,71,248],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[288,289,270],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[290,291,168,170,171,292,293,204,205,206,215,216,294,295,295,296,296,297,298,231,54,233,55,234,299,56,235,57,58,59,300,301,302,303,304,236,237,305,238,239,79,242,243,306,307,308,81,244,309,310,311,245,312,246,262,313,314,315,106],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:40","failures":[316,317,318,126,127,128,129,130,131,319,320,321,322,323,324,290,325,326,327,328,291,329,330,331,11,12,332,13,14,333,334,335,336,337,338,339,15,132,16,17,18,19,20,21,133,134,135,136,137,138,139,140,141,142,340,341,342,343,344,22,345,143,144,346,145,146,147,23,148,149,150,151,152,153,24,25,154,155,26,27,156,157,28,158,159,160,347,161,162,348,163,164,165,166,167,349,29,350,351,352,168,353,30,169,354,170,171,292,355,356,357,358,359,360,361,362,363,364,365,288,366,367,368,369,370,371,372,373,374,375,376,377,378,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,31,32,33,197,198,34,35,36,37,38,199,200,201,202,203,379,380,293,204,205,381,206,382,383,384,207,39,40,208,209,41,385,281,282,283,284,386,285,387,286,388,389,390,391,210,392,287,393,394,395,396,397,42,43,44,45,211,212,46,213,47,48,398,214,399,400,215,401,402,403,404,405,406,216,49,217,50,407,408,409,410,411,218,219,220,51,221,52,53,222,223,294,224,225,226,227,228,229,412,230,295,296,413,414,415,416,297,298,231,54,232,233,55,234,299,417,56,418,419,235,57,58,59,420,421,422,423,424,300,425,426,301,427,428,429,430,431,432,433,434,435,302,436,437,438,439,440,303,441,442,304,236,237,305,443,444,238,239,445,240,446,241,60,61,0,1,447,62,2,63,3,4,64,5,65,66,67,68,69,70,71,72,73,6,74,75,448,76,7,77,78,79,80,242,243,449,307,308,450,451,81,244,309,452,310,453,454,311,245,455,246,82,83,84,247,85,248,86,87,88,249,250,89,90,456,457,458,459,460,461,462,91,463,464,251,252,253,254,255,256,257,465,466,467,468,469,92,470,471,472,473,474,475,93,94,95,96,97,98,99,100,101,102,103,104,476,477,258,259,260,261,478,479,480,481,482,105,483,484,485,486,487,488,262,489,490,263,264,106,265,266,107,108,109,267,110,268,111,491,492,112,113,289,269,270,271,493,272,8,114,9,115,116,273,274,117,118,119,10,120,121,122,275,276,277,123,278,124,125,279],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[280,79,80,242],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[288],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[6,74],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[345,494,154,155,156,157,207,217,50,220,52,247,249,250,124],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[143,144,145,146,147,23,148,30,356,360,361,369,374,39,40,41,211,212,46,213,47,48,51,295,296,60,61,62,2,63,3,67,69,70,72,73,7,77,78,111,120,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:73","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[54],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[331],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:60","failures":[237,239,445,449,450,452,495,455,496,497,489],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[156,447,249],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[498,499,154,220,500,501],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:194","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Byte.java.lang.Class<java.lang.Byte>)) {\n    return java.lang.Number.byteValue();\n} else if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.lang.Number.shortValue();\n} else if (java.lang.Class<?>.equals(java.lang.Integer.java.lang.Class<java.lang.Integer>)) {\n    return java.lang.Number.intValue();\n} else if (java.lang.Class<?>.equals(java.lang.Long.java.lang.Class<java.lang.Long>)) {\n    return java.lang.Number.longValue();\n} else if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","type":"CtIfImpl"},"failures":[143,144,145,147,148,192,193,194,195,196,197,198,199,200,201,202,203,211,212,213,224,226,227,229,295,295,296,296,416],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[345,494,154,155,156,157,207,217,50,220,52,247,249,250,124],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[502,503,504,505],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"propertyFileName"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[60,72,76,506],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[498,499,154,220,500,501],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[316,317,318,126,127,128,129,130,131,319,320,321,322,323,324,290,325,326,327,328,291,329,330,331,11,12,332,13,14,333,334,335,336,337,338,339,15,132,16,17,18,19,20,21,133,134,135,136,137,138,139,140,141,142,340,341,342,343,344,22,345,143,144,346,145,146,147,23,148,149,150,151,152,153,24,25,154,155,26,27,156,157,28,158,159,160,347,161,162,348,163,164,165,166,167,349,29,350,351,352,168,353,30,169,354,170,171,292,355,356,357,358,359,360,361,362,363,364,365,288,366,367,368,369,370,371,372,373,374,375,376,377,378,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,31,32,33,197,198,34,35,36,37,38,199,200,201,202,203,379,380,293,204,205,381,206,382,383,384,207,39,40,208,209,41,385,281,282,283,284,386,285,387,286,388,389,390,391,210,392,287,393,394,395,396,397,42,43,44,45,211,212,46,213,47,48,398,214,399,400,215,401,402,403,404,405,406,216,49,217,50,407,408,409,410,411,218,219,220,51,221,52,53,222,223,294,224,225,226,227,228,229,412,230,295,296,413,414,415,416,297,298,231,54,232,233,55,234,299,417,56,418,419,235,57,58,59,420,421,422,423,424,300,425,426,301,427,428,429,430,431,432,433,434,435,302,436,437,438,439,440,303,441,442,304,236,237,305,443,444,238,239,445,240,446,241,60,61,0,1,447,62,2,63,3,4,64,5,65,66,67,68,69,70,71,72,73,6,74,75,448,76,7,77,78,79,80,242,243,449,307,308,450,451,81,244,309,452,310,453,454,311,245,455,246,82,83,84,247,85,248,86,87,88,249,250,89,90,456,457,458,459,460,461,462,91,463,464,251,252,253,254,255,256,257,465,466,467,468,469,92,470,471,472,473,474,475,93,94,95,96,97,98,99,100,101,102,103,104,476,477,258,259,260,261,478,479,480,481,482,105,483,484,485,486,487,488,262,489,490,263,264,106,265,266,107,108,109,267,110,268,111,491,492,112,113,289,269,270,271,493,272,8,114,9,115,116,273,274,117,118,119,10,120,121,122,275,276,277,123,278,124,125,279],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:180","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[290,310],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ClassProxyFactory:168","failures":[351,352,168,353,354,170,171,355,379,380,293,204,205,206,384,281,282,283,284,386,285,286,400,215,401,402,403,404,405,406,216,294,295,296,297,298,231,54,233,55,234,299,56,419,235,57,58,59,420,421,422,300,426,427,428,431,434,436,437,440,304,236,237,305,238,239,242,456,460,263,264,106],"status":-1,"binaryOperator":"java.lang.reflect.Method[] != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:109","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[280,79,80,242],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:206","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:214","sourceCode":"return org.easymock.IMocksControl.createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[295,296,418,79,449,450,452,454,455,262,489,490],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[55,71,248],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[356,360,361,369,374,388,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:355","sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:267","sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass()","type":"CtAssignmentImpl"},"failures":[354],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","bound":"genericType"}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[207,507],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[498,499,145,154,155,26,27,156,157,28,158,220,51,500,501,92],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:131","failures":[417],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockMethodInterceptor:127","sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[79,80,242],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":1,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":24,"org.easymock.tests2.UsageTest.argumentsOrdered":250,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":103,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":288,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":248,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":413,"org.easymock.tests2.DelegateToTest.testReturnException":269,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":138,"org.easymock.tests.MockingTest.testPartialClassMocking":204,"org.easymock.tests.MockClassControlTest.testToString":401,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":477,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":421,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":430,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":172,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":301,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":113,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":64,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":39,"org.easymock.tests2.UsageTest.wrongArguments":247,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":488,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":135,"org.easymock.samples.ExampleTest.answerVsDelegate":225,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":291,"org.easymock.tests2.UsageConstraintsTest.testNull":2,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":383,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":233,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":406,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":102,"org.easymock.tests2.CaptureTest.testPrimitive":115,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":41,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":191,"org.easymock.tests.UsageTest.moreThanOneArgument":25,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":232,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":46,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":407,"org.easymock.tests.UsageTest.argumentsOrdered":157,"org.easymock.tests.UsageVarargTest.varargIntAccepted":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":370,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":145,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":243,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":474,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":458,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":358,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":148,"org.easymock.tests.ReplayStateInvalidUsageTest.times":394,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":105,"org.easymock.tests2.DependencyTest.testClassMocking":491,"org.easymock.tests2.AnswerTest.answer":91,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":372,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":257,"org.easymock.tests2.CaptureTest.testAnd":8,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":326,"org.easymock.tests2.UsageTest.strictResetToDefault":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":450,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":235,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":212,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":97,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":44,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":411,"org.easymock.tests2.DelegateToTest.testDelegate":272,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":187,"org.easymock.tests.LimitationsTest.mockFinalMethod":353,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":141,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":153,"org.easymock.tests2.DependencyTest.testClassMockingSupport":492,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":398,"org.easymock.tests2.CaptureTest.testCapture1_2446744":116,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":417,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":185,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":255,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":390,"org.easymock.tests.UsageThrowableTest.throwError":15,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":328,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":475,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":346,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":47,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":496,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":442,"org.easymock.samples.PartialClassMockTest.testGetArea":294,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":391,"org.easymock.tests.MockingTest.testInterfaceMocking":381,"org.easymock.tests2.CompareToTest.testLessOrEqual":506,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":146,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":431,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":173,"org.easymock.tests2.UsageTest.niceToStrict":85,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":356,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":81,"org.easymock.tests2.MockBuilderTest.testCreateMock":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":438,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":485,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":500,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":181,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":98,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":325,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":318,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":126,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":133,"org.easymock.tests.UsageOverloadedMethodTest.overloading":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":435,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":69,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":343,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":35,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":332,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":68,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":119,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":347,"org.easymock.tests.MockClassControlTest.testEquals":405,"org.easymock.tests2.EasyMockSupportClassTest.testAll":300,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":171,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":189,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":313,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":151,"org.easymock.tests2.CaptureTest.testCaptureAll":114,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":256,"org.easymock.tests.MockNameTest.defaultName":339,"org.easymock.tests2.UsageConstraintsTest.testMatches":70,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":213,"org.easymock.samples.ExampleTest.voteForRemovals":229,"org.easymock.tests.UsageVarargTest.allKinds":167,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":49,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":152,"org.easymock.samples.BasicClassMockTest.testPrintContent":298,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":20,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":276,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":493,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":471,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":142,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":387,"org.easymock.tests2.UsageConstraintsTest.greaterThan":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":425,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":43,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":59,"org.easymock.samples.ExampleTest.voteForRemoval":226,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":286,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":420,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":108,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":329,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":459,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":299,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":82,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":216,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":363,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":95,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":423,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":137,"org.easymock.tests2.CaptureTest.testCaptureFirst":122,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":96,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":90,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":345,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":33,"org.easymock.tests2.CaptureTest.testCapture2_2446744":121,"org.easymock.tests2.UsageTest.moreThanOneArgument":84,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":267,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":245,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":373,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":166,"org.easymock.tests.GenericTest.testBridgedEquals":355,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":320,"org.easymock.tests.UsageExpectAndReturnTest.longType":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":149,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":190,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":312,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":448,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":48,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":188,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":211,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":323,"org.easymock.tests.UsageCallCountTest.tooManyCalls":321,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":439,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":197,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":487,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":177,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":19,"org.easymock.tests.MockingTest.testNiceClassMocking":384,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":236,"org.easymock.tests.MockingTest.testClassMocking":380,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":127,"org.easymock.tests2.UsageConstraintsTest.testContains":67,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":306,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":106,"org.easymock.tests2.UsageConstraintsTest.testFind":62,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":14,"org.easymock.tests.MockTypeTest.fromEasyMockClass":327,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":218,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":241,"org.easymock.tests.UsageExpectAndReturnTest.object":34,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":56,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":486,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":101,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":162,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":336,"org.easymock.tests.UsageTest.exactCallCountByLastCall":28,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":30,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":361,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":408,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":349,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":489,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":158,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":200,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":342,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":466,"org.easymock.tests.MockClassControlTest.testHashCode":404,"org.easymock.tests2.EasyMockSupportTest.testVerify":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":433,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":409,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":340,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":254,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":275,"org.easymock.tests.UsageVarargTest.varargCharAccepted":161,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":385,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":378,"org.easymock.tests2.UsageTest.openCallCountByLastCall":86,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":104,"org.easymock.tests.DefaultClassInstantiatorTest.object":281,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":316,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":334,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":434,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":179,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":17,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":481,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":465,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":403,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":57,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":178,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":201,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":322,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":303,"org.easymock.tests2.UsageTest.resumeIfFailure":89,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":290,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":457,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":140,"org.easymock.tests2.StubTest.stubWithReturnValue":111,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":452,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":76,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":198,"org.easymock.tests2.SerializationTest.testAllMockedMethod":242,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":371,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":501,"org.easymock.samples.SupportTest.voteForRemovals":416,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":354,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":468,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":184,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":280,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":377,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":463,"org.easymock.tests.UsageExpectAndThrowTest.object":182,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":350,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":74,"org.easymock.tests2.DelegateToTest.testWrongClass":271,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":143,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":144,"org.easymock.tests.UsageStrictMockTest.range":52,"org.easymock.samples.ConstructorCalledMockTest.testTax":295,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":461,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":100,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":304,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":183,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":422,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":396,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":156,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":134,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":498,"org.easymock.tests2.CaptureTest.testCaptureNone":118,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":12,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":503,"org.easymock.tests.UsageUnorderedTest.message":207,"org.easymock.tests.UsageVerifyTest.twoReturns":50,"org.easymock.tests.UsageVarargTest.varargByteAccepted":165,"org.easymock.tests2.ThreadingTest.testThreadSafe":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":436,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":131,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":297,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":337,"org.easymock.tests2.CaptureTest.testCapture_2617107":9,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":399,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":209,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":375,"org.easymock.tests2.UsageConstraintsTest.any":65,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":393,"org.easymock.tests2.StubTest.stub":268,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":324,"org.easymock.tests.UsageExpectAndThrowTest.longType":175,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":139,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":376,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":386,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":287,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":278,"org.easymock.tests2.SerializationTest.testClass":79,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":92,"org.easymock.tests.LimitationsTest.mockNativeMethod":168,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":203,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":292,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":480,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":315,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":279,"org.easymock.tests2.NameTest.nameForMocksControl":261,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":482,"org.easymock.tests2.MockedExceptionTest.testMockedException":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":426,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":27,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":446,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":176,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":206,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":231,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":310,"org.easymock.tests.MockingTest.testNicePartialClassMocking":205,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":234,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":478,"org.easymock.tests2.CaptureTest.testCaptureLast":117,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":214,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":4,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":239,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":75,"org.easymock.tests.MockingTest.testTwoMocks":293,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":445,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":192,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":180,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":249,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":77,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":505,"org.easymock.samples.ExampleTest.removeNonExistingDocument":412,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":484,"org.easymock.tests.UsageStrictMockTest.differentMethods":53,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":210,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":467,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":283,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":109,"org.easymock.tests2.MockBuilderTest.testCreateMockString":246,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":427,"org.easymock.tests.UsageExpectAndThrowTest.floatType":174,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":424,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":251,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":490,"org.easymock.tests.UsageVerifyTest.twoThrows":217,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":302,"org.easymock.samples.ExampleTest.voteAgainstRemoval":227,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":366,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":58,"org.easymock.tests.LimitationsTest.privateConstructor":352,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":497,"org.easymock.tests2.UsageConstraintsTest.testNotNull":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":21,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":263,"org.easymock.tests2.UsageTest.defaultResetToNice":88,"org.easymock.samples.ExampleTest.voteAgainstRemovals":224,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":199,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":367,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":479,"org.easymock.tests.UsageVarargTest.differentLength":348,"org.easymock.tests2.CallbackTest.callback":266,"org.easymock.tests2.UsageConstraintsTest.equals":447,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":418,"org.easymock.tests.UsageTest.openCallCountByLastCall":26,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":208,"org.easymock.tests.UsageCallCountTest.tooFewCalls":129,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":305,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":136,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":504,"org.easymock.tests.UsageThrowableTest.throwCheckedException":18,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":499,"org.easymock.tests.MockingTest.testStrictClassMocking":379,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":169,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":238,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":483,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":237,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":395,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":444,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":253,"org.easymock.tests.ObjectMethodsTest.testHashCode":335,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":110,"org.easymock.tests2.NameTest.nameForNiceMock":260,"org.easymock.tests2.DependencyTest.testInterfaceMocking":112,"org.easymock.samples.ExampleTest.addDocument":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":437,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":441,"org.easymock.tests2.DelegateToTest.testStubDelegate":270,"org.easymock.tests2.AnswerTest.stubAnswer":252,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":51,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":453,"org.easymock.tests.UsageVarargTest.varargLongAccepted":164,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":365,"org.easymock.tests.UsageExpectAndReturnTest.floatType":194,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":202,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":262,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":296,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":473,"org.easymock.tests.UsageThrowableTest.noUpperLimit":132,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":73,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":344,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":61,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":456,"org.easymock.tests2.SerializationTest.test":80,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":273,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":282,"org.easymock.tests2.UsageConstraintsTest.testSame":63,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":193,"org.easymock.samples.SupportTest.addDocument":415,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":443,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":428,"org.easymock.tests.GenericTest.testPackageScope":170,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":410,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":360,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":472,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":382,"org.easymock.tests2.NameTest.nameForMock":258,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":36,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":455,"org.easymock.tests2.UsageStrictMockTest.differentMethods":125,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":419,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":196,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":186,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":333,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":45,"org.easymock.tests2.MockedExceptionTest.testRealException":265,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":330,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":462,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":369,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":368,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":397,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":40,"org.easymock.tests2.NameTest.nameForStrictMock":259,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":451,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":240,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":55,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":460,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":507,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":284,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":307,"org.easymock.tests2.UsageStrictMockTest.range":124,"org.easymock.tests2.UsageConstraintsTest.lessThan":78,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":469,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":432,"org.easymock.tests2.CaptureTest.testCaptureRightOne":10,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":502,"org.easymock.tests2.UsageConstraintsTest.testOr":3,"org.easymock.tests.UsageRangeTest.combination":42,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":54,"org.easymock.tests.UsageTest.wrongArguments":155,"org.easymock.tests2.MockBuilderTest.testWithConstructor":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":429,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":215,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":31,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":37,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":357,"org.easymock.tests.UsageVarargTest.varargShortAccepted":163,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":285,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":319,"org.easymock.tests2.UsageConstraintsTest.cmpTo":66,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":464,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":359,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests2.CaptureTest.testCaptureFromStub":120,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":389,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":308,"org.easymock.tests.UsageTest.unexpectedCallWithArray":154,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":220,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":130,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":495,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":38,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.samples.ExampleTest.addAndChangeDocument":230,"org.easymock.tests.UsageStrictMockTest.testVerify":223,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":414,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":219,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":150,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":274,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":147,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":314,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":32,"org.easymock.tests.LimitationsTest.abstractClass":351,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":23,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":159,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":99}}]

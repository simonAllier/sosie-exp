[{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,284,285,286,287,288,289,290,291,292,293,294,295],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:148","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[296,297,298],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[299,93,110,113],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:79","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String)","type":"CtLocalVariableImpl"},"failures":[2,58,300,59,301,60,61,62,63,64,65,302,66,87,154,303,304,305],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,306,307,308,309,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,310,150,151,152,152,153,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,311,312,201,202,203,204,205,206,207,208,209,210,211,212,213,313,314,315,316,317,318,319,320,321,322,323,324,325,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,326,235,236,237,238,239,240,241,242,243,244,327,328,329,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,330,331,332,333,334,335,336,337,264,265,266,267,268,269,270,271,272,338,273,274,339,275,276,277,278,279,280,281,340,282,283,285,286,287,288,289,290,291,292,341,293,294,295],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:50","failures":[138,213,342,343,265,266,290],"status":-1,"binaryOperator":"int == 1","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1763","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[117],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[344],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[2,4,44,45,46,47,49,50,51,52,53,54,55,58,300,59,301,60,61,62,63,64,65,302,66,345,346,347,81,82,84,85,86,87,88,89,90,91,92,122,152,152,153,153,154,155,156,303,304,191,214,262,263,305,331,348,293,294,295],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[349,350,351],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:57","failures":[],"status":0,"binaryOperator":"(((this.java.lang.Object) == null) && ((org.easymock.internal.matchers.Equals.java.lang.Object) == null)) || (((this.java.lang.Object) != null) && (this.java.lang.Object.equals(org.easymock.internal.matchers.Equals.java.lang.Object)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[138,213,342,343,265,266,290],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"buffer","i":"matches"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[19,136,139,140,193,352,264,265,266,339,288,291,292],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[21,31,35,36,39,43,65,134,138,139,281,285,290,291],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","sourceCode":"return int >= 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[353,107,114,119],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:193","sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:298","sourceCode":"return ","type":"CtReturnImpl"},"failures":[56,169],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[354,355,356,357,358,1,359,360,361,362,363,364,2,3,4,5,6,7,8,9,365,366,10,11,12,367,368,13,14,15,369,16,17,18,19,20,21,22,23,24,25,26,27,28,29,370,371,372,373,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,374,375,376,377,378,52,379,380,53,381,382,383,384,385,386,387,388,389,54,390,391,392,393,394,55,395,396,397,306,307,308,309,56,57,58,398,59,301,399,400,60,61,62,401,63,402,64,65,403,66,404,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,405,88,406,407,89,90,91,92,408,409,93,94,95,96,410,97,98,99,100,101,102,411,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,412,413,414,415,416,124,417,418,419,420,421,422,423,125,126,127,424,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,310,150,151,152,152,153,153,154,155,156,425,349,426,157,158,159,160,161,162,163,164,165,350,166,167,168,169,170,303,427,428,304,429,430,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,431,432,433,311,312,201,202,203,204,205,206,207,208,209,210,211,212,213,434,313,435,436,437,296,438,439,440,441,314,315,316,317,318,319,320,321,322,323,324,325,442,443,214,444,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,445,326,352,235,236,237,238,239,240,241,242,243,244,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,351,471,472,327,328,329,473,474,245,246,247,248,249,250,251,252,253,475,254,255,256,257,258,259,260,261,476,262,263,305,477,330,331,332,333,334,335,336,337,264,265,266,267,268,269,270,271,272,338,273,274,478,339,275,479,480,481,276,277,278,279,280,281,340,282,283,285,286,287,288,289,290,291,292,341,482,483,348,293,294,484,295,485,486,487,488,489,490,491,492],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,285,286,287,288,289,290,291,292,293,294,295],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[2,51,374,401,402,493,494,495,496,497],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:39","sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[138,213,342,343,265,266,290],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"failures":[2,46,50,51,374,378,379,384,389,395,396,402,82,406,89,92,152,152,153,153],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"args"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[2,3,4,498],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:185","sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[370,46,49,62,304,474,332,333,334,499],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[1,2,3,5,6,7,8,9,11,12,13,14,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,57,58,60,61,62,63,64,65,66,67,70,71,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,144,145,147,310,152,152,153,153,154,157,158,159,160,161,162,163,164,165,166,167,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197,198,199,200,312,205,208,209,210,211,212,213,313,314,315,316,317,318,319,320,321,322,323,324,325,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,326,235,237,238,239,240,241,242,243,244,327,328,329,245,246,247,248,249,250,262,330,331,332,333,334,335,336,337,264,265,266,267,268,269,270,271,272,338,273,274,339,275,276,277,278,279,280,281,340,282,283,285,287,288,289,290,291,292,341,293,294,295],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"failures":[404],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:87","failures":[],"status":0,"binaryOperator":"(java.util.List<java.lang.reflect.Method>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[88,406,407,89,90,91,92,408,409],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ErrorMessage:54","sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[19,20,26,27,306,307,308,309,136,138,139,193,195,198,199,500,264,265,266,287,288,290,291],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[17,20,21,22,26,27,28,29,31,35,36,39,43,59,64,65,66,82,90,92,95,109,134,137,138,139,192,194,195,198,199,200,205,206,207,213,256,265,266,501,499,502,503,281,285,287,289,290,291],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:81","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"paramType"}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[20,26,27,138,194,195,198,199,213,265,266,275,503,287,290],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[67,69,77,95,96,98,100,101,411,112,117],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[354,355,356,357,358,1,359,360,361,362,363,364,2,3,4,5,6,7,8,9,365,366,10,11,12,367,368,13,14,15,369,16,17,18,19,20,21,22,23,24,25,26,27,28,29,370,504,505,506,371,372,373,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,507,48,49,50,508,51,374,375,376,377,378,52,379,380,53,381,382,383,384,385,386,387,388,389,54,390,391,392,393,394,55,395,396,397,306,307,308,309,56,57,58,398,59,301,399,400,60,61,62,401,63,509,402,64,65,403,66,404,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,405,88,406,407,89,90,91,92,408,409,93,94,95,96,410,97,98,99,100,101,102,411,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,412,413,414,415,416,124,417,418,419,420,421,422,423,125,126,127,424,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,310,150,151,152,153,154,155,156,425,349,426,157,158,159,160,161,162,163,164,165,350,166,167,168,169,170,303,510,511,427,428,304,429,430,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,431,432,433,311,312,201,202,203,204,205,206,207,208,209,210,211,212,213,434,313,435,436,437,296,438,439,440,441,314,315,316,317,318,319,320,321,322,323,324,325,442,443,214,444,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,445,326,352,235,236,237,238,239,240,241,242,243,244,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,351,471,472,327,328,329,473,474,245,246,247,248,249,250,251,252,253,475,254,255,256,257,258,259,260,261,476,262,263,305,477,330,331,332,333,334,335,336,337,264,265,266,267,268,269,270,271,272,338,273,274,478,339,275,479,480,481,499,276,277,278,279,280,281,340,282,283,285,286,287,288,289,290,291,292,341,482,483,348,293,294,484,295,485,486,487,488,489,490,491,492],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:390","sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[512,68,79,80,284],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.StartsWith:40","failures":[513],"status":-1,"binaryOperator":"((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","failures":[67,69,77,95,96,98,100,101,411,112,117],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[296,297,298],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[514,515,194,516,517,287],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[317],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":96,"org.easymock.tests2.UsageTest.argumentsOrdered":27,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":192,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":40,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":456,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":22,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":143,"org.easymock.tests2.DelegateToTest.testReturnException":125,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":246,"org.easymock.tests.MockingTest.testPartialClassMocking":293,"org.easymock.tests.MockClassControlTest.testToString":332,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":397,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":384,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":53,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":215,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":500,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":14,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":493,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":102,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":166,"org.easymock.tests2.UsageTest.wrongArguments":20,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":364,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":164,"org.easymock.samples.ExampleTest.answerVsDelegate":145,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":304,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":486,"org.easymock.tests2.UsageConstraintsTest.testNull":98,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":84,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":39,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":337,"org.easymock.tests2.CaptureTest.testPrimitive":70,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":170,"org.easymock.tests.UsageTest.moreThanOneArgument":193,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":234,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":83,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":269,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":488,"org.easymock.tests.UsageTest.argumentsOrdered":199,"org.easymock.tests.UsageVarargTest.varargIntAccepted":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":461,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":208,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":58,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":505,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":421,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":448,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":212,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":1,"org.easymock.tests.ReplayStateInvalidUsageTest.times":322,"org.easymock.tests2.DependencyTest.testClassMocking":367,"org.easymock.tests2.AnswerTest.answer":9,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":411,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":463,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":8,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":511,"org.easymock.tests2.CaptureTest.testAnd":67,"org.easymock.tests2.UsageTest.strictResetToDefault":18,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":399,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":89,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":268,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":34,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":282,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":492,"org.easymock.tests2.DelegateToTest.testDelegate":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":230,"org.easymock.tests.LimitationsTest.mockFinalMethod":444,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":249,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":280,"org.easymock.tests2.DependencyTest.testClassMockingSupport":368,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":445,"org.easymock.tests2.CaptureTest.testCapture1_2446744":71,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":405,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":228,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":6,"org.easymock.tests.UsageThrowableTest.throwError":235,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":316,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":428,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":499,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":422,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":396,"org.easymock.samples.PartialClassMockTest.testGetArea":154,"org.easymock.tests.MockingTest.testInterfaceMocking":484,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":317,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":209,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":349,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":385,"org.easymock.tests2.UsageTest.niceToStrict":21,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":446,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":60,"org.easymock.tests2.MockBuilderTest.testCreateMock":64,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":392,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":361,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":514,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":224,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":35,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":510,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":481,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":311,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":162,"org.easymock.tests.UsageOverloadedMethodTest.overloading":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":394,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":107,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":274,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":182,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":159,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":106,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":297,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":76,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":475,"org.easymock.tests2.EasyMockSupportClassTest.testAll":52,"org.easymock.tests.MockClassControlTest.testEquals":336,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":263,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":232,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":345,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":7,"org.easymock.tests2.CaptureTest.testCaptureAll":68,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":278,"org.easymock.tests.MockNameTest.defaultName":441,"org.easymock.tests2.UsageConstraintsTest.testMatches":108,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":270,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":314,"org.easymock.samples.ExampleTest.voteForRemovals":149,"org.easymock.tests.UsageVarargTest.allKinds":261,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":264,"org.easymock.samples.BasicClassMockTest.testPrintContent":156,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":279,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":241,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":134,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":424,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":418,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":250,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":497,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":439,"org.easymock.tests2.UsageConstraintsTest.greaterThan":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":340,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":92,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":440,"org.easymock.samples.ExampleTest.voteForRemoval":146,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":408,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":130,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":344,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":429,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":506,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":87,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":191,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":17,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":453,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":32,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":237,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":377,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":245,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":423,"org.easymock.tests2.CaptureTest.testCaptureFirst":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":452,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":33,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":29,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":275,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":178,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":132,"org.easymock.tests2.UsageTest.moreThanOneArgument":19,"org.easymock.tests2.CaptureTest.testCapture2_2446744":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":464,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":65,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":260,"org.easymock.tests.GenericTest.testBridgedEquals":477,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":206,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":30,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":233,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":302,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":115,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":350,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":231,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":432,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":267,"org.easymock.tests.UsageCallCountTest.tooManyCalls":207,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":179,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":363,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":220,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":240,"org.easymock.tests.MockingTest.testNiceClassMocking":487,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":45,"org.easymock.tests.MockingTest.testClassMocking":483,"org.easymock.tests2.UsageConstraintsTest.testContains":105,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":300,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":312,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":122,"org.easymock.tests2.UsageConstraintsTest.testFind":97,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":161,"org.easymock.tests.MockTypeTest.fromEasyMockClass":427,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":16,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":285,"org.easymock.tests.UsageExpectAndReturnTest.object":181,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":38,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":494,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":255,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":329,"org.easymock.tests.UsageTest.exactCallCountByLastCall":200,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":489,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":470,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":374,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":187,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":251,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":273,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":413,"org.easymock.tests.MockClassControlTest.testHashCode":335,"org.easymock.tests2.EasyMockSupportTest.testVerify":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":387,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":490,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":480,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":272,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":502,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":5,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":404,"org.easymock.tests.UsageVarargTest.varargCharAccepted":254,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.CaptureTest.testCaptureMultiple":512,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":469,"org.easymock.tests2.UsageTest.openCallCountByLastCall":23,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":41,"org.easymock.tests.DefaultClassInstantiatorTest.object":313,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":479,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":327,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":388,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":238,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":357,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":412,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":90,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":334,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":221,"org.easymock.tests.CapturesMatcherTest.test":284,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":55,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":333,"org.easymock.tests2.UsageTest.resumeIfFailure":28,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":303,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":504,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":248,"org.easymock.tests2.StubTest.stubWithReturnValue":57,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":401,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":180,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":116,"org.easymock.tests2.SerializationTest.testAllMockedMethod":4,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":462,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":515,"org.easymock.samples.SupportTest.voteForRemovals":142,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":476,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":415,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":227,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":498,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":468,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":365,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":471,"org.easymock.tests.UsageExpectAndThrowTest.object":225,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":113,"org.easymock.tests2.DelegateToTest.testWrongClass":127,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":243,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":244,"org.easymock.samples.ConstructorCalledMockTest.testTax":152,"org.easymock.tests.UsageStrictMockTest.range":290,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":372,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":37,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":44,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":226,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":62,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":198,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":376,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":163,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":516,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":426,"org.easymock.tests2.CaptureTest.testCaptureNone":75,"org.easymock.tests.UsageUnorderedTest.message":213,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":501,"org.easymock.tests.UsageVerifyTest.twoReturns":266,"org.easymock.tests.UsageVarargTest.varargByteAccepted":259,"org.easymock.tests2.ThreadingTest.testThreadSafe":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":390,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":204,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":473,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":155,"org.easymock.tests2.CaptureTest.testCapture_2617107":69,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":352,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":466,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":169,"org.easymock.tests2.UsageConstraintsTest.any":103,"org.easymock.tests2.StubTest.stub":56,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":321,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":433,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageExpectAndThrowTest.longType":218,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":247,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":296,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":320,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":137,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":124,"org.easymock.tests2.SerializationTest.testClass":2,"org.easymock.tests.LimitationsTest.mockNativeMethod":214,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":190,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":305,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":347,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":356,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":140,"org.easymock.tests2.NameTest.nameForMocksControl":309,"org.easymock.tests2.MockedExceptionTest.testMockedException":121,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":380,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":197,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":219,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":295,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":369,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":81,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":63,"org.easymock.tests.MockingTest.testNicePartialClassMocking":294,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":86,"org.easymock.tests2.CaptureTest.testCaptureLast":74,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":354,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":326,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":101,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":50,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":114,"org.easymock.tests.MockingTest.testTwoMocks":348,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":508,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":171,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":223,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":26,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":118,"org.easymock.samples.ExampleTest.removeNonExistingDocument":310,"org.easymock.tests.UsageStrictMockTest.differentMethods":291,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":318,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":360,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":414,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":436,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":131,"org.easymock.tests2.MockBuilderTest.testCreateMockString":66,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":330,"org.easymock.tests.UsageExpectAndThrowTest.floatType":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":381,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":378,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":10,"org.easymock.tests.UsageVerifyTest.twoThrows":265,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":375,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":54,"org.easymock.samples.ExampleTest.voteAgainstRemoval":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":457,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":425,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":91,"org.easymock.tests.LimitationsTest.privateConstructor":443,"org.easymock.tests2.UsageConstraintsTest.testNotNull":117,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":120,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":242,"org.easymock.tests2.UsageTest.defaultResetToNice":25,"org.easymock.samples.ExampleTest.voteAgainstRemovals":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":458,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":186,"org.easymock.tests.UsageVarargTest.differentLength":256,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":355,"org.easymock.tests2.CallbackTest.callback":43,"org.easymock.tests2.UsageConstraintsTest.equals":410,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":406,"org.easymock.tests.UsageTest.openCallCountByLastCall":196,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":513,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":93,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":168,"org.easymock.tests.UsageCallCountTest.tooFewCalls":202,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":47,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":165,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":0,"org.easymock.tests.UsageThrowableTest.throwCheckedException":239,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":517,"org.easymock.tests.MockingTest.testStrictClassMocking":482,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":158,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":49,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":359,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":323,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":48,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":12,"org.easymock.tests.ObjectMethodsTest.testHashCode":328,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":133,"org.easymock.tests2.NameTest.nameForNiceMock":308,"org.easymock.tests2.DependencyTest.testInterfaceMocking":13,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":495,"org.easymock.samples.ExampleTest.addDocument":148,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":391,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":395,"org.easymock.tests2.DelegateToTest.testStubDelegate":126,"org.easymock.tests2.AnswerTest.stubAnswer":11,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":288,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":509,"org.easymock.tests.UsageVarargTest.varargLongAccepted":258,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":455,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":189,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":51,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":153,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":478,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":420,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":111,"org.easymock.tests.UsageThrowableTest.noUpperLimit":236,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":94,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":370,"org.easymock.tests2.SerializationTest.test":3,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":72,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":298,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":172,"org.easymock.tests2.UsageConstraintsTest.testSame":99,"org.easymock.samples.SupportTest.addDocument":141,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":507,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":382,"org.easymock.tests.GenericTest.testPackageScope":262,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":450,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":419,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":485,"org.easymock.tests2.NameTest.nameForMock":306,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":183,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":403,"org.easymock.tests2.UsageStrictMockTest.differentMethods":139,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":407,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":175,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":229,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":472,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":283,"org.easymock.tests2.MockedExceptionTest.testRealException":123,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":430,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":460,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":459,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":136,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":167,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":325,"org.easymock.tests2.NameTest.nameForStrictMock":307,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":400,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":15,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":85,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":371,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":437,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":112,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":342,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":59,"org.easymock.tests2.UsageStrictMockTest.range":138,"org.easymock.tests2.UsageConstraintsTest.lessThan":119,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":416,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":454,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":386,"org.easymock.tests2.CaptureTest.testCaptureRightOne":77,"org.easymock.tests2.UsageConstraintsTest.testOr":100,"org.easymock.tests.UsageRangeTest.combination":281,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":82,"org.easymock.tests.UsageTest.wrongArguments":195,"org.easymock.tests2.MockBuilderTest.testWithConstructor":398,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":383,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":331,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":176,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":447,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":184,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":438,"org.easymock.tests.UsageVarargTest.varargShortAccepted":257,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":205,"org.easymock.tests2.UsageConstraintsTest.cmpTo":104,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":366,"org.easymock.tests2.CompareToTest.testLessThan":353,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":449,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":24,"org.easymock.tests2.CaptureTest.testCaptureFromStub":78,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":315,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":301,"org.easymock.tests.UsageTest.unexpectedCallWithArray":194,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":287,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":203,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":185,"org.easymock.tests2.UsageConstraintsTest.constraints":95,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.samples.ExampleTest.addAndChangeDocument":150,"org.easymock.tests.UsageStrictMockTest.testVerify":341,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":151,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":277,"org.easymock.tests2.CompareToTest.testGreateThan":299,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":73,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":210,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":346,"org.easymock.tests.LimitationsTest.abstractClass":442,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":177,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":211,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":36,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":252,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":343}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder.toString()))","position":"org.easymock.internal.MocksBehavior:173","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"variableMapping":{"currentCaptures":"currentCaptures"},"name":"add","transplant":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : this.java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(java.lang.Class<?> != null)","name":"removeConditional","position":"org.easymock.internal.BridgeMethodResolver:412","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-2},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"cmpEq\"","position":"org.easymock.internal.matchers.CompareEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:158","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.classProxyFactory":"org.easymock.internal.MocksControl.interfaceProxyFactory"},"name":"replace","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = this.org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.ClassProxyFactory:196","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.easymock.internal.MocksBehavior:157","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.internal.MocksBehavior:157","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n    if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n        return java.lang.Object;\n    } \n} ","position":"org.easymock.internal.ClassProxyFactory:75","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.UnorderedBehavior:67","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.Invocation:105","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuilder.append(\", \");\n    } \n    java.lang.StringBuilder.append(org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.argumentToString(java.lang.Object[][int]));\n}","position":"org.easymock.internal.ArgumentToString:89","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"resolvedType":"actualTypeArgument","typeVariableArgument":"variable","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type == null) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:335","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[35],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1372","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Boolean.java.lang.Class<java.lang.Boolean>, java.lang.Boolean.java.lang.Boolean)","position":"org.easymock.internal.RecordState:45","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"default :\n    throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));","position":"org.easymock.Capture:123","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.List<java.lang.Class<?>>.toArray(new java.lang.Class[java.util.List<java.lang.Class<?>>.size()])","position":"org.easymock.internal.BridgeMethodResolver:390","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1191","type":"mutation","return":"return 0","status":0},{"failures":[],"binaryOperator":"((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int))","name":"math","position":"org.easymock.internal.MocksBehavior:164","type":"mutation","status":0},{"failures":[36,2,9],"variableMapping":{"actual":"actual","matcher":"matcher"},"name":"add","transplant":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":0},{"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,35,65,66,67,68,69,70,71,12,72,13,14,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,11,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,15,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,20,195,21,22,196,197,25,26,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,29,218,30,219,220,221,222,223,224,225,226,227,228,229,230,231,232],"variableMapping":{"interval":"interval"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Range.getMinimum()","position":"org.easymock.internal.Results:93","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:55","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:81","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","position":"org.easymock.internal.ClassProxyFactory:114","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1149","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1608","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.EasyMock:2123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-7799769066534714634L","position":"org.easymock.internal.MockInvocationHandler:27","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:139","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:41","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","position":"org.easymock.internal.ReflectionUtils:92","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation)","position":"org.easymock.internal.MocksBehavior:60","type":"CtInvocationImpl"},"status":-2},{"failures":[0,2,4,5,6,8,9,10,11],"variableMapping":{"this":"captured"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","position":"org.easymock.Capture:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:39","type":"CtReturnImpl"},"status":-2},{"failures":[233,234],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","position":"org.easymock.internal.MocksControl:149","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.easymock.internal.ClassProxyFactory.MockMethodInterceptor)(net.sf.cglib.proxy.Factory.getCallback(0))).java.lang.reflect.InvocationHandler","position":"org.easymock.internal.ClassProxyFactory:283","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:164","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.makeThreadSafe(boolean)","position":"org.easymock.internal.RecordState:336","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"e":"e"},"name":"add","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1832","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","position":"org.easymock.internal.EasyMockProperties:49","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:49","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[235],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.isEmpty()) || (!(this.boolean))) {\n    return true;\n} else {\n    final org.easymock.internal.ExpectedInvocation org.easymock.internal.ExpectedInvocation = java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.get(((java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size()) - 1)).getExpectedInvocation();\n    return org.easymock.internal.ExpectedInvocation.equals(org.easymock.internal.ExpectedInvocation);\n}","position":"org.easymock.internal.UnorderedBehavior:104","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"status":-2},{"failures":[221,222,236],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:682","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.matchers.And:51","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.equals(java.lang.Void.java.lang.Class<java.lang.Void>)","position":"org.easymock.internal.RecordState:310","type":"CtReturnImpl"},"status":-2},{"failures":[42,43,44,88,94,95,108,237,238,133,135],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMock:509","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.concurrent.locks.ReentrantLock()","position":"org.easymock.internal.ReplayState:32","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:707","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","position":"org.easymock.internal.DefaultClassInstantiator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ClassProxyFactory:200","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"delegateTo":"java.lang.Object.class"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:117","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","position":"org.easymock.internal.ReflectionUtils:96","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.Object instanceof byte[])","name":"removeConditional","position":"org.easymock.internal.matchers.ArrayEquals:38","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.Result:83","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:666","type":"CtReturnImpl"},"status":-2},{"failures":[239],"variableMapping":{"method":"m"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method.setAccessible(true)","position":"org.easymock.internal.DefaultClassInstantiator:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"status":-1},{"failures":[61],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","position":"org.easymock.internal.MocksControl:258","type":"CtInvocationImpl"},"status":-2},{"failures":[12,14,73,240,241,242,243,15,244,245,138,20,22,196,24,25,26,30],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","position":"org.easymock.internal.RecordState:86","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"status":-1},{"failures":[41,42,43,44,45,48,12,13,14,74,75,76,77,78,79,80,246,81,247,103,107,108,248,109,110,111,249,112,113,114,115,116,117,118,126,128,129,131,133,135,143,144,145,146,147,148,151,152,154,155,156,158,159,160,161,162,177,178,179,180,181,182,183,184,185,186,188,193,20,21,22,250,251,252,253,220,254,255,256],"variableMapping":{"returnedType":"returnedType"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","position":"org.easymock.internal.RecordState:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","position":"org.easymock.internal.RecordState:252","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-2},{"failures":[13,14,16,17,18,19,21,22,25,26,29,32,33,34],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (int == (java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Range.this(int, int)","position":"org.easymock.internal.Range:32","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","position":"org.easymock.internal.LastControl:111","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    com.google.dexmaker.stock.ProxyBuilder<T> com.google.dexmaker.stock.ProxyBuilder<T> = com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.forClass(java.lang.Class<T>).handler(org.easymock.internal.AndroidClassProxyFactory.MockHandler);\n    if (org.easymock.ConstructorArgs != null) {\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n    } else {\n        try {\n            org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n            java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n            java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n            com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n        } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n        }\n    }\n    return com.google.dexmaker.stock.ProxyBuilder<T>.build();\n} catch (java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException((\"Failed to mock \" + java.lang.Class<T>) , java.io.IOException);\n}","position":"org.easymock.internal.AndroidClassProxyFactory:39","type":"CtTryImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MockInvocationHandler:41","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"not(\")","position":"org.easymock.internal.matchers.Not:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1952","type":"CtReturnImpl"},"status":-2},{"failures":[46,166,257,258,259,167,170,171,172,173,174,187,191,25,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\")","name":"math","position":"org.easymock.internal.matchers.EqualsWithDelta:45","type":"mutation","status":-2},{"failures":[],"variableMapping":{"constructorArgs":"constructorArgs","builder":"builder"},"name":"add","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.Same:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.Results:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.setAccessible(true)","position":"org.easymock.internal.Injector:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:602","type":"CtInvocationImpl"},"status":-2},{"failures":[260,28],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:211","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:933","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float","position":"org.easymock.EasyMock:1409","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:224","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[46,119,261,166,167,169,170,171,172,173,174,262,187,191,25,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,263],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:314","type":"CtIfImpl"},"status":-2},{"failures":[51],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"add","transplant":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size())","position":"org.easymock.internal.ClassProxyFactory:114","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"binaryOperator":"((\"\" + int) + \" matchers expected, \")","name":"math","position":"org.easymock.internal.LastControl:92","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:259","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:79","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","position":"org.easymock.internal.ClassProxyFactory:269","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1163","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:242","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:157","type":"CtAssignmentImpl"},"status":0},{"failures":[37,264,265,38,39,40,41,42,43,44,45,266,46,267,47,48,49,268,50,51,52,53,54,269,36,55,270,56,271,272,57,58,273,59,60,274,61,62,275,63,64,276,35,65,66,67,68,69,277,70,278,71,12,72,13,14,73,74,75,76,77,78,79,279,80,280,246,81,247,82,83,281,282,84,283,85,86,87,88,89,90,91,284,92,93,94,95,96,0,1,2,3,4,5,6,7,97,8,9,10,11,98,99,100,101,102,103,104,105,285,106,107,108,248,109,110,111,249,112,113,114,115,116,117,118,240,241,242,243,119,120,15,16,121,122,286,261,235,17,18,287,123,124,125,126,127,128,129,130,131,132,237,237,238,238,133,134,135,136,137,288,289,290,244,245,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,291,165,166,292,293,257,258,259,294,295,167,168,169,170,171,172,173,174,175,176,262,296,177,178,179,180,181,297,298,299,182,183,184,185,186,300,301,302,303,187,304,188,189,190,191,192,193,305,306,307,194,19,20,195,21,22,196,308,250,251,252,253,309,197,310,24,25,26,311,312,313,314,315,316,317,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,27,28,29,318,218,30,32,319,263,33,34,219,220,254,255,256,221,222,236,223,224,225,226,227,320,228,229,230,231,232],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.closeMethod()","position":"org.easymock.internal.RecordState:76","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"expected":"o"},"name":"add","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.createNumberObject(java.lang.Object, java.lang.Class<?>)","position":"org.easymock.internal.RecordState:213","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan)","position":"org.easymock.internal.Injector:82","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":170,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":80,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":195,"org.easymock.tests2.DependencyTest.testClassMockingSupport":234,"org.easymock.tests2.MockedExceptionTest.testRealException":283,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":213,"org.easymock.tests.UsageVarargTest.varargIntAccepted":225,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":197,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":54,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":45,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":137,"org.easymock.tests2.UsageConstraintsTest.testContains":274,"org.easymock.tests.UsageCallCountTest.tooManyCalls":142,"org.easymock.tests2.UsageConstraintsTest.testFind":270,"org.easymock.tests2.StubTest.stubWithReturnValue":46,"org.easymock.tests.UsageVarargTest.allKinds":232,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":5,"org.easymock.tests2.CaptureTest.testCaptureAll":1,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":180,"org.easymock.samples.ExampleTest.addAndChangeDocument":132,"org.easymock.tests.UsageVarargTest.varargCharAccepted":226,"org.easymock.tests2.CaptureTest.testCaptureFromStub":10,"org.easymock.tests.UsageVerifyTest.twoThrows":25,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":189,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":227,"org.easymock.tests2.DelegateToTest.testReturnException":47,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":122,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":63,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":95,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":71,"org.easymock.tests2.CaptureTest.testAnd":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":290,"org.easymock.tests.UsageStrictMockTest.testVerify":308,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":206,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":8,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":165,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":210,"org.easymock.tests2.UsageConstraintsTest.testMatches":275,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":295,"org.easymock.tests2.UsageConstraintsTest.testNull":56,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":112,"org.easymock.tests2.EasyMockSupportClassTest.testAll":41,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":156,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":214,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":106,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":163,"org.easymock.tests.UsageThrowableTest.throwError":167,"org.easymock.tests2.UsageConstraintsTest.greaterThan":64,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":223,"org.easymock.samples.SupportTest.addDocument":134,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":192,"org.easymock.tests2.StubTest.stub":266,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":314,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":260,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":185,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":188,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":35,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":92,"org.easymock.tests.UsageExpectAndReturnTest.object":153,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":162,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":231,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":73,"org.easymock.tests.UsageExpectAndThrowTest.object":208,"org.easymock.tests2.DelegateToTest.testWrongClass":49,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":102,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":302,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests.UsageVarargTest.varargByteAccepted":230,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":205,"org.easymock.tests.UsageTest.wrongArguments":32,"org.easymock.samples.ExampleTest.voteAgainstRemoval":129,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":173,"org.easymock.tests.UsageVarargTest.varargShortAccepted":228,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":317,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":209,"org.easymock.tests2.UsageTest.defaultResetToNice":235,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":84,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":184,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":103,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":136,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":111,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":104,"org.easymock.tests2.SerializationTest.testAllMockedMethod":53,"org.easymock.tests2.NameTest.nameForMocksControl":243,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":306,"org.easymock.samples.ExampleTest.voteAgainstRemovals":126,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":278,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":291,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":191,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":175,"org.easymock.tests2.CaptureTest.testCapture1_2446744":4,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":123,"org.easymock.tests2.DelegateToTest.testStubDelegate":48,"org.easymock.tests.LimitationsTest.mockNativeMethod":193,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":298,"org.easymock.tests.UsageUnorderedTest.message":29,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":292,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":268,"org.easymock.samples.ExampleTest.answerVsDelegate":127,"org.easymock.samples.ExampleTest.voteForRemoval":128,"org.easymock.tests.UsageCallCountTest.tooFewCalls":138,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":152,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":38,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":140,"org.easymock.tests.UsageVerifyTest.twoReturns":26,"org.easymock.tests2.DependencyTest.testInterfaceMocking":107,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":147,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":207,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":85,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":301,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":88,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":299,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":57,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":196,"org.easymock.tests.MockingTest.testTwoMocks":296,"org.easymock.tests2.CaptureTest.testCaptureRightOne":9,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":149,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":245,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":281,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":265,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":79,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":254,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":316,"org.easymock.tests2.UsageConstraintsTest.cmpTo":60,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":244,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":154,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":114,"org.easymock.tests2.MockedExceptionTest.testMockedException":282,"org.easymock.tests.UsageThrowableTest.throwCheckedException":171,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":68,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":217,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":252,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":24,"org.easymock.samples.PartialClassMockTest.testGetArea":133,"org.easymock.samples.ExampleTest.voteForRemovals":131,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":169,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":62,"org.easymock.samples.ConstructorCalledMockTest.testTax":237,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":166,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":303,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":78,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":264,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":218,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":40,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":305,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":148,"org.easymock.tests2.AnswerTest.answer":37,"org.easymock.tests.MockingTest.testNicePartialClassMocking":178,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":20,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":144,"org.easymock.tests2.UsageConstraintsTest.any":59,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":151,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":186,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":309,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":315,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":94,"org.easymock.tests.UsageExpectAndThrowTest.longType":201,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":83,"org.easymock.tests2.CallbackTest.callback":105,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":43,"org.easymock.tests2.NameTest.nameForMock":240,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":284,"org.easymock.tests.UsageTest.argumentsOrdered":34,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":55,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":110,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":61,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":161,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":190,"org.easymock.tests2.NameTest.nameForStrictMock":241,"org.easymock.tests2.CaptureTest.testCaptureNone":97,"org.easymock.tests2.SerializationTest.test":52,"org.easymock.tests.UsageExpectAndReturnTest.longType":146,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":6,"org.easymock.tests2.SerializationTest.testClass":51,"org.easymock.tests2.CaptureTest.testCaptureFirst":98,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":65,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":124,"org.easymock.tests2.EasyMockSupportTest.testVerify":96,"org.easymock.tests2.UsageTest.niceToStrict":121,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":300,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":311,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":312,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":203,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":67,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":119,"org.easymock.tests2.UsageTest.strictResetToDefault":120,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":211,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":81,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":160,"org.easymock.tests.GenericTest.testBridgedEquals":239,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":249,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":310,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":198,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":150,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":285,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":279,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":77,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":224,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":276,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":304,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":179,"org.easymock.tests2.UsageConstraintsTest.testOr":272,"org.easymock.tests2.DelegateToTest.testDelegate":50,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":101,"org.easymock.tests2.UsageConstraintsTest.testNotNull":69,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":72,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":99,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":155,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":174,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":181,"org.easymock.tests2.ThreadingTest.testThreadSafe":100,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":261,"org.easymock.tests.UsageThrowableTest.noUpperLimit":168,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":251,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":113,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":115,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":93,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":86,"org.easymock.tests.UsageExpectAndReturnTest.floatType":145,"org.easymock.tests2.UsageTest.wrongArguments":16,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":273,"org.easymock.tests2.UsageConstraintsTest.testSame":271,"org.easymock.tests2.UsageTest.resumeIfFailure":287,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":289,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":117,"org.easymock.tests.UsageOverloadedMethodTest.overloading":176,"org.easymock.samples.SupportTest.voteForRemovals":135,"org.easymock.tests.UsageRangeTest.combination":220,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":172,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":259,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":238,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":277,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":222,"org.easymock.tests.UsageTest.openCallCountByLastCall":319,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":23,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":204,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":258,"org.easymock.tests2.NameTest.nameForNiceMock":242,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":256,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":66,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":250,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":12,"org.easymock.tests2.CaptureTest.testPrimitive":3,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":76,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":157,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":212,"org.easymock.samples.BasicClassMockTest.testPrintContent":125,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":288,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":182,"org.easymock.tests.UsageExpectAndThrowTest.floatType":200,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":280,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":75,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":82,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":158,"org.easymock.tests2.UsageStrictMockTest.differentMethods":14,"org.easymock.tests.UsageTest.exactCallCountByLastCall":219,"org.easymock.tests2.AnswerTest.stubAnswer":39,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":87,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":91,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":236,"org.easymock.tests2.CaptureTest.testCaptureLast":7,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":199,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":139,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":42,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":108,"org.easymock.tests.UsageStrictMockTest.range":21,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":263,"org.easymock.tests.UsageTest.unexpectedCallWithArray":31,"org.easymock.tests.MockingTest.testPartialClassMocking":177,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":159,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.constraints":36,"org.easymock.samples.ExampleTest.addDocument":130,"org.easymock.tests2.UsageConstraintsTest.lessThan":70,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":33,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":164,"org.easymock.tests.UsageVarargTest.varargLongAccepted":229,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":253,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":313,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":247,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":267,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":19,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":44,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":257,"org.easymock.tests2.UsageStrictMockTest.range":13,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":118,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":27,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":28,"org.easymock.tests2.DependencyTest.testClassMocking":233,"org.easymock.tests.UsageTest.moreThanOneArgument":30,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":183,"org.easymock.tests2.UsageTest.openCallCountByLastCall":286,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":248,"org.easymock.tests.UsageStrictMockTest.differentMethods":22,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":89,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":269,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":109,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":202,"org.easymock.tests.DefaultClassInstantiatorTest.object":318,"org.easymock.tests.UsageVarargTest.differentLength":320,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":294,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":297,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":143,"org.easymock.tests2.CaptureTest.testCapture2_2446744":11,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":187,"org.easymock.tests.GenericTest.testPackageScope":221}}]

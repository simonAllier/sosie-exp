[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"same(\")","position":"org.easymock.internal.matchers.Same:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Class<?>[].int) != (java.lang.Object[].int)) {\n    return false;\n} ","position":"org.easymock.internal.ReflectionUtils:180","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.TypeVariable<?>.getBounds()","position":"org.easymock.internal.BridgeMethodResolver:350","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Injection>","position":"org.easymock.internal.InjectionPlan:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(long.long, java.lang.Long.java.lang.Long)","position":"org.easymock.internal.ReflectionUtils:38","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"bounds":"actualTypeArguments"},"name":"add","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","position":"org.easymock.internal.BridgeMethodResolver:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.easymock.internal.BridgeMethodResolver:322","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<org.easymock.internal.Result>.add(org.easymock.internal.Result)","position":"org.easymock.internal.Results:45","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"genericType":"genericType"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:225","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","position":"org.easymock.internal.RecordState:91","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\")","name":"math","position":"org.easymock.internal.EasyMockProperties:116","type":"mutation","status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:25","type":"CtNewClassImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"variableMapping":{"behavior":"behavior"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","position":"org.easymock.internal.RecordState:139","type":"CtInvocationImpl"},"status":-1},{"failures":[36,37,38],"variableMapping":{"c":"c"},"name":"add","transplant":{"sourceCode":"org.easymock.IMocksControl.replay()","position":"org.easymock.EasyMockSupport:542","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-1},{"failures":[39],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.io.ObjectOutputStream.writeObject(null);\n    return ;\n} ","position":"org.easymock.internal.ClassProxyFactory:129","type":"CtIfImpl"},"status":-1},{"failures":[40,41,42,43,44,45,0,46,47,48,49,50,51,39,1,2,52,53,3,4,5,6,54,55,56,57,7,58,8,9,59,10,11,60,61,62,63,64,12,13,14,65,66,15,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,16,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,19,20,21,22,23,24,25,204,205,206,207,208,209,26,27,210,211,28,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,29,228,229,230,231,232,30,31,32,33,34,233,234,235,236,237,238,239,240,35,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","position":"org.easymock.internal.RecordState:151","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay()","position":"org.easymock.EasyMock:2012","type":"CtInvocationImpl"},"status":-2},{"failures":[301,302,303,304,130,131,137,138,305,306,307,227,276,277,278,281,282],"variableMapping":{"buffer":"buffer"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","position":"org.easymock.internal.matchers.Null:39","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"host":"mock","name":"name","mock":"mock","mockType":"mockType","type":"type"},"name":"add","transplant":{"sourceCode":"java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:124","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:127","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Method.getParameterTypes()","position":"org.easymock.internal.Invocation:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType())","position":"org.easymock.internal.RecordState:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","position":"org.easymock.internal.MockInvocationHandler:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && (((java.lang.String)(java.lang.Object)).matches(java.lang.String))","position":"org.easymock.internal.matchers.Matches:36","type":"CtReturnImpl"},"status":-2},{"failures":[15,69,70,124,125,126,127,130,149,151,152,29,230,231,242,243,244,276],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:226","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","position":"org.easymock.internal.LastControl:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"initialPosition":"max","position":"max"},"name":"add","transplant":{"sourceCode":"int = int","position":"org.easymock.internal.MocksBehavior:105","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.lang.Integer.int","position":"org.easymock.internal.Results:95","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"((java.util.Comparator<? super T>) + \"(\")","name":"math","position":"org.easymock.internal.matchers.Compare:47","type":"mutation","status":-2},{"failures":[308,309,310,311,40,312,313,41,42,43,314,315,316,36,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,44,338,45,0,339,46,47,48,340,49,341,50,51,39,1,2,52,53,342,3,4,5,6,54,55,343,56,57,7,58,8,9,59,10,11,60,61,62,63,64,12,13,14,65,66,15,67,68,69,70,71,72,73,74,75,76,77,344,78,345,346,79,80,81,82,347,348,83,349,84,85,86,87,88,350,351,352,353,354,355,356,357,358,37,359,360,38,89,90,91,92,93,94,95,96,97,98,99,16,100,101,361,362,363,364,365,366,367,368,369,370,371,372,102,103,104,105,106,107,108,109,110,111,373,374,375,376,377,378,379,380,381,382,383,384,385,386,112,387,113,114,388,389,115,116,390,391,392,393,117,118,119,394,120,121,395,396,397,122,123,398,399,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,400,401,141,142,143,144,145,146,147,148,17,18,402,403,404,405,406,407,408,409,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,410,411,412,413,414,415,416,417,183,184,185,186,187,418,188,189,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,190,191,192,193,194,195,196,197,198,199,200,446,447,448,201,202,449,203,450,451,452,19,20,453,454,455,21,22,23,24,25,204,205,206,207,208,209,26,27,210,211,28,456,457,212,458,459,460,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,29,228,229,230,231,232,30,31,32,33,34,233,234,235,236,237,238,239,240,35,241,242,243,244,461,245,246,247,462,463,464,465,466,248,249,250,251,467,468,469,470,471,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,472,272,473,273,274,474,475,476,477,478,479,275,276,277,278,279,280,281,282,283,284,285,286,287,480,288,289,481,482,290,291,292,483,293,294,295,296,297,298,299,300],"variableMapping":{"this":"control"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:202","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","position":"org.easymock.internal.LastControl:48","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\"))","position":"org.easymock.internal.matchers.Matches:40","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Field> java.util.List<java.lang.reflect.Field> = org.easymock.internal.Injector.org.easymock.internal.Injector.fieldsOf(java.lang.Class<?>)","position":"org.easymock.internal.Injector:159","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Field java.lang.reflect.Field = org.easymock.internal.Injector.org.easymock.internal.Injector.getFieldByName(java.lang.Class<?>, org.easymock.internal.Injection.getQualifier())","position":"org.easymock.internal.Injector:163","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:174","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"shouldFillInStackTrace"},"name":"add","transplant":{"sourceCode":"return this.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.easymock.internal.Result:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"length"},"name":"add","transplant":{"sourceCode":"int int = this.int","position":"org.easymock.internal.MocksBehavior:102","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.Object[].int","position":"org.easymock.internal.Invocation:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[][((java.lang.Object[].int) - 1)]) == null) {\n    return java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.EasyMock.DISABLE_CLASS_MOCKING":"failMessage"},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + java.lang.String) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:120","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","position":"org.easymock.internal.RecordState:263","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","position":"org.easymock.internal.DefaultClassInstantiator:160","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"maximum"},"name":"add","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","position":"org.easymock.internal.Results:40","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:224","type":"CtThrowImpl"},"status":-2},{"failures":[422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,439,440,441,442,443,445],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","position":"org.easymock.internal.RecordState:233","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.isInterface()) {\n    return new java.lang.Class[]{ java.lang.Class<?> };\n} ","position":"org.easymock.internal.BridgeMethodResolver:377","type":"CtIfImpl"},"status":-2},{"failures":[54],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1148","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:987","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1777","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1777","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Field.getType()","position":"org.easymock.internal.InjectionTarget:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.MocksControl.classProxyFactory":"org.easymock.internal.MocksControl.interfaceProxyFactory"},"name":"replace","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = this.org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","position":"org.easymock.internal.MocksControl:135","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","position":"org.easymock.internal.MocksControl:111","type":"CtLocalVariableImpl"},"status":-2},{"failures":[42,43,45,0,47,2,3,4,5,6,7,9,11,12,13,67,72,77,79,85,86,87,88,357,16,366,107,108,109,110,111,378,113,116,390,391,117,119,128,136,139,140,17,18,155,156,157,158,159,160,161,162,189,19,20,21,22,23,24,25,204,205,206,207,208,209,26,27,210,28,228,30,31,32,33,34,35,241,243,244,248,249,250,251,273,275,277,283],"binaryOperator":"(int) < (java.util.List<org.easymock.internal.UnorderedBehavior>.size())","name":"conditionalBoundary","position":"org.easymock.internal.MocksBehavior:86","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","position":"org.easymock.internal.BridgeMethodResolver:351","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:334","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:194","type":"CtReturnImpl"},"status":-2},{"failures":[53,6],"variableMapping":{"actual":"actual","matcher":"matcher"},"name":"replace","transplant":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    return ;\n} ","position":"org.easymock.internal.MocksBehavior:193","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)))","position":"org.easymock.internal.ClassProxyFactory:227","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","position":"org.easymock.internal.MethodSerializationWrapper:68","type":"CtLocalVariableImpl"},"status":-2},{"failures":[309,36,319,329,335,39,71,72,74,75,76,77,78,346,79,80,81,82,347,348,83,85,86,87,113,114,388,389,115,116,390,391,117,118,119,394,120,395,122,400,401,402,410,415,183,446,447,448,201,202,203,452,212,233,234,235,236,237,238,239,240,288,289,481],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","position":"org.easymock.internal.ClassProxyFactory:245","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:261","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper","position":"org.easymock.internal.MockInvocationHandler:43","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Long>(org.easymock.Capture<java.lang.Long>))","position":"org.easymock.EasyMock:1951","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:257","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1262","type":"CtInvocationImpl"},"status":-2},{"failures":[0,85,86,87,88,128,135,187,190,192,193,194,195,196,197,200,204,205,206,207,208,209,210,211,241,243,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,275,280],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:268","type":"CtIfImpl"},"status":-2},{"failures":[431,433,442,443,445],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","position":"org.easymock.internal.RecordState:96","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.IAnswer<?>.toString()","position":"org.easymock.internal.Result:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-2},{"failures":[40,41,42,43,44,45,0,46,47,48,49,341,50,51,39,1,2,52,53,3,4,5,6,54,55,56,57,7,58,8,9,59,10,11,60,61,62,64,12,13,14,65,66,15,67,68,69,70,71,72,73,74,75,76,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,16,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,154,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,188,190,191,192,193,194,195,196,197,199,200,201,202,203,19,20,21,22,23,24,25,204,205,206,207,208,209,26,27,210,211,28,212,217,225,226,227,29,228,229,230,231,232,30,31,32,33,34,234,35,241,242,243,244,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,296,297,298,299,300],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.Mock.java.lang.String()","position":"org.easymock.internal.Injection:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:77","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"position":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"if (!(this.java.util.List<org.easymock.internal.UnorderedBehavior>.get(this.int).verify())) {\n    break;\n} ","position":"org.easymock.internal.MocksBehavior:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    if (!(org.easymock.internal.UnorderedBehavior.verify())) {\n        boolean = false;\n        break;\n    } \n}","position":"org.easymock.internal.MocksBehavior:154","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"ret":"constructor","clazz":"toMock"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","position":"org.easymock.internal.ReflectionUtils:150","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:127","type":"CtTryImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.Mock","position":"org.easymock.internal.Injection:59","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-2},{"failures":[361,362,363,365,367,368,369,372,373,374,375,377,379,380,381,384,405,406],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Field.getType().isAssignableFrom(org.easymock.internal.Injection.getMock().getClass())","position":"org.easymock.internal.InjectionTarget:46","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1964","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[java.lang.Class<?>[].int]","position":"org.easymock.internal.DefaultClassInstantiator:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n    try {\n        java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n    } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n        throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:115","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:1816","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","position":"org.easymock.internal.LastControl:128","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:399","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.ObjectMethodsFilter:62","type":"CtThrowImpl"},"status":0},{"failures":[3,300],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.matchers.Equals:54","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:275","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","position":"org.easymock.internal.MockBuilder:210","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.Invocation:210","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setClassLoader(java.lang.Object.getClass().getClassLoader())","position":"org.easymock.internal.ClassProxyFactory:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","position":"org.easymock.internal.Injector:106","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","position":"org.easymock.EasyMock:1079","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","position":"org.easymock.EasyMock:865","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.CompareTo:42","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"status":-2},{"failures":[40,41,42,43,44,45,0,46,47,49,50,51,39,1,2,52,53,3,4,5,6,54,55,56,57,7,58,8,9,59,10,11,60,61,62,64,12,13,14,66,15,69,70,71,73,74,75,76,78,79,81,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,101,102,103,106,107,108,109,110,111,112,113,115,116,120,121,122,123,124,125,126,127,129,130,132,133,136,139,141,142,143,144,145,146,148,149,150,151,152,153,154,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,188,191,192,199,200,201,202,203,19,20,21,22,23,24,25,204,205,206,207,208,209,26,27,28,212,226,29,230,231,232,30,31,32,33,34,234,35,242,243,244,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,473,276,284,285,286,287,288,289,290,291,292,293,294,296,297,298,299,300],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","position":"org.easymock.EasyMock:2079","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","position":"org.easymock.internal.RecordState:146","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.resetToNice();\n}","position":"org.easymock.EasyMockSupport:572","type":"CtForEachImpl"},"status":-2},{"failures":[4,60,12],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":193,"org.easymock.tests2.MockedExceptionTest.testRealException":88,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":320,"org.easymock.tests.UsageVarargTest.varargIntAccepted":292,"org.easymock.tests.LimitationsTest.mockFinalMethod":458,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":1,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":44,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":236,"org.easymock.tests.UsageCallCountTest.tooManyCalls":157,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":216,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":331,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":398,"org.easymock.tests2.StubTest.stubWithReturnValue":0,"org.easymock.tests.UsageVarargTest.allKinds":300,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":337,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":251,"org.easymock.tests2.CaptureTest.testCaptureAll":90,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":19,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":59,"org.easymock.tests2.CaptureTest.testAnd":89,"org.easymock.tests.UsageStrictMockTest.testVerify":232,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":260,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":186,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":410,"org.easymock.tests.MockClassControlTest.testToString":235,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":394,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":223,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":355,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":176,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":268,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":378,"org.easymock.tests.UsageThrowableTest.throwError":190,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":28,"org.easymock.samples.SupportTest.addDocument":403,"org.easymock.tests2.StubTest.stub":45,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":468,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":217,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":24,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":344,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":26,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":369,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":443,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":182,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":445,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":347,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":299,"org.easymock.tests.UsageExpectAndThrowTest.object":262,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":206,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":333,"org.easymock.tests2.UsageTest.moreThanOneArgument":130,"org.easymock.tests.UsageVarargTest.varargByteAccepted":298,"org.easymock.tests.MockClassControlTest.testEquals":239,"org.easymock.tests.UsageTest.wrongArguments":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":161,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":247,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":377,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":263,"org.easymock.tests2.UsageTest.defaultResetToNice":136,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":306,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":301,"org.easymock.tests.MockingTest.testNiceClassMocking":452,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":87,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":105,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":391,"org.easymock.tests2.MockBuilderTest.testCreateMock":117,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":106,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":213,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":218,"org.easymock.samples.ExampleTest.voteAgainstRemovals":141,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":65,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":185,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":376,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":286,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":198,"org.easymock.tests2.CaptureTest.testCapture1_2446744":93,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":340,"org.easymock.samples.ExampleTest.voteForRemoval":143,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":310,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":154,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":188,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":455,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":231,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":248,"org.easymock.tests2.CaptureTest.testCaptureRightOne":99,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":169,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":214,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":313,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":76,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":285,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":215,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":470,"org.easymock.tests2.UsageConstraintsTest.cmpTo":57,"org.easymock.tests.MockTypeTest.fromEasyMockClass":413,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":477,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":382,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":392,"org.easymock.tests2.MockedExceptionTest.testMockedException":86,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":32,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":64,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":271,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":242,"org.easymock.samples.PartialClassMockTest.testGetArea":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":429,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":200,"org.easymock.samples.ConstructorCalledMockTest.testTax":17,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":396,"org.easymock.tests2.UsageTest.argumentsOrdered":138,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":312,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":411,"org.easymock.samples.ExampleTest.removeNonExistingDocument":147,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":311,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":43,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":475,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":460,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":168,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":158,"org.easymock.tests2.AnswerTest.answer":40,"org.easymock.tests.MockingTest.testNicePartialClassMocking":202,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":383,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":29,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":34,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":469,"org.easymock.tests.UsageExpectAndThrowTest.longType":255,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":417,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":329,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":357,"org.easymock.tests.UsageTest.argumentsOrdered":282,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":53,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":181,"org.easymock.tests2.MockBuilderTest.testCreateMockString":119,"org.easymock.tests2.NameTest.nameForStrictMock":125,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":210,"org.easymock.tests2.CaptureTest.testCaptureNone":97,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":428,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":442,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":463,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":400,"org.easymock.tests.MockingTest.testInterfaceMocking":449,"org.easymock.tests2.EasyMockSupportTest.testVerify":38,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":245,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":380,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":116,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":257,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":451,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":63,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":128,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":118,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":180,"org.easymock.tests.GenericTest.testBridgedEquals":482,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":397,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":71,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":103,"org.easymock.tests.MockClassControlTest.testHashCode":238,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":362,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":399,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":20,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":175,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":197,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":415,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":336,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":317,"org.easymock.tests2.UsageConstraintsTest.testSame":5,"org.easymock.tests2.UsageTest.resumeIfFailure":139,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":302,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":408,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":122,"org.easymock.tests.UsageOverloadedMethodTest.overloading":199,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":345,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":416,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":365,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":367,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":325,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":421,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":18,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":324,"org.easymock.tests.UsageTest.openCallCountByLastCall":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":258,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":420,"org.easymock.tests2.NameTest.nameForNiceMock":126,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":220,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":379,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":287,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":30,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":73,"org.easymock.tests2.CaptureTest.testPrimitive":92,"org.easymock.samples.BasicClassMockTest.testPrintContent":401,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":407,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":21,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":79,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":83,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":156,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":150,"org.easymock.tests2.UsageStrictMockTest.differentMethods":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":326,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":352,"org.easymock.tests.MockingTest.testClassMocking":447,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":481,"org.easymock.tests2.CaptureTest.testCaptureLast":96,"org.easymock.tests2.UsageConstraintsTest.equals":342,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":155,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":253,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":153,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":387,"org.easymock.tests.UsageStrictMockTest.range":229,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":280,"org.easymock.tests.UsageTest.unexpectedCallWithArray":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":425,"org.easymock.samples.ExampleTest.addDocument":145,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":450,"org.easymock.tests2.UsageConstraintsTest.lessThan":14,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":189,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":281,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":184,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":467,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":339,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":434,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":308,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":479,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":303,"org.easymock.tests2.UsageStrictMockTest.range":68,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":123,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":160,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageTest.moreThanOneArgument":276,"org.easymock.tests2.UsageTest.openCallCountByLastCall":134,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":114,"org.easymock.tests.UsageStrictMockTest.differentMethods":230,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":474,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":431,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":309,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":256,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":453,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":307,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":163,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":318,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":78,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":228,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":375,"org.easymock.tests2.DependencyTest.testClassMockingSupport":386,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":267,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":35,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":364,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":406,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":464,"org.easymock.tests2.UsageConstraintsTest.testContains":7,"org.easymock.tests2.UsageConstraintsTest.testFind":3,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":94,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":476,"org.easymock.samples.ExampleTest.addAndChangeDocument":148,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":113,"org.easymock.tests.UsageVarargTest.varargCharAccepted":293,"org.easymock.tests2.CaptureTest.testCaptureFromStub":16,"org.easymock.tests.UsageVerifyTest.twoThrows":243,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":384,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":27,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":294,"org.easymock.tests2.DelegateToTest.testReturnException":46,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":133,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":338,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":360,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":66,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":349,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":480,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":409,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":224,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":478,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":98,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":264,"org.easymock.tests2.UsageConstraintsTest.testMatches":9,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":159,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":432,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":433,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":444,"org.easymock.tests2.UsageConstraintsTest.testNull":4,"org.easymock.tests.LimitationsTest.abstractClass":456,"org.easymock.tests2.EasyMockSupportClassTest.testAll":36,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":183,"org.easymock.tests2.UsageConstraintsTest.greaterThan":10,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":290,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":219,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":60,"org.easymock.tests.UsageExpectAndReturnTest.object":173,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":358,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":70,"org.easymock.tests2.DelegateToTest.testWrongClass":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":424,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":305,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":259,"org.easymock.samples.ExampleTest.voteAgainstRemoval":144,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":196,"org.easymock.tests.UsageVarargTest.varargShortAccepted":296,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":471,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":462,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":371,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":23,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":316,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":233,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":374,"org.easymock.tests2.SerializationTest.testAllMockedMethod":39,"org.easymock.tests2.NameTest.nameForMocksControl":127,"org.easymock.tests.MockingTest.testStrictClassMocking":446,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":211,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":323,"org.easymock.tests2.DelegateToTest.testStubDelegate":47,"org.easymock.tests.LimitationsTest.mockNativeMethod":212,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":454,"org.easymock.tests.UsageUnorderedTest.message":273,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":436,"org.easymock.samples.ExampleTest.answerVsDelegate":142,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":466,"org.easymock.tests.UsageCallCountTest.tooFewCalls":152,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":172,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":41,"org.easymock.tests.UsageVerifyTest.twoReturns":244,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":332,"org.easymock.tests2.DependencyTest.testInterfaceMocking":112,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":167,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":435,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":350,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":304,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":205,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":437,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":353,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":111,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":54,"org.easymock.tests.MockingTest.testTwoMocks":448,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":151,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":249,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":85,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":149,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":321,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":174,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":121,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":381,"org.easymock.tests.UsageThrowableTest.throwCheckedException":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":315,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":441,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":414,"org.easymock.samples.ExampleTest.voteForRemovals":146,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":192,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":8,"org.easymock.tests.ReplayStateInvalidUsageTest.times":221,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":187,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":207,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":322,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":75,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":275,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":422,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":164,"org.easymock.tests2.UsageConstraintsTest.any":56,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":363,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":423,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":171,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":426,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":359,"org.easymock.tests.LimitationsTest.privateConstructor":457,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":84,"org.easymock.tests2.CallbackTest.callback":107,"org.easymock.tests2.NameTest.nameForMock":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":430,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":58,"org.easymock.tests.MockNameTest.defaultName":459,"org.easymock.tests2.SerializationTest.test":51,"org.easymock.tests.UsageExpectAndReturnTest.longType":166,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":95,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":61,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":473,"org.easymock.tests2.UsageTest.niceToStrict":132,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":204,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":162,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":465,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":225,"org.easymock.tests2.UsageTest.strictResetToDefault":129,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":265,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":314,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":81,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":241,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":252,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":170,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":77,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":389,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":11,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":74,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":291,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":209,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":203,"org.easymock.tests2.DelegateToTest.testDelegate":49,"org.easymock.tests2.UsageConstraintsTest.testNotNull":12,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":67,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":366,"org.easymock.tests2.CaptureTest.testCapture_2617107":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":439,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":222,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":368,"org.easymock.tests2.ThreadingTest.testThreadSafe":102,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":135,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":440,"org.easymock.tests.UsageThrowableTest.noUpperLimit":191,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":483,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":37,"org.easymock.tests.UsageExpectAndReturnTest.floatType":165,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":351,"org.easymock.tests2.UsageTest.wrongArguments":131,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":343,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":110,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":237,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":393,"org.easymock.tests.UsageRangeTest.combination":284,"org.easymock.samples.SupportTest.voteForRemovals":404,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":195,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":328,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":13,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":334,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":372,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":177,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":266,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":250,"org.easymock.tests.UsageExpectAndThrowTest.floatType":254,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":330,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":72,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":178,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":361,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":346,"org.easymock.tests.UsageTest.exactCallCountByLastCall":283,"org.easymock.tests2.AnswerTest.stubAnswer":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":356,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":319,"org.easymock.tests.MockingTest.testPartialClassMocking":201,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":179,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":137,"org.easymock.tests2.UsageConstraintsTest.constraints":52,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":109,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":33,"org.easymock.tests.UsageVarargTest.varargLongAccepted":297,"org.easymock.tests.ObjectMethodsTest.testHashCode":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":80,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":82,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":227,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":335,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":419,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":272,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":388,"org.easymock.tests2.DependencyTest.testClassMocking":385,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":22,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":240,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":461,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":370,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":354,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":2,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":234,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":115,"org.easymock.tests.DefaultClassInstantiatorTest.object":274,"org.easymock.tests.UsageVarargTest.differentLength":295,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":438,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests.GenericTest.testPackageScope":288}}]

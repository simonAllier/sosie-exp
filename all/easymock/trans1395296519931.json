[{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[0,1],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:139","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[2,3,4],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1999","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","type":"CtInvocationImpl"},"failures":[6],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[7],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[8,9,10,11,12,13,14,15,16,17],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"value"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[18,19,20,21,22,23],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[24,25,26,27,28,29,30,31,32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:111","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,13,15,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,77,78,78,79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"position":"org.easymock.internal.Range:36","failures":[80,81,82,83,84,33,34,35,85,36,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,24,112,25,113,114,115,116,117,118,119,120,26,27,121,28,122,123,0,124,125,2,1,126,127,128,129,29,30,31,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,20,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,38,39,40,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,41,259,260,261,262,263,264,265,266,267,268,269,42,270,271,272,273,274,275,276,32,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,13,14,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,15,344,43,345,346,347,7,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,44,45,46,47,386,387,48,49,388,389,390,391,392,50,393,51,394,395,396,52,53,54,16,55,397,17,56,57,398,58,399,400,59,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,60,453,454,61,455,456,457,458,459,460,461,462,463,62,464,465,466,467,468,63,469,470,64,65,471,66,67,68,69,472,70,473,474,71,72,73,74,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,75,76,490,77,78,79,491,492,493,494,495,496,497,498,499],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[500,15,344,43],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:105","failures":[80,81,82,83,84,33,34,35,85,36,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,24,112,25,113,114,115,116,117,118,119,120,26,27,121,28,123,0,124,125,2,1,127,128,129,29,30,31,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,20,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,38,39,40,230,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,41,259,260,261,262,263,264,265,266,267,268,269,42,270,271,272,273,274,275,276,32,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,13,14,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,15,344,43,345,346,347,7,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,44,45,46,47,387,48,49,389,390,391,392,50,51,394,396,52,53,54,55,17,56,57,58,399,400,59,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,60,453,454,61,455,456,457,458,459,460,461,462,463,62,464,465,466,467,468,63,469,470,64,65,471,66,67,68,69,472,70,473,474,71,72,73,74,475,476,477,478,479,480,481,485,486,487,488,489,75,76,490,77,77,78,78,79,491,492,493,494,495,496,497,498,499],"status":-1,"binaryOperator":"(java.lang.Class<T>.isInterface()) && (java.lang.reflect.Method[] != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:94","sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","type":"CtReturnImpl"},"failures":[80,81,82,34,35,36,89,90,91,92,93,94,95,96,97,98,99,100,101,102,117,121,128,129,29,30,31,130,142,144,145,146,147,154,20,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,188,189,190,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,222,38,40,239,240,241,255,256,41,260,261,262,263,264,265,266,267,268,32,278,280,281,283,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,310,317,318,319,320,321,322,13,324,330,337,339,340,341,342,343,15,344,345,346,347,7,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,44,45,46,47,387,48,49,389,390,391,51,52,54,55,57,58,399,400,59,401,403,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,60,61,62,63,64,65,471,66,67,68,70,72,73,74,479,480,489,77,77,78,78,79,491,492,493,494,496,498],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:51","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[229],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:39","sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[80,94,104,146,158,159,173,215,216,222,341,342,346,347,349,351,352,358,361,364,371,412,413],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"lastRange":"org.easymock.internal.MocksControl.AT_LEAST_ONCE"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:129","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[80,81,82,130,20,156,158,159,213,214,217,218,501,502,503,339,341,342,408,409,415,416,426,427,428,429],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[504,360,367,372],"status":-1,"binaryOperator":"int < 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[505,506,472],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[80,81,82,83,84,33,34,35,85,36,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,24,112,25,113,114,115,116,117,118,119,120,26,27,121,28,122,123,0,124,125,2,1,126,127,128,129,29,30,31,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,20,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,38,39,40,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,41,259,260,261,262,263,264,265,266,267,268,269,42,270,271,272,273,274,275,276,32,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,13,14,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,15,344,43,345,346,347,7,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,44,45,46,47,386,387,48,49,388,389,390,391,392,50,393,51,394,395,396,52,53,54,16,55,397,17,56,57,398,58,399,400,59,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,60,453,454,61,455,456,457,458,459,460,461,462,463,62,464,465,466,467,468,63,469,470,64,65,471,66,67,68,69,472,70,473,474,71,72,73,74,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,75,76,490,77,78,79,491,492,493,494,495,496,497,498,499],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[80,81,82,89,90,91,92,93,94,95,96,97,98,99,100,101,102,117,121,128,129,29,30,31,130,131,132,133,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,152,154,155,20,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,220,222,223,224,225,226,227,228,234,235,237,238,239,240,241,242,255,256,260,261,262,263,264,265,266,267,268,32,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,310,311,317,318,319,320,321,322,324,330,331,337,338,339,340,341,342,343,344,345,346,347,7,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,44,387,389,390,391,392,399,400,59,401,403,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,426,427,428,429,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,60,471,479,480,488,489,490,491,492,493,494,495,496,498,499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:229","failures":[51,57,61,72,476],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:46","sourceCode":"return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[],"status":-2,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[81,82,130,507,20,158,21,214,217,218,341,409,415,416],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:327","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.EqualsWithDelta:45","sourceCode":"java.lang.StringBuffer.append(((((\"eq(\" + (java.lang.Number)) + \", \") + (java.lang.Number)) + \")\"))","type":"CtInvocationImpl"},"failures":[508],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[504,372],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:337","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[113,117,251],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[231],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:159","failures":[393,509,510,398,473,77,78],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:93","failures":[123,0,1],"status":-1,"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[80,81,82,90,91,94,96,97,128,129,130,131,132,133,135,136,138,139,140,141,142,144,145,146,148,151,155,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,215,216,217,219,222,223,224,225,227,228,38,39,230,255,256,41,260,261,262,263,264,265,274,275,278,280,281,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,310,318,319,320,322,324,330,338,339,340,341,342,343,344,43,345,346,347,7,349,350,351,352,353,354,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,381,382,383,384,385,44,47,387,399,400,59,401,403,405,406,407,408,410,411,412,413,415,417,418,419,422,423,424,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,60,64,65,471,66,67,68,70,479,480,488,489,75,76,490,491,492,493,494,495,496,498,499],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:118","sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object[][int]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:57","sourceCode":"final java.lang.Object java.lang.Object = java.lang.Object[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"arguments":"initArgs","i":"i"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[13,14,511,15,46,49,388,393,395,16,17,398,512,513,514,515,516,517,518,5,450,451,452,60,453,454,61,455,456,457,458,459,460,461,462,463,62,464,465,466,467,468,63,469,470,77,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Any:36","failures":[128,129,130,156,162,163,164,165,166,180,181,182,183,184,255,256,264,339,352,356,431,436,437,442],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[80,81,82,34,35,36,94,96,97,98,99,100,101,102,128,129,130,131,132,133,135,136,137,138,139,140,141,142,144,145,146,154,155,20,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,37,172,173,174,175,176,177,178,179,180,181,182,183,184,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,21,214,215,216,217,218,219,222,223,224,225,226,227,228,38,39,239,240,241,242,519,519,255,256,41,260,261,262,263,264,265,278,280,281,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,310,318,319,320,322,13,324,330,337,338,339,340,341,342,343,15,344,43,345,346,347,7,349,350,351,352,353,354,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,44,45,46,47,387,48,49,389,390,391,392,50,51,52,53,54,55,56,57,58,399,400,59,401,403,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,422,423,424,430,431,432,6,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,60,61,62,63,64,65,471,66,67,68,69,70,71,72,73,74,479,480,488,489,75,76,490,77,78,79,491,492,493,494,495,496,498,499],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[51,57,61,72,476],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[83,84,33,34,35,36,88,123,0,124,125,2,1,127,153,37,229,38,39,40,230,231,236,257,258,41,259,269,42,270,271,272,273,274,275,520,521,522,523,524,13,14,15,43,44,45,46,47,48,49,50,525,51,394,396,52,53,54,55,17,56,57,526,58,399,400,59,450,451,452,60,453,454,61,455,456,457,458,459,460,461,462,463,62,464,465,466,467,468,63,469,470,64,65,66,67,68,69,70,473,474,71,72,73,74,475,476,481,485,75,76,77,77,78,78,79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"result"}},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[15,17],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":7,"org.easymock.tests2.UsageTest.argumentsOrdered":416,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":212,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":383,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":112,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":411,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":490,"org.easymock.tests2.DelegateToTest.testReturnException":318,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":261,"org.easymock.tests.MockingTest.testPartialClassMocking":34,"org.easymock.tests.MockClassControlTest.testToString":270,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":425,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":32,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":458,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":61,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":192,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":501,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":480,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":8,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":354,"org.easymock.tests2.UsageTest.wrongArguments":409,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":180,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":336,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":241,"org.easymock.samples.ExampleTest.answerVsDelegate":492,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":236,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":87,"org.easymock.tests2.UsageConstraintsTest.testNull":350,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":66,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":275,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":382,"org.easymock.tests2.CaptureTest.testPrimitive":6,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":211,"org.easymock.tests.UsageTest.moreThanOneArgument":213,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":471,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":169,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":89,"org.easymock.tests.UsageTest.argumentsOrdered":218,"org.easymock.tests.UsageVarargTest.varargIntAccepted":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":162,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":50,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":483,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":315,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":105,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":166,"org.easymock.tests.ReplayStateInvalidUsageTest.times":251,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":330,"org.easymock.tests2.DependencyTest.testClassMocking":477,"org.easymock.tests2.AnswerTest.answer":419,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":118,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":392,"org.easymock.tests2.CaptureTest.testAnd":430,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":233,"org.easymock.tests2.UsageTest.strictResetToDefault":407,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":395,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":71,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":168,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":96,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":377,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":93,"org.easymock.tests2.DelegateToTest.testDelegate":322,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":207,"org.easymock.tests.LimitationsTest.mockFinalMethod":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":264,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":102,"org.easymock.tests2.DependencyTest.testClassMockingSupport":478,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":189,"org.easymock.tests2.CaptureTest.testCapture1_2446744":433,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":472,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":205,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":390,"org.easymock.tests.UsageThrowableTest.throwError":172,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":245,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":235,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":143,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":316,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":171,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":512,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":470,"org.easymock.samples.PartialClassMockTest.testGetArea":79,"org.easymock.tests.MockingTest.testInterfaceMocking":85,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":246,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":163,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":459,"org.easymock.tests2.UsageTest.niceToStrict":410,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":193,"org.easymock.tests2.ThreadingTest.testChangeDefault":506,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":103,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":5,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":52,"org.easymock.tests2.MockBuilderTest.testCreateMock":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":466,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":333,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":22,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":201,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":378,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":232,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":268,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":220,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":239,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":516,"org.easymock.tests.UsageOverloadedMethodTest.overloading":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":468,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":463,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":281,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":360,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":144,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":296,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":3,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":359,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":438,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":134,"org.easymock.tests2.EasyMockSupportClassTest.testAll":60,"org.easymock.tests.MockClassControlTest.testEquals":274,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":39,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":209,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":520,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":510,"org.easymock.tests2.CaptureTest.testCaptureAll":431,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":391,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":100,"org.easymock.tests.MockNameTest.defaultName":185,"org.easymock.tests2.UsageConstraintsTest.testMatches":361,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":170,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":243,"org.easymock.samples.ExampleTest.voteForRemovals":496,"org.easymock.tests.UsageVarargTest.allKinds":142,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":80,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":101,"org.easymock.samples.BasicClassMockTest.testPrintContent":76,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":178,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":337,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":265,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":312,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":321,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":12,"org.easymock.tests2.UsageConstraintsTest.greaterThan":363,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":453,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":95,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":74,"org.easymock.samples.ExampleTest.voteForRemoval":493,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":127,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":475,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":446,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":237,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":484,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":69,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":406,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":37,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":110,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":375,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":174,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":451,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":260,"org.easymock.tests2.CaptureTest.testCaptureFirst":442,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":317,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":109,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":376,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":418,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":292,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":448,"org.easymock.tests2.CaptureTest.testCapture2_2446744":441,"org.easymock.tests2.UsageTest.moreThanOneArgument":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":119,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":57,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":141,"org.easymock.tests.GenericTest.testBridgedEquals":230,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":517,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":514,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":227,"org.easymock.tests.UsageExpectAndReturnTest.longType":288,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":98,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":373,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":526,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":210,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":147,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":368,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":208,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":187,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":167,"org.easymock.tests.UsageCallCountTest.tooManyCalls":228,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":467,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":293,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":335,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":197,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":177,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":45,"org.easymock.tests.MockingTest.testNiceClassMocking":88,"org.easymock.tests.MockingTest.testClassMocking":84,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":525,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":221,"org.easymock.tests2.UsageConstraintsTest.testContains":358,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":59,"org.easymock.tests2.UsageConstraintsTest.testFind":349,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":146,"org.easymock.tests.MockTypeTest.fromEasyMockClass":234,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":405,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":154,"org.easymock.tests.UsageExpectAndReturnTest.object":295,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":70,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":334,"org.easymock.tests2.ConstraintsToStringTest.equalsWithDeltaToString":508,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":381,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":136,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":9,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":151,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":518,"org.easymock.tests.UsageTest.exactCallCountByLastCall":219,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":108,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":90,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":276,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":14,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":131,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":301,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":280,"org.easymock.tests.MockClassControlTest.testHashCode":273,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":306,"org.easymock.tests2.EasyMockSupportTest.testVerify":385,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":461,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":91,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":267,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":278,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":389,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":402,"org.easymock.tests.UsageVarargTest.varargCharAccepted":135,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":122,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":28,"org.easymock.tests2.UsageTest.openCallCountByLastCall":412,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":384,"org.easymock.tests.DefaultClassInstantiatorTest.object":123,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":266,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":149,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":507,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":462,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":199,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":524,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":175,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":328,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":305,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":72,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":272,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":198,"org.easymock.tests.CapturesMatcherTest.test":519,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":302,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":63,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":271,"org.easymock.tests2.UsageTest.resumeIfFailure":417,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":231,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":482,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":263,"org.easymock.tests2.StubTest.stubWithReturnValue":444,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":16,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":294,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":369,"org.easymock.tests2.SerializationTest.testAllMockedMethod":43,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":117,"org.easymock.samples.SupportTest.voteForRemovals":489,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":23,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":229,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":308,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":204,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":500,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":121,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":420,"org.easymock.tests.UsageExpectAndThrowTest.object":202,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":277,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":366,"org.easymock.tests2.DelegateToTest.testWrongClass":320,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":255,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":256,"org.easymock.tests.UsageStrictMockTest.range":158,"org.easymock.samples.ConstructorCalledMockTest.testTax":77,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":486,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":380,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":44,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":515,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":203,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":450,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":217,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":253,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":240,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":18,"org.easymock.tests2.CaptureTest.testCaptureNone":437,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":31,"org.easymock.tests.UsageUnorderedTest.message":130,"org.easymock.tests.UsageVerifyTest.twoReturns":82,"org.easymock.tests.UsageVarargTest.varargByteAccepted":140,"org.easymock.tests2.ThreadingTest.testThreadSafe":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":464,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":225,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":152,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":75,"org.easymock.tests2.CaptureTest.testCapture_2617107":432,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":191,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":183,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":26,"org.easymock.tests2.UsageConstraintsTest.any":356,"org.easymock.tests2.StubTest.stub":443,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":250,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":27,"org.easymock.tests.UsageExpectAndThrowTest.longType":195,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":262,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":2,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":249,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":340,"org.easymock.tests2.SerializationTest.testClass":15,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":310,"org.easymock.tests.LimitationsTest.mockNativeMethod":41,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":40,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":304,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":523,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":327,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":343,"org.easymock.tests2.NameTest.nameForMocksControl":429,"org.easymock.tests2.MockedExceptionTest.testMockedException":400,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":454,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":216,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":404,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":36,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":196,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":64,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":55,"org.easymock.tests.MockingTest.testNicePartialClassMocking":35,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":68,"org.easymock.tests2.CaptureTest.testCaptureLast":436,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":325,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":49,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":353,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":367,"org.easymock.tests.MockingTest.testTwoMocks":33,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":388,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":285,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":200,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":415,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":371,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":505,"org.easymock.samples.ExampleTest.removeNonExistingDocument":497,"org.easymock.tests.UsageStrictMockTest.differentMethods":159,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":247,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":332,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":307,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":124,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":447,"org.easymock.tests2.MockBuilderTest.testCreateMockString":58,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":455,"org.easymock.tests.UsageExpectAndThrowTest.floatType":194,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":452,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":422,"org.easymock.tests.UsageVerifyTest.twoThrows":81,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":323,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":62,"org.easymock.samples.ExampleTest.voteAgainstRemoval":494,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":25,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":73,"org.easymock.tests.LimitationsTest.privateConstructor":258,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":513,"org.easymock.tests2.UsageConstraintsTest.testNotNull":370,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":399,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":179,"org.easymock.tests2.UsageTest.defaultResetToNice":414,"org.easymock.samples.ExampleTest.voteAgainstRemovals":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":113,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":300,"org.easymock.tests.UsageVarargTest.differentLength":137,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":326,"org.easymock.tests2.CallbackTest.callback":324,"org.easymock.tests2.UsageConstraintsTest.equals":348,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":473,"org.easymock.tests.UsageTest.openCallCountByLastCall":215,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":345,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":182,"org.easymock.tests.UsageCallCountTest.tooFewCalls":223,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":47,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":242,"org.easymock.tests.UsageThrowableTest.throwCheckedException":176,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":19,"org.easymock.tests.MockingTest.testStrictClassMocking":83,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":48,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":46,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":331,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":252,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":387,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":424,"org.easymock.tests.ObjectMethodsTest.testHashCode":150,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":449,"org.easymock.tests2.NameTest.nameForNiceMock":428,"org.easymock.tests2.DependencyTest.testInterfaceMocking":479,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":10,"org.easymock.samples.ExampleTest.addDocument":495,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":465,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.DelegateToTest.testStubDelegate":319,"org.easymock.tests2.AnswerTest.stubAnswer":423,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":156,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":397,"org.easymock.tests.UsageVarargTest.varargLongAccepted":139,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":160,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":24,"org.easymock.tests.UsageExpectAndReturnTest.floatType":287,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":303,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":13,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":78,"org.easymock.tests.UsageThrowableTest.noUpperLimit":173,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":282,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":314,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":364,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":346,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":481,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":434,"org.easymock.tests2.SerializationTest.test":344,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":4,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":286,"org.easymock.tests2.UsageConstraintsTest.testSame":351,"org.easymock.samples.SupportTest.addDocument":488,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":386,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":456,"org.easymock.tests.GenericTest.testPackageScope":38,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":92,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":107,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":313,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":86,"org.easymock.tests2.NameTest.nameForMock":426,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":297,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":398,"org.easymock.tests2.UsageStrictMockTest.differentMethods":342,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":474,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":206,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":148,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":97,"org.easymock.tests2.MockedExceptionTest.testRealException":401,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":238,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":115,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":114,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":339,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":181,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":254,"org.easymock.tests2.NameTest.nameForStrictMock":427,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":396,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":511,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":403,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":67,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":485,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":502,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":125,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":365,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":51,"org.easymock.tests2.UsageStrictMockTest.range":341,"org.easymock.tests2.UsageConstraintsTest.lessThan":372,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":521,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":111,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":11,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":374,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":460,"org.easymock.tests2.CaptureTest.testCaptureRightOne":439,"org.easymock.tests2.UsageConstraintsTest.testOr":352,"org.easymock.tests.UsageRangeTest.combination":94,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":65,"org.easymock.tests.UsageTest.wrongArguments":214,"org.easymock.tests2.MockBuilderTest.testWithConstructor":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":457,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":42,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":290,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":104,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":298,"org.easymock.tests.UsageVarargTest.varargShortAccepted":138,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":1,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":226,"org.easymock.tests2.UsageConstraintsTest.cmpTo":357,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":421,"org.easymock.tests2.CompareToTest.testLessThan":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":106,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":413,"org.easymock.tests2.CaptureTest.testCaptureFromStub":440,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":244,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":394,"org.easymock.tests.UsageTest.unexpectedCallWithArray":21,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":20,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":224,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":509,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":299,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":157,"org.easymock.tests2.UsageConstraintsTest.constraints":347,"org.easymock.samples.ExampleTest.addAndChangeDocument":498,"org.easymock.tests.UsageStrictMockTest.testVerify":161,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":499,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":99,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":435,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":522,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":164,"org.easymock.tests.LimitationsTest.abstractClass":257,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":291,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":165,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":283,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":503,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":132,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":379}}]

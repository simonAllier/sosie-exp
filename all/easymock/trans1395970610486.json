[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.ObjectMethodsFilter:75","type":"CtIfImpl"},"status":-2},{"failures":[0,1],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1176","type":"CtInvocationImpl"},"status":-1},{"failures":[2],"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:157","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"math","position":"org.easymock.internal.EasyMockProperties:116","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.Equals:53","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int , int));\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:342","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"arg":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[3],"variableMapping":{"actual":"actual"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.UnorderedBehavior:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection)","position":"org.easymock.internal.Injector:170","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"java.lang.Long java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.Injection.getAnnotation().java.lang.String()","position":"org.easymock.internal.InjectionPlan:49","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"length"},"name":"replace","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    if (java.lang.Class<?>.isArray()) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n            if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n                return false;\n            } \n            break;\n        } \n    } \n    if (!(java.lang.Class<?>.equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n        return false;\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:193","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>)","position":"org.easymock.internal.Injector:124","type":"CtAssignmentImpl"},"status":-2},{"failures":[4],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","position":"org.easymock.EasyMock:2052","type":"CtForEachImpl"},"status":-1},{"failures":[5,6,7,8,9,10,11,12],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"if ((this.java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","position":"org.easymock.internal.ObjectMethodsFilter:56","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:434","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:538","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:201","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object[], 0, java.lang.Object[], 0, int)","position":"org.easymock.internal.Invocation:63","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"key","properties":"properties","key":"key"},"name":"add","transplant":{"sourceCode":"return ((java.lang.String)(this.java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:120","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1026","type":"mutation","return":"return 0","status":0},{"failures":[13,14],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1304","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:81","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:132","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:352","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","position":"org.easymock.internal.ClassProxyFactory:245","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int > 0","position":"org.easymock.LogicalOperator:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int <= 0","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:148","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ExpectedInvocation = new org.easymock.internal.ExpectedInvocation(org.easymock.internal.Invocation , java.util.List<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.RecordState:78","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return java.lang.Class<?>.getConstructor(new java.lang.Class[0]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    if ((java.lang.Class<?>.getConstructors().int) == 0) {\n        throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n    } \n    return java.lang.Class<?>.getConstructors()[0];\n}","position":"org.easymock.internal.DefaultClassInstantiator:89","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EndsWith(java.lang.String))","position":"org.easymock.EasyMock:1815","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:244","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"mock":"value"},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","position":"org.easymock.internal.MocksControl:160","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException)","position":"org.easymock.internal.Result:86","type":"CtThrowImpl"},"status":-2},{"failures":[15,16,17,18,19],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","position":"org.easymock.internal.RecordState:172","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":-1},{"failures":[20,21,22,23,24,25],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:75","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"[\")","position":"org.easymock.internal.ArgumentToString:45","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.Injector:190","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","position":"org.easymock.internal.MockBuilder:211","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:185","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"candidateMethod","typeVariableMap":"typeVariableMap","this":"this","candidateMethod":"candidateMethod"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","position":"org.easymock.internal.BridgeMethodResolver:141","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","position":"org.easymock.internal.BridgeMethodResolver:145","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"result":"invocation"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : org.easymock.internal.Invocation.getArguments()) {\n    java.util.List<org.easymock.IArgumentMatcher>.add(new org.easymock.internal.matchers.Equals(java.lang.Object));\n}","position":"org.easymock.internal.ExpectedInvocation:61","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{"actual":"expected","expected":"expected","this":"this"},"name":"add","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"status":-2},{"failures":[26],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"status":-1},{"failures":[27,28],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","position":"org.easymock.internal.InjectionPlan:61","type":"CtThrowImpl"},"status":-1},{"failures":[5,5,6,6,29,30,15,31,32,33,34,35,36,16,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,20,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,21,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,0,13,176,177,178,14,1,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,4,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,17,221,18,222,19,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,3,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.ObjectMethodsFilter:94","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result"},"name":"add","transplant":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int >= 0","position":"org.easymock.internal.matchers.GreaterOrEqual:39","type":"CtReturnImpl"},"status":-2},{"failures":[301,302],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.Injection = org.easymock.internal.Injection","position":"org.easymock.internal.Injector:237","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Injection != null) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n} ","position":"org.easymock.internal.Injector:232","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.LastControl.threadToArgumentMatcherStack":"org.easymock.internal.LastControl.threadToCurrentInvocation"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.remove()","position":"org.easymock.internal.LastControl:73","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","position":"org.easymock.EasyMock:2143","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ObjectMethodsFilter:113","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:255","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.remove(org.easymock.internal.InjectionTarget.getTargetField())","position":"org.easymock.internal.Injector:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.matchers.And:54","type":"CtInvocationImpl"},"status":-2},{"failures":[303],"variableMapping":{"result":"m","method":"m"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.ObjectMethodsFilter:76","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:215","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.lang.IllegalArgumentException(((java.lang.Object + \" isn\\'t of type \") + java.lang.Class<?>))","position":"org.easymock.ConstructorArgs:87","type":"CtReturnImpl"},"status":-2},{"failures":[37,42,43,49,50,54,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,134,143,145,146,147,148,149,150,198,204,211,212,213,214,287],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","position":"org.easymock.Capture:80","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.MocksBehavior:194","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:999","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","position":"org.easymock.internal.ExpectedInvocation:81","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","position":"org.easymock.ConstructorArgs:72","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:190","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:353","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","position":"org.easymock.internal.ErrorMessage:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:140","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":-2},{"failures":[1],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Long>(long))","position":"org.easymock.EasyMock:958","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"-5554816464613350531L","position":"org.easymock.internal.ExpectedInvocation:32","type":"CtUnaryOperatorImpl"},"status":0},{"failures":[304,305],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.MocksControl(org.easymock.MockType)","position":"org.easymock.EasyMock:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.EasyMockSupport:519","type":"CtReturnImpl"},"status":-2},{"failures":[1],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1148","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1848","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Double>(double))","position":"org.easymock.EasyMock:919","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"lastInvocationUsed","checkOrder":"lastInvocationUsed"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:177","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":0},{"failures":[306,222],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","position":"org.easymock.EasyMock:560","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","position":"org.easymock.internal.Results:92","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"state":"state","behavior":"behavior"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:213","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","position":"org.easymock.internal.Invocation:110","type":"CtReturnImpl"},"status":-2},{"failures":[21,114,116,117,307,224,226,227,275,277],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","position":"org.easymock.EasyMock:2024","type":"CtForEachImpl"},"status":-1},{"failures":[248],"variableMapping":{"this":"this","mock":"mock","state":"shouldBeUsedInOneThread"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","position":"org.easymock.EasyMock:2096","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:249","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-2},{"failures":[308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327],"binaryOperator":"java.lang.Class<?> != (java.lang.Object.java.lang.Object)","name":"removeConditional","position":"org.easymock.internal.Injector:81","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(((java.util.Comparator<? super T>) + \"(\") + (T))","name":"math","position":"org.easymock.internal.matchers.Compare:47","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","position":"org.easymock.EasyMock:1506","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"genericInterface":"genericType","typeVariableMap":"typeVariableMap","this":"this"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:288","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","position":"org.easymock.internal.BridgeMethodResolver:268","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","position":"org.easymock.internal.InjectionTarget:59","type":"CtInvocationImpl"},"status":-2},{"failures":[229,328],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","position":"org.easymock.internal.MockBuilder:132","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType()))","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"status":-2},{"failures":[306,222],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:147","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object instanceof boolean[]) && ((java.lang.Object == null) || (java.lang.Object instanceof boolean[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof byte[]) && ((java.lang.Object == null) || (java.lang.Object instanceof byte[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof char[]) && ((java.lang.Object == null) || (java.lang.Object instanceof char[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof double[]) && ((java.lang.Object == null) || (java.lang.Object instanceof double[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof float[]) && ((java.lang.Object == null) || (java.lang.Object instanceof float[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof int[]) && ((java.lang.Object == null) || (java.lang.Object instanceof int[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof long[]) && ((java.lang.Object == null) || (java.lang.Object instanceof long[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof short[]) && ((java.lang.Object == null) || (java.lang.Object instanceof short[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if ((java.lang.Object instanceof java.lang.Object[]) && ((java.lang.Object == null) || (java.lang.Object instanceof java.lang.Object[]))) {\n    return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n} else {\n    return org.easymock.internal.matchers.Equals.matches(java.lang.Object);\n}","position":"org.easymock.internal.matchers.ArrayEquals:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"org.easymock.internal.ReflectionUtils.OBJECT_HASHCODE","method":"hashCodeMethod"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:51","type":"CtAssignmentImpl"},"status":-2},{"failures":[15,16,17,221,18,19],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Result:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.Invocation.getMethod();\n    java.lang.reflect.Method.setAccessible(true);\n    return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments());\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException(((((\"Delegation to object [\" + java.lang.Object) + \"] is not implementing the mocked method [\") + (org.easymock.internal.Invocation.getMethod())) + \"]\") , java.lang.IllegalArgumentException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw java.lang.reflect.InvocationTargetException.getCause();\n}","position":"org.easymock.internal.Result:81","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","position":"org.easymock.internal.RecordState:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.ThrowableWrapper.getThrowable().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:46","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:376","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = net.sf.cglib.proxy.Enhancer.createClass()","position":"org.easymock.internal.ClassProxyFactory:184","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Method = java.io.ObjectStreamClass.java.io.ObjectStreamClass.getDeclaredMethod(java.lang.String, new java.lang.Class[]{ java.lang.Class.java.lang.Class });\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"));\n}","position":"org.easymock.internal.DefaultClassInstantiator:180","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"new org.easymock.internal.Range(0 , java.lang.Integer.int)","position":"org.easymock.internal.MocksControl:390","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Range.this(int, int)","position":"org.easymock.internal.Range:32","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.Mock","position":"org.easymock.internal.Injection:59","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":146,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":115,"org.easymock.tests2.MockedExceptionTest.testRealException":214,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":278,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":321,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":89,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":48,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":27,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":174,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":288,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":308,"org.easymock.tests2.UsageConstraintsTest.testContains":183,"org.easymock.tests2.UsageConstraintsTest.testFind":176,"org.easymock.tests.UsageVarargTest.allKinds":96,"org.easymock.tests2.StubTest.stubWithReturnValue":287,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":8,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":238,"org.easymock.tests2.CaptureTest.testCaptureAll":234,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":141,"org.easymock.samples.ExampleTest.addAndChangeDocument":34,"org.easymock.tests2.CaptureTest.testCaptureFromStub":3,"org.easymock.tests.UsageVerifyTest.twoThrows":134,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":327,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":41,"org.easymock.tests2.DelegateToTest.testReturnException":17,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":202,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":187,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":300,"org.easymock.tests2.CaptureTest.testAnd":233,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":138,"org.easymock.tests.UsageStrictMockTest.testVerify":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":82,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":16,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":242,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":86,"org.easymock.tests2.UsageConstraintsTest.testMatches":186,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":59,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":120,"org.easymock.tests2.UsageConstraintsTest.testNull":177,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":257,"org.easymock.tests2.EasyMockSupportClassTest.testAll":282,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":10,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":294,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":90,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":167,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":232,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":39,"org.easymock.tests.UsageThrowableTest.throwError":143,"org.easymock.tests2.UsageConstraintsTest.greaterThan":188,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":44,"org.easymock.tests2.StubTest.stub":286,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":122,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":319,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":106,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":40,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":315,"org.easymock.tests.UsageExpectAndReturnTest.object":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":173,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":297,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":228,"org.easymock.tests.UsageExpectAndThrowTest.object":84,"org.easymock.tests2.DelegateToTest.testWrongClass":18,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":306,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":22,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":70,"org.easymock.tests2.UsageTest.moreThanOneArgument":199,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":81,"org.easymock.samples.ExampleTest.voteAgainstRemoval":32,"org.easymock.tests.UsageTest.wrongArguments":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":61,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":149,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":322,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":125,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":11,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":85,"org.easymock.tests2.UsageTest.defaultResetToNice":205,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":23,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":24,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":317,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":213,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":105,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":249,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":309,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":269,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":250,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":320,"org.easymock.samples.ExampleTest.voteAgainstRemovals":30,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":223,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":28,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":131,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":43,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":97,"org.easymock.tests2.CaptureTest.testCapture1_2446744":237,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":209,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":64,"org.easymock.tests.LimitationsTest.mockNativeMethod":151,"org.easymock.tests2.DelegateToTest.testStubDelegate":221,"org.easymock.tests.UsageUnorderedTest.message":140,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":222,"org.easymock.samples.ExampleTest.answerVsDelegate":15,"org.easymock.samples.ExampleTest.voteForRemoval":31,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":163,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":254,"org.easymock.tests.UsageVerifyTest.twoReturns":135,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":83,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":158,"org.easymock.tests2.DependencyTest.testInterfaceMocking":264,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":38,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":289,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":69,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":292,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":1,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":45,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":160,"org.easymock.tests2.CaptureTest.testCaptureRightOne":243,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":139,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":46,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":211,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":253,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":277,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":130,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":124,"org.easymock.tests2.UsageConstraintsTest.cmpTo":182,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":165,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":7,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":259,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":325,"org.easymock.tests2.MockedExceptionTest.testMockedException":212,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":324,"org.easymock.tests.UsageThrowableTest.throwCheckedException":147,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":93,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":110,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":194,"org.easymock.samples.PartialClassMockTest.testGetArea":35,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":133,"org.easymock.samples.ExampleTest.voteForRemovals":33,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":145,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":99,"org.easymock.samples.ConstructorCalledMockTest.testTax":5,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":185,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":37,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":71,"org.easymock.tests2.UsageTest.argumentsOrdered":207,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":252,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":276,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":50,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":256,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":67,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":159,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":58,"org.easymock.tests2.AnswerTest.answer":251,"org.easymock.tests.MockingTest.testNicePartialClassMocking":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":326,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":155,"org.easymock.tests2.UsageConstraintsTest.any":181,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":312,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":107,"org.easymock.tests2.CaptureTest.testCapture":26,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":112,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":123,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":299,"org.easymock.tests.UsageExpectAndThrowTest.longType":77,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":91,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":219,"org.easymock.tests2.CallbackTest.callback":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":284,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":9,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":296,"org.easymock.tests.UsageTest.argumentsOrdered":56,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":13,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":268,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":184,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":172,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":42,"org.easymock.tests2.MockBuilderTest.testCreateMockString":271,"org.easymock.tests2.CaptureTest.testCaptureNone":241,"org.easymock.tests2.SerializationTest.test":230,"org.easymock.tests.UsageExpectAndReturnTest.longType":157,"org.easymock.tests2.SerializationTest.testClass":229,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":239,"org.easymock.tests2.CaptureTest.testCaptureFirst":245,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":68,"org.easymock.tests2.UsageTest.niceToStrict":201,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":62,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":323,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":66,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":113,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":79,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":193,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":198,"org.easymock.tests2.UsageTest.strictResetToDefault":4,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":87,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":171,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":270,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":280,"org.easymock.tests.GenericTest.testBridgedEquals":303,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":74,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":179,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":161,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":261,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":215,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":189,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":275,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":272,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":73,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":102,"org.easymock.tests2.UsageConstraintsTest.testOr":14,"org.easymock.tests2.DelegateToTest.testDelegate":19,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":247,"org.easymock.tests2.UsageConstraintsTest.testNotNull":195,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":225,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests2.CaptureTest.testCapture_2617107":235,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":311,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":305,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":142,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":150,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":166,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":314,"org.easymock.tests2.ThreadingTest.testThreadSafe":246,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":204,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":109,"org.easymock.tests.UsageThrowableTest.noUpperLimit":144,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":258,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":260,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":298,"org.easymock.tests.UsageExpectAndReturnTest.floatType":156,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":290,"org.easymock.tests2.UsageTest.wrongArguments":200,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":180,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":217,"org.easymock.tests2.UsageConstraintsTest.testSame":178,"org.easymock.tests2.UsageTest.resumeIfFailure":208,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":328,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":137,"org.easymock.tests.UsageOverloadedMethodTest.overloading":98,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":262,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":12,"org.easymock.samples.SupportTest.voteForRemovals":29,"org.easymock.tests.UsageRangeTest.combination":129,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":148,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":313,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":301,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":128,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":6,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":196,"org.easymock.tests.UsageTest.openCallCountByLastCall":53,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":80,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":304,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":127,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":302,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":132,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":192,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":108,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":318,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":224,"org.easymock.tests2.CaptureTest.testPrimitive":236,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":274,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":168,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":88,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":136,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":47,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":103,"org.easymock.tests.UsageExpectAndThrowTest.floatType":76,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":169,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":218,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":273,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":310,"org.easymock.tests2.UsageStrictMockTest.differentMethods":227,"org.easymock.tests.UsageTest.exactCallCountByLastCall":57,"org.easymock.tests2.AnswerTest.stubAnswer":255,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":291,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":153,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":295,"org.easymock.tests2.CaptureTest.testCaptureLast":240,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":75,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":265,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":283,"org.easymock.tests.UsageStrictMockTest.range":116,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":54,"org.easymock.tests.UsageTest.unexpectedCallWithArray":20,"org.easymock.tests.MockingTest.testPartialClassMocking":100,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":170,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":206,"org.easymock.tests2.UsageConstraintsTest.constraints":0,"org.easymock.tests2.UsageConstraintsTest.lessThan":197,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":216,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":55,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":36,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":111,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":121,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":279,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":281,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":220,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":21,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":25,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":92,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":285,"org.easymock.tests2.UsageStrictMockTest.range":226,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":263,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":60,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":94,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":95,"org.easymock.tests.UsageTest.moreThanOneArgument":51,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":104,"org.easymock.tests2.UsageTest.openCallCountByLastCall":203,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":266,"org.easymock.tests.UsageStrictMockTest.differentMethods":117,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":316,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":293,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":175,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":267,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":78,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":119,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":63,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":154,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":72,"org.easymock.tests2.CaptureTest.testCapture2_2446744":244,"org.easymock.tests.GenericTest.testPackageScope":152}}]

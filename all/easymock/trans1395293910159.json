[{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[0,1,2,3,4,5,6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:130","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"methodArgs","args":"methodArgs"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[7,8,9,10,11],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:124","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.MocksControl:105","failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,0,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,1,158,159,160,2,3,161,162,163,164,165,166,167,168,4,169,170,171,172,5,173,174,175,176,6,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,7,276,277,278,279,280,281,282,8,283,284,285,286,287,9,288,289,290,291,292,293,294,295,296,297,298,10,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367],"status":-1,"binaryOperator":"(java.lang.reflect.Method[] != null)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.MocksControl:131","failures":[368],"status":-1,"binaryOperator":"(\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[369,370,337,371],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[372],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[373,374],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[375],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[376,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,42,44,45,70,71,74,95,96,97,377,378,98,99,100,101,108,109,110,111,113,114,115,116,117,118,119,130,131,134,135,138,379,380,381,164,166,173,174,176,194,202,204,205,206,207,208,209,210,211,382,218,219,221,222,224,228,229,231,232,235,236,237,238,240,241,383,384,242,385,386,387,388,389,390,391,244,252,254,255,392,267,393,394,395,396,274,275,7,276,278,279,280,281,282,8,284,285,286,287,9,288,289,290,291,292,293,294,296,297,298,10,301,305,306,307,308,309,310,311,317,324,325,326,327,328,329,330,331,332,333,334,335,370,337,338,339,340,342,344,345,346,349,350,397,398,399,400,356,401,402,403,404,405,406,407,360,362,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.RecordState:324","failures":[115,116,203],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[290,408],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[369,370,337,371],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:255","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[409,410,411,41,42,44,45,131,133,136,137,196,202,203,204,246,247,248,249,252,254,255,340,341,347,348],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:159","failures":[412,413,414,415,416,417,418],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:666","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[396,419],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[8,9,10,11],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:160","sourceCode":"throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())))","type":"CtThrowImpl"},"failures":[420,421,422],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[41,44,423,132,133,136,137,196,203,204,254,341,347,348],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[424,425,376,426,427,428,429,377,430,378,431,107,432,433,434,435,436,437,438,439,440,441,442,379,380,381,443,444,445,446,447,448,449,450,451,382,452,453,412,412,413,413,383,384,385,386,387,454,388,414,455,456,389,390,391,457,458,392,459,460,461,462,463,393,464,465,394,466,467,468,469,470,471,472,473,474,395,475,476,477,478,479,396,480,481,370,371,482,483,397,398,399,400,401,402,484,485,403,486,419,404,487,405,406,488,489,407,490,491,358,359,360],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.LastControl:95","failures":[228,230,238,7,276,279,281,282,283,292,297],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if (int != int) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"length":"i","initArgs":"methodArgs","paramTypes":"methodTypes"}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"failures":[492],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:220","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","type":"CtIfImpl"},"failures":[429,431],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[9,11],"status":-1,"binaryOperator":"int >= 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[369,370,337,371],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[376,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,40,42,43,44,45,46,49,50,55,56,57,58,60,61,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,377,430,431,98,100,101,102,105,438,439,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,131,134,135,136,138,146,147,148,150,151,153,154,155,156,157,189,191,192,196,197,198,199,200,201,202,203,204,451,205,206,207,208,209,210,211,452,453,215,216,217,218,219,220,221,222,223,224,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,383,384,242,385,386,387,388,243,244,251,252,253,254,255,256,267,393,274,275,7,276,278,279,280,281,282,8,284,285,286,287,9,288,289,290,291,292,293,294,295,296,297,298,10,300,301,302,304,305,306,307,308,309,310,311,317,324,325,326,327,328,329,330,332,333,334,335,336,337,371,338,339,340,342,343,344,345,347,349,350,351,353,397,400,356,358,359,360,361,362,365,366,367],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[368,493,494],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:36","failures":[424,425,376,426,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,427,495,496,35,36,428,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,429,377,430,378,431,98,99,100,101,102,103,104,105,106,107,432,433,434,435,436,437,438,439,108,109,110,111,112,113,114,115,116,117,118,119,120,0,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,440,441,442,379,380,139,381,140,141,443,142,143,144,145,497,444,445,446,447,448,449,498,450,146,147,148,149,150,151,152,153,154,155,156,157,1,158,159,160,2,3,161,162,163,164,165,166,167,168,4,169,170,171,172,5,173,174,175,176,6,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,451,205,206,499,207,208,209,210,211,212,213,214,382,452,453,412,413,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,383,384,242,385,386,387,454,368,388,414,455,456,389,390,391,457,458,243,244,245,246,247,248,249,250,251,252,253,254,255,256,392,459,500,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,461,462,463,393,464,465,394,466,467,468,469,470,471,472,473,474,395,475,476,477,478,479,396,480,481,274,275,7,276,277,278,279,280,281,282,8,283,284,285,286,287,9,288,289,290,291,292,293,294,295,296,297,298,10,299,300,301,302,303,304,501,502,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,370,337,371,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,482,420,421,422,483,354,355,397,398,399,400,503,356,401,402,357,484,415,403,486,504,419,404,487,405,505,406,506,488,489,407,418,491,358,359,360,361,362,363,364,365,366,367],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[228,229,230,231,238,239,7,276,278,279,280,281,282,8,283,284,292,293,297,298],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","method":"equalsMethod"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":276,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":130,"org.easymock.tests2.UsageTest.argumentsOrdered":348,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":334,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":318,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":165,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":343,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":216,"org.easymock.tests2.DelegateToTest.testReturnException":300,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":122,"org.easymock.tests.MockingTest.testPartialClassMocking":379,"org.easymock.tests.MockClassControlTest.testToString":434,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":245,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":13,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":469,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":394,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":75,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":409,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":306,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":8,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":70,"org.easymock.tests2.UsageTest.wrongArguments":341,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":273,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":144,"org.easymock.samples.ExampleTest.answerVsDelegate":220,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":428,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":141,"org.easymock.tests2.UsageConstraintsTest.testNull":279,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":385,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":439,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":333,"org.easymock.tests2.CaptureTest.testPrimitive":231,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":74,"org.easymock.tests.UsageTest.moreThanOneArgument":131,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":94,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":242,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":199,"org.easymock.tests.UsageTest.argumentsOrdered":137,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":48,"org.easymock.tests.UsageVarargTest.varargIntAccepted":148,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":207,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":484,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":421,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":322,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":487,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":159,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":211,"org.easymock.tests.ReplayStateInvalidUsageTest.times":184,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":267,"org.easymock.tests2.DependencyTest.testClassMocking":501,"org.easymock.tests2.AnswerTest.answer":362,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":283,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":171,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":260,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":496,"org.easymock.tests2.CaptureTest.testAnd":228,"org.easymock.tests2.UsageTest.strictResetToDefault":339,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":504,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":456,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":198,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":100,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":328,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":52,"org.easymock.tests2.DelegateToTest.testDelegate":304,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":90,"org.easymock.tests.LimitationsTest.mockFinalMethod":426,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":125,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":66,"org.easymock.tests2.DependencyTest.testClassMockingSupport":502,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":67,"org.easymock.tests2.CaptureTest.testCapture1_2446744":232,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":368,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":88,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":258,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":178,"org.easymock.tests.UsageThrowableTest.throwError":111,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":36,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":499,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":323,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":481,"org.easymock.samples.PartialClassMockTest.testGetArea":382,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":179,"org.easymock.tests.MockingTest.testInterfaceMocking":139,"org.easymock.tests2.CompareToTest.testLessOrEqual":492,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":208,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":470,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":107,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":76,"org.easymock.tests2.UsageTest.niceToStrict":342,"org.easymock.tests2.ThreadingTest.testChangeDefault":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":1,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":404,"org.easymock.tests2.MockBuilderTest.testCreateMock":489,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":477,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":270,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":84,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":329,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":495,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":129,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":53,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":142,"org.easymock.tests.UsageOverloadedMethodTest.overloading":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":479,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":474,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":9,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":192,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":108,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":26,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":287,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":237,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":149,"org.easymock.tests.MockClassControlTest.testEquals":438,"org.easymock.tests2.EasyMockSupportClassTest.testAll":393,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":430,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":92,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":417,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":64,"org.easymock.tests2.CaptureTest.testCaptureAll":229,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":259,"org.easymock.tests.MockNameTest.defaultName":188,"org.easymock.tests2.UsageConstraintsTest.testMatches":288,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":6,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":200,"org.easymock.samples.ExampleTest.voteForRemovals":224,"org.easymock.tests.UsageVarargTest.allKinds":157,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":202,"org.easymock.samples.BasicClassMockTest.testPrintContent":453,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":65,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":117,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":250,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":126,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":303,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":319,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":498,"org.easymock.tests2.UsageConstraintsTest.greaterThan":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":464,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":99,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":391,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":450,"org.easymock.samples.ExampleTest.voteForRemoval":221,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":457,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":308,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":37,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":422,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":454,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":451,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":338,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":488,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":162,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":326,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":462,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":121,"org.easymock.tests2.CaptureTest.testCaptureFirst":241,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":161,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":327,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":350,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":195,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":22,"org.easymock.tests2.CaptureTest.testCapture2_2446744":240,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":310,"org.easymock.tests2.UsageTest.moreThanOneArgument":340,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":172,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":156,"org.easymock.tests.GenericTest.testBridgedEquals":431,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":60,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":375,"org.easymock.tests.UsageExpectAndReturnTest.longType":18,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":62,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":324,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":490,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":93,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":0,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":295,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":91,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":197,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":213,"org.easymock.tests.UsageCallCountTest.tooManyCalls":61,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":55,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":478,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":272,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":80,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":116,"org.easymock.tests.MockingTest.testNiceClassMocking":443,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":398,"org.easymock.tests.MockingTest.testClassMocking":441,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":485,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":54,"org.easymock.tests2.UsageConstraintsTest.testContains":286,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":360,"org.easymock.tests2.UsageConstraintsTest.testFind":278,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":110,"org.easymock.tests.MockTypeTest.fromEasyMockClass":35,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":39,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":353,"org.easymock.tests.UsageExpectAndReturnTest.object":25,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":388,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":271,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":332,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":151,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":105,"org.easymock.tests.UsageTest.exactCallCountByLastCall":138,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":3,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":12,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":49,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":459,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":146,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":31,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":191,"org.easymock.tests.MockClassControlTest.testHashCode":437,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":313,"org.easymock.tests2.EasyMockSupportTest.testVerify":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":472,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":50,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":189,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":128,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":257,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":261,"org.easymock.tests.UsageVarargTest.varargCharAccepted":150,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":497,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":176,"org.easymock.tests2.UsageTest.openCallCountByLastCall":344,"org.easymock.tests.DefaultClassInstantiatorTest.object":444,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":335,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":127,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":103,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":473,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":82,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":114,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":265,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":312,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":436,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":389,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":81,"org.easymock.tests.CapturesMatcherTest.test":373,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":32,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":212,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":435,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":396,"org.easymock.tests2.UsageTest.resumeIfFailure":349,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":427,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":420,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":124,"org.easymock.tests2.StubTest.stubWithReturnValue":244,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":505,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":24,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":296,"org.easymock.tests2.SerializationTest.testAllMockedMethod":371,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":170,"org.easymock.samples.SupportTest.voteForRemovals":218,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":315,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":87,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":369,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":175,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":363,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":14,"org.easymock.tests.UsageExpectAndThrowTest.object":85,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":293,"org.easymock.tests2.DelegateToTest.testWrongClass":302,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":205,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":206,"org.easymock.samples.ConstructorCalledMockTest.testTax":412,"org.easymock.tests.UsageStrictMockTest.range":44,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":354,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":331,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":397,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":86,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":461,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":186,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":136,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":143,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":97,"org.easymock.tests2.CaptureTest.testCaptureNone":236,"org.easymock.tests.UsageUnorderedTest.message":196,"org.easymock.tests.UsageVerifyTest.twoReturns":204,"org.easymock.tests.UsageVarargTest.varargByteAccepted":155,"org.easymock.tests2.ThreadingTest.testThreadSafe":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":475,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":58,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":452,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":106,"org.easymock.tests2.CaptureTest.testCapture_2617107":230,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":173,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":73,"org.easymock.tests2.UsageConstraintsTest.any":284,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":183,"org.easymock.tests2.StubTest.stub":243,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":174,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":123,"org.easymock.tests.UsageExpectAndThrowTest.longType":78,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":448,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":182,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":253,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":317,"org.easymock.tests2.SerializationTest.testClass":370,"org.easymock.tests.LimitationsTest.mockNativeMethod":376,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":34,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":378,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":264,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":256,"org.easymock.tests2.NameTest.nameForMocksControl":249,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":266,"org.easymock.tests2.MockedExceptionTest.testMockedException":359,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":465,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":135,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":79,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":352,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":381,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":383,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":406,"org.easymock.tests.MockingTest.testNicePartialClassMocking":380,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":387,"org.easymock.tests2.CompareToTest.testNotComparable":372,"org.easymock.tests2.CaptureTest.testCaptureLast":235,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":262,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":68,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":402,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":282,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":294,"org.easymock.tests.MockingTest.testTwoMocks":442,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":357,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":15,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":83,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":347,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":298,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":494,"org.easymock.samples.ExampleTest.removeNonExistingDocument":225,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":180,"org.easymock.tests.UsageStrictMockTest.differentMethods":45,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":269,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":314,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":446,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":309,"org.easymock.tests2.MockBuilderTest.testCreateMockString":491,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":432,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":466,"org.easymock.tests.UsageExpectAndThrowTest.floatType":77,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":289,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":463,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":365,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":500,"org.easymock.tests.UsageVerifyTest.twoThrows":203,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":190,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":395,"org.easymock.samples.ExampleTest.voteAgainstRemoval":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":166,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":95,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":390,"org.easymock.tests.LimitationsTest.privateConstructor":425,"org.easymock.tests2.UsageConstraintsTest.testNotNull":297,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":118,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":358,"org.easymock.tests2.UsageTest.defaultResetToNice":346,"org.easymock.samples.ExampleTest.voteAgainstRemovals":219,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":167,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":30,"org.easymock.tests.UsageVarargTest.differentLength":152,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":263,"org.easymock.tests2.CallbackTest.callback":227,"org.easymock.tests2.UsageConstraintsTest.equals":277,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":414,"org.easymock.tests.UsageTest.openCallCountByLastCall":134,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":274,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":72,"org.easymock.tests.UsageCallCountTest.tooFewCalls":56,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":400,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":145,"org.easymock.tests.UsageThrowableTest.throwCheckedException":115,"org.easymock.tests.MockingTest.testStrictClassMocking":440,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":401,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":120,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":399,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":268,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":185,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":356,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":367,"org.easymock.tests.ObjectMethodsTest.testHashCode":104,"org.easymock.tests2.CompareToTest.testGreateOrEqual":11,"org.easymock.tests2.NameTest.nameForNiceMock":248,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":311,"org.easymock.tests2.DependencyTest.testInterfaceMocking":305,"org.easymock.samples.ExampleTest.addDocument":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":476,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":480,"org.easymock.tests2.DelegateToTest.testStubDelegate":301,"org.easymock.tests2.AnswerTest.stubAnswer":366,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":42,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":506,"org.easymock.tests.UsageVarargTest.varargLongAccepted":154,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":164,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":33,"org.easymock.tests.UsageExpectAndReturnTest.floatType":17,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":392,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":413,"org.easymock.tests.UsageThrowableTest.noUpperLimit":112,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":193,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":291,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":321,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":275,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":482,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":233,"org.easymock.tests2.SerializationTest.test":337,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":445,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":16,"org.easymock.tests2.UsageConstraintsTest.testSame":280,"org.easymock.samples.SupportTest.addDocument":217,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":503,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":181,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":467,"org.easymock.tests.GenericTest.testPackageScope":377,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":51,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":2,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":320,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":140,"org.easymock.tests2.NameTest.nameForMock":246,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":27,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":418,"org.easymock.tests2.UsageStrictMockTest.differentMethods":255,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":455,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":19,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":89,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":102,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":101,"org.easymock.tests2.MockedExceptionTest.testRealException":361,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":168,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":252,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":187,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":71,"org.easymock.tests2.NameTest.nameForStrictMock":247,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":419,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":351,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":386,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":483,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":447,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":410,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":292,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":403,"org.easymock.tests2.UsageStrictMockTest.range":254,"org.easymock.tests2.UsageConstraintsTest.lessThan":10,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":163,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":471,"org.easymock.tests2.CaptureTest.testCaptureRightOne":238,"org.easymock.tests2.UsageConstraintsTest.testOr":281,"org.easymock.tests.UsageRangeTest.combination":98,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":384,"org.easymock.tests.UsageTest.wrongArguments":133,"org.easymock.tests2.MockBuilderTest.testWithConstructor":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":468,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":433,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":158,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":28,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":449,"org.easymock.tests.UsageVarargTest.varargShortAccepted":153,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":59,"org.easymock.tests2.UsageConstraintsTest.cmpTo":285,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":160,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":345,"org.easymock.tests2.CaptureTest.testCaptureFromStub":239,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":177,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":486,"org.easymock.tests.UsageTest.unexpectedCallWithArray":132,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":41,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":57,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":416,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":29,"org.easymock.tests2.CaptureTest.testCapture":374,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":43,"org.easymock.tests2.UsageConstraintsTest.constraints":7,"org.easymock.samples.ExampleTest.addAndChangeDocument":226,"org.easymock.tests.UsageStrictMockTest.testVerify":47,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":215,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":40,"org.easymock.tests2.CompareToTest.testGreateThan":408,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":63,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":234,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":460,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":209,"org.easymock.tests.LimitationsTest.abstractClass":424,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":21,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":194,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":210,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":411,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":147,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":330}}]

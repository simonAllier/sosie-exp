[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[1,2],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[3,4],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:170","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[5],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1569","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[6,5,7],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:439","failures":[8,9,10],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:773","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:219","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(java.lang.String, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[11,9,12,12,13,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,7,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,11,8,46,9,10,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,3,262,263,1,4,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,12,12,13,13,14,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,16,17,343,344,345,6,346,347,18,348,349,19,350,20,351,352,21,353,23,24,354,25,26,355,356,357,358,359,360,27,361,362,363,364,365,366,367,368,369,28,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,29,387,5,388,30,389,390,7,0,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,479,480],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","constructorArgs":"constructorArgs","this":"this"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[405,407,415,451,452,455,457,458,460,470,475],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:48","sourceCode":"if (org.easymock.internal.MocksControl != null) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl);\n} else {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove();\n}","type":"CtIfImpl"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,11,8,46,9,10,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,481,482,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,3,262,263,1,4,265,266,267,268,269,270,271,272,273,274,275,276,277,278,12,13,14,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,483,318,319,320,484,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,16,343,344,345,6,346,347,348,349,350,20,351,352,353,22,23,24,354,26,355,356,357,358,359,360,27,361,362,363,364,365,366,367,368,369,28,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,386,29,387,5,388,30,389,390,7,0,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,479,480],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[405,407,415,451,452,455,457,458,460,470,475],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[485,451,459,465,477],"status":-1,"binaryOperator":"int >= 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[33,49,63,128,145,146,147,198,199,200,201,202,203,309,334,335,336,337],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[460],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[288,436],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:130","sourceCode":"return (((!(java.lang.reflect.Method.isBridge())) && (!(java.lang.reflect.Method.equals(java.lang.reflect.Method)))) && (java.lang.reflect.Method.getName().equals(java.lang.reflect.Method.getName()))) && ((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","type":"CtReturnImpl"},"failures":[11,8,46,9,10],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[30],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:231","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","type":"CtIfImpl"},"failures":[279,280,285,291,433,439],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[52,486],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[455,460,470,475],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[452],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1349","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[377],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1205","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[33,49,63,128,145,146,147,198,199,200,201,202,203,309,334,335,336,337],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[405,415,452,455,458,460,475],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"m","method":"m"}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[32,47,48,51,72,121,125,126,135,140,149,150,151,152,153,187,215,216,266,267,268,269,270,12,13,303,309,416,449,450,454,455,456,457,463,465,466,468,469,475,476,477],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"value"}},{"transplant":{"position":"org.easymock.EasyMock:556","sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:346","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:603","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.matchers.Equals:53","failures":[118,330,453],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[32,33,34,35,36,39,8,9,47,48,49,50,51,52,67,69,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,113,114,115,116,117,118,119,120,137,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,164,177,178,179,180,182,183,185,186,187,191,192,194,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,220,221,222,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,266,267,268,269,270,271,272,273,274,276,278,12,12,13,13,14,284,290,291,299,300,301,303,304,305,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,347,348,349,20,352,353,354,26,358,27,28,375,378,379,380,381,382,383,386,5,388,30,389,7,0,391,392,393,394,395,396,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,438,439,445,446,447,449,450,451,452,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,480],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"hashCodeMethod","finalizeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[11,10],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:37","sourceCode":"if ((org.easymock.internal.MocksControl.getState()) instanceof org.easymock.internal.RecordState) {\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl);\n} ","type":"CtIfImpl"},"failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,8,46,9,47,48,49,50,51,52,53,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,113,114,115,116,117,118,119,120,137,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,172,173,174,175,176,177,178,179,180,182,187,190,191,192,194,198,199,200,201,202,203,204,205,206,207,208,215,216,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,266,267,268,269,270,271,272,273,274,275,276,278,12,12,13,13,14,279,280,281,282,283,284,290,299,300,301,302,303,304,305,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,344,345,6,346,347,348,20,351,352,353,24,354,26,358,27,28,375,378,379,380,381,382,383,384,386,5,388,30,389,0,391,392,393,394,395,396,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,438,445,446,447,448,449,450,451,452,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,479,480],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[1,487,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"position":"org.easymock.EasyMock:1000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,11,8,46,9,10,488,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,481,482,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,3,262,263,1,4,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,12,13,14,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,489,490,491,311,312,313,314,315,316,317,483,318,319,320,484,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,16,17,343,344,345,6,346,347,18,348,349,19,350,20,351,352,21,353,22,23,24,354,25,26,355,356,357,358,359,360,27,361,362,363,364,365,366,367,368,369,28,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,29,387,5,388,30,389,390,7,0,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,479,480],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1385","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[458],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:269","sourceCode":"net.sf.cglib.proxy.Enhancer.setSuperclass(java.lang.Class<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:273","sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[350],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[11,8,46,9,10,65,66,67,68,148,186,188,189,190,191,192,194,197,209,212,218,219,220,221,222,223,224,225,261,3,262,263,1,4,265,12,12,13,13,14,281,282,310,311,314,315,316,317,319,320,334,335,336,15,16,347,348,349,350,20,351,352,353,23,24,354,26,355,356,357,358,359,360,27,361,362,363,364,365,366,367,368,369,28,370,371,372,373,374,375,376,377,378,379,381,382,383,384,386,29,387,5,388,30,389,390,7,31,479],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"result":"equalsMethod","bridgeMethod":"hashCodeMethod"}},{"position":"org.easymock.internal.Range:44","failures":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,11,8,46,9,10,488,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,481,482,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,3,262,263,1,4,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,12,13,14,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,489,490,491,311,312,313,314,315,316,317,483,318,319,320,484,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,15,16,17,343,344,345,6,346,347,18,348,349,19,350,20,351,352,21,353,22,23,24,354,25,26,355,356,357,358,359,360,27,361,362,363,364,365,366,367,368,369,28,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,29,387,5,388,30,389,390,7,0,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,31,478,479,480],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:42","sourceCode":"return false","type":"CtReturnImpl"},"failures":[492],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:46","sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","type":"CtForImpl"},"failures":[71,72,493,494,114,115,116,117,118,119,120,495,496,344],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":452,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":112,"org.easymock.tests2.UsageTest.argumentsOrdered":331,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":429,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":131,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":326,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":279,"org.easymock.tests2.DelegateToTest.testReturnException":400,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":199,"org.easymock.tests.MockingTest.testPartialClassMocking":191,"org.easymock.tests.MockClassControlTest.testToString":220,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":343,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":110,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":140,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":364,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":27,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":229,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":300,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":459,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":47,"org.easymock.tests2.UsageTest.wrongArguments":324,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":444,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":258,"org.easymock.samples.ExampleTest.answerVsDelegate":272,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":212,"org.easymock.tests2.UsageConstraintsTest.testNull":455,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":196,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":381,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":428,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":225,"org.easymock.tests2.CaptureTest.testPrimitive":408,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":51,"org.easymock.tests.UsageTest.moreThanOneArgument":113,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":248,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":380,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":268,"org.easymock.tests.UsageTest.argumentsOrdered":119,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":204,"org.easymock.tests.UsageVarargTest.varargIntAccepted":168,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":149,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":347,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":490,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":295,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":351,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":153,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":438,"org.easymock.tests.ReplayStateInvalidUsageTest.times":61,"org.easymock.tests2.DependencyTest.testClassMocking":297,"org.easymock.tests2.AnswerTest.answer":0,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":138,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":448,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":482,"org.easymock.tests2.CaptureTest.testAnd":405,"org.easymock.tests2.UsageTest.strictResetToDefault":322,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":5,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":19,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":267,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":423,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":251,"org.easymock.tests2.DelegateToTest.testDelegate":404,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":244,"org.easymock.tests.LimitationsTest.mockFinalMethod":68,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":202,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":158,"org.easymock.tests2.DependencyTest.testClassMockingSupport":298,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":106,"org.easymock.tests2.CaptureTest.testCapture1_2446744":409,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":385,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":242,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":446,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":55,"org.easymock.tests.UsageThrowableTest.throwError":78,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":211,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":488,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":377,"org.easymock.samples.PartialClassMockTest.testGetArea":14,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":56,"org.easymock.tests.MockingTest.testInterfaceMocking":193,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":150,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":179,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":186,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":230,"org.easymock.tests2.UsageTest.niceToStrict":325,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":121,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":20,"org.easymock.tests2.MockBuilderTest.testCreateMock":24,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":372,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":441,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":495,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":238,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":424,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":481,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":36,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":37,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":256,"org.easymock.tests.UsageOverloadedMethodTest.overloading":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":369,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":374,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":465,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":162,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":97,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":226,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":487,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":464,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":414,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":169,"org.easymock.tests.MockClassControlTest.testEquals":224,"org.easymock.tests2.EasyMockSupportClassTest.testAll":358,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":46,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":447,"org.easymock.tests2.CaptureTest.testCaptureAll":406,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":156,"org.easymock.tests.MockNameTest.defaultName":217,"org.easymock.tests2.UsageConstraintsTest.testMatches":466,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":53,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":269,"org.easymock.samples.ExampleTest.voteForRemovals":276,"org.easymock.tests.UsageVarargTest.allKinds":177,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":253,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":157,"org.easymock.samples.BasicClassMockTest.testPrintContent":282,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":84,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":301,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":403,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":203,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":292,"org.easymock.tests2.UsageConstraintsTest.greaterThan":468,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":264,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":359,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":250,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":389,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":265,"org.easymock.samples.ExampleTest.voteForRemoval":273,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":390,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":339,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":213,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":491,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":384,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":148,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":321,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":23,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":128,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":421,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":198,"org.easymock.tests2.CaptureTest.testCaptureFirst":418,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":399,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":127,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":422,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":333,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":165,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":93,"org.easymock.tests2.CaptureTest.testCapture2_2446744":417,"org.easymock.tests2.UsageTest.moreThanOneArgument":323,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":341,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":139,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":354,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":176,"org.easymock.tests.GenericTest.testBridgedEquals":10,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":44,"org.easymock.tests.UsageExpectAndReturnTest.longType":89,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":419,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":154,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":247,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":473,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":146,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":266,"org.easymock.tests.UsageCallCountTest.tooManyCalls":45,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":39,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":373,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":94,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":443,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":234,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":83,"org.easymock.tests.MockingTest.testNiceClassMocking":197,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":315,"org.easymock.tests.MockingTest.testClassMocking":189,"org.easymock.tests2.UsageConstraintsTest.testContains":463,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":38,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":336,"org.easymock.tests2.UsageConstraintsTest.testFind":454,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":228,"org.easymock.tests.MockTypeTest.fromEasyMockClass":210,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":398,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":69,"org.easymock.tests.UsageExpectAndReturnTest.object":96,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":386,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":442,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":427,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":171,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":184,"org.easymock.tests.UsageTest.exactCallCountByLastCall":120,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":32,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":126,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":109,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":205,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":16,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":166,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":102,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":161,"org.easymock.tests.MockClassControlTest.testHashCode":223,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":286,"org.easymock.tests2.EasyMockSupportTest.testVerify":431,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":367,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":206,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":159,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":35,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":445,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":432,"org.easymock.tests.UsageVarargTest.varargCharAccepted":170,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":260,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":144,"org.easymock.tests2.UsageTest.openCallCountByLastCall":327,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":430,"org.easymock.tests.DefaultClassInstantiatorTest.object":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":34,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":236,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":368,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":81,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":436,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":285,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":388,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":222,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":235,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":103,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":145,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":221,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":375,"org.easymock.tests2.UsageTest.resumeIfFailure":332,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":209,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":489,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":201,"org.easymock.tests2.StubTest.stubWithReturnValue":309,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":21,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":474,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":95,"org.easymock.tests2.SerializationTest.testAllMockedMethod":479,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":137,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":496,"org.easymock.samples.SupportTest.voteForRemovals":284,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":11,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":288,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":241,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":143,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":391,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":111,"org.easymock.tests.UsageExpectAndThrowTest.object":239,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":471,"org.easymock.tests2.DelegateToTest.testWrongClass":402,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":215,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":216,"org.easymock.samples.ConstructorCalledMockTest.testTax":12,"org.easymock.tests.UsageStrictMockTest.range":74,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":312,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":426,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":314,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":240,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":352,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":118,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":257,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":493,"org.easymock.tests2.CaptureTest.testCaptureNone":413,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":180,"org.easymock.tests.UsageUnorderedTest.message":52,"org.easymock.tests.UsageVerifyTest.twoReturns":255,"org.easymock.tests.UsageVarargTest.varargByteAccepted":175,"org.easymock.tests2.ThreadingTest.testThreadSafe":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":370,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":42,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":185,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":281,"org.easymock.tests2.CaptureTest.testCapture_2617107":407,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":141,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":50,"org.easymock.tests2.UsageConstraintsTest.any":461,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":60,"org.easymock.tests2.StubTest.stub":308,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":200,"org.easymock.tests.UsageExpectAndThrowTest.longType":232,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":1,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":59,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":304,"org.easymock.tests2.SerializationTest.testClass":31,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":290,"org.easymock.tests.LimitationsTest.mockNativeMethod":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":105,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":9,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":435,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":307,"org.easymock.tests2.NameTest.nameForMocksControl":346,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":437,"org.easymock.tests2.MockedExceptionTest.testMockedException":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":360,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":117,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":397,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":194,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":233,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":378,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":353,"org.easymock.tests.MockingTest.testNicePartialClassMocking":192,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":383,"org.easymock.tests2.CompareToTest.testNotComparable":492,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":433,"org.easymock.tests2.CaptureTest.testCaptureLast":412,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":107,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":458,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":320,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":472,"org.easymock.tests.MockingTest.testTwoMocks":190,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":484,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":237,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":330,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":476,"org.easymock.samples.ExampleTest.removeNonExistingDocument":277,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":440,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":57,"org.easymock.tests.UsageStrictMockTest.differentMethods":75,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":287,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":262,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":340,"org.easymock.tests2.MockBuilderTest.testCreateMockString":26,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":218,"org.easymock.tests.UsageExpectAndThrowTest.floatType":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":361,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":467,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":393,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":17,"org.easymock.tests.UsageVerifyTest.twoThrows":254,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":28,"org.easymock.samples.ExampleTest.voteAgainstRemoval":274,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":132,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":30,"org.easymock.tests.LimitationsTest.privateConstructor":66,"org.easymock.tests2.UsageConstraintsTest.testNotNull":475,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":85,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":334,"org.easymock.tests2.UsageTest.defaultResetToNice":329,"org.easymock.samples.ExampleTest.voteAgainstRemovals":271,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":133,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":101,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":434,"org.easymock.tests.UsageVarargTest.differentLength":172,"org.easymock.tests2.CallbackTest.callback":480,"org.easymock.tests2.UsageConstraintsTest.equals":453,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":29,"org.easymock.tests.UsageTest.openCallCountByLastCall":116,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":449,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":49,"org.easymock.tests.UsageCallCountTest.tooFewCalls":40,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":259,"org.easymock.tests.UsageThrowableTest.throwCheckedException":82,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":494,"org.easymock.tests.MockingTest.testStrictClassMocking":188,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":33,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":319,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":439,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":316,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":62,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":318,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":395,"org.easymock.tests2.CompareToTest.testGreateOrEqual":485,"org.easymock.tests.ObjectMethodsTest.testHashCode":183,"org.easymock.tests2.NameTest.nameForNiceMock":6,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":342,"org.easymock.tests2.DependencyTest.testInterfaceMocking":299,"org.easymock.samples.ExampleTest.addDocument":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":371,"org.easymock.tests2.DelegateToTest.testStubDelegate":401,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":376,"org.easymock.tests2.AnswerTest.stubAnswer":394,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":72,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":22,"org.easymock.tests.UsageVarargTest.varargLongAccepted":174,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":76,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":130,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":104,"org.easymock.tests.UsageExpectAndReturnTest.floatType":88,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":15,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":13,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":469,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":163,"org.easymock.tests.UsageThrowableTest.noUpperLimit":79,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":294,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":450,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":310,"org.easymock.tests2.SerializationTest.test":478,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":410,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":2,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":3,"org.easymock.tests2.UsageConstraintsTest.testSame":456,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":87,"org.easymock.samples.SupportTest.addDocument":283,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":483,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":362,"org.easymock.tests.GenericTest.testPackageScope":8,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":207,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":125,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":293,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":195,"org.easymock.tests2.NameTest.nameForMock":344,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":98,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":25,"org.easymock.tests2.UsageStrictMockTest.differentMethods":306,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":387,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":90,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":243,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":181,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":252,"org.easymock.tests2.MockedExceptionTest.testRealException":337,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":135,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":313,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":134,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":303,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":48,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":64,"org.easymock.tests2.NameTest.nameForStrictMock":345,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":350,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":396,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":382,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":311,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":486,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":470,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":263,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":348,"org.easymock.tests2.UsageStrictMockTest.range":305,"org.easymock.tests2.UsageConstraintsTest.lessThan":477,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":289,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":420,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":129,"org.easymock.tests2.CaptureTest.testCaptureRightOne":415,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":366,"org.easymock.tests2.UsageConstraintsTest.testOr":457,"org.easymock.tests.UsageRangeTest.combination":249,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":379,"org.easymock.tests.UsageTest.wrongArguments":115,"org.easymock.tests2.MockBuilderTest.testWithConstructor":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":363,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":219,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":99,"org.easymock.tests.UsageVarargTest.varargShortAccepted":173,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":4,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":43,"org.easymock.tests2.UsageConstraintsTest.cmpTo":462,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":124,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":328,"org.easymock.tests2.CaptureTest.testCaptureFromStub":416,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":54,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":349,"org.easymock.tests.UsageTest.unexpectedCallWithArray":114,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":71,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":41,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":100,"org.easymock.tests2.UsageConstraintsTest.constraints":451,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":73,"org.easymock.samples.ExampleTest.addAndChangeDocument":278,"org.easymock.tests.UsageStrictMockTest.testVerify":77,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":280,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":70,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":155,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":411,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":151,"org.easymock.tests.LimitationsTest.abstractClass":65,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":92,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":164,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":152,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":425,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":167}}]

[{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:189","sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cls":"parameterType","type":"parameterType"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:252","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:60","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:436","sourceCode":"java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:45","sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(\"\\'%s\\' is not a valid Java identifier.\", java.lang.String))","type":"CtThrowImpl"},"failures":[79],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[9,10,80,81,45,46,82,83,84,85],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1121","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:145","sourceCode":"return java.lang.reflect.Method != null ? org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>) : false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:146","sourceCode":"try {\n    return org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory = new org.easymock.internal.ClassProxyFactory();\n} catch (final java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError) {\n    throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"org.easymock.internal.MocksControl.classProxyFactory"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:99","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[12,86,20,30,87],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.Range:52","failures":[9,10,45,46,82,88,89],"status":-1,"binaryOperator":"(int) == (int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[22,90,91,92],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[21,93,94,95,96,97,98,99,100,101],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:240","sourceCode":"this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"position":"org.easymock.EasyMock:1848","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:68","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[9,103,104,105,106,45,107,108,109,110,111,112,113,114,115,116],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:205","failures":[117,118,4,119,120,18,19,121,21,93,122,123,124,23,125,126,127,24,128,25,94,26,129,95,130,27,131,132,133,96,36,37,38,134,135,136,137],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:127","sourceCode":"try {\n    java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cl":"cl","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[0,138,1,2,139,3,140,117,118,141,4,142,143,5,144,145,6,7,146,147,148,149,8,150,9,10,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,11,12,13,14,15,16,119,17,86,18,19,20,21,202,203,22,204,205,206,207,208,209,210,211,212,213,214,215,216,217,123,23,24,128,25,26,130,27,132,218,219,220,103,221,222,80,81,223,104,105,224,225,133,226,227,228,229,28,29,30,31,32,33,34,96,230,231,35,36,37,38,232,39,233,234,235,236,237,238,239,240,241,242,243,40,41,42,43,244,245,246,106,44,247,45,46,248,47,48,49,50,51,52,249,250,53,54,251,55,56,57,252,58,59,60,61,62,253,254,255,256,257,258,63,65,66,82,107,108,259,260,67,68,69,261,262,83,70,263,264,265,266,267,268,269,270,271,111,112,84,85,113,114,272,273,274,275,276,277,278,279,280,281,282,283,71,72,73,74,75,284,76,285,286,287,288,77,78,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,115,314,315,316,317,318,319,320,321,322,323,324,116],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[325,39,326],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:108","sourceCode":"org.easymock.internal.Invocation.validateCaptures()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:56","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"actual":"invocation"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:234","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","type":"CtThrowImpl"},"failures":[327,328,329,330,331,332,333,334,335,336,326,337,338,339,340,341,342,343,344,345,346,347],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[218,81,237,257,107,330,83,270,85,287,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,316,317,318,319,320,321,348,349,350,324],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:43","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[8,9,10,220,103,104,105,351,352,353,354,106,44,45,46,82,107,108,271,112,113,114,355,356,357,115],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:221","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","type":"CtThrowImpl"},"failures":[358,359,360,361],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[160,164,362],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":160,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":270,"org.easymock.tests2.UsageTest.argumentsOrdered":105,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":256,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":326,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":222,"org.easymock.tests2.StubTest.stubWithReturnValue":237,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":94,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":54,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":142,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":180,"org.easymock.tests2.SerializationTest.testAllMockedMethod":231,"org.easymock.tests2.DelegateToTest.testReturnException":232,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":254,"org.easymock.tests.MockingTest.testPartialClassMocking":67,"org.easymock.samples.SupportTest.voteForRemovals":5,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":134,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":344,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":306,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":121,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":294,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":36,"org.easymock.tests.UsageExpectAndThrowTest.object":304,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":91,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":355,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":7,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":177,"org.easymock.tests2.DelegateToTest.testWrongClass":233,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":97,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":77,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":78,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":166,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":76,"org.easymock.tests2.UsageTest.wrongArguments":103,"org.easymock.tests.UsageStrictMockTest.range":45,"org.easymock.samples.ConstructorCalledMockTest.testTax":117,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":240,"org.easymock.samples.ExampleTest.answerVsDelegate":138,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":212,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":28,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":137,"org.easymock.tests2.UsageConstraintsTest.testNull":162,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":305,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":14,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":214,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":25,"org.easymock.tests2.CaptureTest.testPrimitive":187,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":288,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":313,"org.easymock.tests.UsageTest.moreThanOneArgument":271,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":113,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":239,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":13,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":42,"org.easymock.tests2.CaptureTest.testCaptureNone":192,"org.easymock.tests.UsageUnorderedTest.message":115,"org.easymock.tests.UsageVerifyTest.twoReturns":108,"org.easymock.tests.UsageVarargTest.varargByteAccepted":281,"org.easymock.tests2.ThreadingTest.testThreadSafe":202,"org.easymock.tests.UsageTest.argumentsOrdered":114,"org.easymock.tests.UsageVarargTest.varargIntAccepted":275,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":266,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":144,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":341,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":71,"org.easymock.tests2.CaptureTest.testCapture_2617107":186,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":123,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":345,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":287,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":128,"org.easymock.tests2.UsageConstraintsTest.any":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":329,"org.easymock.tests2.StubTest.stub":236,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":346,"org.easymock.tests.UsageExpectAndThrowTest.longType":297,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":255,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":150,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":229,"org.easymock.tests2.SerializationTest.testClass":96,"org.easymock.tests.LimitationsTest.mockNativeMethod":70,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":156,"org.easymock.tests2.AnswerTest.answer":198,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":62,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":135,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":342,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":155,"org.easymock.tests2.CaptureTest.testAnd":184,"org.easymock.tests2.UsageTest.strictResetToDefault":219,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":86,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":126,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":151,"org.easymock.tests2.NameTest.nameForMocksControl":354,"org.easymock.tests2.MockedExceptionTest.testMockedException":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":41,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":209,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":65,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":85,"org.easymock.tests2.DelegateToTest.testDelegate":234,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":298,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":69,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":11,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":26,"org.easymock.tests.MockingTest.testNicePartialClassMocking":68,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":309,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":16,"org.easymock.tests2.CaptureTest.testCaptureLast":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":257,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":359,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":34,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":165,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":293,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":178,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":358,"org.easymock.tests2.CaptureTest.testCapture1_2446744":188,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":87,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":47,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":307,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":302,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":153,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":104,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":182,"org.easymock.tests.UsageThrowableTest.throwError":314,"org.easymock.tests.UsageStrictMockTest.differentMethods":46,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":102,"org.easymock.tests2.MockBuilderTest.testCreateMockString":132,"org.easymock.tests.UsageExpectAndThrowTest.floatType":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":244,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":173,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":199,"org.easymock.tests.UsageVerifyTest.twoThrows":107,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":122,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":37,"org.easymock.samples.PartialClassMockTest.testGetArea":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":72,"org.easymock.samples.ExampleTest.voteAgainstRemoval":2,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":337,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":19,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":295,"org.easymock.tests2.UsageTest.niceToStrict":221,"org.easymock.tests2.UsageConstraintsTest.testNotNull":181,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":321,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":133,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":327,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":24,"org.easymock.tests2.UsageTest.defaultResetToNice":223,"org.easymock.tests2.MockBuilderTest.testCreateMock":130,"org.easymock.samples.ExampleTest.voteAgainstRemovals":0,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":338,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":58,"org.easymock.tests.UsageVarargTest.differentLength":278,"org.easymock.tests2.CallbackTest.callback":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":120,"org.easymock.tests.UsageTest.openCallCountByLastCall":84,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":303,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":210,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":157,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":350,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":286,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":238,"org.easymock.tests.UsageCallCountTest.tooFewCalls":264,"org.easymock.tests.UsageOverloadedMethodTest.overloading":262,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":324,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":171,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":261,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":55,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":31,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":170,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":193,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":241,"org.easymock.tests.UsageThrowableTest.throwCheckedException":318,"org.easymock.tests2.EasyMockSupportClassTest.testAll":35,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":243,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":311,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":291,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":154,"org.easymock.tests2.CaptureTest.testCaptureAll":185,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":260,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":33,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":30,"org.easymock.tests2.UsageConstraintsTest.testMatches":172,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":32,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":201,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":43,"org.easymock.samples.ExampleTest.voteForRemovals":3,"org.easymock.tests2.NameTest.nameForNiceMock":353,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":204,"org.easymock.tests.UsageVarargTest.allKinds":283,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":82,"org.easymock.tests2.DependencyTest.testInterfaceMocking":6,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":99,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":292,"org.easymock.samples.BasicClassMockTest.testPrintContent":145,"org.easymock.samples.ExampleTest.addDocument":139,"org.easymock.tests2.DelegateToTest.testStubDelegate":39,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":320,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":148,"org.easymock.tests2.AnswerTest.stubAnswer":200,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":258,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":44,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":101,"org.easymock.tests2.UsageConstraintsTest.greaterThan":174,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":129,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":64,"org.easymock.tests.UsageVarargTest.varargLongAccepted":280,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":20,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":336,"org.easymock.samples.ExampleTest.voteForRemoval":1,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":203,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":61,"org.easymock.tests.UsageExpectAndReturnTest.floatType":49,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":21,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":119,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":118,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":361,"org.easymock.tests.UsageThrowableTest.noUpperLimit":315,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":175,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":284,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":218,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":158,"org.easymock.tests2.SerializationTest.test":230,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":189,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":334,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":207,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":316,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":48,"org.easymock.tests2.UsageConstraintsTest.testSame":163,"org.easymock.samples.SupportTest.addDocument":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":253,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":325,"org.easymock.tests2.CaptureTest.testCaptureFirst":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":333,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":208,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":225,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":92,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":250,"org.easymock.tests.GenericTest.testPackageScope":242,"org.easymock.tests2.UsageTest.moreThanOneArgument":220,"org.easymock.tests2.CaptureTest.testCapture2_2446744":196,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":22,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":343,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":331,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":282,"org.easymock.tests2.NameTest.nameForMock":351,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":268,"org.easymock.tests.UsageExpectAndReturnTest.longType":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":289,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":312,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":56,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":179,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":310,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":131,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":40,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":51,"org.easymock.tests.UsageCallCountTest.tooManyCalls":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":308,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":66,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":263,"org.easymock.tests2.MockedExceptionTest.testRealException":228,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":53,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":340,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":339,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":299,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":8,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":319,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":285,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":29,"org.easymock.tests2.NameTest.nameForStrictMock":352,"org.easymock.tests2.UsageConstraintsTest.testContains":169,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":227,"org.easymock.tests2.UsageConstraintsTest.testFind":161,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":83,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":127,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":146,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":15,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":245,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":147,"org.easymock.tests.UsageExpectAndReturnTest.object":251,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":356,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":176,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":17,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":23,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":183,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":213,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":277,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":98,"org.easymock.tests.UsageTest.exactCallCountByLastCall":272,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":259,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":335,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":206,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":100,"org.easymock.tests2.CaptureTest.testCaptureRightOne":194,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":90,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":88,"org.easymock.tests2.UsageConstraintsTest.testOr":164,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":93,"org.easymock.tests.UsageRangeTest.combination":63,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":273,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":12,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":323,"org.easymock.tests.UsageTest.wrongArguments":112,"org.easymock.tests2.MockBuilderTest.testWithConstructor":124,"org.easymock.tests2.EasyMockSupportTest.testVerify":217,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":52,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":328,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":57,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":89,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":349,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":322,"org.easymock.tests.UsageVarargTest.varargShortAccepted":279,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":267,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageConstraintsTest.cmpTo":168,"org.easymock.tests.UsageVarargTest.varargCharAccepted":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":330,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":347,"org.easymock.tests2.UsageTest.openCallCountByLastCall":80,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":81,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":216,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":348,"org.easymock.tests2.CaptureTest.testCaptureFromStub":195,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":125,"org.easymock.tests.UsageTest.unexpectedCallWithArray":111,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":110,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":301,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":317,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":106,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":265,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":252,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":247,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":18,"org.easymock.tests2.UsageConstraintsTest.constraints":159,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":300,"org.easymock.samples.ExampleTest.addAndChangeDocument":140,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":60,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":141,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":246,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":38,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":290,"org.easymock.tests2.UsageTest.resumeIfFailure":224,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":73,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":249,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":136,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":74,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":357,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":211}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:35","sourceCode":"new org.easymock.internal.JavaProxyFactory()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:624","sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:213","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:191","sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:67","sourceCode":"return org.easymock.Mock.java.lang.String()","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1134","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[14,15,16],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"finalizeMethod","bridgeMethod":"finalizeMethod"}},{"position":"org.easymock.EasyMock:1121","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:135","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:111","sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,14,15,16,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,13,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[46,67,246,247,248,249,87,88,89,250,91,94,95,96,251,108,110,111,112,252,121,122,253,152,254,255,178,256,257,258,259,260,261,262,263,196,199,200,201,204,205,206,207,264,210,211,212,219,232],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[250,108,109,111,112,265,152,154,156,266,255,209,211,212],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[267,87,88,111,211],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:392","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:440","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[266],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"failures":[268],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:233","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[269,270,270,271,271,272,273,44,45,274,72,275,276,277,278,279,280,281,282,283,114,115,116,284,149,151,152,154,155,156,285,157,266,254,158,255,286,287,288,289,290,181,14,16,291,187,188,292,189,190,293,260,294,195,295,296,297,261,262,263,245],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[269,17,18,20,298,270,270,271,271,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,299,68,69,70,71,300,301,302,303,304,305,306,307,308,309,275,276,277,278,279,280,310,311,73,75,76,77,78,79,80,81,82,85,86,87,88,89,90,250,91,92,93,94,95,96,97,98,99,100,101,102,103,312,104,105,106,313,251,108,109,110,111,112,113,265,114,115,116,314,252,123,124,125,126,127,128,129,130,315,316,317,318,319,320,321,131,322,323,324,325,326,327,328,132,133,134,135,136,147,148,149,150,151,152,153,154,155,156,285,157,266,254,158,255,159,162,163,168,169,170,171,173,174,175,176,177,287,288,289,290,179,180,181,182,183,185,186,14,15,329,256,330,331,332,257,258,333,334,259,335,336,337,338,291,187,188,292,339,189,190,191,192,193,194,293,195,295,296,297,261,262,263,196,197,198,199,200,202,203,340,204,205,206,207,264,209,210,211,212,213,341,342,343,344,214,345,216,346,217,218,219,220,221,222,223,224,13,225,226,227,228,229,230,231,232,233,234,235,236,237,239,240,241,242,347,243,245],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[159,161,169,219,220,222,224,13,348,235,240],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"c"}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[235],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[269,270,270,271,271,272,273,44,45,274,72,276,281,282,283,114,115,116,149,151,152,154,155,156,285,157,266,254,158,255,287,288,289,290,181,14,16,349,350,351,352,291,187,188,292,189,190,353,293,354,260,294,195,295,296,297,261,262,355,263,245],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[356],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1052","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:190","failures":[357,358,359,52,53,54,57,58,59,60,61,67,299,68,69,70,360,73,75,76,77,78,79,80,81,82,85,86,88,89,90,92,93,96,106,109,111,112,124,125,128,130,135,152,155,157,254,158,255,159,160,162,163,166,167,168,169,170,171,172,173,174,175,177,181,183,14,15,329,256,330,331,332,257,258,333,334,259,335,336,338,195,196,197,198,200,202,203,340,206,207,209,211,212,214,345,216,346,217,218,219,220,221,222,223,224,13,225,226,227,228,229,230,231,232,233,234,235,236,237,239,240,241,242],"status":-1,"binaryOperator":"(java.lang.Object instanceof java.lang.Number)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[361,14,15,16],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[362],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1106","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:83","sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[269,274,281,282,285,14,293,354,260,294,195,296,297,262,355,263],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[220,221,348,226],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:157","failures":[363],"status":-1,"binaryOperator":"(java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:141","sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","type":"CtThrowImpl"},"failures":[364],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:159","sourceCode":"if ((java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[365,364,245,366],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[46,249,87,88,250,91,94,95,313,108,111,199,204,205,211],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:120","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","type":"CtAssignmentImpl"},"failures":[367],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:137","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[368,369,363,301],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[13],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[105,182],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:55","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:556","sourceCode":"final org.easymock.internal.MocksControl org.easymock.internal.MocksControl = org.easymock.internal.LastControl.org.easymock.internal.LastControl.lastControl()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[370],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:166","sourceCode":"java.lang.StringBuilder.append(\"\\n  Expectation failure on verify:\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[267,87,88,111,211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[269,270,270,271,271,272,273,371,44,45,274,372,72,300,373,374,375,368,376,377,275,276,277,278,279,280,310,311,281,282,378,379,283,114,115,116,380,284,381,382,149,383,151,152,154,155,156,285,157,384,385,266,254,158,255,386,286,387,388,389,287,390,391,288,392,393,394,395,396,397,398,399,400,289,401,402,403,404,405,290,406,407,179,180,181,14,16,408,349,409,350,351,352,291,187,188,292,189,190,353,293,354,260,294,410,195,295,296,297,411,261,262,412,355,263,413,414,245,366],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":220,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":89,"org.easymock.tests2.UsageTest.argumentsOrdered":205,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":335,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":201,"org.easymock.tests2.DelegateToTest.testReturnException":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":98,"org.easymock.tests.MockingTest.testPartialClassMocking":114,"org.easymock.tests.MockClassControlTest.testToString":277,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":359,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":395,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":24,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":288,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":345,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":81,"org.easymock.tests2.UsageTest.wrongArguments":199,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":6,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":303,"org.easymock.samples.ExampleTest.answerVsDelegate":18,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":282,"org.easymock.tests2.UsageConstraintsTest.testNull":222,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":154,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":259,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":311,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":408,"org.easymock.tests2.CaptureTest.testPrimitive":162,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":85,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":43,"org.easymock.tests.UsageTest.moreThanOneArgument":90,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":128,"org.easymock.tests.UsageTest.argumentsOrdered":95,"org.easymock.tests.UsageVarargTest.varargIntAccepted":139,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":132,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":293,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":295,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":136,"org.easymock.tests.ReplayStateInvalidUsageTest.times":325,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":338,"org.easymock.tests2.MockBuilderTest.testWithConstructor_Twice":268,"org.easymock.tests2.AnswerTest.answer":183,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":348,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":344,"org.easymock.tests2.CaptureTest.testAnd":159,"org.easymock.tests2.UsageTest.strictResetToDefault":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":266,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":367,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":127,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":68,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":332,"org.easymock.tests2.DelegateToTest.testDelegate":194,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":39,"org.easymock.tests.LimitationsTest.mockFinalMethod":383,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":101,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":309,"org.easymock.tests2.CaptureTest.testCapture1_2446744":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":342,"org.easymock.tests.UsageThrowableTest.throwError":73,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":320,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":12,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":247,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":130,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":407,"org.easymock.samples.PartialClassMockTest.testGetArea":269,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":321,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":133,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":396,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":25,"org.easymock.tests2.UsageTest.niceToStrict":200,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":284,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":195,"org.easymock.tests2.MockBuilderTest.testCreateMock":261,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":403,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":5,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":33,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":257,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":301,"org.easymock.tests.UsageOverloadedMethodTest.overloading":124,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":405,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":400,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":105,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":230,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":123,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":58,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":229,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":369,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":168,"org.easymock.tests2.EasyMockSupportClassTest.testAll":287,"org.easymock.tests.MockClassControlTest.testEquals":310,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":41,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":349,"org.easymock.tests2.CaptureTest.testCaptureAll":160,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":307,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":343,"org.easymock.tests2.UsageConstraintsTest.testMatches":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":129,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":318,"org.easymock.samples.ExampleTest.voteForRemovals":22,"org.easymock.tests.UsageVarargTest.allKinds":146,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":86,"org.easymock.samples.BasicClassMockTest.testPrintContent":273,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":308,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":79,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":264,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":102,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":10,"org.easymock.tests2.UsageConstraintsTest.greaterThan":233,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":390,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":299,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":255,"org.easymock.samples.ExampleTest.voteForRemoval":19,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":377,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":386,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":174,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":412,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":285,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":72,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":196,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":411,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":330,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":388,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":97,"org.easymock.tests2.CaptureTest.testCaptureFirst":172,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":331,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":207,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":313,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":54,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":176,"org.easymock.tests2.CaptureTest.testCapture2_2446744":171,"org.easymock.tests2.UsageTest.moreThanOneArgument":198,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":262,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":145,"org.easymock.tests.GenericTest.testBridgedEquals":372,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":121,"org.easymock.tests.UsageExpectAndReturnTest.longType":50,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":305,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":329,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":42,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":355,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":238,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":360,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":40,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":126,"org.easymock.tests.UsageCallCountTest.tooManyCalls":122,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":404,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":55,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":78,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":187,"org.easymock.tests.MockingTest.testNiceClassMocking":380,"org.easymock.tests.MockingTest.testClassMocking":379,"org.easymock.tests2.UsageConstraintsTest.testContains":228,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":314,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":354,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":181,"org.easymock.tests2.UsageConstraintsTest.testFind":221,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":125,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":244,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":251,"org.easymock.tests.UsageExpectAndReturnTest.object":57,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":157,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":334,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":141,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":317,"org.easymock.tests.UsageTest.exactCallCountByLastCall":96,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":70,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":366,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":137,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":63,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":104,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":7,"org.easymock.tests.MockClassControlTest.testHashCode":280,"org.easymock.tests2.EasyMockSupportTest.testVerify":337,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":398,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":103,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":248,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":341,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":347,"org.easymock.tests.UsageVarargTest.varargCharAccepted":140,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":208,"org.easymock.tests2.UsageTest.openCallCountByLastCall":202,"org.easymock.tests.DefaultClassInstantiatorTest.object":300,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":336,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":315,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":399,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":31,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":76,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":352,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":254,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":279,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":30,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":64,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":278,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":290,"org.easymock.tests2.UsageTest.resumeIfFailure":206,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":281,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":100,"org.easymock.tests2.StubTest.stubWithReturnValue":216,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":365,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":56,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":239,"org.easymock.tests2.SerializationTest.testAllMockedMethod":16,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":0,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":371,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":36,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":361,"org.easymock.tests.UsageExpectAndThrowTest.object":34,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":236,"org.easymock.tests2.DelegateToTest.testWrongClass":193,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":147,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":148,"org.easymock.tests.UsageStrictMockTest.range":111,"org.easymock.samples.ConstructorCalledMockTest.testTax":270,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":333,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":291,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":387,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":94,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":327,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":302,"org.easymock.tests2.CaptureTest.testCaptureNone":167,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":358,"org.easymock.tests.UsageUnorderedTest.message":46,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":246,"org.easymock.tests.UsageVerifyTest.twoReturns":88,"org.easymock.tests.UsageVarargTest.varargByteAccepted":144,"org.easymock.tests2.ThreadingTest.testThreadSafe":173,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":401,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":120,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":272,"org.easymock.tests2.CaptureTest.testCapture_2617107":161,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":84,"org.easymock.tests2.UsageConstraintsTest.any":226,"org.easymock.tests2.StubTest.stub":215,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":324,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":99,"org.easymock.tests.UsageExpectAndThrowTest.longType":27,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":368,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":323,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":210,"org.easymock.tests2.SerializationTest.testClass":14,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":346,"org.easymock.tests.LimitationsTest.mockNativeMethod":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":66,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":274,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":2,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":351,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":213,"org.easymock.tests2.MockedExceptionTest.testMockedException":180,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":3,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":391,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":93,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":116,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":28,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":151,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":297,"org.easymock.tests.MockingTest.testNicePartialClassMocking":115,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":156,"org.easymock.tests2.CaptureTest.testCaptureLast":166,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":150,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":190,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":13,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":237,"org.easymock.tests.MockingTest.testTwoMocks":283,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":47,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":32,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":204,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":241,"org.easymock.samples.ExampleTest.removeNonExistingDocument":298,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":131,"org.easymock.tests.UsageStrictMockTest.differentMethods":112,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":4,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":8,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":374,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":175,"org.easymock.tests2.MockBuilderTest.testCreateMockString":263,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":275,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":392,"org.easymock.tests.UsageExpectAndThrowTest.floatType":26,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":389,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":184,"org.easymock.tests.UsageVerifyTest.twoThrows":87,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":312,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":289,"org.easymock.samples.ExampleTest.voteAgainstRemoval":20,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":370,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":158,"org.easymock.tests.LimitationsTest.privateConstructor":382,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":362,"org.easymock.tests2.UsageConstraintsTest.testNotNull":240,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":179,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":80,"org.easymock.tests2.UsageTest.defaultResetToNice":340,"org.easymock.samples.ExampleTest.voteAgainstRemovals":17,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":62,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":1,"org.easymock.tests.UsageVarargTest.differentLength":253,"org.easymock.tests2.CallbackTest.callback":178,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":384,"org.easymock.tests.UsageTest.openCallCountByLastCall":92,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":217,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":83,"org.easymock.tests.UsageCallCountTest.tooFewCalls":118,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":292,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":304,"org.easymock.tests.UsageThrowableTest.throwCheckedException":77,"org.easymock.tests.MockingTest.testStrictClassMocking":378,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":189,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":71,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":188,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":326,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":339,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":186,"org.easymock.tests.ObjectMethodsTest.testHashCode":316,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":177,"org.easymock.tests2.DependencyTest.testInterfaceMocking":214,"org.easymock.samples.ExampleTest.addDocument":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":406,"org.easymock.tests2.DelegateToTest.testStubDelegate":192,"org.easymock.tests2.AnswerTest.stubAnswer":185,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":109,"org.easymock.tests.UsageVarargTest.varargLongAccepted":143,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":113,"org.easymock.tests.UsageExpectAndReturnTest.floatType":49,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":65,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":245,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":271,"org.easymock.tests.UsageThrowableTest.noUpperLimit":74,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":234,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":218,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":413,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":164,"org.easymock.tests2.SerializationTest.test":15,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":363,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":373,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":48,"org.easymock.tests2.UsageConstraintsTest.testSame":223,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":322,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":393,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":11,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":59,"org.easymock.tests2.UsageStrictMockTest.differentMethods":212,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":385,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":51,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":38,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":69,"org.easymock.tests2.MockedExceptionTest.testRealException":182,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":364,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":209,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":82,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":328,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":410,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":155,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":414,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":235,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":375,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":260,"org.easymock.tests2.UsageStrictMockTest.range":211,"org.easymock.tests2.UsageConstraintsTest.lessThan":242,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":409,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":9,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":353,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":397,"org.easymock.tests2.CaptureTest.testCaptureRightOne":169,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":356,"org.easymock.tests2.UsageConstraintsTest.testOr":224,"org.easymock.tests.UsageRangeTest.combination":67,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":152,"org.easymock.tests.UsageTest.wrongArguments":91,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":394,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":276,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":52,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":60,"org.easymock.tests.UsageVarargTest.varargShortAccepted":142,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":376,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":252,"org.easymock.tests2.UsageConstraintsTest.cmpTo":227,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":203,"org.easymock.tests2.CaptureTest.testCaptureFromStub":170,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":319,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":294,"org.easymock.tests.UsageTest.unexpectedCallWithArray":250,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":108,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":119,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":61,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":110,"org.easymock.tests2.UsageConstraintsTest.constraints":219,"org.easymock.samples.ExampleTest.addAndChangeDocument":23,"org.easymock.tests.UsageStrictMockTest.testVerify":265,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":107,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":306,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":134,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":350,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":53,"org.easymock.tests.LimitationsTest.abstractClass":381,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":135,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":106,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":138,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":258,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":267}}]

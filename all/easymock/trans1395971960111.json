[{"failures":[0],"variableMapping":{"it":"it","buffer":"buffer"},"name":"add","transplant":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.Or:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-1},{"failures":[1],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:250","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"-7104607303959381785L","position":"org.easymock.internal.matchers.Find:28","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5160559075998939348L","position":"org.easymock.internal.matchers.Not:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.lang.Thread) != java.lang.Thread.(java.lang.Thread.currentThread())) {\n    throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError((((\"\\n Mock isn\\'t supposed to be called from multiple threads. Last: \" + (java.lang.Thread)) + \" Current: \") + java.lang.Thread.(java.lang.Thread.currentThread()))));\n} ","position":"org.easymock.internal.MocksBehavior:198","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int]);\n    if (java.lang.Class<?> != null) {\n        java.lang.Class<?>[][int] = java.lang.Class<?>;\n    } else {\n        java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader());\n    }\n}","position":"org.easymock.internal.MethodSerializationWrapper:67","type":"CtForImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"variableMapping":{"type":"hostClass"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:67","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"constructor":"constructor","params":"params"},"name":"replace","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[])","position":"org.easymock.internal.DefaultClassInstantiator:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:54","type":"CtTryImpl"},"status":-2},{"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int <= int ; int++) {\n    final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation);\n    java.util.List<org.easymock.internal.ErrorMessage>.addAll(java.util.List<org.easymock.internal.ErrorMessage>);\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n        if (org.easymock.internal.ErrorMessage.isMatching()) {\n            int++;\n        } \n    }\n}","position":"org.easymock.internal.MocksBehavior:127","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (java.lang.Object instanceof java.lang.String) && ((((java.lang.String)(java.lang.Object)).indexOf(java.lang.String)) >= 0)","position":"org.easymock.internal.matchers.Contains:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.ExpectedInvocationAndResults>()","position":"org.easymock.internal.UnorderedBehavior:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int int = 0","position":"org.easymock.internal.Results:64","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl() : org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","position":"org.easymock.ConstructorArgs:60","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.readObject(org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.getSerializedBytes(java.lang.Class<?>));\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException);\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:41","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.ExpectedInvocationAndResult:41","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","position":"org.easymock.internal.RecordState:253","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{"number":"number"},"name":"add","transplant":{"sourceCode":"return java.lang.Number.longValue()","position":"org.easymock.internal.RecordState:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.intValue()","position":"org.easymock.internal.RecordState:199","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((T)(net.sf.cglib.proxy.Factory))","position":"org.easymock.internal.ClassProxyFactory:247","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"java.lang.Integer.MAX_VALUE":"currentPosition","maximum":"currentPosition"},"name":"add","transplant":{"sourceCode":"return int == int","position":"org.easymock.internal.Range:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > (int)) {\n    return true;\n} ","position":"org.easymock.internal.Results:56","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","position":"org.easymock.internal.RecordState:97","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:325","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Properties.load(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-9054190871232972342L","position":"org.easymock.internal.ClassProxyFactory:53","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[42,43,44,33,45,46,34,35,47,48,49,50,51,41,52,53,54,55,56],"variableMapping":{"actual":"invocation"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-1},{"failures":[57,58,59],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.easymock.internal.ObjectMethodsFilter:121","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.Invocation:221","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","position":"org.easymock.internal.ReplayState:62","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:231","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.IOException java.io.IOException","position":"org.easymock.internal.AndroidClassProxyFactory:57","type":"CtLocalVariableImpl"},"status":-2},{"failures":[60,61],"variableMapping":{"state":"state"},"name":"replace","transplant":{"sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:325","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type))","position":"org.easymock.internal.BridgeMethodResolver:269","type":"CtLocalVariableImpl"},"status":-2},{"failures":[62,60],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","position":"org.easymock.EasyMock:2159","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(\"Fail to instantiate mock for \" + java.lang.Class<T>)","name":"math","position":"org.easymock.internal.AndroidClassProxyFactory:53","type":"mutation","status":-2},{"failures":[],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:116","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","position":"org.easymock.internal.LastControl:119","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>","position":"org.easymock.ConstructorArgs:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.io.IOException java.io.IOException","position":"org.easymock.internal.EasyMockProperties:66","type":"CtLocalVariableImpl"},"status":-2},{"failures":[63,64],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","position":"org.easymock.EasyMock:2170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","position":"org.easymock.EasyMock:2189","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.io.IOException)","position":"org.easymock.internal.DefaultClassInstantiator:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Invocation:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:224","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException((\"last method called on mock cannot throw \" + (java.lang.Throwable.getClass().getName()))))","position":"org.easymock.internal.RecordState:269","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.specification.version\")","position":"org.easymock.internal.ClassInstantiatorFactory:48","type":"CtReturnImpl"},"status":-2},{"failures":[65,66,67,68],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ClassProxyFactory:120","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","position":"org.easymock.internal.RecordState:85","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","position":"org.easymock.internal.LastControl:61","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","position":"org.easymock.internal.MocksControl:334","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"case ALL :\n    java.util.List<T>.add(T);\n    break;","position":"org.easymock.Capture:108","type":"CtCaseImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","position":"org.easymock.internal.MockBuilder:201","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","position":"org.easymock.internal.MockBuilder:188","type":"CtReturnImpl"},"status":0},{"failures":[2,3,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,43,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,32,33,45,136,137,138,34,35,48,139,140,141,142,36,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,65,181,182,183,184,185,186,187,188,189,190,191,192,193,67,194,195,196,197,68,198,199,200,201,50,202,203,204,205,9,206,207,208,209,210,211,212,213,214,40,41,52,57,58,59,215,21,216,217,218,219,220,221,222,223,224,225,226,227,228,229,62,60,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.Results:50","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.ExpectedInvocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.org.easymock.internal.LastControl.pullMatchers()","position":"org.easymock.internal.RecordState:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.makeThreadSafe(boolean)","position":"org.easymock.internal.MocksControl:240","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>.getSigners()) != null) {\n    net.sf.cglib.proxy.Enhancer.setNamingPolicy(org.easymock.internal.ClassProxyFactory.net.sf.cglib.core.NamingPolicy);\n} ","position":"org.easymock.internal.ClassProxyFactory:273","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","position":"org.easymock.internal.matchers.NotNull:40","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!boolean) {\n    return java.lang.Object[] == null ? org.easymock.internal.Invocation.java.lang.Object[] : java.lang.Object[];\n} ","position":"org.easymock.internal.Invocation:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","position":"org.easymock.internal.DefaultClassInstantiator:185","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.TestSubject != null) {\n    org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n    continue;\n} ","position":"org.easymock.internal.Injector:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Object = java.lang.reflect.Field.get(java.lang.Object);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","position":"org.easymock.internal.Injector:73","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior = new org.easymock.internal.MocksBehavior(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","position":"org.easymock.internal.MocksControl:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"try {\n    java.lang.Object.getClass().getDeclaredMethod(\"toString\", ((java.lang.Class[])(null))).getModifiers();\n    return true;\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    return false;\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    return false;\n}","position":"org.easymock.internal.Invocation:180","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Equals:38","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"continue","position":"org.easymock.internal.Injector:110","type":"CtContinueImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getAllDeclaredMethods(java.lang.reflect.Method.getDeclaringClass())","position":"org.easymock.internal.BridgeMethodResolver:78","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","position":"org.easymock.internal.InjectionPlan:32","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Equals:44","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<T>, java.lang.String, java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:88","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.Or:48","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl"},"status":0},{"failures":[2,275,276,3,69,70,78,79,80,9,21,244,246,247,256,257,258,259,263,264,265,266,267,268,269,277,270,271,272,273,274],"variableMapping":{"controls":"controls"},"name":"replace","transplant":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : this.java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","position":"org.easymock.EasyMockSupport:541","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.verify();\n}","position":"org.easymock.EasyMockSupport:561","type":"CtForEachImpl"},"status":-1},{"failures":[278,279,280],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1396","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","name":"name","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:155","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:466","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.Invocation:187","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.ClassNotFoundException)","position":"org.easymock.internal.DefaultClassInstantiator:47","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?>.setAccessible(true)","position":"org.easymock.internal.ClassProxyFactory:205","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"status":-2},{"failures":[281,282,283],"binaryOperator":"(java.lang.Class<?>.getConstructors().int) == 0","name":"removeConditional","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"mutation","status":-1},{"failures":[83,284,91,285,286,287,288,289,93,290,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,291,34,145,147,148,149,150,151,152,200,292,293,294,206,295,261],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:297","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:265","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"result","equalsMethod":"result"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:50","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","position":"org.easymock.internal.BridgeMethodResolver:88","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","position":"org.easymock.internal.MocksControl:183","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","position":"org.easymock.internal.matchers.Equals:63","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-658998692584342514L","position":"org.easymock.internal.matchers.StartsWith:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-8447010713532143168L","position":"org.easymock.internal.matchers.CompareTo:30","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.matchers.Captures<?>.setPotentialValue(null)","position":"org.easymock.internal.Invocation:174","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.easymock.internal.Invocation:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:365","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"expected":"value"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method.invoke(java.lang.Object, org.easymock.internal.Invocation.getArguments())","position":"org.easymock.internal.Result:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:97","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.AndroidSupport.boolean","position":"org.easymock.internal.AndroidSupport:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:249","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:100","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object == null","position":"org.easymock.internal.matchers.Null:35","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method","finalizeMethod":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","position":"org.easymock.internal.AndroidClassProxyFactory:90","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:346","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.InputStream.close()","position":"org.easymock.internal.EasyMockProperties:70","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectByType(java.lang.Object, java.util.List<java.lang.reflect.Field>, org.easymock.internal.InjectionPlan.getUnqualifiedInjections())","position":"org.easymock.internal.Injector:153","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.Range(1)","position":"org.easymock.internal.MocksControl:380","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((int) <= int) && (int <= (int))","position":"org.easymock.internal.Range:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mocks":"methodArgs"},"name":"replace","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:113","type":"CtIfImpl"},"status":-2},{"failures":[296,297,298,299],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"null\")","position":"org.easymock.internal.ArgumentToString:35","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int))","position":"org.easymock.ConstructorArgs:61","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","position":"org.easymock.internal.ReflectionUtils:148","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Character>(org.easymock.Capture<java.lang.Character>))","position":"org.easymock.EasyMock:1999","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.Result != null) {\n    org.easymock.internal.Invocation.validateCaptures();\n    org.easymock.internal.Invocation.clearCaptures();\n    return org.easymock.internal.Result;\n} ","position":"org.easymock.internal.MocksBehavior:107","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.RecordState:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:50","type":"CtInvocationImpl"},"status":-2},{"failures":[300],"variableMapping":{"actual":"result"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","position":"org.easymock.EasyMock:2124","type":"CtIfImpl"},"status":-1},{"failures":[179,182],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.matchers.And:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.IArgumentMatcher.matches(java.lang.Object)) {\n    return true;\n} ","position":"org.easymock.internal.matchers.Or:39","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","position":"org.easymock.internal.EasyMockProperties:63","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Invalid key (\" + java.lang.String)","name":"math","position":"org.easymock.internal.EasyMockProperties:116","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.remove()","position":"org.easymock.internal.LastControl:51","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":148,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":254,"org.easymock.tests2.MockedExceptionTest.testRealException":295,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":109,"org.easymock.tests.UsageVarargTest.varargIntAccepted":116,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":90,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":7,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":176,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":2,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":262,"org.easymock.tests2.UsageConstraintsTest.testContains":187,"org.easymock.tests.UsageCallCountTest.tooManyCalls":142,"org.easymock.tests2.UsageConstraintsTest.testFind":180,"org.easymock.tests.UsageVarargTest.allKinds":123,"org.easymock.tests2.StubTest.stubWithReturnValue":261,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":221,"org.easymock.tests2.CaptureTest.testCaptureAll":217,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":143,"org.easymock.samples.ExampleTest.addAndChangeDocument":77,"org.easymock.tests.UsageVarargTest.varargCharAccepted":117,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":27,"org.easymock.tests.UsageVerifyTest.twoThrows":34,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":86,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":118,"org.easymock.tests2.DelegateToTest.testReturnException":209,"org.easymock.tests2.ConstraintsToStringTest.andToString":0,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":203,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":191,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":273,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":213,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":300,"org.easymock.tests2.CaptureTest.testAnd":216,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":283,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":102,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":82,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":106,"org.easymock.tests2.UsageConstraintsTest.testMatches":190,"org.easymock.tests2.UsageConstraintsTest.testNull":65,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":236,"org.easymock.tests2.EasyMockSupportClassTest.testAll":256,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":268,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":110,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":169,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":21,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":84,"org.easymock.tests.UsageThrowableTest.throwError":145,"org.easymock.tests2.UsageConstraintsTest.greaterThan":192,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":114,"org.easymock.samples.SupportTest.addDocument":69,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":89,"org.easymock.tests2.StubTest.stub":260,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":16,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":85,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":12,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":67,"org.easymock.tests.UsageExpectAndReturnTest.object":166,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":175,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":270,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":61,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":122,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":52,"org.easymock.tests.UsageExpectAndThrowTest.object":104,"org.easymock.tests2.DelegateToTest.testWrongClass":211,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":288,"org.easymock.tests2.UsageTest.moreThanOneArgument":50,"org.easymock.tests.UsageVarargTest.varargByteAccepted":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":101,"org.easymock.tests.UsageTest.wrongArguments":28,"org.easymock.samples.ExampleTest.voteAgainstRemoval":74,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":151,"org.easymock.tests.UsageVarargTest.varargShortAccepted":119,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":20,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":105,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":296,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":14,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":298,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":3,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":230,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":247,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":17,"org.easymock.tests2.NameTest.nameForMocksControl":56,"org.easymock.tests2.SerializationTest.testAllMockedMethod":59,"org.easymock.samples.ExampleTest.voteAgainstRemovals":71,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":19,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":137,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":88,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":124,"org.easymock.tests2.CaptureTest.testCapture1_2446744":220,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":205,"org.easymock.tests.LimitationsTest.mockNativeMethod":153,"org.easymock.tests2.DelegateToTest.testStubDelegate":210,"org.easymock.tests.UsageUnorderedTest.message":36,"org.easymock.samples.ExampleTest.answerVsDelegate":72,"org.easymock.tests.UsageCallCountTest.tooFewCalls":49,"org.easymock.samples.ExampleTest.voteForRemoval":73,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":165,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":140,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":233,"org.easymock.tests.UsageVerifyTest.twoReturns":35,"org.easymock.tests2.ThreadingTest.testChangeDefault":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":103,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":160,"org.easymock.tests2.DependencyTest.testInterfaceMocking":243,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":42,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":263,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":287,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":266,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":183,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":45,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":162,"org.easymock.tests2.CaptureTest.testCaptureRightOne":226,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":48,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":293,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":253,"org.easymock.tests2.UsageConstraintsTest.cmpTo":186,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":167,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":25,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":238,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":24,"org.easymock.tests2.MockedExceptionTest.testMockedException":294,"org.easymock.tests.UsageThrowableTest.throwCheckedException":149,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":113,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":197,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":46,"org.easymock.samples.PartialClassMockTest.testGetArea":78,"org.easymock.samples.ExampleTest.voteForRemovals":76,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":147,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":291,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":189,"org.easymock.samples.ConstructorCalledMockTest.testTax":275,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":289,"org.easymock.tests2.UsageTest.argumentsOrdered":39,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":252,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":91,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":235,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":161,"org.easymock.tests2.AnswerTest.answer":232,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":26,"org.easymock.tests.MockingTest.testNicePartialClassMocking":127,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":44,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":157,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":6,"org.easymock.tests2.UsageConstraintsTest.any":185,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":164,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":272,"org.easymock.tests.UsageExpectAndThrowTest.longType":97,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":111,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":208,"org.easymock.tests2.CallbackTest.callback":215,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":258,"org.easymock.tests2.NameTest.nameForMock":53,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":277,"org.easymock.tests.UsageTest.argumentsOrdered":30,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":179,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":246,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":188,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":174,"org.easymock.tests2.NameTest.nameForStrictMock":54,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":87,"org.easymock.tests2.CaptureTest.testCaptureNone":224,"org.easymock.tests2.SerializationTest.test":58,"org.easymock.tests.UsageExpectAndReturnTest.longType":159,"org.easymock.tests2.SerializationTest.testClass":57,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":222,"org.easymock.tests2.CaptureTest.testCaptureFirst":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":194,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":79,"org.easymock.tests2.UsageTest.niceToStrict":202,"org.easymock.tests2.EasyMockSupportTest.testVerify":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":286,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":23,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":99,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":196,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":200,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":107,"org.easymock.tests2.UsageTest.strictResetToDefault":201,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":173,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":255,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":284,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":94,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":184,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":163,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":240,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":115,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":193,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":251,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":248,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":290,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":128,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":297,"org.easymock.tests2.UsageConstraintsTest.testOr":182,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":62,"org.easymock.tests2.DelegateToTest.testDelegate":212,"org.easymock.tests2.UsageConstraintsTest.testNotNull":68,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":214,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":9,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":5,"org.easymock.tests2.CaptureTest.testCapture_2617107":218,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":1,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":11,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":152,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":168,"org.easymock.tests2.ThreadingTest.testThreadSafe":229,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":292,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":279,"org.easymock.tests.UsageThrowableTest.noUpperLimit":146,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":237,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":239,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":271,"org.easymock.tests.UsageExpectAndReturnTest.floatType":158,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":264,"org.easymock.tests2.UsageTest.wrongArguments":37,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":66,"org.easymock.tests2.UsageConstraintsTest.testSame":181,"org.easymock.tests2.UsageTest.resumeIfFailure":204,"org.easymock.tests.UsageOverloadedMethodTest.overloading":125,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":241,"org.easymock.samples.SupportTest.voteForRemovals":70,"org.easymock.tests.UsageRangeTest.combination":136,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":150,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":8,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":10,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":276,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":198,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":155,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":100,"org.easymock.tests2.NameTest.nameForNiceMock":55,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":22,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":138,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":195,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":15,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":51,"org.easymock.tests2.CaptureTest.testPrimitive":219,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":250,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":170,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":108,"org.easymock.samples.BasicClassMockTest.testPrintContent":80,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests.UsageExpectAndThrowTest.floatType":96,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":64,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":171,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":207,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":249,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":4,"org.easymock.tests2.UsageStrictMockTest.differentMethods":41,"org.easymock.tests.UsageTest.exactCallCountByLastCall":92,"org.easymock.tests2.AnswerTest.stubAnswer":234,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":265,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":269,"org.easymock.tests2.CaptureTest.testCaptureLast":223,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":95,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":139,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":244,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":257,"org.easymock.tests.UsageStrictMockTest.range":32,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":285,"org.easymock.tests.MockingTest.testPartialClassMocking":126,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":172,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests2.UsageConstraintsTest.constraints":178,"org.easymock.samples.ExampleTest.addDocument":75,"org.easymock.tests2.UsageConstraintsTest.lessThan":199,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":29,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":81,"org.easymock.tests.UsageVarargTest.varargLongAccepted":120,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":280,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":112,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":299,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":259,"org.easymock.tests2.UsageStrictMockTest.range":40,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":242,"org.easymock.tests.UsageTest.moreThanOneArgument":43,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.tests.UsageStrictMockTest.differentMethods":33,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":282,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":13,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":267,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":177,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":245,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":98,"org.easymock.tests.DefaultClassInstantiatorTest.object":281,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":156,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":93,"org.easymock.tests2.CaptureTest.testCapture2_2446744":227,"org.easymock.tests.GenericTest.testPackageScope":154}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[0,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:814","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:106","sourceCode":"return org.easymock.IAnswer<?>.answer()","type":"CtReturnImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,0,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.EqualsWithDelta:40","failures":[192],"status":-1,"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue())) && ((java.lang.Number.doubleValue()) <= ((java.lang.Number.doubleValue()) + (java.lang.Number.doubleValue())))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:215","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:213","sourceCode":"return true","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1039","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[228,229,230,231,11,12,13,15,42,43,44,232,135,142,143,144],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:275","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[7,55,233,115,116,132,146,234,147,149],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:104","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[235,11,236,237],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:55","sourceCode":"try {\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object);\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)));\n    java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)));\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"An Object method could not be found!\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[2,2,3,3,5,238,239,240,241,242,19,20,21,243,73,244,245,246,97,247,248,249,250,251,252,253,254,255,145,154,256,257,156,157,158,258,259,260,159,261,160,161,262,263,264,162,163,164,165,167,168,200,201,203,204,205,206,207,208,265,209,266,267,227],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:44","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[11,12,13,15,268,269,270,271,272,42,43,44,232,135,273,274,275,142,143,144,276,277,278,279,280,281,282],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[221],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,283,55,56,57,284,62,64,65,66,67,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,232,100,101,102,103,104,105,106,112,285,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,154,155,257,156,157,158,259,159,160,161,263,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,286,196,197,198,199,200,201,202,203,204,205,207,265,209,266,210,211,212,287,213,214,215,216,217,218,220,221,222,223,224,225,226,227],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[288,289,290,291,210,292,293,294,295,296,297,222,298,299,300,301],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:42","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[302,303,304],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:67","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"))","type":"CtThrowImpl"},"failures":[305],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[306,307,308,309,310,12,13,14,311,268,269,270,18,312,313,314,43,44,315,316,317,232,112,119,123,124,127,132,133,273,136,318,274,275,140,141,319,320,143,144,259,262,263,264,176,190,201,265,266],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:148","sourceCode":"throw new org.easymock.internal.AssertionErrorWrapper(new java.lang.AssertionError(java.lang.StringBuilder))","type":"CtThrowImpl"},"failures":[308,12,13,14,311,268,269,270,18,312,313,314,43,44,315,316,317,232,112,119,123,124,127,132,133,273,136,318,274,275,140,141,319,320,143,144,259,262,263,264,176,190,201,265,266],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:193","sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2159","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"failures":[170,171],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:25","sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"failures":[321,322],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1332","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksBehavior:98","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(org.easymock.internal.Invocation.getMethod().getReturnType()))","type":"CtAssignmentImpl"},"failures":[51,52,53,54,69,70,71,323,72,120,122,123,125,126,136,139,150,151,152,153,258,261,160,161,206,208,210,222],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[7,56,324,223,225,325,226],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[11,13,14,16,17,18,42,133,137,138,141,142,146],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[326,327,311,313,328,280],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:49","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[187],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"failures":[321,329,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[190],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[199,330],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[331,154,155,256],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[5,240,241,245,154,156,157,158,258,259,260,159,160,161,263,264,206,265,209,267],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:99","failures":[4,5,6,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,50,284,64,65,66,67,68,73,245,74,75,76,97,98,99,100,101,102,103,104,105,106,112,285,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,140,141,142,143,144,145,148,154,155,257,156,157,158,259,159,160,161,263,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,265,209,266,210,211,212,213,214,215,216,217,218,220,221,222,224,227],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[329],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":177,"org.easymock.tests2.UsageTest.argumentsOrdered":275,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":14,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":128,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":292,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":61,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":318,"org.easymock.tests2.StubTest.stubWithReturnValue":117,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":289,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":196,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":31,"org.easymock.tests2.SerializationTest.testAllMockedMethod":256,"org.easymock.tests2.DelegateToTest.testReturnException":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":59,"org.easymock.tests.MockingTest.testPartialClassMocking":19,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":280,"org.easymock.samples.SupportTest.voteForRemovals":4,"org.easymock.tests.MockClassControlTest.testToString":249,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":290,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":237,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":267,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":89,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":331,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":77,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":156,"org.easymock.tests.UsageExpectAndThrowTest.object":87,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":228,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":194,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":131,"org.easymock.tests2.DelegateToTest.testWrongClass":225,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":98,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":99,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":183,"org.easymock.tests2.UsageTest.wrongArguments":273,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":47,"org.easymock.samples.ConstructorCalledMockTest.testTax":2,"org.easymock.tests.UsageStrictMockTest.range":43,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":53,"org.easymock.samples.ExampleTest.answerVsDelegate":7,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":125,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":241,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":162,"org.easymock.tests2.UsageConstraintsTest.testNull":179,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":203,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":88,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":254,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":127,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":160,"org.easymock.tests2.CaptureTest.testPrimitive":213,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":50,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":269,"org.easymock.tests.UsageTest.moreThanOneArgument":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":96,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":202,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":52,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":109,"org.easymock.tests2.CaptureTest.testCaptureNone":216,"org.easymock.tests.UsageUnorderedTest.message":232,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":306,"org.easymock.tests.UsageVerifyTest.twoReturns":13,"org.easymock.tests2.ThreadingTest.testThreadSafe":169,"org.easymock.tests.UsageTest.argumentsOrdered":270,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":238,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":281,"org.easymock.tests2.CaptureTest.testCapture_2617107":287,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":64,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":282,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":258,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":295,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":0,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":261,"org.easymock.tests2.UsageConstraintsTest.any":184,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":324,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":68,"org.easymock.tests.UsageExpectAndThrowTest.longType":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":60,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":321,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":278,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":320,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":210,"org.easymock.tests2.SerializationTest.testClass":154,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":222,"org.easymock.tests.LimitationsTest.mockNativeMethod":97,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":245,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":41,"org.easymock.tests2.AnswerTest.answer":146,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":153,"org.easymock.tests2.CaptureTest.testAnd":211,"org.easymock.tests2.UsageTest.strictResetToDefault":134,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":208,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":297,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":108,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":113,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":122,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":17,"org.easymock.tests2.DelegateToTest.testDelegate":226,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":81,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":21,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":200,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":161,"org.easymock.tests.MockingTest.testNicePartialClassMocking":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":92,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":205,"org.easymock.tests2.CaptureTest.testCaptureLast":215,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":62,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":272,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":168,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":182,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":195,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":72,"org.easymock.tests.MockingTest.testTwoMocks":242,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":271,"org.easymock.tests2.CaptureTest.testCapture1_2446744":214,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":22,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":90,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":85,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":151,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":274,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":198,"org.easymock.tests.UsageThrowableTest.throwError":100,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":299,"org.easymock.tests.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.ConstraintsToStringTest.andToString":279,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":171,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":307,"org.easymock.tests2.MockBuilderTest.testCreateMockString":264,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":247,"org.easymock.tests.UsageExpectAndThrowTest.floatType":79,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":111,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":190,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":147,"org.easymock.tests.UsageVerifyTest.twoThrows":12,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":157,"org.easymock.samples.PartialClassMockTest.testGetArea":5,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":65,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":236,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":209,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":255,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":78,"org.easymock.tests2.UsageTest.niceToStrict":136,"org.easymock.tests2.UsageConstraintsTest.testNotNull":197,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":106,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":159,"org.easymock.tests2.MockBuilderTest.testCreateMock":262,"org.easymock.tests2.UsageTest.defaultResetToNice":139,"org.easymock.samples.ExampleTest.voteAgainstRemovals":6,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":37,"org.easymock.tests.UsageVarargTest.differentLength":308,"org.easymock.tests2.CallbackTest.callback":132,"org.easymock.tests.UsageTest.openCallCountByLastCall":16,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":328,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":86,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":123,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":174,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":51,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":49,"org.easymock.tests.UsageOverloadedMethodTest.overloading":75,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":57,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":188,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":74,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":33,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":165,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":329,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":187,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":217,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":54,"org.easymock.tests.UsageThrowableTest.throwCheckedException":103,"org.easymock.tests2.EasyMockSupportClassTest.testAll":257,"org.easymock.tests.MockClassControlTest.testEquals":253,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":244,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":327,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":304,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":94,"org.easymock.tests2.CaptureTest.testCaptureAll":212,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":71,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":152,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":46,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":167,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":298,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":164,"org.easymock.tests2.UsageConstraintsTest.testMatches":189,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":166,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":149,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":283,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":110,"org.easymock.samples.ExampleTest.voteForRemovals":10,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":173,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":11,"org.easymock.tests2.DependencyTest.testInterfaceMocking":130,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":323,"org.easymock.samples.BasicClassMockTest.testPrintContent":239,"org.easymock.tests2.DelegateToTest.testStubDelegate":224,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":105,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":319,"org.easymock.tests2.AnswerTest.stubAnswer":148,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":325,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":63,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":42,"org.easymock.tests2.UsageConstraintsTest.greaterThan":191,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":285,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":266,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":170,"org.easymock.tests.UsageExpectAndReturnTest.floatType":24,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":40,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":206,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":145,"org.easymock.tests2.ConstraintsToStringTest.orToString":276,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":3,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":294,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":192,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":243,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":133,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":175,"org.easymock.tests2.SerializationTest.test":155,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":322,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":120,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":101,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":23,"org.easymock.tests2.UsageConstraintsTest.testSame":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":58,"org.easymock.tests2.CaptureTest.testCaptureFirst":221,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":121,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":141,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":29,"org.easymock.tests.GenericTest.testPackageScope":73,"org.easymock.tests2.CaptureTest.testCapture2_2446744":220,"org.easymock.tests2.UsageTest.moreThanOneArgument":135,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":172,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":263,"org.easymock.tests.GenericTest.testBridgedEquals":246,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":316,"org.easymock.tests.UsageExpectAndReturnTest.longType":25,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":69,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":118,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":95,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":34,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":286,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":235,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":93,"org.easymock.tests2.UsageStrictMockTest.differentMethods":144,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":107,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":26,"org.easymock.tests.UsageCallCountTest.tooManyCalls":317,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":91,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":114,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":30,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":301,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":233,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":82,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":142,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":104,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":163,"org.easymock.tests2.UsageConstraintsTest.testContains":186,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":227,"org.easymock.tests2.UsageConstraintsTest.testFind":178,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":76,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":115,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":204,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":312,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":116,"org.easymock.tests.UsageExpectAndReturnTest.object":32,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":229,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":193,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":207,"org.easymock.tests.ErrorMessageTest.testGetters":230,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":259,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":300,"org.easymock.tests2.UsageStrictMockTest.range":143,"org.easymock.tests2.UsageConstraintsTest.lessThan":199,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":126,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":291,"org.easymock.tests.UsageTest.exactCallCountByLastCall":18,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":45,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":119,"org.easymock.tests2.CaptureTest.testCaptureRightOne":218,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":305,"org.easymock.tests2.UsageConstraintsTest.testOr":181,"org.easymock.tests.UsageRangeTest.combination":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":201,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":38,"org.easymock.tests.UsageTest.wrongArguments":268,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":56,"org.easymock.tests.MockClassControlTest.testHashCode":252,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":248,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":35,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":302,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":55,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":315,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":309,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":150,"org.easymock.tests2.UsageConstraintsTest.cmpTo":185,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":234,"org.easymock.tests2.CompareToTest.testLessThan":330,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":1,"org.easymock.tests2.UsageTest.openCallCountByLastCall":137,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":138,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":129,"org.easymock.tests2.CaptureTest.testCaptureFromStub":219,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":260,"org.easymock.tests.UsageTest.unexpectedCallWithArray":311,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":310,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":84,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":313,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":102,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":296,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":36,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":314,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":265,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":251,"org.easymock.tests2.UsageConstraintsTest.constraints":176,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":83,"org.easymock.tests2.ConstraintsToStringTest.notToString":277,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":39,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":288,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":303,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":158,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":70,"org.easymock.tests2.UsageTest.resumeIfFailure":140,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":66,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":240,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":28,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":284,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":67,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":231,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":124}}]

[{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:49","sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[26,27,28,29],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[30,31,32,33],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[32],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:40","sourceCode":"java.lang.StringBuffer.append(\"notNull()\")","type":"CtInvocationImpl"},"failures":[51],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection"}},{"position":"org.easymock.ConstructorArgs:54","failures":[52,53,54,55,27,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[3,4,5,6,92,11,13,93,94,95,96,97,98,99,15,19,21,100],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[101,102,103,6,104,7,8,9,10,15,16,17,18,105,106,107,108],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:971","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[109],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[110,111,112,113],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[27,28,29],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[114,115,116,117,118,119,120],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[137,138,139,140,141,142],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[143,144],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:721","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[145,4,5,104,7,8,9,10,12,146,14,16,17,18,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[147],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":34,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":87,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":39,"org.easymock.tests2.StubTest.stubWithReturnValue":46,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":83,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":138,"org.easymock.tests2.SerializationTest.testAllMockedMethod":29,"org.easymock.tests2.NameTest.nameForNiceMock":24,"org.easymock.tests2.ConstraintsToStringTest.notNullToString":51,"org.easymock.tests2.DelegateToTest.testReturnException":117,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":37,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":3,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":107,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":74,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":66,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":26,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":147,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":119,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":41,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":62,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":111,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":60,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":109,"org.easymock.tests2.DelegateToTest.testWrongClass":118,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":93,"org.easymock.tests2.UsageTest.wrongArguments":16,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.samples.ConstructorCalledMockTest.testTax":52,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":54,"org.easymock.samples.ExampleTest.answerVsDelegate":114,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":53,"org.easymock.tests2.UsageConstraintsTest.testNull":30,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":128,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":98,"org.easymock.tests2.SerializationTest.test":28,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":84,"org.easymock.tests2.CaptureTest.testPrimitive":126,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":45,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":8,"org.easymock.tests.UsageTest.moreThanOneArgument":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":56,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":57,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":36,"org.easymock.tests2.CaptureTest.testCaptureFirst":136,"org.easymock.tests.UsageUnorderedTest.message":14,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":64,"org.easymock.tests2.CaptureTest.testCapture2_2446744":135,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":113,"org.easymock.tests2.UsageTest.moreThanOneArgument":15,"org.easymock.tests.UsageVerifyTest.twoReturns":5,"org.easymock.tests.UsageTest.argumentsOrdered":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":73,"org.easymock.tests2.CaptureTest.testCapture_2617107":125,"org.easymock.tests2.NameTest.nameForMock":22,"org.easymock.tests.UsageExpectAndReturnTest.longType":137,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":108,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":92,"org.easymock.tests2.UsageStrictMockTest.differentMethods":21,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":86,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":116,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":141,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":44,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":43,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":38,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":99,"org.easymock.tests2.SerializationTest.testClass":27,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":31,"org.easymock.tests2.MockedExceptionTest.testRealException":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":76,"org.easymock.tests2.CaptureTest.testAnd":123,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":100,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":82,"org.easymock.tests2.NameTest.nameForMocksControl":25,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":19,"org.easymock.tests2.MockedExceptionTest.testMockedException":48,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":142,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":61,"org.easymock.tests2.NameTest.nameForStrictMock":23,"org.easymock.tests2.DelegateToTest.testDelegate":120,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":95,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":49,"org.easymock.tests2.CaptureTest.testCaptureLast":130,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":40,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":144,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":32,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":88,"org.easymock.tests2.UsageStrictMockTest.range":20,"org.easymock.tests2.CaptureTest.testCapture1_2446744":127,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":89,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":96,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.CaptureTest.testCaptureRightOne":133,"org.easymock.tests.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":68,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":110,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":103,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":55,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":139,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":115,"org.easymock.tests.UsageTest.wrongArguments":7,"org.easymock.tests2.MockBuilderTest.testWithConstructor":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":58,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":69,"org.easymock.tests.UsageVerifyTest.twoThrows":4,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":72,"org.easymock.tests2.CaptureTest.testCaptureMultiple":122,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":67,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":91,"org.easymock.tests2.UsageConstraintsTest.testNotNull":33,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":47,"org.easymock.tests2.CaptureTest.testCaptureFromStub":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":75,"org.easymock.tests.UsageTest.unexpectedCallWithArray":104,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":145,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":105,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":97,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":70,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":85,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":35,"org.easymock.tests2.CaptureTest.testCapture":132,"org.easymock.tests2.UsageConstraintsTest.constraints":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":77,"org.easymock.tests.CapturesMatcherTest.test":121,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":140,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":42,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":131,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":78,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":129,"org.easymock.tests2.EasyMockSupportClassTest.testAll":59,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":106,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":102,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":94,"org.easymock.tests2.CaptureTest.testCaptureAll":124,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":2}}]

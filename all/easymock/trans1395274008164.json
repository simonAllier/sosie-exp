[{"transplant":{"position":"org.easymock.EasyMockSupport:508","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:172","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[0,1],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[2],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[17,18,19,20,21,22,23],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[24,25,26,27,28],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:37","sourceCode":"if (java.lang.Object == null) {\n    return java.lang.Object == null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[29],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"expected":"actual","actual":"actual"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[30],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"position":"org.easymock.internal.RecordState:233","failures":[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,0,67,68,69,70,71,72,29,73,74,75,17,30,18,19,20,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,3,127,128,129,130,131,4,132,133,134,135,136,5,6,137,138,139,140,141,142,143,144,145,146,147,148,149,24,31,150,151,152,153,154,155,156,157,158,159,160,161,32,33,34,35,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,7,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,37,26,197,198,8,9,199,200,201,202,203,204,205,206,207,208,209,210,211,10,212,213,11,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,13,240,241,14,15,242,243,244,245,246,247,38,39,40,41,42,43,248,249,250,251,252,21,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,44,45,46,270,47,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,28,295,296,296,297,297,298,23,299,300,301,302,303,304,305,306,307,308,309],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"failures":[64,70,74,310],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[125,127,128,131,198,8,9,212,214,215,239,254,311],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:36","failures":[312],"status":-1,"binaryOperator":"(int <= int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMockSupport.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"failures":[313,314,32,315,316],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[104,105,106,317],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[98,125,129,134,135,138,198,9,212,238,240,241,242],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[104,105,106,317],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[49,50,51,52,318,53,54,55,56,57,58,59,60,61,62,63,64,65,66,0,67,68,69,70,71,72,29,73,74,75,17,30,18,19,20,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,319,95,96,97,320,98,99,100,101,102,103,321,322,323,324,104,105,106,325,326,327,328,329,107,330,331,332,333,334,335,108,109,110,111,112,113,114,115,116,117,118,119,120,336,337,121,122,123,124,125,126,3,127,128,129,130,131,4,132,133,134,135,136,5,6,137,138,139,140,141,142,143,144,313,338,145,339,340,341,146,147,148,342,314,343,344,345,346,347,149,348,349,350,351,352,353,24,31,150,354,151,355,356,357,152,358,359,153,360,361,362,363,364,365,366,367,368,154,369,370,371,372,373,155,374,375,156,376,377,157,158,159,160,161,32,33,34,35,378,379,380,381,382,383,384,385,315,386,162,387,388,389,163,316,164,390,165,391,392,393,166,394,395,396,167,168,169,170,171,172,173,397,174,175,176,398,7,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,25,424,425,426,427,428,429,430,36,431,195,196,37,26,197,432,433,434,435,436,198,8,9,437,438,439,199,200,440,201,441,442,443,202,203,444,204,205,206,207,445,208,209,210,211,10,212,213,11,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,446,447,237,448,238,239,12,13,240,241,14,15,242,243,244,245,246,247,38,39,40,41,42,43,248,249,250,251,252,449,21,253,450,254,451,255,256,257,452,453,454,455,456,457,458,311,258,259,260,261,459,262,263,264,265,266,267,268,269,44,45,46,460,461,462,463,464,465,466,467,270,47,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,468,291,469,470,292,293,471,312,472,473,22,474,475,476,477,48,478,479,480,481,482,483,484,27,294,485,486,487,488,489,28,490,491,295,296,297,298,23,299,300,301,302,492,303,304,305,306,307,308,309],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[104,105,106,317],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.EasyMock:623","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[470],"status":-1,"binaryOperator":"(int >= 1)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:155","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:312","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[99,477],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[51,66,76,109,113,114,117,123,126,3,127,129,4,132,133,5,6,137,138,140,146,148,162,393,166,395,7,8,9,445,208,209,210,10,213,11,214,238,12,13,14,15,242,248,493,452,264,494,16],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[495,496,10,12,497,498],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[325,326,327,332,335,343,344,345,350,353,304,305],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:82","failures":[499,77,79,80,81,82,83,84,86,500,87,88,90],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[51,52,54,56,57,59,68,29,77,79,87],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[104,105,106,317],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[104,156,376,390,392,501,502,503,504,505],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:85","failures":[],"status":0,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[495,496,10,12,497,498],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.LastControl:48","failures":[49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,0,67,68,69,70,72,29,73,74,75,17,30,18,19,20,76,77,78,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,125,3,127,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,24,31,150,151,152,153,154,155,156,157,158,159,160,161,32,33,34,35,162,163,164,165,166,171,172,173,174,176,7,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,37,26,197,198,8,9,199,200,201,202,204,212,11,214,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,38,39,40,41,42,43,248,249,250,251,252,21,253,254,255,256,257,458,258,44,45,46,270,47,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,470,292,293,471,312,294,28,295,296,296,297,297,298,23,299,300,302,303,307],"status":-1,"binaryOperator":"org.easymock.internal.MocksControl != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"o":"actual","this":"actual"}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[104,376,390,392,501,502,503,506,507],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[30,91,92,93,94,95,96,97,121,122,125,3,127,139,140,141,142,143,144,145,146,147,148,152,153,154,155,156,160,162,163,164,165,166,188,189,190,191,193,194,195,199,200,201,212,11,214,237,243,244,245,246,247,248,249,250,251,271,272,273,274,275,276,279,280,282,283,284,286,287,288,289,290,295,298,299,300,302,307],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:327","failures":[172,173,45,46],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:39","sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[50,51,53,55,56,62,65,67,73,3,127,134,135,179,181,198,204,11,214,240,241,248,473],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastRange":"org.easymock.internal.MocksControl.AT_LEAST_ONCE"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[74,310],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[500],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[49,50,51,52,318,53,54,55,56,57,58,59,60,61,62,63,64,65,66,0,67,68,69,70,71,72,29,73,74,75,17,30,18,19,20,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,319,95,96,97,320,98,99,100,101,102,103,321,322,323,324,104,105,106,325,326,327,328,329,107,330,331,332,333,334,335,108,109,110,111,112,113,114,115,116,117,118,119,120,336,337,121,122,123,124,125,126,3,127,128,129,130,131,4,132,133,134,135,136,5,6,137,138,139,140,141,142,143,144,313,338,145,339,340,341,146,147,148,342,314,343,344,345,346,347,149,348,349,350,351,352,353,24,31,150,354,151,355,356,357,152,358,359,153,360,361,362,363,364,365,366,367,368,154,369,370,371,372,373,155,374,375,156,376,377,157,158,159,160,161,32,33,34,35,378,379,380,381,382,383,384,385,315,386,162,387,388,389,163,316,164,390,165,391,392,393,166,394,395,396,167,168,169,170,171,172,173,397,174,175,176,398,7,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,25,424,425,426,427,428,429,430,36,431,195,196,37,26,197,432,433,434,435,436,198,8,9,437,438,439,199,200,440,201,441,442,443,202,203,444,204,205,206,207,445,208,209,210,211,10,212,213,11,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,446,447,237,448,238,239,12,13,240,241,14,15,242,243,244,245,246,247,38,39,40,41,42,43,248,249,250,251,252,449,21,253,450,254,451,255,256,257,452,453,454,455,456,457,458,311,258,259,260,261,459,262,263,264,265,266,267,268,269,44,45,46,460,461,462,463,464,465,466,467,270,47,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,468,291,469,470,292,293,471,312,472,473,22,474,475,476,477,48,478,479,480,481,482,483,484,27,294,485,486,487,488,489,28,490,491,295,296,297,298,23,299,300,301,302,492,303,304,305,306,307,308,309],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":52,"org.easymock.tests2.UsageTest.argumentsOrdered":6,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":238,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":118,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":330,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":480,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":133,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":305,"org.easymock.tests2.DelegateToTest.testReturnException":17,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":39,"org.easymock.tests.MockingTest.testPartialClassMocking":199,"org.easymock.tests.MockClassControlTest.testToString":462,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":396,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":291,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":487,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":363,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":153,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":217,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":122,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":501,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":58,"org.easymock.tests2.UsageTest.wrongArguments":4,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":195,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":353,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":455,"org.easymock.samples.ExampleTest.answerVsDelegate":23,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":404,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":442,"org.easymock.tests2.UsageConstraintsTest.testNull":54,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":142,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":467,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":117,"org.easymock.tests2.CaptureTest.testPrimitive":80,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":197,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":236,"org.easymock.tests.UsageTest.moreThanOneArgument":239,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":141,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":190,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":470,"org.easymock.tests.UsageTest.argumentsOrdered":15,"org.easymock.tests.UsageVarargTest.varargIntAccepted":261,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":27,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":243,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":507,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":315,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":334,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":380,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":316,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":22,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":247,"org.easymock.tests.ReplayStateInvalidUsageTest.times":429,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":149,"org.easymock.tests2.DependencyTest.testClassMocking":336,"org.easymock.tests2.AnswerTest.answer":98,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":59,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":485,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":324,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":401,"org.easymock.tests2.CaptureTest.testAnd":77,"org.easymock.tests2.UsageTest.strictResetToDefault":130,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":388,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":189,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":250,"org.easymock.tests2.DelegateToTest.testDelegate":20,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":312,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":232,"org.easymock.tests.LimitationsTest.mockFinalMethod":448,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":42,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":436,"org.easymock.tests2.DependencyTest.testClassMockingSupport":337,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":457,"org.easymock.tests2.CaptureTest.testCapture1_2446744":81,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":338,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":230,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":322,"org.easymock.tests.UsageThrowableTest.throwError":180,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":25,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":403,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":452,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":335,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":375,"org.easymock.samples.PartialClassMockTest.testGetArea":295,"org.easymock.tests.MockingTest.testInterfaceMocking":440,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":424,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":244,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":256,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":412,"org.easymock.tests2.UsageTest.niceToStrict":132,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":364,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":472,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":163,"org.easymock.tests2.MockBuilderTest.testCreateMock":393,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":371,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":350,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":495,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":226,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":113,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":400,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":173,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":203,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":453,"org.easymock.tests.UsageOverloadedMethodTest.overloading":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":368,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":373,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":64,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":253,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":177,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":282,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":2,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":63,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":86,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":459,"org.easymock.tests.MockClassControlTest.testEquals":466,"org.easymock.tests2.EasyMockSupportClassTest.testAll":152,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":175,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":234,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":434,"org.easymock.tests2.CaptureTest.testCaptureAll":78,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":323,"org.easymock.tests.MockNameTest.defaultName":491,"org.easymock.tests2.UsageConstraintsTest.testMatches":65,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":422,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":191,"org.easymock.samples.ExampleTest.voteForRemovals":302,"org.easymock.tests.UsageVarargTest.allKinds":269,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":198,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":435,"org.easymock.samples.BasicClassMockTest.testPrintContent":309,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":186,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":123,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":43,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":19,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":331,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":505,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":420,"org.easymock.tests2.UsageConstraintsTest.greaterThan":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":358,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":249,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":148,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":421,"org.easymock.samples.ExampleTest.voteForRemoval":299,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":158,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":342,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":405,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":381,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":313,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":129,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":258,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":48,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":110,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":182,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":38,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":75,"org.easymock.tests2.CaptureTest.testCaptureFirst":90,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":477,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":111,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":138,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":451,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":278,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":160,"org.easymock.tests2.UsageTest.moreThanOneArgument":131,"org.easymock.tests2.CaptureTest.testCapture2_2446744":89,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":486,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":166,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":268,"org.easymock.tests.GenericTest.testBridgedEquals":398,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":208,"org.easymock.tests.UsageExpectAndReturnTest.longType":274,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":432,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":108,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":235,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":71,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":202,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":188,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":45,"org.easymock.tests.UsageCallCountTest.tooManyCalls":209,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":372,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":279,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":352,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":222,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":185,"org.easymock.tests.MockingTest.testNiceClassMocking":443,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":92,"org.easymock.tests.MockingTest.testClassMocking":438,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":444,"org.easymock.tests2.UsageConstraintsTest.testContains":62,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":34,"org.easymock.tests2.UsageConstraintsTest.testFind":53,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":179,"org.easymock.tests.MockTypeTest.fromEasyMockClass":402,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":151,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":210,"org.easymock.tests.UsageExpectAndReturnTest.object":281,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":145,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":351,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":502,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":263,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":410,"org.easymock.tests.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":476,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":468,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":292,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":376,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":287,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":21,"org.easymock.tests.MockClassControlTest.testHashCode":465,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":326,"org.easymock.tests2.EasyMockSupportTest.testVerify":120,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":366,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":293,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":172,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":252,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":494,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":321,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":385,"org.easymock.tests.UsageVarargTest.varargCharAccepted":262,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":413,"org.easymock.tests2.CaptureTest.testCaptureMultiple":499,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":490,"org.easymock.tests2.UsageTest.openCallCountByLastCall":134,"org.easymock.tests.DefaultClassInstantiatorTest.object":414,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":119,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":171,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":408,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":16,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":367,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":183,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":346,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":325,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":464,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":146,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":223,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":288,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":44,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":463,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":155,"org.easymock.tests2.UsageTest.resumeIfFailure":137,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":399,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":379,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":41,"org.easymock.tests2.StubTest.stubWithReturnValue":31,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":390,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":72,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":280,"org.easymock.tests2.SerializationTest.testAllMockedMethod":106,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":294,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":496,"org.easymock.samples.SupportTest.voteForRemovals":307,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":397,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":328,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":229,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":317,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":28,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":99,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":469,"org.easymock.tests.UsageExpectAndThrowTest.object":227,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DelegateToTest.testWrongClass":18,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":193,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":194,"org.easymock.tests.UsageStrictMockTest.range":11,"org.easymock.samples.ConstructorCalledMockTest.testTax":296,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":383,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":115,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":91,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":228,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":164,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":36,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":355,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":454,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":497,"org.easymock.tests2.CaptureTest.testCaptureNone":85,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":257,"org.easymock.tests.UsageUnorderedTest.message":7,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":493,"org.easymock.tests.UsageVerifyTest.twoReturns":9,"org.easymock.tests.UsageVarargTest.varargByteAccepted":267,"org.easymock.tests2.ThreadingTest.testThreadSafe":157,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":369,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":207,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":411,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":308,"org.easymock.tests2.CaptureTest.testCapture_2617107":79,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":311,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":488,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":26,"org.easymock.tests2.UsageConstraintsTest.any":60,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":428,"org.easymock.tests2.StubTest.stub":24,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":489,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":40,"org.easymock.tests.UsageExpectAndThrowTest.longType":220,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":418,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":427,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":126,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":107,"org.easymock.tests2.SerializationTest.testClass":104,"org.easymock.tests.LimitationsTest.mockNativeMethod":237,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":176,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":290,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":345,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":128,"org.easymock.tests2.NameTest.nameForMocksControl":170,"org.easymock.tests2.MockedExceptionTest.testMockedException":33,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":347,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":359,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":241,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":201,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":221,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":354,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":139,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":165,"org.easymock.tests.MockingTest.testNicePartialClassMocking":200,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":144,"org.easymock.tests2.CaptureTest.testCaptureLast":84,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":343,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":458,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":97,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":57,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":70,"org.easymock.tests.MockingTest.testTwoMocks":439,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":320,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":225,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":5,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":73,"org.easymock.samples.ExampleTest.removeNonExistingDocument":492,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":425,"org.easymock.tests.UsageStrictMockTest.differentMethods":214,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":349,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":327,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":416,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":159,"org.easymock.tests2.MockBuilderTest.testCreateMockString":395,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":460,"org.easymock.tests.UsageExpectAndThrowTest.floatType":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":360,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":357,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":101,"org.easymock.tests.UsageVerifyTest.twoThrows":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":377,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":154,"org.easymock.samples.ExampleTest.voteAgainstRemoval":300,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":481,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":255,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":147,"org.easymock.tests.LimitationsTest.privateConstructor":447,"org.easymock.tests2.UsageConstraintsTest.testNotNull":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":187,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":32,"org.easymock.tests2.UsageTest.defaultResetToNice":136,"org.easymock.samples.ExampleTest.voteAgainstRemovals":298,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":482,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":286,"org.easymock.tests.UsageVarargTest.differentLength":264,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":344,"org.easymock.tests2.CallbackTest.callback":76,"org.easymock.tests2.UsageConstraintsTest.equals":318,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":339,"org.easymock.tests.UsageTest.openCallCountByLastCall":240,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":49,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":37,"org.easymock.tests.UsageCallCountTest.tooFewCalls":205,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":94,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":456,"org.easymock.tests.UsageThrowableTest.throwCheckedException":184,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":498,"org.easymock.tests.MockingTest.testStrictClassMocking":437,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":96,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":47,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":93,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":348,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":430,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":95,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":103,"org.easymock.tests.ObjectMethodsTest.testHashCode":409,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":506,"org.easymock.tests2.NameTest.nameForNiceMock":169,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":161,"org.easymock.tests2.DependencyTest.testInterfaceMocking":121,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":503,"org.easymock.samples.ExampleTest.addDocument":301,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":370,"org.easymock.tests2.DelegateToTest.testStubDelegate":30,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":374,"org.easymock.tests2.AnswerTest.stubAnswer":102,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":212,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":391,"org.easymock.tests.UsageVarargTest.varargLongAccepted":266,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":215,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":479,"org.easymock.tests.UsageExpectAndReturnTest.floatType":273,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":289,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":156,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":297,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":450,"org.easymock.tests.UsageThrowableTest.noUpperLimit":181,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":67,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":333,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":50,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":378,"org.easymock.tests2.SerializationTest.test":105,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":82,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":415,"org.easymock.tests2.UsageConstraintsTest.testSame":55,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":272,"org.easymock.samples.SupportTest.addDocument":306,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":319,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":426,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":361,"org.easymock.tests.GenericTest.testPackageScope":174,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":475,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":332,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":441,"org.easymock.tests2.NameTest.nameForMock":167,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":283,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":394,"org.easymock.tests2.UsageStrictMockTest.differentMethods":127,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":340,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":275,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":231,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":407,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":251,"org.easymock.tests2.MockedExceptionTest.testRealException":35,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":484,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":483,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":125,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":431,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":196,"org.easymock.tests2.NameTest.nameForStrictMock":168,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":389,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":150,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":143,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":382,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":417,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":162,"org.easymock.tests2.UsageStrictMockTest.range":3,"org.easymock.tests2.UsageConstraintsTest.lessThan":74,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":329,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":504,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":478,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":109,"org.easymock.tests2.CaptureTest.testCaptureRightOne":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":365,"org.easymock.tests2.UsageConstraintsTest.testOr":56,"org.easymock.tests.UsageRangeTest.combination":248,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":140,"org.easymock.tests.UsageTest.wrongArguments":13,"org.easymock.tests2.MockBuilderTest.testWithConstructor":386,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":362,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":461,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":473,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":284,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":419,"org.easymock.tests.UsageVarargTest.varargShortAccepted":265,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":445,"org.easymock.tests2.UsageConstraintsTest.cmpTo":61,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":100,"org.easymock.tests2.CompareToTest.testLessThan":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":474,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":135,"org.easymock.tests2.CaptureTest.testCaptureFromStub":88,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":423,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":387,"org.easymock.tests.UsageTest.unexpectedCallWithArray":12,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":10,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":206,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":285,"org.easymock.tests2.CaptureTest.testCapture":500,"org.easymock.tests2.UsageConstraintsTest.constraints":51,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":213,"org.easymock.samples.ExampleTest.addAndChangeDocument":303,"org.easymock.tests.UsageStrictMockTest.testVerify":216,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":304,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":211,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":433,"org.easymock.tests2.CompareToTest.testGreateThan":1,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":83,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":245,"org.easymock.tests.LimitationsTest.abstractClass":446,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":277,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":246,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":114,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":260}}]

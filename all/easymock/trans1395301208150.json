[{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,170,171,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:69","sourceCode":"return java.lang.StringBuffer.toString()","type":"CtReturnImpl"},"failures":[25,26,33,36,74,328,329,156,157,160,161,240,311,317,318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[10,13,14,15,16,17,18,110,198,199,200,201,203],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:52","failures":[330,331,24,25,26,30,33,34,36,37,68,74,96,106,107,119,121,124,154,155,157,158,159,160,161,162,175,216,217,218,219,238,240,241,262,268,269,273,274,287,288,308,310,311,314,315,317,318,320,324],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:1507","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[133,332,333,334,335,336],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[337,338,27,44,45,339,47,75,340,130,131,132,168,169,170,170,171,171,172,200,204,205,207,208,209,210,211,212,213,214,215,225,226,227,228,230,231,243,245,291,341,292,342,293,294,295,296,297,298,343,299,301,302,303,304,323,344,345,346],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:865","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[286],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:148","sourceCode":"for (final java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> : java.lang.Class<T>.getDeclaredConstructors()) {\n    if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n        if (java.lang.reflect.Constructor<T> != null) {\n            throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n        } \n        java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n    } \n}","type":"CtForEachImpl"},"failures":[243,347,348,323,349,350,351,352,353,354],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"position":"org.easymock.EasyMock:1421","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:103","sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[355,356],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:417","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[357,243,244,245],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,32,34,37,38,39,40,41,42,43,44,45,47,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,128,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,189,190,191,192,193,194,197,198,199,200,201,202,203,204,206,207,208,209,211,212,214,216,217,218,219,220,221,224,225,226,227,228,229,230,231,232,233,234,235,237,238,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,287,288,289,290,291,293,294,295,296,300,301,302,303,304,305,306,307,309,310,312,313,316,319,321,322,323,324,325,326,327],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1420","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[282],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[56],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:141","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"position":"org.easymock.internal.matchers.NotNull:36","failures":[285,287,321,322],"status":-1,"binaryOperator":"java.lang.Object != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[33,358,359,156,360,361],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[362,363,326,327],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:66","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MocksControl:190","failures":[25,29,66,67,69,70,71,72,73,74,161,194,205,214,249,256,257,266,271,272,273,276,282,283,284,286,313,318],"status":-1,"binaryOperator":"((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:450","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[250,251,364],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[33,358,359,156,360,361],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:201","sourceCode":"java.util.Set<java.lang.reflect.Method>.toArray(new java.lang.reflect.Method[java.util.Set<java.lang.reflect.Method>.size()])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mockedMethods":"mockedMethods"}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[272,277,289,365],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:83","sourceCode":"return org.easymock.internal.MocksControl.createMock(java.lang.String, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[366,0,1,2,367,368,369,370,371,372,330,331,373,374,3,4,5,6,7,375,376,377,8,9,10,11,12,13,14,15,16,17,18,337,378,379,338,380,381,382,383,384,385,386,387,362,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,405,44,45,339,406,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,407,408,409,75,410,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,411,99,100,101,102,103,104,105,106,107,108,355,412,413,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,414,126,127,415,128,129,416,417,340,130,131,418,132,419,420,421,422,423,424,425,133,332,333,334,426,335,427,336,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,356,428,429,430,167,168,169,170,170,171,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,431,211,432,433,212,213,214,215,434,435,436,216,217,218,219,437,438,439,440,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,441,259,260,261,442,262,263,264,265,266,443,267,268,269,270,271,272,444,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,445,446,447,448,449,290,450,451,452,453,454,455,291,456,292,342,457,458,293,294,295,347,296,348,297,298,459,299,460,461,462,463,464,300,465,466,467,468,469,470,471,472,473,301,474,475,302,476,477,478,479,480,481,482,483,484,303,485,486,487,488,364,304,489,490,491,492,305,306,493,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,494,322,323,349,495,324,363,496,325,326,327],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.EasyMock:613","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:129","sourceCode":"final java.lang.Throwable java.lang.Throwable","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:136","sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","type":"CtInvocationImpl"},"failures":[426,497,498],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[276],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"expected"}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[499,74],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:91","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:839","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[286],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[357,243,244,245],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.Range:36","failures":[366,0,1,2,367,368,369,370,371,372,330,331,373,374,3,4,5,6,7,375,376,377,8,9,10,11,12,13,14,15,16,17,18,337,500,501,378,379,338,380,381,382,383,384,385,386,387,362,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,405,44,45,339,406,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,407,408,409,75,410,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,411,99,100,101,102,103,104,105,106,107,108,355,412,413,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,414,126,127,415,128,129,416,417,340,130,131,418,132,419,420,421,502,422,423,424,425,133,332,333,334,426,335,427,336,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,356,428,429,430,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,431,211,432,433,212,213,214,215,434,435,436,216,217,218,219,437,503,504,505,438,439,440,220,221,222,223,224,225,226,227,228,506,229,230,231,507,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,441,259,260,261,442,262,263,264,265,266,443,267,268,269,270,271,272,444,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,445,446,447,448,449,290,450,451,452,453,454,455,291,456,292,342,457,458,293,294,295,347,296,508,348,297,298,459,299,460,461,462,463,464,300,465,466,467,468,469,470,471,472,473,301,474,475,302,476,477,478,479,480,481,482,483,484,303,485,486,487,488,364,304,489,490,491,492,305,306,493,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,494,322,323,349,495,324,363,496,325,326,327],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[337,338,27,44,45,339,47,75,340,130,131,132,168,169,170,170,171,171,172,200,204,205,207,208,209,210,211,212,213,214,215,225,226,227,228,230,231,243,245,291,341,292,342,293,294,295,296,297,298,343,299,301,302,303,304,323,345],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","method":"method","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:879","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[280,509],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1026","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[266,270,444],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:222","failures":[375,376,414,415],"status":-1,"binaryOperator":"(\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString()))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[281],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":266,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":154,"org.easymock.tests2.UsageTest.argumentsOrdered":318,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":256,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":450,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":391,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":313,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":173,"org.easymock.tests2.DelegateToTest.testReturnException":259,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":14,"org.easymock.tests.MockingTest.testPartialClassMocking":130,"org.easymock.tests.MockClassControlTest.testToString":48,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":436,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":370,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":479,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":76,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":302,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":306,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":350,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":272,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":8,"org.easymock.tests2.UsageTest.wrongArguments":311,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":470,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":165,"org.easymock.samples.ExampleTest.answerVsDelegate":175,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":338,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":420,"org.easymock.tests2.UsageConstraintsTest.testNull":268,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":207,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":53,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":255,"org.easymock.tests2.CaptureTest.testPrimitive":187,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":12,"org.easymock.tests.UsageTest.moreThanOneArgument":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":95,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":206,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":113,"org.easymock.tests.UsageTest.argumentsOrdered":161,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":372,"org.easymock.tests.UsageVarargTest.varargIntAccepted":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":396,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":3,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":291,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":504,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":454,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":384,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":7,"org.easymock.tests.ReplayStateInvalidUsageTest.times":62,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":300,"org.easymock.tests2.DependencyTest.testClassMocking":491,"org.easymock.tests2.AnswerTest.answer":324,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":444,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":398,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":235,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":501,"org.easymock.tests2.CaptureTest.testAnd":184,"org.easymock.tests2.UsageTest.strictResetToDefault":309,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":457,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":212,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":250,"org.easymock.tests2.DelegateToTest.testDelegate":262,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":374,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":91,"org.easymock.tests.LimitationsTest.mockFinalMethod":410,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":17,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":23,"org.easymock.tests2.DependencyTest.testClassMockingSupport":492,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":375,"org.easymock.tests2.CaptureTest.testCapture1_2446744":188,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":431,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":89,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":233,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":56,"org.easymock.tests.UsageThrowableTest.throwError":66,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":379,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":502,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":455,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":490,"org.easymock.samples.PartialClassMockTest.testGetArea":172,"org.easymock.tests.MockingTest.testInterfaceMocking":418,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":57,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":4,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":423,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":480,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":77,"org.easymock.tests2.UsageTest.niceToStrict":312,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":368,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":382,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":293,"org.easymock.tests2.MockBuilderTest.testCreateMock":297,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":487,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":467,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":85,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":360,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":251,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":500,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":429,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":116,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":163,"org.easymock.tests.UsageOverloadedMethodTest.overloading":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":484,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":364,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":127,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":277,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":145,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":28,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":497,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":276,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":193,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":411,"org.easymock.tests.MockClassControlTest.testEquals":52,"org.easymock.tests2.EasyMockSupportClassTest.testAll":301,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":45,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":93,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":344,"org.easymock.tests2.CaptureTest.testCaptureAll":185,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":21,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":234,"org.easymock.tests.MockNameTest.defaultName":407,"org.easymock.tests2.UsageConstraintsTest.testMatches":278,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":114,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":54,"org.easymock.samples.ExampleTest.voteForRemovals":179,"org.easymock.tests.UsageVarargTest.allKinds":106,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":24,"org.easymock.samples.BasicClassMockTest.testPrintContent":169,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":22,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":72,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":451,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":442,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":18,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":427,"org.easymock.tests2.UsageConstraintsTest.greaterThan":280,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":354,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":474,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":41,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":215,"org.easymock.samples.ExampleTest.voteForRemoval":176,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":336,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":434,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":221,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":380,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":505,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":210,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":27,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":308,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":388,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":248,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":472,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":13,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":441,"org.easymock.tests2.CaptureTest.testCaptureFirst":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":362,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":249,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":320,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":129,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":141,"org.easymock.tests2.CaptureTest.testCapture2_2446744":196,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":223,"org.easymock.tests2.UsageTest.moreThanOneArgument":310,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":399,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":298,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":105,"org.easymock.tests.GenericTest.testBridgedEquals":406,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":123,"org.easymock.tests.UsageExpectAndReturnTest.longType":137,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":19,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":246,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":94,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":343,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":430,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":92,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":412,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":111,"org.easymock.tests.UsageCallCountTest.tooManyCalls":124,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":488,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":142,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":469,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":81,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":71,"org.easymock.tests.MockingTest.testNiceClassMocking":421,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":226,"org.easymock.tests.MockingTest.testClassMocking":417,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":117,"org.easymock.tests2.UsageConstraintsTest.testContains":275,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":341,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":200,"org.easymock.tests2.UsageConstraintsTest.testFind":267,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":30,"org.easymock.tests.MockTypeTest.fromEasyMockClass":378,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":31,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":322,"org.easymock.tests.UsageExpectAndReturnTest.object":144,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":211,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":468,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":254,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":100,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":351,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":2,"org.easymock.tests.UsageTest.exactCallCountByLastCall":162,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":109,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":387,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":330,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":369,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":349,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":150,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":96,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":126,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":446,"org.easymock.tests.MockClassControlTest.testHashCode":51,"org.easymock.tests2.EasyMockSupportTest.testVerify":258,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":482,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":331,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":428,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":125,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":232,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":493,"org.easymock.tests.UsageVarargTest.varargCharAccepted":99,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":425,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":404,"org.easymock.tests2.UsageTest.openCallCountByLastCall":314,"org.easymock.tests.DefaultClassInstantiatorTest.object":133,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":257,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":356,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":0,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":329,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":483,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":83,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":69,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":463,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":445,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":50,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":213,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":82,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":355,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":49,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":304,"org.easymock.tests2.UsageTest.resumeIfFailure":319,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":337,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":503,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":16,"org.easymock.tests2.StubTest.stubWithReturnValue":203,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":347,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":143,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":286,"org.easymock.tests2.SerializationTest.testAllMockedMethod":245,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":397,"org.easymock.samples.SupportTest.voteForRemovals":183,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":361,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":405,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":448,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":88,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":357,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":403,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":363,"org.easymock.tests.UsageExpectAndThrowTest.object":86,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":371,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":283,"org.easymock.tests2.DelegateToTest.testWrongClass":261,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":107,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":108,"org.easymock.samples.ConstructorCalledMockTest.testTax":170,"org.easymock.tests.UsageStrictMockTest.range":36,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":439,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":253,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":87,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":471,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":160,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":64,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":164,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":358,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":424,"org.easymock.tests2.CaptureTest.testCaptureNone":192,"org.easymock.tests.UsageUnorderedTest.message":74,"org.easymock.tests.UsageVerifyTest.twoReturns":26,"org.easymock.tests.UsageVarargTest.varargByteAccepted":104,"org.easymock.tests2.ThreadingTest.testThreadSafe":220,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":485,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":121,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":168,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":367,"org.easymock.tests2.CaptureTest.testCapture_2617107":186,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":401,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":11,"org.easymock.tests2.UsageConstraintsTest.any":273,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":61,"org.easymock.tests2.StubTest.stub":202,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":413,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":402,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":15,"org.easymock.tests.UsageExpectAndThrowTest.longType":79,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":426,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":60,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.SerializationTest.testClass":243,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":290,"org.easymock.tests.LimitationsTest.mockNativeMethod":75,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":153,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":339,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":462,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":346,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests2.NameTest.nameForMocksControl":219,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":464,"org.easymock.tests2.MockedExceptionTest.testMockedException":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":475,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":159,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":494,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":132,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":80,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":204,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":296,"org.easymock.tests.MockingTest.testNicePartialClassMocking":131,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":209,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":460,"org.easymock.tests2.CaptureTest.testCaptureLast":191,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":376,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":231,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":271,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":284,"org.easymock.tests.MockingTest.testTwoMocks":340,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":507,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":134,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":84,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":317,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":288,"org.easymock.samples.ExampleTest.removeNonExistingDocument":180,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":466,"org.easymock.tests.UsageStrictMockTest.differentMethods":37,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":58,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":447,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":333,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":222,"org.easymock.tests2.MockBuilderTest.testCreateMockString":299,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":476,"org.easymock.tests.UsageExpectAndThrowTest.floatType":78,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":279,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":473,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":325,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":495,"org.easymock.tests.UsageVerifyTest.twoThrows":25,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":414,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":303,"org.easymock.samples.ExampleTest.voteAgainstRemoval":177,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":392,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":214,"org.easymock.tests.LimitationsTest.privateConstructor":409,"org.easymock.tests2.UsageConstraintsTest.testNotNull":287,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":73,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":198,"org.easymock.tests2.UsageTest.defaultResetToNice":316,"org.easymock.samples.ExampleTest.voteAgainstRemovals":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":393,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":149,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":461,"org.easymock.tests.UsageVarargTest.differentLength":101,"org.easymock.tests2.CallbackTest.callback":307,"org.easymock.tests2.UsageConstraintsTest.equals":443,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":432,"org.easymock.tests.UsageTest.openCallCountByLastCall":158,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":263,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":10,"org.easymock.tests.UsageCallCountTest.tooFewCalls":119,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":228,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":166,"org.easymock.tests.UsageThrowableTest.throwCheckedException":70,"org.easymock.tests.MockingTest.testStrictClassMocking":416,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":359,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":110,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":230,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":465,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":227,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":63,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":229,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":327,"org.easymock.tests.ObjectMethodsTest.testHashCode":1,"org.easymock.tests2.CompareToTest.testGreateOrEqual":365,"org.easymock.tests2.NameTest.nameForNiceMock":218,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":224,"org.easymock.tests2.DependencyTest.testInterfaceMocking":305,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":352,"org.easymock.samples.ExampleTest.addDocument":178,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":486,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":489,"org.easymock.tests2.DelegateToTest.testStubDelegate":260,"org.easymock.tests2.AnswerTest.stubAnswer":326,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":34,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":508,"org.easymock.tests.UsageVarargTest.varargLongAccepted":103,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":38,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":390,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":152,"org.easymock.tests.UsageExpectAndReturnTest.floatType":136,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":323,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":453,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":415,"org.easymock.tests.UsageThrowableTest.noUpperLimit":67,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":281,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":264,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":437,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":189,"org.easymock.tests2.SerializationTest.test":244,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":498,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":332,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":135,"org.easymock.tests2.UsageConstraintsTest.testSame":269,"org.easymock.samples.SupportTest.addDocument":182,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":506,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":59,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":477,"org.easymock.tests.GenericTest.testPackageScope":44,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":386,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":452,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":419,"org.easymock.tests2.NameTest.nameForMock":216,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":146,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":459,"org.easymock.tests2.UsageStrictMockTest.differentMethods":241,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":433,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":138,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":90,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":366,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":43,"org.easymock.tests2.MockedExceptionTest.testRealException":201,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":381,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":395,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":328,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":394,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":238,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":9,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":65,"org.easymock.tests2.NameTest.nameForStrictMock":217,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":458,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":321,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":208,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":438,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":499,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":282,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":334,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":292,"org.easymock.tests2.UsageStrictMockTest.range":240,"org.easymock.tests2.UsageConstraintsTest.lessThan":289,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":389,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":247,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":353,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":481,"org.easymock.tests2.CaptureTest.testCaptureRightOne":194,"org.easymock.tests2.UsageConstraintsTest.testOr":270,"org.easymock.tests.UsageRangeTest.combination":40,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":205,"org.easymock.tests.UsageTest.wrongArguments":157,"org.easymock.tests2.MockBuilderTest.testWithConstructor":456,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":478,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":47,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":139,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":383,"org.easymock.tests.UsageVarargTest.varargShortAccepted":102,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":335,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":122,"org.easymock.tests2.UsageConstraintsTest.cmpTo":274,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":496,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":385,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":315,"org.easymock.tests2.CaptureTest.testCaptureFromStub":195,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":55,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":342,"org.easymock.tests.UsageTest.unexpectedCallWithArray":156,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":33,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":120,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":148,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":35,"org.easymock.tests2.UsageConstraintsTest.constraints":265,"org.easymock.samples.ExampleTest.addAndChangeDocument":181,"org.easymock.tests.UsageStrictMockTest.testVerify":39,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":167,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":32,"org.easymock.tests2.CompareToTest.testGreateThan":509,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":20,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":190,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":5,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":345,"org.easymock.tests.LimitationsTest.abstractClass":408,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":140,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":128,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":6,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":97,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":252}}]

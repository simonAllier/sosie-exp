[{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[26,3,27,28,29,30,31,32,33,34,6,7,35,36,37,38,39,15,16,40,41,42,43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:331","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[44],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ExpectedInvocation:81","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not implemented\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:279","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[45,46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[47,48,49,50],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:354","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"genericType","this":"this","bound":"genericType"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:126","sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:97","sourceCode":"for (final java.lang.String java.lang.String : java.lang.String[]) {\n    org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.String);\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:92","sourceCode":"for (final org.easymock.internal.Range org.easymock.internal.Range : java.util.LinkedList<org.easymock.internal.Range>) {\n    int += org.easymock.internal.Range.getMinimum();\n    if ((org.easymock.internal.Range.hasOpenCount()) || (int == (java.lang.Integer.int))) {\n        int = java.lang.Integer.int;\n    } else {\n        int += org.easymock.internal.Range.getMaximum();\n    }\n}","type":"CtForEachImpl"},"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,3,27,28,76,29,30,31,32,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,33,34,103,6,7,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,8,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,12,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,35,36,179,44,37,38,180,181,182,183,39,184,15,16,185,186,40,41,42,43,187,188,189,190,48,49,50,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,17,18,210,19,211,20,21,212,213,214,215,22,0,216,23,217,218,24,219,220,221,222,223,25,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"failures":[51,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,252,30,31,32,101,102,33,34,103,6,7,104,253,108,109,112,119,120,121,122,123,124,125,127,152,9,254,255,256,257,153,10,11,158,159,160,165,170,171,172,173,176,36,44,37,38,182,183,39,184,15,16,185,40,41,42,43,188,50,195,196,199,258,214,259,222,237,238,240,241,242,243,246,247],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:36","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[32,6,38,15],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:85","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:159","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[260,261,262,263,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[265,266,267],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:144","sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","type":"CtInvocationImpl"},"failures":[268,269,270],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:51","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[271,272,273,29,274,30,31,32,33,35,36,37,38,275,276,277,278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[279],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[280,281,282,283,284,285,201,205,286,287,288],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:65","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","type":"CtInvocationImpl"},"failures":[75,252,33,34,105,289,106,107,108,109,110,113,290,114,115,116,117,118,291,150,151,152,292,158,159,160,39,184,1,293,209,17,18,210,19,211,20,21,212,213,258,214,215,22,0,216,23,217,218,24,219,220,221,259,222,223,25,224,231,294,236,237,238,239,295,240,241,242,243,244,245,296,297,246,247],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"failures":[114],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[298,299,300],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[271,272,274,33,275,277],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:416","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[219],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Same:37","sourceCode":"return (java.lang.Object) == java.lang.Object","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:61","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    java.util.Stack<org.easymock.IArgumentMatcher> = new java.util.Stack<org.easymock.IArgumentMatcher>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.set(java.util.Stack<org.easymock.IArgumentMatcher>);\n} ","type":"CtIfImpl"},"failures":[75,33,34,105,289,106,107,108,109,110,113,114,115,116,117,118,150,151,152,158,159,39,1,293,209,17,18,210,19,211,20,21,212,213,258,214,215,22,0,216,23,217,218,24,219,220,221,259,222,223,25,224,231,236,237,238,239,295,240,241,242,243,244,245,296,297,246],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:365","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[51,55,301,302,303,304,305,306,235,307,308,309,310,311,312,313,314,315,316,317,247,318,319,320,321,322,323],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":210,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":76,"org.easymock.tests2.UsageTest.argumentsOrdered":38,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":307,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":44,"org.easymock.tests2.StubTest.stubWithReturnValue":161,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":283,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":222,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":90,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":55,"org.easymock.tests2.SerializationTest.testAllMockedMethod":50,"org.easymock.tests2.DelegateToTest.testReturnException":248,"org.easymock.tests.MockingTest.testPartialClassMocking":78,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":277,"org.easymock.samples.SupportTest.voteForRemovals":53,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":305,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":141,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":47,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":192,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":129,"org.easymock.tests.UsageExpectAndThrowTest.object":139,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":26,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":220,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":175,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":150,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":151,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":213,"org.easymock.tests2.UsageTest.wrongArguments":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":106,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":323,"org.easymock.tests.UsageStrictMockTest.range":6,"org.easymock.samples.ExampleTest.answerVsDelegate":57,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":2,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":279,"org.easymock.tests2.UsageConstraintsTest.testNull":211,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":228,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":140,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":197,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":170,"org.easymock.tests2.CaptureTest.testPrimitive":239,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":110,"org.easymock.tests.UsageTest.moreThanOneArgument":29,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":31,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":148,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":227,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":271,"org.easymock.tests2.CaptureTest.testCaptureNone":243,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":262,"org.easymock.tests.UsageUnorderedTest.message":152,"org.easymock.tests.UsageVerifyTest.twoReturns":28,"org.easymock.tests.UsageVarargTest.varargByteAccepted":73,"org.easymock.tests2.ThreadingTest.testThreadSafe":206,"org.easymock.tests.UsageTest.argumentsOrdered":32,"org.easymock.tests.UsageVarargTest.varargIntAccepted":67,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":123,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":63,"org.easymock.tests2.CaptureTest.testCapture_2617107":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":114,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":278,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":311,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":109,"org.easymock.tests2.UsageConstraintsTest.any":214,"org.easymock.tests2.StubTest.stub":160,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":118,"org.easymock.tests.UsageExpectAndThrowTest.longType":132,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":268,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":184,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":235,"org.easymock.tests2.SerializationTest.testClass":48,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":247,"org.easymock.tests.LimitationsTest.mockNativeMethod":149,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":100,"org.easymock.tests2.AnswerTest.answer":187,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":256,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":315,"org.easymock.tests2.CaptureTest.testAnd":236,"org.easymock.tests2.UsageTest.strictResetToDefault":178,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":294,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":282,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":185,"org.easymock.tests2.NameTest.nameForMocksControl":43,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":317,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":156,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":166,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":5,"org.easymock.tests2.DelegateToTest.testDelegate":250,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":80,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":133,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":225,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":198,"org.easymock.tests.MockingTest.testNicePartialClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":144,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":230,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":313,"org.easymock.tests2.CaptureTest.testCaptureLast":242,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":113,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":212,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":205,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":221,"org.easymock.tests2.CaptureTest.testCapture1_2446744":295,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":286,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":261,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":81,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":142,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":137,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":25,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":264,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":319,"org.easymock.tests.UsageStrictMockTest.differentMethods":7,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":304,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":263,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":312,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":292,"org.easymock.tests.UsageExpectAndThrowTest.floatType":131,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":217,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":188,"org.easymock.tests.UsageVerifyTest.twoThrows":27,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":193,"org.easymock.samples.PartialClassMockTest.testGetArea":54,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":115,"org.easymock.samples.ExampleTest.voteAgainstRemoval":59,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":233,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":130,"org.easymock.tests2.UsageTest.niceToStrict":179,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":288,"org.easymock.tests2.ThreadingTest.testChangeDefault":260,"org.easymock.tests2.UsageConstraintsTest.testNotNull":223,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":300,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":196,"org.easymock.samples.ExampleTest.voteAgainstRemovals":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":255,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":96,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":314,"org.easymock.tests.UsageVarargTest.differentLength":70,"org.easymock.tests2.CallbackTest.callback":176,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":320,"org.easymock.tests.UsageTest.openCallCountByLastCall":4,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":275,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":138,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":167,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":209,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":119,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":108,"org.easymock.tests.UsageCallCountTest.tooFewCalls":121,"org.easymock.tests.UsageOverloadedMethodTest.overloading":128,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":216,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":202,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":92,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":269,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":0,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":244,"org.easymock.tests2.EasyMockSupportClassTest.testAll":191,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":127,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":276,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":272,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":146,"org.easymock.tests2.CaptureTest.testCaptureAll":237,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":289,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":204,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":318,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":201,"org.easymock.tests2.UsageConstraintsTest.testMatches":23,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":203,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":190,"org.easymock.samples.ExampleTest.voteForRemovals":61,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":208,"org.easymock.tests2.NameTest.nameForNiceMock":42,"org.easymock.tests.UsageVarargTest.allKinds":75,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":3,"org.easymock.tests2.DependencyTest.testInterfaceMocking":174,"org.easymock.samples.BasicClassMockTest.testPrintContent":64,"org.easymock.samples.ExampleTest.addDocument":60,"org.easymock.tests2.DelegateToTest.testStubDelegate":249,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":182,"org.easymock.tests2.AnswerTest.stubAnswer":189,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":308,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":290,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":34,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":267,"org.easymock.tests2.UsageConstraintsTest.greaterThan":218,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":155,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":234,"org.easymock.tests.UsageVarargTest.varargLongAccepted":72,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":104,"org.easymock.samples.ExampleTest.voteForRemoval":58,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":207,"org.easymock.tests.UsageExpectAndReturnTest.floatType":83,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":99,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":301,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":186,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":310,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":153,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":17,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":112,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":177,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":240,"org.easymock.tests2.SerializationTest.test":49,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":270,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":164,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":154,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":82,"org.easymock.tests2.UsageConstraintsTest.testSame":20,"org.easymock.samples.SupportTest.addDocument":52,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":265,"org.easymock.tests2.CaptureTest.testCaptureFirst":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":165,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":181,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":88,"org.easymock.tests.GenericTest.testPackageScope":126,"org.easymock.tests2.CaptureTest.testCapture2_2446744":297,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":293,"org.easymock.tests2.UsageTest.moreThanOneArgument":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":257,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":199,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":309,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":74,"org.easymock.tests2.NameTest.nameForMock":40,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":124,"org.easymock.tests.UsageExpectAndReturnTest.longType":84,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":291,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":162,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":93,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":147,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":259,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":252,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":285,"org.easymock.tests2.UsageStrictMockTest.differentMethods":16,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":145,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":85,"org.easymock.tests.UsageCallCountTest.tooManyCalls":125,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":143,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":157,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":120,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":89,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":322,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":39,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":134,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":107,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":200,"org.easymock.tests2.UsageConstraintsTest.testContains":22,"org.easymock.tests2.NameTest.nameForStrictMock":41,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":251,"org.easymock.tests2.UsageConstraintsTest.testFind":19,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":299,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":158,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":229,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":101,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":159,"org.easymock.tests.UsageExpectAndReturnTest.object":91,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":219,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":231,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":195,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":321,"org.easymock.tests2.UsageStrictMockTest.range":15,"org.easymock.tests2.UsageConstraintsTest.lessThan":224,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":169,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":69,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":306,"org.easymock.tests.UsageTest.exactCallCountByLastCall":77,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":254,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":163,"org.easymock.tests2.CaptureTest.testCaptureRightOne":245,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":10,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":273,"org.easymock.tests2.UsageConstraintsTest.testOr":21,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":280,"org.easymock.tests.UsageRangeTest.combination":12,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":226,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":65,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":97,"org.easymock.tests.UsageTest.wrongArguments":30,"org.easymock.tests2.MockBuilderTest.testWithConstructor":281,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":303,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":86,"org.easymock.tests2.EasyMockSupportTest.testVerify":173,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":94,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":9,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":11,"org.easymock.tests.UsageVarargTest.varargShortAccepted":71,"org.easymock.tests2.UsageConstraintsTest.cmpTo":215,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":1,"org.easymock.tests.UsageVarargTest.varargCharAccepted":68,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":266,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":46,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":183,"org.easymock.tests2.UsageTest.openCallCountByLastCall":13,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":14,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":298,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":172,"org.easymock.tests2.CaptureTest.testCaptureFromStub":296,"org.easymock.tests.UsageTest.unexpectedCallWithArray":274,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":136,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":33,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":122,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":316,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":284,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":302,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":95,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":232,"org.easymock.tests2.UsageConstraintsTest.constraints":18,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":103,"org.easymock.samples.ExampleTest.addAndChangeDocument":62,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":135,"org.easymock.tests.UsageStrictMockTest.testVerify":253,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":98,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":194,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":102,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":241,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":87,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":111,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":117,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":66,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":168}}]

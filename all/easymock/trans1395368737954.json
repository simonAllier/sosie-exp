[{"transplant":{"position":"org.easymock.EasyMock:572","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[141,142,14,143],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"failures":[26,144,28,145,146,147,148,107,149,117,150,135,151],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[54,152,55,153,56,154,57,155,156,59,157,60,158,159],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[160],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[161],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:217","failures":[162,26,163,36,164,148,165,135,151],"status":-1,"binaryOperator":"((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[166,167,17,18,19,63,168,169,170],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:115","sourceCode":"return org.easymock.IAnswer<?>.toString()","type":"CtReturnImpl"},"failures":[171,172,173],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[174,170],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,175,176],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[162,1,3,177,178,5,6,179,7,180,8,181,9,182,10,183,11,184,12,141,142,166,15,16,167,17,18,19,185,21,22,186,187,188,26,27,144,163,29,145,31,33,189,34,190,36,191,37,192,38,193,39,194,40,195,41,196,42,197,43,198,44,199,45,200,46,201,47,202,48,203,49,204,51,205,52,206,207,208,209,210,53,211,212,54,152,55,153,56,155,58,156,59,60,158,61,213,63,214,64,168,65,215,66,216,69,71,217,72,73,218,219,81,220,146,221,87,222,88,223,89,224,225,226,227,228,229,230,164,100,231,101,232,102,233,103,234,148,235,107,236,109,237,238,239,110,240,111,241,112,242,243,113,244,245,114,246,115,247,116,248,249,250,251,117,252,119,165,253,122,254,123,255,256,125,257,258,259,260,134,150,151,136,261],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:196","sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.LastControl:80","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.And(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[192,38,193,39,194,40,195,41,262,196,46,201,203,49,54,152,55,153,59,157],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[263,264,265,266,267,268,269,3,270,177,178,5,6,271,272,141,15,273,185,21,22,186,51,205,52,206,274,274,70,70,71,89,224,90,233,103,234,257],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[27,30,275,35,105,235,276,118,277,120,121,278,135,151],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:248","sourceCode":"this.org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[17,32,199,160],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","shouldBeUsedInOneThread":"value"}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[38,193],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:159","failures":[279,280,281,282,283,274,70],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:90","sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1581","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(boolean[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:261","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[284,285,251],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:296","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[286,287,288,289,290,104,137],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:125","sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","bridgeMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:115","sourceCode":"if (!(java.lang.String.startsWith(java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + java.lang.String) + \"\\\"\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.EasyMockProperties.PREFIX":"failMessage","key":"failMessage"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[291,67,216,68,69,220,292,293,91,294,295,296,92,297,93,298,94,299,300,95,301,302,96,303,97,304,98,230,100,231,101,232,102,305,127,306,128,307,129,134,135],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[250],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"returnedType"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[163,189,69,292,308,309,310,311,293,91,294,295,296,92,297,93,298,94,299,300,95,301,302,96,303,97,304,98,230,164,100,231,101,232,102,251,119,307,134,135],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"this.org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"failures":[26,144,28,145,146,148,107,149,117,150,135,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":38,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":251,"org.easymock.tests2.UsageTest.argumentsOrdered":35,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":184,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":128,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":32,"org.easymock.tests2.StubTest.stubWithReturnValue":69,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":48,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":112,"org.easymock.tests2.SerializationTest.testAllMockedMethod":14,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":127,"org.easymock.tests.MockingTest.testPartialClassMocking":233,"org.easymock.samples.SupportTest.voteForRemovals":217,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":174,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":290,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":95,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":143,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":293,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":285,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":205,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":0,"org.easymock.tests.UsageExpectAndThrowTest.object":299,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":208,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":201,"org.easymock.tests2.DelegateToTest.testWrongClass":24,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":136,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":261,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":41,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":255,"org.easymock.tests2.UsageTest.wrongArguments":30,"org.easymock.samples.ConstructorCalledMockTest.testTax":274,"org.easymock.tests.UsageStrictMockTest.range":235,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":10,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":63,"org.easymock.tests2.UsageConstraintsTest.testNull":39,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":300,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":167,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":11,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":169,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":178,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":263,"org.easymock.tests2.CaptureTest.testPrimitive":153,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":125,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":277,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":98,"org.easymock.tests.UsageTest.moreThanOneArgument":117,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":16,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":130,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":250,"org.easymock.tests2.CaptureTest.testCaptureNone":58,"org.easymock.tests.UsageUnorderedTest.message":121,"org.easymock.tests.UsageVerifyTest.twoReturns":151,"org.easymock.tests2.ThreadingTest.testThreadSafe":209,"org.easymock.tests.UsageTest.argumentsOrdered":120,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":126,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":79,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":221,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":269,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":227,"org.easymock.tests2.UsageConstraintsTest.any":196,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":4,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":306,"org.easymock.tests.UsageExpectAndThrowTest.longType":295,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":228,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":160,"org.easymock.tests2.SerializationTest.testClass":141,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":187,"org.easymock.tests.LimitationsTest.mockNativeMethod":257,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":213,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":90,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":116,"org.easymock.tests2.AnswerTest.answer":162,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":262,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":266,"org.easymock.tests2.CaptureTest.testAnd":54,"org.easymock.tests2.UsageTest.strictResetToDefault":29,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":20,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":28,"org.easymock.tests2.MockedExceptionTest.testMockedException":67,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":82,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":254,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":181,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":119,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":296,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":234,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":166,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":5,"org.easymock.tests.MockingTest.testNicePartialClassMocking":103,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":96,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":18,"org.easymock.tests2.CaptureTest.testCaptureLast":155,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":307,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":195,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":66,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests2.CaptureTest.testCapture1_2446744":56,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":236,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":298,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":275,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":49,"org.easymock.tests.UsageThrowableTest.throwError":230,"org.easymock.samples.ExampleTest.removeNonExistingDocument":75,"org.easymock.tests.UsageStrictMockTest.differentMethods":107,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":53,"org.easymock.tests2.MockBuilderTest.testCreateMockString":272,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":84,"org.easymock.tests.UsageExpectAndThrowTest.floatType":294,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":199,"org.easymock.tests.ResultTest.createReturnResultToString":172,"org.easymock.tests.UsageVerifyTest.twoThrows":135,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":85,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":52,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.ResultTest.createDelegateResultToString":171,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":87,"org.easymock.samples.ExampleTest.voteAgainstRemoval":218,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":249,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":226,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":21,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":91,"org.easymock.tests2.UsageTest.niceToStrict":31,"org.easymock.tests2.UsageConstraintsTest.testNotNull":203,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":291,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":286,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":177,"org.easymock.tests2.UsageTest.defaultResetToNice":34,"org.easymock.samples.ExampleTest.voteAgainstRemovals":72,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":114,"org.easymock.tests.UsageVarargTest.differentLength":139,"org.easymock.tests2.CallbackTest.callback":2,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":283,"org.easymock.tests.UsageTest.openCallCountByLastCall":252,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":94,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":9,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":191,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":311,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":77,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":124,"org.easymock.tests.UsageCallCountTest.tooFewCalls":78,"org.easymock.tests.UsageOverloadedMethodTest.overloading":260,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":292,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":198,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":259,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":243,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":168,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":43,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":156,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":131,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":161,"org.easymock.tests.UsageThrowableTest.throwCheckedException":231,"org.easymock.tests2.EasyMockSupportClassTest.testAll":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":97,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":264,"org.easymock.tests2.MockBuilderTest.testWithArgs_WithoutConstructor":281,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":62,"org.easymock.tests2.CaptureTest.testCaptureAll":152,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":220,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":215,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":64,"org.easymock.tests2.UsageConstraintsTest.testMatches":44,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":65,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":83,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":104,"org.easymock.samples.ExampleTest.voteForRemovals":219,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":212,"org.easymock.tests.UsageVarargTest.allKinds":140,"org.easymock.tests2.DependencyTest.testInterfaceMocking":207,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":150,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":133,"org.easymock.samples.ExampleTest.addDocument":74,"org.easymock.tests2.DelegateToTest.testStubDelegate":188,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":232,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":25,"org.easymock.tests2.AnswerTest.stubAnswer":1,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":129,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":148,"org.easymock.tests2.UsageConstraintsTest.greaterThan":45,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":122,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":22,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":225,"org.easymock.samples.ExampleTest.voteForRemoval":73,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":210,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":247,"org.easymock.tests.UsageExpectAndReturnTest.floatType":237,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":271,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":273,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":186,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":70,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":200,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":86,"org.easymock.tests.UsageThrowableTest.noUpperLimit":99,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":89,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":37,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":163,"org.easymock.tests2.SerializationTest.test":142,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":154,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":164,"org.easymock.tests2.UsageConstraintsTest.testSame":194,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":305,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":23,"org.easymock.tests2.CaptureTest.testCaptureFirst":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":176,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":8,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":36,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":111,"org.easymock.tests.GenericTest.testPackageScope":224,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":211,"org.easymock.tests2.CaptureTest.testCapture2_2446744":60,"org.easymock.tests2.UsageTest.moreThanOneArgument":145,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":287,"org.easymock.tests.GenericTest.testBridgedEquals":170,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":80,"org.easymock.tests.UsageExpectAndReturnTest.longType":238,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":179,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":304,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":113,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":202,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":137,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":303,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":282,"org.easymock.tests2.UsageStrictMockTest.differentMethods":144,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":239,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":302,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":123,"org.easymock.tests2.MockedExceptionTest.testRealException":68,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":241,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":289,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":92,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":256,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":101,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":214,"org.easymock.tests2.UsageConstraintsTest.testContains":197,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":216,"org.easymock.tests2.UsageConstraintsTest.testFind":193,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":134,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":50,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":17,"org.easymock.tests.UsageExpectAndReturnTest.object":242,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":19,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":3,"org.easymock.tests2.UsageStrictMockTest.range":27,"org.easymock.tests2.UsageConstraintsTest.lessThan":204,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":183,"org.easymock.tests.UsageTest.exactCallCountByLastCall":165,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":268,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":288,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":7,"org.easymock.tests2.CaptureTest.testCaptureRightOne":59,"org.easymock.tests2.UsageConstraintsTest.testOr":40,"org.easymock.tests.UsageRangeTest.combination":253,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":246,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":15,"org.easymock.tests.UsageTest.wrongArguments":118,"org.easymock.tests2.MockBuilderTest.testWithConstructor":279,"org.easymock.tests.ResultTest.createThrowResultToString":173,"org.easymock.tests2.EasyMockSupportTest.testVerify":13,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":110,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":244,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":310,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":61,"org.easymock.tests2.UsageConstraintsTest.cmpTo":42,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":308,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":229,"org.easymock.tests2.UsageTest.openCallCountByLastCall":33,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":189,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":12,"org.easymock.tests.DefaultClassInstantiatorTest.object":108,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":309,"org.easymock.tests2.CaptureTest.testCaptureFromStub":157,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":270,"org.easymock.tests.UsageTest.unexpectedCallWithArray":276,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":93,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":267,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":100,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":105,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":245,"org.easymock.tests2.UsageConstraintsTest.constraints":192,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":106,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":185,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":297,"org.easymock.tests.CapturesMatcherTest.test":159,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":206,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":132,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":57,"org.easymock.tests2.UsageTest.resumeIfFailure":190,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":265,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":240,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":88,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":138,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":182}}]

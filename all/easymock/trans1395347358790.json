[{"transplantationPoint":{"position":"org.easymock.internal.RecordState:233","sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[6,24,25],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:201","failures":[26,26,27,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:137","sourceCode":"return java.util.List<T>.toString()","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injector:75","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:47","sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:91","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"calling verify is not allowed in record state\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[58,59],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[60,61,15,62,63],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:370","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[16,64,65,66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:58","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[26,26,27,27,28,106,107,29,30,108,109,110,111,112,113,114,32,115,116,117,118,119,120,33,35,121,122,36,37,38,39,40,41,43,123,44,45,124,48,49,125,126,127,128,129,130,131,132,133,134,135,50,136,137,52,53,138,54,139],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1543","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1107","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.NotNull:36","sourceCode":"return java.lang.Object != null","type":"CtReturnImpl"},"failures":[141,142,143,144],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:183","sourceCode":"org.easymock.internal.IMocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, ((org.easymock.internal.Result) != null ? org.easymock.internal.Result : org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null)), org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[145,28,146,147,148,149,150,151,70,152,71,153,154,155,72,156,157,158,109,110,111,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,60,189,190,191,192,193,194,195,196,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,115,197,198,199,96,97,98,99,100,101,102,200,201,202,203,65,141,142,103,204,205,206,207,208,209,210,211,212,213,214,104,215,216,217,218,219,220,105,221,222,223,224,225,226,227,228,229,33,230,231,24,25,35,232,36,37,38,43,44,45,48,125,126,127,128,233,129,130,234,235,236,237,238,239,240,241,242,243,244,245,246,140,247,248,249,250,251,252,253,254,255,256,257,258,259,144,260,261,131,262,133,135,263,264,265,266,267,268,269,270,271,272,273,274,56,275,276,139],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:136","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if (org.easymock.ConstructorArgs == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:113","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"result":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[277,56],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:220","sourceCode":"if (!org.easymock.internal.RecordState.(isLastResultOrVoidMethod())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[26,26,27,27,181,186,187,188,189,191,192,193,194,195,197,198,278,279,280,281,282,103,225,238,239,242,243,244,245,249,251,252,254,255,144,260,261,283],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,277,56],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:177","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[26,26,27,27,28,106,107,29,30,108,109,110,111,112,113,114,32,115,116,33,35,121,122,36,37,38,39,22,40,41,43,123,44,45,124,48,23,49,125,126,127,128,129,130,131,132,133,134,135,50,136,137,52,53,138,284,285,286,139],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[34,287,288,289,290,291,127,130,292,293,294],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnedType":"argType"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:38","sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>.getName(), java.lang.Long.java.lang.Class<java.lang.Long>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":241,"org.easymock.tests2.UsageTest.argumentsOrdered":222,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":71,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":10,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":219,"org.easymock.tests2.StubTest.stubWithReturnValue":103,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":289,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":259,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":168,"org.easymock.tests2.SerializationTest.testAllMockedMethod":121,"org.easymock.tests2.DelegateToTest.testReturnException":274,"org.easymock.tests.MockingTest.testPartialClassMocking":109,"org.easymock.samples.SupportTest.voteForRemovals":145,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":31,"org.easymock.tests.MockClassControlTest.testToString":117,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":88,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":54,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":18,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":76,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":62,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":36,"org.easymock.tests.UsageExpectAndThrowTest.object":86,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":257,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":213,"org.easymock.tests2.DelegateToTest.testWrongClass":275,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":197,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":198,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":140,"org.easymock.tests2.UsageTest.wrongArguments":217,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":187,"org.easymock.samples.ConstructorCalledMockTest.testTax":26,"org.easymock.tests.UsageStrictMockTest.range":183,"org.easymock.samples.ExampleTest.answerVsDelegate":147,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":30,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":125,"org.easymock.tests2.UsageConstraintsTest.testNull":243,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":87,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":133,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":44,"org.easymock.tests2.CaptureTest.testPrimitive":267,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":189,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":95,"org.easymock.tests.UsageTest.moreThanOneArgument":153,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":156,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":262,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":280,"org.easymock.tests.UsageUnorderedTest.message":199,"org.easymock.tests.UsageVerifyTest.twoReturns":152,"org.easymock.tests2.ThreadingTest.testThreadSafe":234,"org.easymock.tests.UsageTest.argumentsOrdered":157,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":15,"org.easymock.tests2.CaptureTest.testCapture_2617107":266,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":191,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":39,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":60,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":19,"org.easymock.tests2.UsageConstraintsTest.any":247,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":123,"org.easymock.tests2.StubTest.stub":63,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":2,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":195,"org.easymock.tests.UsageExpectAndThrowTest.longType":79,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":20,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":226,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":263,"org.easymock.tests2.SerializationTest.testClass":35,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":273,"org.easymock.tests.LimitationsTest.mockNativeMethod":115,"org.easymock.tests2.DependencyTest.testClassMocking":58,"org.easymock.tests2.AnswerTest.answer":230,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":32,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":16,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":286,"org.easymock.tests2.CaptureTest.testAnd":264,"org.easymock.tests2.UsageTest.strictResetToDefault":215,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":288,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":229,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":137,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":279,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":207,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":203,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":72,"org.easymock.tests2.DelegateToTest.testDelegate":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":80,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":111,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":131,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":45,"org.easymock.tests.MockingTest.testNicePartialClassMocking":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":91,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":135,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":74,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":246,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":258,"org.easymock.tests2.DependencyTest.testClassMockingSupport":59,"org.easymock.tests.MockingTest.testTwoMocks":108,"org.easymock.tests2.CaptureTest.testCapture1_2446744":268,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":292,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":159,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":89,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":84,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":221,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":260,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":61,"org.easymock.tests.UsageThrowableTest.throwError":96,"org.easymock.tests.UsageStrictMockTest.differentMethods":184,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":235,"org.easymock.tests2.MockBuilderTest.testCreateMockString":49,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":282,"org.easymock.tests.UsageExpectAndThrowTest.floatType":78,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":253,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":231,"org.easymock.tests.UsageVerifyTest.twoThrows":70,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":37,"org.easymock.samples.PartialClassMockTest.testGetArea":28,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":192,"org.easymock.samples.ExampleTest.voteAgainstRemoval":149,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":11,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":53,"org.easymock.tests2.UsageTest.niceToStrict":218,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":77,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":120,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":294,"org.easymock.tests2.UsageConstraintsTest.testNotNull":144,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":55,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":102,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":0,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":43,"org.easymock.tests2.MockBuilderTest.testCreateMock":124,"org.easymock.samples.ExampleTest.voteAgainstRemovals":146,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":12,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":174,"org.easymock.tests2.CallbackTest.callback":214,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":51,"org.easymock.tests.UsageTest.openCallCountByLastCall":155,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":85,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":208,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":238,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":69,"org.easymock.tests.UsageOverloadedMethodTest.overloading":196,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":251,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":73,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":128,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":170,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":250,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":271,"org.easymock.tests.UsageThrowableTest.throwCheckedException":99,"org.easymock.tests2.EasyMockSupportClassTest.testAll":122,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":114,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":93,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":284,"org.easymock.tests2.CaptureTest.testCaptureAll":265,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":129,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":127,"org.easymock.tests2.UsageConstraintsTest.testMatches":252,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":233,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":25,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":281,"org.easymock.samples.ExampleTest.voteForRemovals":150,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":237,"org.easymock.tests2.DependencyTest.testInterfaceMocking":212,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":151,"org.easymock.samples.BasicClassMockTest.testPrintContent":107,"org.easymock.tests2.DelegateToTest.testStubDelegate":56,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":101,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":224,"org.easymock.tests2.AnswerTest.stubAnswer":24,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":181,"org.easymock.tests2.UsageConstraintsTest.greaterThan":254,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":46,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":64,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":138,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":185,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":9,"org.easymock.samples.ExampleTest.voteForRemoval":148,"org.easymock.tests.UsageExpectAndReturnTest.floatType":161,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":177,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":50,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":27,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":255,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":239,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":104,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":112,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":269,"org.easymock.tests2.SerializationTest.test":232,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":47,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":7,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":205,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":97,"org.easymock.tests2.UsageConstraintsTest.testSame":244,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":160,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":277,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":6,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":206,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":223,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":166,"org.easymock.tests.GenericTest.testPackageScope":113,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":236,"org.easymock.tests2.UsageTest.moreThanOneArgument":216,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":48,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":4,"org.easymock.tests.UsageExpectAndReturnTest.longType":162,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":204,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":94,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":23,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":171,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":143,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":291,"org.easymock.tests2.UsageStrictMockTest.differentMethods":228,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":92,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":278,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":163,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":90,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":65,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":14,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":225,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":81,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":13,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":100,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":188,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":126,"org.easymock.tests2.UsageConstraintsTest.testContains":249,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":22,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":139,"org.easymock.tests2.UsageConstraintsTest.testFind":242,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":75,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":42,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":141,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":134,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":142,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":179,"org.easymock.tests.UsageExpectAndReturnTest.object":169,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":256,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":40,"org.easymock.tests2.UsageStrictMockTest.range":227,"org.easymock.tests2.UsageConstraintsTest.lessThan":261,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":209,"org.easymock.tests.UsageTest.exactCallCountByLastCall":158,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":186,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":5,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":8,"org.easymock.tests2.CaptureTest.testCaptureRightOne":272,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":200,"org.easymock.tests2.UsageConstraintsTest.testOr":245,"org.easymock.tests.UsageRangeTest.combination":202,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":34,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":132,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":175,"org.easymock.tests.UsageTest.wrongArguments":154,"org.easymock.tests2.MockBuilderTest.testWithConstructor":287,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":116,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":164,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":1,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":172,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":201,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":68,"org.easymock.tests2.UsageConstraintsTest.cmpTo":248,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":3,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":21,"org.easymock.tests2.UsageTest.openCallCountByLastCall":220,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":105,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":211,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":67,"org.easymock.tests2.CaptureTest.testCaptureFromStub":283,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":41,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":83,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":98,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":180,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":290,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":173,"org.easymock.tests2.UsageConstraintsTest.constraints":240,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":52,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":119,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":182,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":82,"org.easymock.tests.CapturesMatcherTest.test":57,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":38,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":118,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":270,"org.easymock.tests2.UsageTest.resumeIfFailure":66,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":193,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":29,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":194,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":190}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>.getName(), java.lang.Short.java.lang.Class<java.lang.Short>)","position":"org.easymock.internal.MethodSerializationWrapper:35","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += org.easymock.internal.Range.getMaximum()","position":"org.easymock.internal.Results:71","type":"CtOperatorAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createNiceMock(null)","position":"org.easymock.internal.MockBuilder:192","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new java.lang.IllegalArgumentException(((java.lang.Object + \" isn\\'t of type \") + java.lang.Class<?>))","position":"org.easymock.ConstructorArgs:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-5048595127450771363L","position":"org.easymock.internal.matchers.Captures:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","position":"org.easymock.EasyMock:1620","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.junit.runners.model.Statement.evaluate()","position":"org.easymock.internal.EasyMockStatement:43","type":"CtInvocationImpl"},"status":-2},{"failures":[0],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","position":"org.easymock.internal.RecordState:240","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","position":"org.easymock.internal.RecordState:171","type":"CtInvocationImpl"},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,149,150,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307],"variableMapping":{"method":"hashCodeMethod","finalizeMethod":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"if (this.java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","position":"org.easymock.internal.ObjectMethodsFilter:91","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:85","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.Properties()","position":"org.easymock.internal.EasyMockProperties:41","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Stack<org.easymock.IArgumentMatcher> java.util.Stack<org.easymock.IArgumentMatcher> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.get()","position":"org.easymock.internal.LastControl:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","position":"org.easymock.internal.EasyMockProperties:47","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int < 0","position":"org.easymock.LogicalOperator:27","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.Injector:83","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:127","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.EasyMock:894","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())))","position":"org.easymock.internal.DefaultClassInstantiator:193","type":"CtThrowImpl"},"status":-2},{"failures":[1,4,5,6,7,8,9,10,11,12,13,15,16,19,20,21,308,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,309,51,54,55,56,58,59,60,61,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,310,86,87,88,89,91,92,93,94,95,96,99,100,102,103,106,107,108,109,110,311,111,113,114,115,118,312,119,120,123,124,125,126,127,128,129,313,314,315,316,131,132,134,135,138,141,317,318,143,144,145,146,319,147,148,149,150,151,320,152,321,322,323,324,156,325,326,327,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,188,192,199,200,207,208,209,210,211,212,213,217,218,219,220,221,222,223,224,225,226,227,228,229,232,233,328,238,241,242,329,243,244,245,246,247,330,251,253,254,255,261,262,263,331,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,293,301,302,303,304,305,332,333,334,335,336,337,338,339,340,341,307],"variableMapping":{"state":"state"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:221","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","position":"org.easymock.ConstructorArgs:60","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Invocation.clearCaptures()","position":"org.easymock.internal.MocksBehavior:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","position":"org.easymock.internal.ExpectedInvocationAndResults:46","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.addMockedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:105","type":"CtInvocationImpl"},"status":-2},{"failures":[51,54,55,313,314,315,316,132,323,156,325,192,238,241,242,253,254,255,293],"variableMapping":{"actual":"invocation"},"name":"add","transplant":{"sourceCode":"org.easymock.internal.Invocation.validateCaptures()","position":"org.easymock.internal.MocksBehavior:108","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ExpectedInvocationAndResults org.easymock.internal.ExpectedInvocationAndResults : java.util.List<org.easymock.internal.ExpectedInvocationAndResults>) {\n    final boolean boolean = !(boolean);\n    final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount();\n    final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation));\n    if ((boolean && boolean) && (!boolean)) {\n        continue;\n    } \n    final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount());\n    java.util.List<org.easymock.internal.ErrorMessage>.add(org.easymock.internal.ErrorMessage);\n}","position":"org.easymock.internal.UnorderedBehavior:84","type":"CtForEachImpl"},"status":-1},{"failures":[29,41,53,54,136,137,156,342,199,208,240,241,253,265,266,296,297,301],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","position":"org.easymock.internal.MocksControl:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:361","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:318","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:430","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","position":"org.easymock.internal.BridgeMethodResolver:77","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:206","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","position":"org.easymock.internal.AndroidSupport:29","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:71","type":"CtReturnImpl"},"status":-2},{"failures":[343,344,345,346,347,348],"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","position":"org.easymock.internal.Injector:134","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(((\"missing behavior definition for the preceding method call:\\n\" + (org.easymock.internal.ExpectedInvocation.toString())) + \"\\nUsage is: expect(a.foo()).andXXX()\")))","position":"org.easymock.internal.RecordState:221","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:105","type":"CtInvocationImpl"},"status":-2},{"failures":[343,344,345,346,347,348],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl"},"status":-1},{"failures":[51,53,54,132,238,240,241,253,254,255,349,350,351,352,291,293],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1940","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.easymock.internal.ErrorMessage:44","type":"CtReturnImpl"},"status":-1},{"failures":[353,354],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.easymock.internal.BridgeMethodResolver:175","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:115","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:91","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.ArgumentToString:68","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Iterator<org.easymock.IArgumentMatcher> java.util.Iterator<org.easymock.IArgumentMatcher> = java.util.List<org.easymock.IArgumentMatcher>.iterator() ; java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext() ; ) {\n    java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer);\n    if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n        java.lang.StringBuffer.append(\", \");\n    } \n}","position":"org.easymock.internal.matchers.And:48","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1190","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.ReflectionUtils:229","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","position":"org.easymock.internal.ReflectionUtils:107","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>.getName(), java.lang.Integer.java.lang.Class<java.lang.Integer>)","position":"org.easymock.internal.MethodSerializationWrapper:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.lang.reflect.Type = java.lang.reflect.Type;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n} ","position":"org.easymock.internal.BridgeMethodResolver:356","type":"CtIfImpl"},"status":-2},{"failures":[355],"name":"returnValue","position":"org.easymock.internal.matchers.Equals:54","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","position":"org.easymock.internal.Injector:132","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.ArrayList<org.easymock.IArgumentMatcher>()","position":"org.easymock.internal.ExpectedInvocation:60","type":"CtLocalVariableImpl"},"status":-2},{"failures":[7,8,9,10,11,20,308,56,57,59,60,61,356,62,63,64,65,66,72,115,357,116,117,118,312,119,120,358,121,359,122,123,124,125,126,128,129,360,361,362,317,318,149,149,150,150,151,182,185,188,363,209,210,211,233,330,305,332,306],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","position":"org.easymock.internal.ReflectionUtils:105","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Integer>(org.easymock.Capture<java.lang.Integer>))","position":"org.easymock.EasyMock:1939","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:117","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:78","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:296","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> java.util.Stack<org.easymock.internal.Invocation> = org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.get()","position":"org.easymock.internal.LastControl:123","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:144","type":"CtLocalVariableImpl"},"status":0},{"failures":[24,25,27,29,30,32,42,47,86,88,96],"binaryOperator":"int < int","name":"conditionalBoundary","position":"org.easymock.internal.LastControl:95","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer()","position":"org.easymock.internal.ExpectedInvocation:103","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods()","position":"org.easymock.internal.BridgeMethodResolver:434","type":"CtLocalVariableImpl"},"status":-2},{"failures":[353,305,332,306,354],"binaryOperator":"((java.lang.reflect.Method.getParameterTypes().int) == (java.lang.reflect.Method.getParameterTypes().int))","name":"negateConditional","position":"org.easymock.internal.BridgeMethodResolver:131","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","position":"org.easymock.EasyMock:893","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int)","position":"org.easymock.internal.Invocation:74","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"clazz":"clazz"},"name":"add","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.MockBuilder:129","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"c":"c"},"name":"add","transplant":{"sourceCode":"org.easymock.IMocksControl.resetToStrict()","position":"org.easymock.EasyMockSupport:595","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.resetToNice()","position":"org.easymock.EasyMockSupport:573","type":"CtInvocationImpl"},"status":0},{"failures":[364,365,100,101,366,367,368,369,370,111,112,371,372,373,321,322],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-1},{"failures":[51,53,54,313,314,315,316,132,133,139,140,237,238,240,241,253,254,255,289,290,291,293,295,298,299],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"(\")","position":"org.easymock.internal.ExpectedInvocation:105","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","position":"org.easymock.EasyMock:2025","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:288","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.DefaultClassInstantiator.org.easymock.internal.DefaultClassInstantiator.callLongMethod(java.lang.Class<?>, (org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.is1_3Specifications() ? \"computeSerialVersionUID\" : \"computeDefaultSUID\"))","position":"org.easymock.internal.DefaultClassInstantiator:170","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","position":"org.easymock.internal.BridgeMethodResolver:93","type":"CtIfImpl"},"status":-2},{"failures":[374,375,376,377,378,379,380,381,382],"variableMapping":{"type":"parameterType"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.easymock.internal.BridgeMethodResolver:272","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>)","position":"org.easymock.internal.ReflectionUtils:189","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.requireValidAnswer(org.easymock.IAnswer<?>)","position":"org.easymock.internal.RecordState:116","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","position":"org.easymock.internal.Range:65","type":"CtIfImpl"},"status":-2},{"failures":[383,384,385,386,387,388,389,1,2,3,4,5,6,390,391,392,7,393,394,8,395,396,397,398,399,400,401,402,403,9,404,405,406,407,408,10,409,410,11,374,411,12,13,14,15,16,17,18,19,412,20,21,308,22,23,24,25,355,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,309,51,52,53,54,55,56,57,58,59,60,61,356,413,62,414,415,63,64,65,66,416,67,68,417,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,310,86,87,88,89,90,91,92,93,94,95,96,97,98,99,418,419,420,364,365,100,101,366,421,367,368,422,102,103,104,105,106,107,108,109,110,311,423,424,425,369,370,111,112,371,426,372,373,427,428,429,113,114,115,430,116,117,431,432,118,312,119,375,120,433,434,358,121,435,122,123,124,125,126,436,127,128,129,437,438,313,314,315,316,130,131,132,133,134,135,136,137,138,139,140,141,142,317,318,143,144,145,146,319,147,439,148,149,150,151,320,152,321,322,153,154,155,323,324,156,325,326,327,440,441,442,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,443,444,183,184,185,186,187,188,189,445,190,191,446,192,447,193,194,195,448,342,449,450,451,452,453,454,455,456,0,457,458,459,460,461,196,462,463,464,465,466,197,467,198,199,200,201,202,203,204,205,206,207,208,468,469,363,209,210,470,211,471,472,473,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,474,475,233,476,234,235,477,478,479,480,481,482,483,484,485,486,487,488,236,328,237,238,239,240,241,242,329,243,244,245,246,247,489,330,248,249,250,490,491,492,251,252,493,253,254,255,494,256,257,495,258,259,496,260,497,261,262,263,331,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,498,291,499,343,344,345,346,500,347,501,348,292,293,294,295,296,297,298,299,300,301,302,303,304,353,305,332,306,354,333,334,335,502,336,337,503,338,339,340,341,307],"binaryOperator":"(int >= 0)","name":"conditionalBoundary","position":"org.easymock.internal.Range:40","type":"mutation","status":-1},{"failures":[],"variableMapping":{"args":"args","length":"length"},"name":"add","transplant":{"sourceCode":"final int int = (java.lang.Object[].int) - 1","position":"org.easymock.internal.Invocation:60","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"status":-2},{"failures":[24,39,50,52,53,54,57,64,66,75,79,80,83,104,107,116,358,121,122,130,133,134,135,139,140,141,142,440,441,442,236,237,239,240,241,254,255,291,292,294,295,298,299,300,301,503],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","position":"org.easymock.internal.MockBuilder:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","position":"org.easymock.internal.MockInvocationHandler:44","type":"CtThrowImpl"},"status":-1},{"failures":[25],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","position":"org.easymock.EasyMock:1234","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n        return false;\n    } \n}","position":"org.easymock.internal.ExpectedInvocation:93","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return int == 0","position":"org.easymock.internal.matchers.CompareEqual:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) == (int)","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"status":-2},{"failures":[412,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,62,63,68,69,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,105,107,212,213,217,218,219,220,221,222,226,227,228,229,230,231,232,237,238,251,252,253,291,343,307],"variableMapping":{"stack":"stack"},"name":"replace","transplant":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","position":"org.easymock.internal.LastControl:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(org.easymock.IArgumentMatcher)","position":"org.easymock.internal.LastControl:65","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1471","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException)","position":"org.easymock.internal.DefaultClassInstantiator:60","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:114","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"candidateMethod"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:116","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:582","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:612","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"status":-2},{"failures":[397,400,401,57,63,66,128,437,209,210,211],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:682","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, null, java.lang.reflect.Method[])","position":"org.easymock.internal.MocksControl:93","type":"CtReturnImpl"},"status":-1},{"failures":[36,237,307],"variableMapping":{"actual":"actual","expected":"expected","this":"this"},"name":"replace","transplant":{"sourceCode":"return java.util.Arrays.equals(((long[])(java.lang.Object)), ((long[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:53","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","position":"org.easymock.EasyMock:1915","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Proxy.((T)(java.lang.reflect.Proxy.newProxyInstance(java.lang.Class<T>.getClassLoader(), new java.lang.Class[]{ java.lang.Class<T> }, java.lang.reflect.InvocationHandler)))","position":"org.easymock.internal.JavaProxyFactory:30","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object[][int] = java.lang.Object","position":"org.easymock.internal.DefaultClassInstantiator:127","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","position":"org.easymock.internal.LastControl:103","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0];\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.lang.reflect.Type = java.lang.reflect.Type;\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type)));\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:352","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","position":"org.easymock.internal.ArgumentToString:38","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(\" (+1)\")","position":"org.easymock.internal.ErrorMessage:54","type":"CtInvocationImpl"},"status":-2},{"failures":[383,387,388,389,1,2,3,4,5,6,390,391,392,7,393,394,8,395,396,397,398,399,400,401,402,403,9,404,405,406,407,408,10,409,410,11,374,411,12,13,14,15,16,17,18,19,412,20,21,308,22,23,24,25,355,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,309,51,52,53,54,55,56,57,58,59,60,61,356,413,62,414,415,63,64,65,66,416,67,68,417,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,310,86,87,88,89,90,91,92,93,94,95,96,97,98,99,418,419,420,364,365,100,101,366,421,367,368,422,102,103,104,105,106,107,108,109,110,311,423,424,425,369,370,111,112,371,426,372,373,427,428,429,113,114,115,430,116,117,431,432,118,312,119,375,120,434,358,121,435,122,123,124,125,126,127,128,129,438,313,314,315,316,130,131,132,133,134,135,136,137,138,139,140,141,142,317,318,143,144,145,146,319,147,439,148,149,149,150,150,151,320,152,321,322,153,154,155,323,324,156,325,326,327,440,441,442,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,445,190,191,446,192,447,193,194,195,448,342,449,450,451,452,453,454,455,456,0,457,458,459,460,461,196,462,463,464,465,466,197,467,198,199,200,201,202,203,204,205,206,207,208,468,469,363,209,210,470,211,471,472,473,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,474,475,233,476,234,235,477,478,479,480,481,482,483,484,485,486,487,488,236,328,237,238,239,240,241,242,329,243,244,245,246,247,489,330,248,249,250,490,491,492,251,252,253,254,255,494,256,257,495,258,259,496,260,497,261,262,263,331,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,498,291,499,343,344,345,346,500,347,501,348,292,293,294,295,296,297,298,299,300,301,302,303,304,353,305,332,306,354,333,334,335,502,336,337,503,338,339,340,341,307],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:109","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[])","position":"org.easymock.internal.ClassProxyFactory:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])));\n} ","position":"org.easymock.internal.ObjectMethodsFilter:82","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (((java.lang.StackTraceElement[].int) > 2) && (java.lang.StackTraceElement[][2].getClassName().equals(org.easymock.internal.MockInvocationHandler.org.easymock.internal.MockInvocationHandler.getName()))) && (java.lang.StackTraceElement[][2].getMethodName().equals(\"invoke\"))","position":"org.easymock.internal.ClassProxyFactory:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"status":-2},{"failures":[504,37,44,49],"variableMapping":{"result":"result"},"name":"replace","transplant":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[32],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","position":"org.easymock.internal.Range:45","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","position":"org.easymock.internal.LastControl:104","type":"CtThrowImpl"},"status":-1},{"failures":[20],"variableMapping":{"mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.Set<java.lang.reflect.Method>) == null) {\n    this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","position":"org.easymock.internal.MockBuilder:71","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ClassProxyFactory:116","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Float>(org.easymock.Capture<java.lang.Float>))","position":"org.easymock.EasyMock:1963","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","position":"org.easymock.EasyMock:1776","type":"CtInvocationImpl"},"status":-2},{"failures":[448,342,449,450,451,452,453,454,455,456,0,457,458,459,460,461,462,463,464,465,466,467],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.ExpectedInvocation) == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)));\n} ","position":"org.easymock.internal.RecordState:233","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * See {@link EasyMock#cmp}\n * \n * @author Henri Tremblay\n */\npublic enum LogicalOperator {\nLESS_THAN(\"<\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int < 0;\n        }\n    }, LESS_OR_EQUAL(\"<=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int <= 0;\n        }\n    }, EQUAL(\"==\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int == 0;\n        }\n    }, GREATER_OR_EQUAL(\">=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int >= 0;\n        }\n    }, GREATER(\">\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int > 0;\n        }\n    };\n    private java.lang.String symbol;\n    private LogicalOperator(final java.lang.String symbol) {\n        this.java.lang.String = java.lang.String;\n    }\n    public java.lang.String getSymbol() {\n        return java.lang.String;\n    }\n\n    public abstract boolean matchResult(int result);\n}","position":"org.easymock.LogicalOperator:23","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?>[] java.lang.Class<?>[] = java.lang.reflect.Constructor<?>.getParameterTypes()","position":"org.easymock.internal.ReflectionUtils:179","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"replace","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","position":"org.easymock.internal.ReflectionUtils:102","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","position":"org.easymock.internal.DefaultClassInstantiator:188","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Method.getDeclaringClass().getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:157","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.Invocation:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:90","type":"CtAssignmentImpl"},"status":0},{"failures":[413],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","position":"org.easymock.internal.MocksControl:130","type":"CtIfImpl"},"status":-1},{"failures":[504,505,506,507,508],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Equals:44","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next()","position":"org.easymock.internal.matchers.Or:49","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.Injection.getAnnotation().java.lang.String()","position":"org.easymock.internal.InjectionPlan:49","type":"CtLocalVariableImpl"},"status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":201,"org.easymock.tests2.MockedExceptionTest.testRealException":73,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":395,"org.easymock.tests.UsageVarargTest.varargIntAccepted":335,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":381,"org.easymock.tests.LimitationsTest.mockFinalMethod":476,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":22,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":11,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":405,"org.easymock.tests.UsageCallCountTest.tooManyCalls":442,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":480,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":437,"org.easymock.tests2.CompareToTest.testGreateThan":505,"org.easymock.tests2.StubTest.stubWithReturnValue":13,"org.easymock.tests.UsageVarargTest.allKinds":307,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":410,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":331,"org.easymock.tests2.CaptureTest.testCaptureAll":87,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":212,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":378,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":39,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":360,"org.easymock.tests2.CaptureTest.testAnd":86,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":411,"org.easymock.tests.UsageStrictMockTest.testVerify":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":277,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":190,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":182,"org.easymock.tests.MockClassControlTest.testToString":248,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":123,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":487,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":79,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":175,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":285,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":111,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":382,"org.easymock.tests.UsageThrowableTest.throwError":198,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":232,"org.easymock.samples.SupportTest.addDocument":320,"org.easymock.tests2.StubTest.stub":12,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":265,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":481,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":423,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":220,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":413,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":228,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":421,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":466,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":181,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":67,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":362,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":467,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":416,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":341,"org.easymock.tests.UsageExpectAndThrowTest.object":279,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":104,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":224,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":407,"org.easymock.tests2.UsageTest.moreThanOneArgument":132,"org.easymock.tests.UsageVarargTest.varargByteAccepted":340,"org.easymock.tests.MockClassControlTest.testEquals":491,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":361,"org.easymock.tests.UsageTest.wrongArguments":295,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":160,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":495,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":370,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":280,"org.easymock.tests2.UsageTest.defaultResetToNice":138,"org.easymock.tests.MockingTest.testNiceClassMocking":473,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":72,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":105,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":120,"org.easymock.tests2.MockBuilderTest.testCreateMock":358,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":106,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":357,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":477,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":482,"org.easymock.samples.ExampleTest.voteAgainstRemovals":143,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":50,"org.easymock.tests2.CompareToTest.testCompareEqual":506,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":369,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":445,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":303,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":206,"org.easymock.tests2.CaptureTest.testCapture1_2446744":90,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":18,"org.easymock.samples.ExampleTest.voteForRemoval":145,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":388,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":327,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":192,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":386,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":216,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":375,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":261,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":350,"org.easymock.tests2.CaptureTest.testCaptureRightOne":96,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":168,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":478,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":3,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":61,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":302,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":267,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":479,"org.easymock.tests2.UsageConstraintsTest.cmpTo":34,"org.easymock.tests.MockTypeTest.fromEasyMockClass":183,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":500,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":372,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":433,"org.easymock.tests2.MockedExceptionTest.testMockedException":71,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":46,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":245,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":288,"org.easymock.samples.PartialClassMockTest.testGetArea":151,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":253,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":454,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":208,"org.easymock.samples.ConstructorCalledMockTest.testTax":149,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":436,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":384,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":2,"org.easymock.tests2.UsageTest.argumentsOrdered":140,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":443,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":389,"org.easymock.samples.ExampleTest.removeNonExistingDocument":439,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":6,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":345,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":235,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":167,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":157,"org.easymock.tests2.AnswerTest.answer":1,"org.easymock.tests.MockingTest.testNicePartialClassMocking":210,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":373,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":238,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":221,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":377,"org.easymock.tests2.CompareToTest.testLessThan":504,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":247,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":266,"org.easymock.tests.UsageExpectAndThrowTest.longType":272,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":187,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":9,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":81,"org.easymock.tests.UsageTest.argumentsOrdered":299,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":119,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":180,"org.easymock.tests2.MockBuilderTest.testCreateMockString":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":230,"org.easymock.tests2.NameTest.nameForStrictMock":314,"org.easymock.tests2.CaptureTest.testCaptureNone":94,"org.easymock.tests2.SerializationTest.testClass":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":453,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":465,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":259,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":317,"org.easymock.tests.MockingTest.testInterfaceMocking":470,"org.easymock.tests2.EasyMockSupportTest.testVerify":310,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":256,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":371,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":312,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":274,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":472,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":45,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":130,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":121,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":179,"org.easymock.tests.GenericTest.testBridgedEquals":354,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":31,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":127,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":56,"org.easymock.tests2.UsageConstraintsTest.testOr":29,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":103,"org.easymock.tests.MockClassControlTest.testHashCode":490,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":419,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":438,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":174,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":185,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":205,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":213,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":244,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":124,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":126,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":393,"org.easymock.tests2.UsageConstraintsTest.testSame":28,"org.easymock.tests2.UsageTest.resumeIfFailure":141,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":154,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":128,"org.easymock.tests.UsageOverloadedMethodTest.overloading":207,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":186,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":414,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":365,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":400,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":195,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":150,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":399,"org.easymock.tests.UsageTest.openCallCountByLastCall":296,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":275,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":493,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":194,"org.easymock.tests2.NameTest.nameForNiceMock":315,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":484,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":112,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":304,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":243,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":58,"org.easymock.tests2.CaptureTest.testPrimitive":89,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":153,"org.easymock.samples.BasicClassMockTest.testPrintContent":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":217,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":352,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":63,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":68,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":441,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":324,"org.easymock.tests2.UsageStrictMockTest.differentMethods":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":76,"org.easymock.tests.MockingTest.testClassMocking":469,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":306,"org.easymock.tests2.CaptureTest.testCaptureLast":93,"org.easymock.tests2.UsageConstraintsTest.equals":355,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":359,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":270,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":440,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":326,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":114,"org.easymock.tests.UsageStrictMockTest.range":240,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":297,"org.easymock.tests.UsageTest.unexpectedCallWithArray":294,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":402,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":450,"org.easymock.samples.ExampleTest.addDocument":319,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":471,"org.easymock.tests2.CompareToTest.testGreateOrEqual":507,"org.easymock.tests2.UsageConstraintsTest.lessThan":49,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":447,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":298,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":189,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":264,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":14,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":458,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":383,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":348,"org.easymock.tests2.MockBuilderTest.testWithConstructor":430,"org.easymock.tests2.UsageStrictMockTest.range":53,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":129,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":159,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":289,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests.UsageTest.moreThanOneArgument":293,"org.easymock.tests2.UsageTest.openCallCountByLastCall":136,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":116,"org.easymock.tests.UsageStrictMockTest.differentMethods":241,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":456,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":387,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":273,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":214,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":394,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":62,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":239,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":425,"org.easymock.tests2.DependencyTest.testClassMockingSupport":429,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":284,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":364,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":322,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":496,"org.easymock.tests2.UsageConstraintsTest.testContains":35,"org.easymock.tests2.UsageConstraintsTest.testFind":26,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":91,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":346,"org.easymock.samples.ExampleTest.addAndChangeDocument":148,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":115,"org.easymock.tests.UsageVarargTest.varargCharAccepted":336,"org.easymock.tests2.CaptureTest.testCaptureFromStub":97,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":379,"org.easymock.tests.UsageVerifyTest.twoThrows":254,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":427,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":444,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":229,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":337,"org.easymock.tests2.DelegateToTest.testReturnException":15,"org.easymock.tests2.CompareToTest.testLessOrEqual":508,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":135,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":374,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":85,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":309,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":353,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":417,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":155,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":347,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":488,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":95,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":281,"org.easymock.tests2.UsageConstraintsTest.testMatches":38,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":158,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":0,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":457,"org.easymock.tests2.UsageConstraintsTest.testNull":27,"org.easymock.tests.LimitationsTest.abstractClass":474,"org.easymock.tests2.EasyMockSupportClassTest.testAll":7,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":501,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":188,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":333,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":483,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":42,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":82,"org.easymock.tests.UsageExpectAndReturnTest.object":172,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":55,"org.easymock.tests2.DelegateToTest.testWrongClass":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":449,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":276,"org.easymock.samples.ExampleTest.voteAgainstRemoval":146,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":204,"org.easymock.tests.UsageVarargTest.varargShortAccepted":338,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":268,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":258,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":219,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":392,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":489,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":424,"org.easymock.tests2.SerializationTest.testAllMockedMethod":308,"org.easymock.tests2.NameTest.nameForMocksControl":316,"org.easymock.tests.MockingTest.testStrictClassMocking":468,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":231,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":142,"org.easymock.tests.ErrorMessageTest.testGetters":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":398,"org.easymock.tests2.DelegateToTest.testStubDelegate":16,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":215,"org.easymock.tests.LimitationsTest.mockNativeMethod":233,"org.easymock.tests.UsageUnorderedTest.message":291,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":446,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":460,"org.easymock.samples.ExampleTest.answerVsDelegate":144,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":497,"org.easymock.tests.UsageCallCountTest.tooFewCalls":325,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":171,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":4,"org.easymock.tests.UsageVerifyTest.twoReturns":255,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":406,"org.easymock.tests2.DependencyTest.testInterfaceMocking":113,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":166,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":459,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":74,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":223,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":461,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":77,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":311,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":30,"org.easymock.tests.MockingTest.testTwoMocks":363,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":156,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":262,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":70,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":396,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":173,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":125,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":426,"org.easymock.tests.UsageThrowableTest.throwCheckedException":202,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":391,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":464,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":184,"org.easymock.samples.ExampleTest.voteForRemovals":147,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":37,"org.easymock.tests.ReplayStateInvalidUsageTest.times":485,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":225,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":397,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":60,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":292,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":376,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":163,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":385,"org.easymock.tests2.UsageConstraintsTest.any":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":342,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":420,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":170,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":84,"org.easymock.tests.LimitationsTest.privateConstructor":475,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":69,"org.easymock.tests2.CallbackTest.callback":107,"org.easymock.tests2.NameTest.nameForMock":313,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":435,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":455,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":36,"org.easymock.tests.MockNameTest.defaultName":234,"org.easymock.tests2.SerializationTest.test":21,"org.easymock.tests.UsageExpectAndReturnTest.longType":165,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":92,"org.easymock.tests2.CaptureTest.testCaptureFirst":99,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":43,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":498,"org.easymock.tests2.UsageTest.niceToStrict":134,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":222,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":161,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":260,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":236,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":499,"org.easymock.tests2.UsageTest.strictResetToDefault":131,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":390,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":65,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":252,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":269,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":169,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":108,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":356,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":432,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":41,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":59,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":334,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":227,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":211,"org.easymock.tests2.DelegateToTest.testDelegate":19,"org.easymock.tests2.UsageConstraintsTest.testNotNull":47,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":52,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":431,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":100,"org.easymock.tests2.CaptureTest.testCapture_2617107":88,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":462,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":486,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":366,"org.easymock.tests2.ThreadingTest.testThreadSafe":102,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":463,"org.easymock.tests.UsageThrowableTest.noUpperLimit":199,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":502,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":83,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":75,"org.easymock.tests.UsageExpectAndReturnTest.floatType":164,"org.easymock.tests2.UsageTest.wrongArguments":133,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":32,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":110,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":250,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":434,"org.easymock.samples.SupportTest.voteForRemovals":152,"org.easymock.tests.UsageRangeTest.combination":301,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":403,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":48,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":408,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":422,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":51,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":176,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":283,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":263,"org.easymock.tests.UsageExpectAndThrowTest.floatType":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":404,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":177,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":418,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":415,"org.easymock.tests.UsageTest.exactCallCountByLastCall":300,"org.easymock.tests2.AnswerTest.stubAnswer":5,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":80,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":8,"org.easymock.tests.MockingTest.testPartialClassMocking":209,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":178,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":139,"org.easymock.tests2.UsageConstraintsTest.constraints":24,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":349,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":109,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":412,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":246,"org.easymock.tests.UsageVarargTest.varargLongAccepted":339,"org.easymock.tests.ObjectMethodsTest.testHashCode":257,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":64,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":66,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":237,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":10,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":193,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":117,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":290,"org.easymock.tests2.DependencyTest.testClassMocking":428,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":218,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":492,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":494,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":367,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":380,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":23,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":330,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":118,"org.easymock.tests.DefaultClassInstantiatorTest.object":343,"org.easymock.tests.UsageVarargTest.differentLength":503,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":196,"org.easymock.tests2.CaptureTest.testCapture2_2446744":98,"org.easymock.tests.GenericTest.testPackageScope":305}}]

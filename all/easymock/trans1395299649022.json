[{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1964","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[6,7,8,9,10,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[12],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[13,14,15,16,17,18,19,20,4,21,22,23,5,24],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Compare:52","failures":[25],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:154","sourceCode":"return (java.lang.String + \".\") + java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mockName":"message","methodName":"message"}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[40,41],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[42,43,44,45,46,47,48,49,50,51],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[52],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.LastControl:94","failures":[53,54,55,56,57,58,59,12,60,61,62,63,64,65,66,67,68,69,70,71],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:47","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:207","sourceCode":"return java.lang.Number","type":"CtReturnImpl"},"failures":[73,74,74,75,75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.EasyMock:1555","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"failures":[76],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:643","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:582","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:411","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>","type":"CtLocalVariableImpl"},"failures":[77],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[49],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[72],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"actual":"actual"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:212","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[26,27,28,29,30,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,31,100,101,102,103,32,33,34,35,36,37,104,105,38,106,107],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[50,108,109,110],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,73,134,135,136,137,138,28,139,140,53,54,56,141,142,143,144,57,145,146,147,148,149,150,151,152,30,78,153,154,155,156,79,157,158,159,160,161,59,12,60,61,62,63,64,65,67,162,163,72,164,165,25,40,166,68,69,167,168,70,71,169,170,171,172,173,174,175,176,177,16,178,179,180,181,182,50,108,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,77,211,212,213,6,214,215,216,217,218,219,20,220,100,221,222,223,101,102,224,225,226,227,228,229,230,104,231,232,105,233,234,235,52,236,24,237,238,239,240,241,242,243,107,7,8,9,10,244,11],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[0,1,2,3,4,5],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:35","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(short.short, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[49],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:80","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[245],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"methodName"}},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[42,44,45,46,47,48,51],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:130","sourceCode":"if (java.lang.Boolean.java.lang.Boolean.valueOf(java.lang.String)) {\n    throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"));\n} ","type":"CtIfImpl"},"failures":[112,113,115,116,117,246,118,247,248,249,119,120,121,250,251,26,27,28,252,253,147,254,255,256,148,257,149,42,150,258,259,151,260,261,170,171,172,173,175,176,262,263,264,265,266,267,268,179,269,270,180,271,272,273,274,275,276,277,278,279,181,280,281,282,283,284,182,285,286,50,109,183,51,287,288,289,290,291,292,293,294,295,296,297,210,298,299,77,300,211,301,302,303,304,305,306,234,235,52,307,308,309,310,311,312,313,314,315,316,317,318,319,74,74,75,75,244],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"name":"classMockingDisabled"}},{"transplant":{"position":"org.easymock.internal.MocksControl:136","sourceCode":"if (org.easymock.internal.IProxyFactory != null) {\n    return org.easymock.internal.IProxyFactory;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:137","sourceCode":"return org.easymock.internal.IProxyFactory","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cached":"cached"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[13,14,15,16,17,18,19,20,4,21,22,23,5,24],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:258","sourceCode":"org.easymock.internal.IMocksControlState.andReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,320,73,134,135,136,137,138,28,139,140,53,54,56,141,142,143,144,57,145,146,147,148,149,150,151,152,30,78,153,154,155,156,79,157,158,159,160,161,59,12,60,61,62,63,64,65,67,162,163,72,164,165,25,40,166,68,69,167,168,70,71,169,170,171,172,173,174,175,176,177,16,178,179,180,181,182,50,108,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,77,211,212,213,6,214,215,321,216,217,218,219,20,220,100,221,222,223,101,102,224,225,226,227,228,229,230,104,231,232,105,233,234,235,52,236,24,237,238,239,240,241,242,243,107,7,8,9,10,244,11],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"position":"org.easymock.EasyMock:814","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:243","failures":[112,113,114,115,116,117,118,119,120,121,137,139,140,147,148,149,150,151,170,171,172,173,174,175,176,177,16,178,179,180,181,182,183,184,190,191,192,193,194,195,198,199,201,202,203,205,206,207,208,209,210,77,211,212,213,6,214,215,216,217,322,323,324,325,224,225,226,227,326,229,230,234,235,52,236,24,237,238,239,242,7,8,9,10,244,11],"status":-1,"binaryOperator":"java.lang.Object == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[112,113,115,116,117,246,118,249,119,120,121,251,28,252,147,254,148,257,149,150,259,151,261,170,171,172,173,175,176,179,180,181,182,50,109,183,288,289,290,291,292,293,294,295,327,210,77,300,211,301,302,303,306,234,235,52,308,318,319,74,74,75,75,244],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[328],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"arg"}},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[53,55,57,59,12,61,63,64,66,68,70],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":12,"org.easymock.tests2.UsageTest.argumentsOrdered":15,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":104,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":132,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":35,"org.easymock.tests2.StubTest.stubWithReturnValue":30,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":42,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":199,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":168,"org.easymock.tests2.SerializationTest.testAllMockedMethod":109,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":33,"org.easymock.tests.MockingTest.testPartialClassMocking":234,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":1,"org.easymock.samples.SupportTest.voteForRemovals":11,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":299,"org.easymock.tests.MockClassControlTest.testToString":290,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":251,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":274,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":110,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":80,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":180,"org.easymock.tests.UsageExpectAndThrowTest.object":90,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":69,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":140,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":44,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":229,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":230,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":65,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":239,"org.easymock.tests2.UsageTest.wrongArguments":13,"org.easymock.samples.ConstructorCalledMockTest.testTax":74,"org.easymock.tests.UsageStrictMockTest.range":24,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":129,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":303,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":170,"org.easymock.tests2.UsageConstraintsTest.testNull":61,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":91,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":115,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":295,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":131,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":149,"org.easymock.tests2.CaptureTest.testPrimitive":56,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":266,"org.easymock.tests.UsageTest.moreThanOneArgument":231,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":99,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":324,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":2,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":217,"org.easymock.tests2.CaptureTest.testCaptureNone":143,"org.easymock.tests.UsageUnorderedTest.message":18,"org.easymock.tests.UsageVerifyTest.twoReturns":20,"org.easymock.tests2.ThreadingTest.testThreadSafe":134,"org.easymock.tests.UsageTest.argumentsOrdered":23,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":280,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":318,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":212,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":252,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":48,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":264,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":106,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":187,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":257,"org.easymock.tests2.UsageConstraintsTest.any":67,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":215,"org.easymock.tests.UsageExpectAndThrowTest.longType":83,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":34,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":188,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":314,"org.easymock.tests2.SerializationTest.testClass":50,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":111,"org.easymock.tests.LimitationsTest.mockNativeMethod":210,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests2.AnswerTest.answer":320,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":211,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":209,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":66,"org.easymock.tests2.CaptureTest.testAnd":53,"org.easymock.tests2.UsageTest.strictResetToDefault":153,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":255,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":249,"org.easymock.tests2.MockedExceptionTest.testMockedException":27,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":323,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":270,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":226,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":126,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":105,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":84,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":52,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":112,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":150,"org.easymock.tests.MockingTest.testNicePartialClassMocking":235,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":95,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":117,"org.easymock.tests.LimitationsTest.mockFinalMethod":298,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":43,"org.easymock.tests2.CaptureTest.testCaptureLast":142,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":36,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":64,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":176,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":167,"org.easymock.tests.MockingTest.testTwoMocks":306,"org.easymock.tests2.CaptureTest.testCapture1_2446744":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":190,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":93,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":88,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":14,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":71,"org.easymock.tests.UsageThrowableTest.throwError":220,"org.easymock.tests.UsageStrictMockTest.differentMethods":237,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":312,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":136,"org.easymock.tests2.MockBuilderTest.testCreateMockString":261,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":271,"org.easymock.tests.UsageExpectAndThrowTest.floatType":82,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":25,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":268,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":287,"org.easymock.tests.UsageVerifyTest.twoThrows":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":181,"org.easymock.samples.PartialClassMockTest.testGetArea":244,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":213,"org.easymock.samples.ExampleTest.voteAgainstRemoval":9,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":321,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":216,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":186,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":120,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":327,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":275,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":81,"org.easymock.tests2.UsageTest.niceToStrict":155,"org.easymock.tests.LimitationsTest.privateConstructor":297,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":328,"org.easymock.tests2.UsageConstraintsTest.testNotNull":70,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":26,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":102,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":148,"org.easymock.tests2.MockBuilderTest.testCreateMock":259,"org.easymock.tests2.UsageTest.defaultResetToNice":157,"org.easymock.samples.ExampleTest.voteAgainstRemovals":7,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":205,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":282,"org.easymock.tests2.UsageConstraintsTest.equals":76,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":247,"org.easymock.tests.UsageTest.openCallCountByLastCall":232,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":89,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":0,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":127,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":160,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":38,"org.easymock.tests.UsageOverloadedMethodTest.overloading":243,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":284,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":279,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":103,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":164,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":242,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":201,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":173,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":72,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":144,"org.easymock.tests.UsageThrowableTest.throwCheckedException":222,"org.easymock.tests.MockClassControlTest.testEquals":294,"org.easymock.tests2.EasyMockSupportClassTest.testAll":179,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":300,"org.easymock.tests.MockingTest.testStrictClassMocking":304,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":97,"org.easymock.tests2.CaptureTest.testCaptureAll":54,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":31,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":175,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":172,"org.easymock.tests2.UsageConstraintsTest.testMatches":165,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":174,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":325,"org.easymock.samples.ExampleTest.voteForRemovals":10,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":47,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":138,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":219,"org.easymock.tests2.DependencyTest.testInterfaceMocking":139,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":46,"org.easymock.samples.BasicClassMockTest.testPrintContent":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":281,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.DelegateToTest.testStubDelegate":184,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":101,"org.easymock.tests2.AnswerTest.stubAnswer":73,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":37,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":236,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":316,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":49,"org.easymock.tests2.UsageConstraintsTest.greaterThan":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":269,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":225,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":121,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":317,"org.easymock.samples.ExampleTest.voteForRemoval":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":185,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":250,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":135,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":208,"org.easymock.tests.UsageExpectAndReturnTest.floatType":192,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":246,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":183,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":75,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":166,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":308,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":78,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":161,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":262,"org.easymock.tests2.SerializationTest.test":108,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":258,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":311,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":124,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":100,"org.easymock.tests2.UsageConstraintsTest.testSame":62,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":191,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":267,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":32,"org.easymock.tests2.CaptureTest.testCaptureFirst":146,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":125,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":159,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":272,"org.easymock.tests.GenericTest.testPackageScope":77,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":137,"org.easymock.tests2.CaptureTest.testCapture2_2446744":145,"org.easymock.tests2.UsageTest.moreThanOneArgument":154,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":151,"org.easymock.tests.GenericTest.testBridgedEquals":301,"org.easymock.tests.UsageExpectAndReturnTest.longType":193,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":122,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":202,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":98,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":326,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":260,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":96,"org.easymock.tests2.UsageStrictMockTest.differentMethods":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":322,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":248,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":194,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":94,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":283,"org.easymock.tests2.MockedExceptionTest.testRealException":29,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":198,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":85,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":177,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":240,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":223,"org.easymock.tests.MockingTest.testNiceClassMocking":307,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":171,"org.easymock.tests.MockingTest.testClassMocking":305,"org.easymock.tests2.UsageConstraintsTest.testContains":163,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":28,"org.easymock.tests2.UsageConstraintsTest.testFind":60,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":107,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":256,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":116,"org.easymock.tests.UsageExpectAndReturnTest.object":200,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":265,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":313,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":68,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":118,"org.easymock.tests.ErrorMessageTest.testGetters":39,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":147,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":169,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":130,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":45,"org.easymock.tests.UsageTest.exactCallCountByLastCall":233,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":218,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":276,"org.easymock.tests2.CaptureTest.testCaptureRightOne":57,"org.easymock.tests2.UsageConstraintsTest.testOr":63,"org.easymock.tests.UsageRangeTest.combination":224,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":51,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":206,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":113,"org.easymock.tests.UsageTest.wrongArguments":21,"org.easymock.tests2.MockBuilderTest.testWithConstructor":253,"org.easymock.tests.MockClassControlTest.testHashCode":293,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":273,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":289,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":195,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":277,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":315,"org.easymock.tests2.UsageConstraintsTest.cmpTo":162,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":189,"org.easymock.tests2.UsageTest.openCallCountByLastCall":156,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":79,"org.easymock.tests.DefaultClassInstantiatorTest.object":310,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":133,"org.easymock.tests2.CaptureTest.testCaptureFromStub":58,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":254,"org.easymock.tests.UsageTest.unexpectedCallWithArray":4,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":17,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":278,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":87,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":221,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":204,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":292,"org.easymock.tests2.UsageConstraintsTest.constraints":59,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":119,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":86,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":207,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":182,"org.easymock.tests2.CompareToTest.testGreateThan":41,"org.easymock.tests2.UsageTest.resumeIfFailure":158,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":6,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":302,"org.easymock.tests.LimitationsTest.abstractClass":296,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":196,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":228,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":214,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":128,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":263}}]

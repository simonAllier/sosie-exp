[{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:162","sourceCode":"final java.lang.NoSuchFieldException java.lang.NoSuchFieldException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:40","sourceCode":"java.lang.StringBuffer.append(((\"startsWith(\\\"\" + (java.lang.String)) + \"\\\")\"))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:760","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:62","sourceCode":"throw new java.lang.RuntimeException(java.lang.IllegalAccessException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:68","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MethodSerializationWrapper.java.util.Map<java.lang.String, java.lang.Class<?>>.get(java.lang.String[][int])","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[17,18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:192","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:292","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"failures":[19],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:193","sourceCode":"if (!(this.boolean)) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:217","sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,6,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,10,11,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,12,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,15,16,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,17,18,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"shouldBeUsedInOneThread":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.EasyMock:592","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1607","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(char[]))","type":"CtInvocationImpl"},"failures":[140],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","mockedMethods":"mockedMethods","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[137,17,142],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[6,87,88],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[173,174,175,57,176,177],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:332","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[110,141,151],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:104","sourceCode":"throw new java.lang.IllegalStateException(java.lang.String)","type":"CtThrowImpl"},"failures":[178],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[179,118,119,120],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:62","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[180],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:84","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[181,175,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,92,219,103,220,221,222,223,224,225,226,227,228,128,229,172,155,167,230,231],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:227","sourceCode":"try {\n    return java.lang.Class<?>.getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[20,21,22,24,25,232,26,27,28,29,30,233,234,235,33,34,35,36,37,236,38,39,40,41,42,237,238,5,6,7,239,8,175,43,240,241,44,45,242,46,47,243,244,245,246,247,248,51,52,249,53,250,251,252,253,54,254,255,256,257,55,258,259,260,261,262,56,57,9,58,10,11,59,182,263,264,265,266,267,268,60,61,62,63,269,183,195,196,197,198,64,270,65,66,271,67,199,272,273,274,275,276,277,278,279,280,281,282,200,201,202,203,204,283,284,285,286,287,69,70,71,206,72,73,76,77,288,289,290,78,79,291,80,292,293,294,295,81,296,297,298,299,82,300,301,302,303,304,305,12,207,19,306,307,216,217,218,308,84,85,309,86,87,88,89,90,310,311,312,313,314,315,316,317,318,319,91,320,321,322,323,324,325,326,92,93,94,95,96,97,98,219,99,100,101,102,103,104,105,106,327,107,13,108,109,110,328,329,220,111,112,330,331,332,113,14,114,15,16,115,116,333,334,335,336,337,338,339,117,340,341,221,222,223,224,119,132,342,343,344,135,136,345,346,347,137,348,349,350,351,17,18,178,138,139,352,140,353,354,141,355,356,142,143,144,145,146,357,358,359,147,149,155,360,156,157,158,159,361,160,161,162,163,164,165,362,363,166,364,365,167,366,367,168,368,169,369,170,230,231,171,370],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:353","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][0]","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:322","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bounds":"actualTypeArguments"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"ret":"constructor","clazz":"toMock"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[371],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:707","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:263","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"))","type":"CtThrowImpl"},"failures":[233,283],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:32","sourceCode":"new java.util.ArrayList<java.lang.reflect.Field>(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":137,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":239,"org.easymock.tests2.UsageTest.argumentsOrdered":112,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":360,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":275,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":110,"org.easymock.tests2.StubTest.stubWithReturnValue":326,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":253,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":24,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":146,"org.easymock.tests2.SerializationTest.testAllMockedMethod":120,"org.easymock.tests2.DelegateToTest.testReturnException":168,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":273,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":19,"org.easymock.tests.MockingTest.testPartialClassMocking":48,"org.easymock.samples.SupportTest.voteForRemovals":22,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":177,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":371,"org.easymock.tests.MockClassControlTest.testToString":209,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":266,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":297,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":179,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":306,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":289,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":122,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":338,"org.easymock.tests.UsageExpectAndThrowTest.object":81,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":1,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":105,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":143,"org.easymock.tests2.DelegateToTest.testWrongClass":169,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":304,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":305,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":18,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":60,"org.easymock.tests2.UsageTest.wrongArguments":108,"org.easymock.tests.UsageStrictMockTest.range":10,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":197,"org.easymock.samples.ExampleTest.answerVsDelegate":232,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":219,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":128,"org.easymock.tests2.UsageConstraintsTest.testNull":349,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":296,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":150,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":214,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":126,"org.easymock.tests2.CaptureTest.testPrimitive":159,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":269,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":303,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":193,"org.easymock.tests.UsageTest.moreThanOneArgument":8,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":44,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":196,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":149,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":317,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":173,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":265,"org.easymock.tests2.CaptureTest.testCaptureNone":163,"org.easymock.tests.UsageUnorderedTest.message":12,"org.easymock.tests.UsageVerifyTest.twoReturns":7,"org.easymock.tests.UsageVarargTest.varargByteAccepted":40,"org.easymock.tests2.ThreadingTest.testThreadSafe":342,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":310,"org.easymock.tests.UsageTest.argumentsOrdered":45,"org.easymock.tests.UsageVarargTest.varargIntAccepted":35,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":71,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":365,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":308,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":31,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":278,"org.easymock.tests2.CaptureTest.testCapture_2617107":158,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":225,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":63,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":226,"org.easymock.tests2.UsageConstraintsTest.any":138,"org.easymock.tests2.StubTest.stub":325,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":190,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":285,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":282,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":274,"org.easymock.tests.UsageExpectAndThrowTest.longType":79,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":189,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":114,"org.easymock.tests2.SerializationTest.testClass":118,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":155,"org.easymock.tests.LimitationsTest.mockNativeMethod":83,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":167,"org.easymock.tests.ReplayStateInvalidUsageTest.times":191,"org.easymock.tests2.AnswerTest.answer":337,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":261,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":178,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":224,"org.easymock.tests2.CaptureTest.testAnd":156,"org.easymock.tests2.UsageTest.strictResetToDefault":107,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":115,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":172,"org.easymock.tests2.NameTest.nameForMocksControl":336,"org.easymock.tests2.MockedExceptionTest.testMockedException":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":316,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":96,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":241,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":314,"org.easymock.tests2.DelegateToTest.testDelegate":170,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":291,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":50,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":147,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":127,"org.easymock.tests.MockingTest.testNicePartialClassMocking":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":82,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":152,"org.easymock.tests2.CaptureTest.testCaptureLast":162,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":276,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":47,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":17,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":204,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":144,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":46,"org.easymock.tests2.CaptureTest.testCapture1_2446744":361,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":247,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":180,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":298,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":294,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":222,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":111,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":358,"org.easymock.tests.UsageThrowableTest.throwError":84,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":185,"org.easymock.samples.ExampleTest.removeNonExistingDocument":181,"org.easymock.tests.UsageStrictMockTest.differentMethods":11,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":187,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":244,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":344,"org.easymock.tests2.MockBuilderTest.testCreateMockString":228,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":207,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":319,"org.easymock.tests.UsageExpectAndThrowTest.floatType":78,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":141,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":117,"org.easymock.tests.UsageVerifyTest.twoThrows":6,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":270,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":123,"org.easymock.samples.PartialClassMockTest.testGetArea":23,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":186,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":279,"org.easymock.samples.ExampleTest.voteAgainstRemoval":27,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":264,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":263,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":154,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":290,"org.easymock.tests2.UsageTest.niceToStrict":109,"org.easymock.tests2.UsageConstraintsTest.testNotNull":357,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":230,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":90,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":125,"org.easymock.tests2.MockBuilderTest.testCreateMock":227,"org.easymock.tests2.UsageTest.defaultResetToNice":220,"org.easymock.samples.ExampleTest.voteAgainstRemovals":25,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":55,"org.easymock.tests.UsageVarargTest.differentLength":236,"org.easymock.tests2.CallbackTest.callback":106,"org.easymock.tests.UsageTest.openCallCountByLastCall":240,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":295,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":176,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":97,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":345,"org.easymock.tests2.ConstraintsToStringTest.startsWithToString":0,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":235,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":286,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":195,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":62,"org.easymock.tests.UsageCallCountTest.tooFewCalls":69,"org.easymock.tests.UsageOverloadedMethodTest.overloading":77,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":353,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":66,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":254,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":76,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":131,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":140,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":164,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":198,"org.easymock.tests.UsageThrowableTest.throwCheckedException":87,"org.easymock.tests.MockClassControlTest.testEquals":213,"org.easymock.tests2.EasyMockSupportClassTest.testAll":121,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":75,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":301,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":174,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":223,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":202,"org.easymock.tests2.CaptureTest.testCaptureAll":157,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":268,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":133,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":366,"org.easymock.tests.MockNameTest.defaultName":237,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":130,"org.easymock.tests2.UsageConstraintsTest.testMatches":354,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":192,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":132,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":341,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":318,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":183,"org.easymock.tests.ObjectMethodsTest.testHashCode":217,"org.easymock.samples.ExampleTest.voteForRemovals":29,"org.easymock.tests2.NameTest.nameForNiceMock":335,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":136,"org.easymock.tests.UsageVarargTest.allKinds":42,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":5,"org.easymock.tests2.DependencyTest.testInterfaceMocking":104,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":203,"org.easymock.samples.BasicClassMockTest.testPrintContent":32,"org.easymock.samples.ExampleTest.addDocument":28,"org.easymock.tests2.DelegateToTest.testStubDelegate":368,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":89,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":332,"org.easymock.tests2.AnswerTest.stubAnswer":340,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":369,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":277,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":9,"org.easymock.tests2.UsageConstraintsTest.greaterThan":355,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":320,"org.easymock.tests.UsageVarargTest.varargLongAccepted":39,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":59,"org.easymock.samples.ExampleTest.voteForRemoval":26,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":343,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":260,"org.easymock.tests.UsageExpectAndReturnTest.floatType":51,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":229,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":116,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":356,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":271,"org.easymock.tests.UsageThrowableTest.noUpperLimit":85,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":346,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":327,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":68,"org.easymock.tests2.SerializationTest.test":119,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":160,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":94,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":309,"org.easymock.tests2.UsageConstraintsTest.testSame":350,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":248,"org.easymock.samples.SupportTest.addDocument":21,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":272,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":367,"org.easymock.tests2.CaptureTest.testCaptureFirst":166,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":95,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":331,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":199,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":188,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":251,"org.easymock.tests.GenericTest.testPackageScope":74,"org.easymock.tests2.CaptureTest.testCapture2_2446744":363,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":135,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":313,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":41,"org.easymock.tests2.NameTest.nameForMock":333,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":72,"org.easymock.tests.UsageExpectAndReturnTest.longType":52,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":200,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":92,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":302,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":255,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":238,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":145,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":300,"org.easymock.tests2.UsageStrictMockTest.differentMethods":16,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":315,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":284,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":249,"org.easymock.tests.UsageCallCountTest.tooManyCalls":73,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":299,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":307,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":322,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":287,"org.easymock.tests2.MockedExceptionTest.testRealException":370,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":252,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":246,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":80,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":14,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":194,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":88,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":61,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":129,"org.easymock.tests2.UsageConstraintsTest.testContains":352,"org.easymock.tests2.NameTest.nameForStrictMock":334,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":205,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":171,"org.easymock.tests2.UsageConstraintsTest.testFind":348,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":288,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":323,"org.easymock.tests.MockTypeTest.fromEasyMockClass":243,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":151,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":324,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":262,"org.easymock.tests.UsageExpectAndReturnTest.object":54,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":2,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":142,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":153,"org.easymock.tests.ErrorMessageTest.testGetters":3,"org.easymock.tests2.UsageStrictMockTest.range":15,"org.easymock.tests2.UsageConstraintsTest.lessThan":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":99,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":37,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":218,"org.easymock.tests.UsageTest.exactCallCountByLastCall":242,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":267,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":93,"org.easymock.tests2.CaptureTest.testCaptureRightOne":165,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":311,"org.easymock.tests2.UsageConstraintsTest.testOr":351,"org.easymock.tests.UsageRangeTest.combination":91,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":258,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":33,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":148,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":65,"org.easymock.tests.UsageTest.wrongArguments":43,"org.easymock.tests.MockClassControlTest.testHashCode":212,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":208,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":53,"org.easymock.tests2.EasyMockSupportTest.testVerify":103,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":256,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":312,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":234,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":64,"org.easymock.tests.UsageVarargTest.varargShortAccepted":38,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":221,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":206,"org.easymock.tests2.UsageConstraintsTest.cmpTo":139,"org.easymock.tests.UsageVarargTest.varargCharAccepted":36,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":364,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":339,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":113,"org.easymock.tests2.UsageTest.openCallCountByLastCall":328,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":329,"org.easymock.tests.DefaultClassInstantiatorTest.object":215,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":233,"org.easymock.tests2.CaptureTest.testCaptureFromStub":362,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":184,"org.easymock.tests.UsageTest.unexpectedCallWithArray":175,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":216,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":293,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":86,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":57,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":70,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":257,"org.easymock.tests2.UsageConstraintsTest.constraints":347,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":211,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":58,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":292,"org.easymock.samples.ExampleTest.addAndChangeDocument":30,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":259,"org.easymock.tests.UsageStrictMockTest.testVerify":182,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":283,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":20,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":210,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":56,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":124,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":201,"org.easymock.tests2.UsageTest.resumeIfFailure":330,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":161,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":280,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":250,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":281,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":67,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":4,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":34,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":98}}]

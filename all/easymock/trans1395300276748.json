[{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:85","failures":[16,17,18,19],"status":-1,"binaryOperator":"(java.util.Stack<org.easymock.IArgumentMatcher> != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:60","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","type":"CtInvocationImpl"},"failures":[20],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"this.org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:352","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"org.easymock.internal.AndroidSupport.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidSupport:27","sourceCode":"org.easymock.internal.AndroidSupport.boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:262","failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"status":-1,"binaryOperator":"java.lang.Throwable == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[18],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:242","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:48","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:98","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[76,77,78,79,80,81,82,83,84,85,86,87,0,2,88,89,90,91,92,93,94,95,96,97,98,99,100,101,24,102,103,104,105,106,107,108,109,110,111,112,113,114,115,115,116,116,117,118,119,120,121,122,123,124,125,126,127,128,129],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:198","failures":[130,131,0,132,133,134,135,136,102,137],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:216","sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:120","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:623","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:37","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:373","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[138,139],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[140,141,142,143,144,145,146,147,148,149],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","inlineConstant":"int int = 0","failures":[150,151,152],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:117","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[153,154,155,156,157,142,143,158,144,145,146,147,148,159,160,161,162,149,163,164,165,166,167,168,169,170],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Captures:47","sourceCode":"this.T = T","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"potentialValue":"potentialValue"}},{"position":"org.easymock.internal.matchers.Any:36","failures":[171,172,142,147,148,149,173,20,174,175,176,177,178,36,179,180,37,38,181,182,183,184,185,71],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[186,187],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"position":"org.easymock.internal.LastControl:92","failures":[17],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[130,188,102,137],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[189,190,191,192,193,194],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:239","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.makeThreadSafe(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:247","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkIsUsedInOneThread(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","threadSafe":"shouldBeUsedInOneThread"}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[76,78,79,195,80,81,82,83,84,85,87,2,88,89,90,91,92,93,94,196,95,96,97,98,197,198,199,200,22,23,24,103,104,105,106,107,108,110,111,113,114,117,118,119,120,201,121,202,203,204,205,206,207,122,123,124,125,208,209,126,127,128,129,210],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:178","failures":[83],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:185","sourceCode":"final boolean boolean = java.lang.reflect.Method.isAccessible()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[120],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,36,37,67,68,69,70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"failures":[211],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,36,37,67,68,69,70,71,72],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:173","sourceCode":"java.lang.Class<?> java.lang.Class<?>","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:244","sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":70,"org.easymock.tests2.StubTest.stubWithReturnValue":21,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":130,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests2.DelegateToTest.testReturnException":153,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":68,"org.easymock.tests.MockingTest.testPartialClassMocking":127,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":190,"org.easymock.tests.MockClassControlTest.testToString":202,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":198,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":51,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":39,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":104,"org.easymock.tests.UsageExpectAndThrowTest.object":49,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":132,"org.easymock.tests2.DelegateToTest.testWrongClass":155,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":182,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":183,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":179,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":9,"org.easymock.samples.ConstructorCalledMockTest.testTax":115,"org.easymock.samples.ExampleTest.answerVsDelegate":168,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":107,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":123,"org.easymock.tests2.UsageConstraintsTest.testNull":16,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":90,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":50,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":207,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":82,"org.easymock.tests2.CaptureTest.testPrimitive":158,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":181,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":58,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":191,"org.easymock.tests2.CaptureTest.testCaptureNone":148,"org.easymock.tests.UsageUnorderedTest.message":184,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":113,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":20,"org.easymock.tests2.CaptureTest.testCapture_2617107":143,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":76,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":38,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":81,"org.easymock.tests2.UsageConstraintsTest.any":172,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":138,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":177,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":69,"org.easymock.tests.UsageExpectAndThrowTest.longType":42,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests.LimitationsTest.mockNativeMethod":124,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":120,"org.easymock.tests2.AnswerTest.answer":163,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":17,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":139,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":5,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":101,"org.easymock.tests2.CaptureTest.testAnd":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":95,"org.easymock.tests2.MockedExceptionTest.testMockedException":23,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":6,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":63,"org.easymock.tests2.DelegateToTest.testDelegate":156,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":43,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":129,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":88,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":83,"org.easymock.tests.MockingTest.testNicePartialClassMocking":128,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":54,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":92,"org.easymock.tests2.CaptureTest.testCaptureLast":147,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":71,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":112,"org.easymock.tests.MockingTest.testTwoMocks":126,"org.easymock.tests2.CaptureTest.testCapture1_2446744":144,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":52,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":47,"org.easymock.tests.UsageThrowableTest.throwError":28,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":7,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":11,"org.easymock.tests2.MockBuilderTest.testCreateMockString":87,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":15,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":201,"org.easymock.tests.UsageExpectAndThrowTest.floatType":41,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":140,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":164,"org.easymock.tests.UsageVerifyTest.twoThrows":73,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":105,"org.easymock.samples.PartialClassMockTest.testGetArea":117,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":75,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":174,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":97,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":40,"org.easymock.tests2.UsageConstraintsTest.testNotNull":19,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":22,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":34,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":150,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":80,"org.easymock.tests2.MockBuilderTest.testCreateMock":84,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":4,"org.easymock.tests2.CallbackTest.callback":186,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":8,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":48,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":189,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":61,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":37,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":74,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":110,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":159,"org.easymock.tests.UsageThrowableTest.throwCheckedException":31,"org.easymock.tests.MockClassControlTest.testEquals":206,"org.easymock.tests2.EasyMockSupportClassTest.testAll":103,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":119,"org.easymock.tests.MockingTest.testStrictClassMocking":208,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":192,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":56,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":99,"org.easymock.tests2.CaptureTest.testCaptureAll":142,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":36,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":111,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":109,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":134,"org.easymock.samples.BasicClassMockTest.testPrintContent":114,"org.easymock.tests2.DelegateToTest.testStubDelegate":154,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":33,"org.easymock.tests2.AnswerTest.stubAnswer":165,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":72,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":13,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":185,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":136,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":98,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":93,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":102,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":116,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":26,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":125,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":145,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":131,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":29,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":67,"org.easymock.tests2.CaptureTest.testCaptureFirst":149,"org.easymock.tests.GenericTest.testPackageScope":118,"org.easymock.tests2.CaptureTest.testCapture2_2446744":162,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":14,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":86,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":57,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":141,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":55,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":65,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":196,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":53,"org.easymock.tests2.MockedExceptionTest.testRealException":25,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":188,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":44,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":173,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":187,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":32,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":180,"org.easymock.tests.MockingTest.testNiceClassMocking":210,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":108,"org.easymock.tests.MockingTest.testClassMocking":209,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":77,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":24,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":35,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":195,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":152,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":166,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":91,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":167,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":200,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":18,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":94,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":133,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":12,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":178,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":135,"org.easymock.tests2.CaptureTest.testCaptureRightOne":160,"org.easymock.tests2.UsageConstraintsTest.testOr":171,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":137,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":89,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":170,"org.easymock.tests.MockClassControlTest.testHashCode":205,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":10,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":121,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":60,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":199,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":27,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":151,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":59,"org.easymock.tests2.CaptureTest.testCaptureFromStub":161,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":79,"org.easymock.tests.UsageTest.unexpectedCallWithArray":194,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":46,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":193,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":30,"org.easymock.tests2.CaptureTest.testCapture":211,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":204,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":96,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":45,"org.easymock.tests.CapturesMatcherTest.test":169,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":64,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":106,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":146,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":100,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":175,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":176}}]

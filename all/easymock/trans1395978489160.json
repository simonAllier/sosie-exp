[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-332797751209289222L","position":"org.easymock.internal.Result:43","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:48","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","position":"org.easymock.internal.MockBuilder:80","type":"CtIfImpl"},"status":-2},{"failures":[0],"variableMapping":{"toMock":"toMock","this":"this","mockedMethods":"mockedMethods"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:301","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","position":"org.easymock.internal.MocksControl:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"continue","position":"org.easymock.internal.UnorderedBehavior:90","type":"CtContinueImpl"},"status":-2},{"failures":[],"variableMapping":{"bridgeMethod":"result"},"name":"add","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:87","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"method","method":"method"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","position":"org.easymock.internal.AndroidClassProxyFactory:80","type":"CtAssignmentImpl"},"status":0},{"failures":[1,2,3,4,5],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.Object, java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Same:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append((((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\"))","position":"org.easymock.internal.matchers.CompareTo:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.Invocation:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","position":"org.easymock.internal.BridgeMethodResolver:222","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:295","type":"CtLocalVariableImpl"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,0,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,78,79,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"delegateTo":"obj"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"private static class MockHandler implements java.lang.reflect.InvocationHandler {\n    private final java.lang.reflect.InvocationHandler delegate;\n\n    private final java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockHandler(java.lang.reflect.InvocationHandler delegate ,java.lang.reflect.Method... mockedMethods) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n        this.java.util.Set<java.lang.reflect.Method> = java.lang.reflect.Method[] != null ? new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[])) : null;\n    }\n\n    public java.lang.Object invoke(java.lang.Object obj, java.lang.reflect.Method method, java.lang.Object[] args) throws java.lang.Throwable {\n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        boolean boolean = ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) && org.easymock.internal.ClassProxyFactory.(org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable()));\n        if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n            return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    private boolean isMocked(java.lang.reflect.Method method) {\n        return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:67","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>","position":"org.easymock.internal.ClassProxyFactory:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>)","position":"org.easymock.internal.AndroidClassProxyFactory:48","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"bound","bound":"result"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"lt\"","position":"org.easymock.internal.matchers.LessThan:34","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        int += 1;\n        return java.util.List<org.easymock.internal.Result>.get(int);\n    } \n}","position":"org.easymock.internal.Results:65","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Matches(java.lang.String))","position":"org.easymock.EasyMock:1789","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MockBuilder<T>.checkConstructorNotInitialized()","position":"org.easymock.internal.MockBuilder:137","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","position":"org.easymock.internal.Invocation:44","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\")","position":"org.easymock.internal.AndroidSupport:26","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocks(java.lang.Object)","position":"org.easymock.EasyMockSupport:624","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(boolean)","position":"org.easymock.internal.RecordState:332","type":"CtInvocationImpl"},"status":-2},{"failures":[116,117,118,119,120,121,122,123,124,125,126,127],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksBehavior.verify()","position":"org.easymock.internal.ReplayState:73","type":"CtInvocationImpl"},"status":-1},{"failures":[128],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.RuntimeException(java.lang.NoSuchMethodException)","position":"org.easymock.internal.ReflectionUtils:230","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException)","position":"org.easymock.internal.MockBuilder:153","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","position":"org.easymock.internal.MocksControl:196","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","position":"org.easymock.internal.MocksControl:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","position":"org.easymock.internal.RecordState:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * (((java.util.List<org.easymock.internal.UnorderedBehavior>.size()) - (int)) + 1)))","position":"org.easymock.internal.MocksBehavior:164","type":"CtLocalVariableImpl"},"status":-2},{"failures":[129,130,125,126,131],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:241","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"add","transplant":{"sourceCode":"final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object)","position":"org.easymock.internal.MocksControl:156","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[132,133,134],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Integer>(int))","position":"org.easymock.EasyMock:945","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.easymock.internal.Range(int , int)","position":"org.easymock.internal.Results:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:268","type":"CtReturnImpl"},"status":-2},{"failures":[33,34,35,44,48,50,59,135,63,64,67,111,114],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.EasyMockSupport.createStrictControl()","position":"org.easymock.internal.MockBuilder:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:101","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","position":"org.easymock.EasyMock:2038","type":"CtForEachImpl"},"status":-2},{"failures":[136],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int == 0","position":"org.easymock.LogicalOperator:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.clear()","position":"org.easymock.internal.Invocation:176","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:93","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","position":"org.easymock.EasyMock:480","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor"},"name":"replace","transplant":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.MockBuilder:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[])","position":"org.easymock.internal.MockBuilder:151","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.anyObject()","position":"org.easymock.EasyMock:693","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","position":"org.easymock.EasyMock:2011","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"break","position":"org.easymock.Capture:121","type":"CtBreakImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1951159588262854559L","position":"org.easymock.internal.ExpectedInvocationAndResult:25","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-6785245714002503134L","position":"org.easymock.internal.matchers.Contains:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.injectMocksOnClass(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:81","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:281","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.AndroidClassProxyFactory.MockHandler.java.lang.reflect.InvocationHandler","position":"org.easymock.internal.AndroidClassProxyFactory:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"result","bound":"bound"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","position":"org.easymock.internal.BridgeMethodResolver:355","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.MocksControl.reset()","position":"org.easymock.internal.MocksControl:207","type":"CtInvocationImpl"},"status":-2},{"failures":[137,138,139,140,11,14,24,30,33,141,142,143,144,145,146,35,147,36,132,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,136,133,163,164,134,165,166,167,168,169,170,171,172,116,173,129,117,118,37,38,174,39,40,41,42,43,46,47,48,0,175,176,51,52,53,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,54,56,59,60,61,62,64,65,67,68,69,70,71,219,72,73,220,221,119,222,223,224,225,226,227,228,229,230,231,76,77,232,233,234,235,236,237,238,78,79,80,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,83,275,276,277,278,279,279,280,281,282,283,284,285,286,287,288,289,290,87,88,89,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,93,309,310,311,121,312,130,122,123,313,314,315,316,317,318,319,124,125,126,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,131,344,127,345,346,347,348,349,350,351,352,353,354,112,113,355,356,357,358,359,360,361,362,363,364,365],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","position":"org.easymock.internal.LastControl:126","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeLong(java.lang.Long.longValue())","position":"org.easymock.internal.DefaultClassInstantiator:144","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)))","position":"org.easymock.Capture:124","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (java.lang.Object) == java.lang.Object","position":"org.easymock.internal.matchers.Same:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:155","type":"CtReturnImpl"},"status":-2},{"failures":[137,138,139,140,11,14,24,30,33,141,142,143,144,145,146,35,147,36,132,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,136,133,163,164,134,165,166,167,168,169,170,172,116,173,129,117,118,37,38,174,39,40,41,43,48,175,176,51,52,53,177,178,179,180,181,182,183,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,216,217,218,59,61,62,68,69,70,71,219,72,73,220,221,119,223,224,225,226,230,231,76,77,232,233,234,235,236,237,238,78,79,80,239,240,241,242,243,244,245,246,248,249,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,83,275,276,277,280,281,282,283,284,285,286,287,288,289,290,87,88,89,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,93,310,121,312,130,122,123,313,314,315,316,317,318,319,124,125,126,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,131,344,127,347,348,351,352,353,354,112,113,355,356,357,358,359,361,362,363,364,365],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.ExpectedInvocation:98","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"maximum":"currentPosition","minimum":"callCount"},"name":"replace","transplant":{"sourceCode":"return (this.int) == int","position":"org.easymock.internal.Range:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.LinkedList<org.easymock.internal.Range>.size()) ; int++) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.get(int);\n    if (org.easymock.internal.Range.hasOpenCount()) {\n        return true;\n    } \n    int += org.easymock.internal.Range.getMaximum();\n    if (int > (int)) {\n        return true;\n    } \n}","position":"org.easymock.internal.Results:50","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","position":"org.easymock.internal.DefaultClassInstantiator:94","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:138","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int++","position":"org.easymock.internal.MocksBehavior:132","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int--","position":"org.easymock.internal.MocksBehavior:115","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.EasyMock:2123","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    java.util.List<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","position":"org.easymock.internal.BridgeMethodResolver:435","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ExpectedInvocation:91","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:34","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1013","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:373","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Throwable.getClass()","position":"org.easymock.internal.RecordState:321","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"constructor":"constructor","params":"params"},"name":"add","transplant":{"sourceCode":"return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[])","position":"org.easymock.internal.DefaultClassInstantiator:55","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<?>.newInstance(java.lang.Object[]);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalArgumentException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException);\n}","position":"org.easymock.internal.DefaultClassInstantiator:54","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"entry":"entry"},"name":"add","transplant":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage = new org.easymock.internal.ErrorMessage(boolean , org.easymock.internal.ExpectedInvocationAndResults.toString() , org.easymock.internal.ExpectedInvocationAndResults.getResults().getCallCount())","position":"org.easymock.internal.UnorderedBehavior:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","position":"org.easymock.internal.ClassProxyFactory:171","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"status":-2},{"failures":[5,132,133,167],"binaryOperator":"int <= 0","name":"conditionalBoundary","position":"org.easymock.internal.matchers.LessOrEqual:39","type":"mutation","status":-1},{"failures":[191,192,193,194,195,196,197,198,199,200,201,202,203,204,279],"name":"returnValue","position":"org.easymock.internal.matchers.Captures:53","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.String.startsWith(org.easymock.internal.EasyMockProperties.java.lang.String))) {\n    throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"));\n} ","position":"org.easymock.internal.EasyMockProperties:115","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType()","position":"org.easymock.internal.RecordState:309","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.LinkedList<org.easymock.internal.Range>.isEmpty())) {\n    final org.easymock.internal.Range org.easymock.internal.Range = java.util.LinkedList<org.easymock.internal.Range>.getLast();\n    if (!(org.easymock.internal.Range.hasFixedCount())) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n    } \n} ","position":"org.easymock.internal.Results:37","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size()))","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[366],"variableMapping":{"arg":"arg"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","position":"org.easymock.ConstructorArgs:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","position":"org.easymock.ConstructorArgs:80","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:25","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })))","position":"org.easymock.internal.DefaultClassInstantiator:189","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getDeclaredConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","position":"org.easymock.internal.MockBuilder:150","type":"CtTryImpl"},"status":-2},{"failures":[116,129,117,367,368,369,370,119,222,228,229,311,121,130,122,124,125,126,127,346,349,350],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"boolean boolean = true","position":"org.easymock.internal.MocksBehavior:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:312","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException)","position":"org.easymock.internal.ClassProxyFactory:210","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","position":"org.easymock.internal.matchers.CompareTo:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","position":"org.easymock.EasyMockSupport:52","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","position":"org.easymock.internal.ReflectionUtils:157","type":"CtAssignmentImpl"},"status":0},{"failures":[6,371,372,7,373,374,137,375,376,138,139,140,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,141,142,377,143,144,145,378,146,379,35,147,36,132,148,149,150,380,151,152,153,154,155,156,381,157,158,159,160,161,162,136,133,163,164,134,165,166,167,168,169,170,171,172,116,173,129,117,118,37,38,174,39,40,41,42,382,43,44,45,46,47,48,0,49,50,175,383,176,51,52,53,177,178,179,180,181,182,183,184,185,186,187,188,189,190,384,385,386,387,388,389,191,192,193,194,195,196,197,198,199,200,201,202,203,204,390,391,392,393,394,205,395,396,397,398,399,400,206,401,207,208,209,210,211,212,213,214,215,402,403,404,405,406,216,407,408,409,410,411,412,413,414,217,218,54,56,57,58,59,60,61,62,135,63,64,65,67,68,69,70,71,415,219,72,73,416,417,367,368,369,370,220,221,119,222,223,224,225,226,227,228,229,230,231,76,77,232,233,234,235,236,237,418,238,78,79,80,239,240,241,242,419,420,421,422,423,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,81,424,425,426,427,82,428,429,83,275,430,276,277,431,120,278,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,280,281,282,283,284,285,286,287,288,289,290,84,85,86,87,88,459,89,460,461,90,291,292,462,463,464,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,91,92,93,94,465,466,467,468,469,470,471,472,473,474,475,476,477,478,309,310,311,121,312,130,122,123,479,313,314,315,316,317,95,96,97,98,99,100,101,102,318,319,124,125,126,480,481,482,483,484,103,485,486,487,320,321,322,323,488,489,490,491,492,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,493,494,495,131,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,104,105,106,107,108,109,110,344,127,345,346,347,348,349,350,351,352,518,353,354,111,112,113,114,115,355,356,357,519,358,359,360,361,362,363,364,365],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","position":"org.easymock.internal.EasyMockProperties:47","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.ReflectionUtils:181","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Byte>(byte))","position":"org.easymock.EasyMock:906","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?>","position":"org.easymock.internal.ClassProxyFactory:173","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int]","position":"org.easymock.internal.BridgeMethodResolver:195","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14,24,30,35,42,47,48,50,54,56,57,59,61,62,65,67,80,81,82,114],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","position":"org.easymock.internal.MockBuilder:74","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:50","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:35","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Float>(float))","position":"org.easymock.EasyMock:1025","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:438","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>) == null)","name":"removeConditional","position":"org.easymock.internal.ExpectedInvocation:75","type":"mutation","status":0},{"failures":[],"variableMapping":{"result":"equalsMethod"},"name":"add","transplant":{"sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","position":"org.easymock.internal.BridgeMethodResolver:70","type":"CtAssertImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method))","position":"org.easymock.internal.ObjectMethodsFilter:123","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"pt":"pt"},"name":"add","transplant":{"sourceCode":"((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType()))","position":"org.easymock.internal.BridgeMethodResolver:285","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character)","position":"org.easymock.internal.RecordState:61","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"net.sf.cglib.core.CollectionUtils.net.sf.cglib.core.CollectionUtils.filter(java.util.List, new net.sf.cglib.core.VisibilityPredicate(java.lang.Class , true))","position":"org.easymock.internal.ClassProxyFactory:266","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"suid":"this"},"name":"replace","transplant":{"sourceCode":"return java.lang.Long","position":"org.easymock.internal.DefaultClassInstantiator:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","position":"org.easymock.internal.DefaultClassInstantiator:160","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:72","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"This method must not be called in replay state.\"))","position":"org.easymock.internal.ReplayState:149","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getMockedType(java.lang.Object)","position":"org.easymock.internal.Invocation:157","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"org.easymock.internal.ClassInstantiatorFactory.instantiator":"org.easymock.internal.ClassInstantiatorFactory.instantiator"},"name":"replace","transplant":{"sourceCode":"this.org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:79","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","position":"org.easymock.internal.ClassInstantiatorFactory:72","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"math","position":"org.easymock.internal.DefaultClassInstantiator:63","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Byte.java.lang.Class<java.lang.Byte>, java.lang.Byte.java.lang.Byte.valueOf(((byte)(0))))","position":"org.easymock.internal.RecordState:46","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.SecurityException java.lang.SecurityException","position":"org.easymock.internal.Invocation:183","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","position":"org.easymock.EasyMock:632","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:98","type":"CtReturnImpl"},"status":-2},{"failures":[141,230,452,518,353,354],"variableMapping":{"lastRange":"org.easymock.internal.MocksControl.ZERO_OR_MORE"},"name":"replace","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","position":"org.easymock.internal.MocksControl:370","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeShort(java.io.ObjectStreamConstants.short)","position":"org.easymock.internal.DefaultClassInstantiator:136","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:633","type":"mutation","return":"return 0","status":0},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":283,"org.easymock.tests2.MockedExceptionTest.testRealException":177,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":15,"org.easymock.tests.UsageVarargTest.varargIntAccepted":357,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":504,"org.easymock.tests.LimitationsTest.mockFinalMethod":94,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":132,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":98,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":387,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":26,"org.easymock.tests.UsageCallCountTest.tooManyCalls":249,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":470,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":416,"org.easymock.tests2.CompareToTest.testGreateThan":2,"org.easymock.tests2.StubTest.stubWithReturnValue":142,"org.easymock.tests.UsageVarargTest.allKinds":365,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":32,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":323,"org.easymock.tests2.CaptureTest.testCaptureAll":192,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":291,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":136,"org.easymock.tests2.CaptureTest.testAnd":191,"org.easymock.tests.UsageStrictMockTest.testVerify":479,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":332,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":276,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":81,"org.easymock.tests.MockClassControlTest.testToString":97,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":68,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":477,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":183,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":498,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":268,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":340,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":216,"org.easymock.tests.UsageThrowableTest.throwError":280,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":513,"org.easymock.samples.SupportTest.addDocument":239,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":308,"org.easymock.tests2.StubTest.stub":141,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":489,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":471,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":402,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":296,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":382,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":516,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":304,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":397,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":274,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":50,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":458,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":49,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":364,"org.easymock.tests.UsageExpectAndThrowTest.object":334,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":28,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":300,"org.easymock.tests2.UsageTest.moreThanOneArgument":119,"org.easymock.tests.UsageVarargTest.varargByteAccepted":363,"org.easymock.tests.MockClassControlTest.testEquals":101,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":75,"org.easymock.tests.UsageTest.wrongArguments":346,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":496,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":253,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":483,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":406,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":335,"org.easymock.tests2.UsageTest.defaultResetToNice":227,"org.easymock.tests.MockingTest.testNiceClassMocking":90,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":53,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":209,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":62,"org.easymock.tests2.MockBuilderTest.testCreateMock":64,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":55,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":210,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":467,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":472,"org.easymock.samples.ExampleTest.voteAgainstRemovals":232,"org.easymock.tests2.CompareToTest.testCompareEqual":3,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":171,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":405,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":430,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":353,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":288,"org.easymock.tests2.CaptureTest.testCapture1_2446744":195,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":378,"org.easymock.samples.ExampleTest.voteForRemoval":234,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":373,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":246,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":120,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":464,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":123,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":320,"org.easymock.tests2.CaptureTest.testCaptureRightOne":201,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":261,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":468,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":376,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":41,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":518,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":469,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":491,"org.easymock.tests2.UsageConstraintsTest.cmpTo":158,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":388,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":108,"org.easymock.tests.MockTypeTest.fromEasyMockClass":426,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":135,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":410,"org.easymock.tests2.MockedExceptionTest.testMockedException":52,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":167,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":315,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":343,"org.easymock.samples.PartialClassMockTest.testGetArea":80,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":124,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":442,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":290,"org.easymock.samples.ConstructorCalledMockTest.testTax":78,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":415,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":371,"org.easymock.tests2.UsageTest.argumentsOrdered":229,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":375,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":424,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":374,"org.easymock.samples.ExampleTest.removeNonExistingDocument":418,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":106,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":140,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":466,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":260,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":250,"org.easymock.tests2.AnswerTest.answer":137,"org.easymock.tests.MockingTest.testNicePartialClassMocking":88,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":411,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":297,"org.easymock.tests2.CompareToTest.testLessThan":1,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":317,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":490,"org.easymock.tests.UsageExpectAndThrowTest.longType":327,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":429,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":341,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":24,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":185,"org.easymock.tests.UsageTest.argumentsOrdered":350,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":61,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":150,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":273,"org.easymock.tests2.MockBuilderTest.testCreateMockString":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":306,"org.easymock.tests2.NameTest.nameForStrictMock":368,"org.easymock.tests2.CaptureTest.testCaptureNone":199,"org.easymock.tests2.SerializationTest.testClass":35,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":455,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":103,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":76,"org.easymock.tests.MockingTest.testInterfaceMocking":459,"org.easymock.tests2.EasyMockSupportTest.testVerify":190,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":481,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":408,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":329,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":461,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":166,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":220,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":65,"org.easymock.tests.GenericTest.testBridgedEquals":115,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":272,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":156,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":219,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":37,"org.easymock.tests2.UsageConstraintsTest.testOr":154,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":207,"org.easymock.tests.MockClassControlTest.testHashCode":100,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":391,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":417,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":82,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":267,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":287,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":292,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":69,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":71,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":385,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":500,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":12,"org.easymock.tests2.UsageConstraintsTest.testSame":153,"org.easymock.tests2.UsageTest.resumeIfFailure":230,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":499,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":420,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":72,"org.easymock.tests.UsageOverloadedMethodTest.overloading":289,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":44,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":428,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":394,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":395,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":20,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":434,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":79,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":19,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":113,"org.easymock.tests.UsageTest.openCallCountByLastCall":347,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":330,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":433,"org.easymock.tests2.NameTest.nameForNiceMock":369,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":474,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":407,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":354,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":313,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":503,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":174,"org.easymock.tests2.CaptureTest.testPrimitive":194,"org.easymock.samples.BasicClassMockTest.testPrintContent":77,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":419,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":293,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":46,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":175,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":248,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":423,"org.easymock.tests2.UsageStrictMockTest.differentMethods":117,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":21,"org.easymock.tests.MockingTest.testClassMocking":85,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":180,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":114,"org.easymock.tests2.CaptureTest.testCaptureLast":198,"org.easymock.tests2.UsageConstraintsTest.equals":380,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":66,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":247,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":325,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":245,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":218,"org.easymock.tests.UsageStrictMockTest.range":130,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":348,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":22,"org.easymock.tests.UsageTest.unexpectedCallWithArray":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":438,"org.easymock.samples.ExampleTest.addDocument":236,"org.easymock.tests2.CompareToTest.testGreateOrEqual":4,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":460,"org.easymock.tests2.UsageConstraintsTest.lessThan":170,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":278,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":349,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":275,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":74,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":488,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":377,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":447,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":6,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":110,"org.easymock.tests2.UsageStrictMockTest.range":129,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":73,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":252,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":493,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":440,"org.easymock.tests.UsageTest.moreThanOneArgument":127,"org.easymock.tests2.UsageTest.openCallCountByLastCall":225,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":56,"org.easymock.tests.UsageStrictMockTest.differentMethods":122,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":105,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":444,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":7,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":328,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":462,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":255,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":302,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":13,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":384,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":43,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":312,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":404,"org.easymock.tests2.DependencyTest.testClassMockingSupport":414,"org.easymock.tests.ReplayStateInvalidCallsTest.times":509,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":339,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":318,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":393,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":242,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":485,"org.easymock.tests2.UsageConstraintsTest.testContains":159,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":511,"org.easymock.tests2.UsageConstraintsTest.testFind":151,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":196,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":107,"org.easymock.samples.ExampleTest.addAndChangeDocument":238,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":54,"org.easymock.tests.UsageVarargTest.varargCharAccepted":358,"org.easymock.tests2.CaptureTest.testCaptureFromStub":202,"org.easymock.tests.UsageVerifyTest.twoThrows":125,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":412,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":425,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":305,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":359,"org.easymock.tests2.DelegateToTest.testReturnException":143,"org.easymock.tests2.CompareToTest.testLessOrEqual":5,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":34,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":224,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":189,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":111,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":172,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":383,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":421,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":109,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":478,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":200,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":336,"org.easymock.tests2.UsageConstraintsTest.testMatches":162,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":445,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":446,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":457,"org.easymock.tests.LimitationsTest.abstractClass":91,"org.easymock.tests2.UsageConstraintsTest.testNull":152,"org.easymock.tests2.EasyMockSupportClassTest.testAll":11,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":128,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":83,"org.easymock.tests2.UsageConstraintsTest.greaterThan":133,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":355,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":473,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":164,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":186,"org.easymock.tests.UsageExpectAndReturnTest.object":265,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":118,"org.easymock.tests2.DelegateToTest.testWrongClass":145,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":437,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":510,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":331,"org.easymock.samples.ExampleTest.voteAgainstRemoval":235,"org.easymock.tests.CapturesMatcherTest.test":279,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":286,"org.easymock.tests.UsageVarargTest.varargShortAccepted":361,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":492,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":484,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":399,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":295,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":241,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":10,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":95,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":403,"org.easymock.tests2.SerializationTest.testAllMockedMethod":36,"org.easymock.tests2.NameTest.nameForMocksControl":370,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":501,"org.easymock.tests.MockingTest.testStrictClassMocking":84,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":307,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":231,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":18,"org.easymock.tests.LimitationsTest.mockNativeMethod":93,"org.easymock.tests2.DelegateToTest.testStubDelegate":144,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":463,"org.easymock.tests.UsageUnorderedTest.message":131,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":431,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":449,"org.easymock.samples.ExampleTest.answerVsDelegate":233,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":487,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":515,"org.easymock.tests.UsageCallCountTest.tooFewCalls":244,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":264,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":27,"org.easymock.tests.UsageVerifyTest.twoReturns":126,"org.easymock.tests2.ThreadingTest.testChangeDefault":401,"org.easymock.tests2.DependencyTest.testInterfaceMocking":217,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":259,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":448,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":299,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":450,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":181,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":215,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":155,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":386,"org.easymock.tests.MockingTest.testTwoMocks":86,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":243,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":321,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":51,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":16,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":266,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":70,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":409,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":9,"org.easymock.tests.UsageThrowableTest.throwCheckedException":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":454,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":427,"org.easymock.samples.ExampleTest.voteForRemovals":237,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":282,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":161,"org.easymock.tests.ReplayStateInvalidUsageTest.times":475,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":517,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":17,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":277,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":301,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":40,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":344,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":435,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":366,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":256,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":372,"org.easymock.tests2.UsageConstraintsTest.any":157,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":392,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":436,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":263,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":439,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":188,"org.easymock.tests.LimitationsTest.privateConstructor":92,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":176,"org.easymock.tests2.CallbackTest.callback":211,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":506,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":512,"org.easymock.tests2.NameTest.nameForMock":367,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":443,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":160,"org.easymock.tests.MockNameTest.defaultName":465,"org.easymock.tests2.SerializationTest.test":147,"org.easymock.tests.UsageExpectAndReturnTest.longType":258,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":197,"org.easymock.tests2.CaptureTest.testCaptureFirst":204,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":505,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":134,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":495,"org.easymock.tests2.UsageTest.niceToStrict":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":298,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":254,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":486,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":309,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":8,"org.easymock.tests2.UsageTest.strictResetToDefault":221,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":337,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":48,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":319,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":324,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":212,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":42,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":58,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":39,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":163,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":356,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":303,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":89,"org.easymock.tests2.DelegateToTest.testDelegate":146,"org.easymock.tests2.UsageConstraintsTest.testNotNull":168,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":173,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":205,"org.easymock.tests2.CaptureTest.testCapture_2617107":193,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":452,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":476,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":396,"org.easymock.tests2.ThreadingTest.testThreadSafe":206,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":453,"org.easymock.tests.UsageThrowableTest.noUpperLimit":281,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":519,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":187,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":179,"org.easymock.tests.UsageExpectAndReturnTest.floatType":257,"org.easymock.tests2.UsageTest.wrongArguments":222,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":381,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":214,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":99,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":63,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":507,"org.easymock.samples.SupportTest.voteForRemovals":240,"org.easymock.tests.UsageRangeTest.combination":352,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":23,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":285,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":169,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":165,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":29,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":400,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":116,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":269,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":338,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":322,"org.easymock.tests.UsageExpectAndThrowTest.floatType":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":25,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":38,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":270,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":389,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":390,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":45,"org.easymock.tests.UsageTest.exactCallCountByLastCall":351,"org.easymock.tests2.AnswerTest.stubAnswer":139,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":184,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":497,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":508,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":14,"org.easymock.tests.MockingTest.testPartialClassMocking":87,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":271,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":228,"org.easymock.tests2.UsageConstraintsTest.constraints":149,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":213,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":379,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":502,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":316,"org.easymock.tests.UsageVarargTest.varargLongAccepted":362,"org.easymock.tests.ObjectMethodsTest.testHashCode":482,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":47,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":0,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":311,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":342,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":432,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":57,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":494,"org.easymock.tests2.DependencyTest.testClassMocking":413,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":102,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":294,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":480,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":398,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":182,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":96,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":148,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":59,"org.easymock.tests.DefaultClassInstantiatorTest.object":104,"org.easymock.tests.UsageVarargTest.differentLength":360,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":451,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":514,"org.easymock.tests2.CaptureTest.testCapture2_2446744":203,"org.easymock.tests.GenericTest.testPackageScope":112}}]

[{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:294","sourceCode":"org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:117","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:121","sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.InstanceOf:40","failures":[],"status":0,"binaryOperator":"(\"isA(\" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:51","sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[3,4,5,6,7,8,9,10,11],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Results:90","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:253","sourceCode":"java.lang.Class<?> = org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.get(java.lang.Class<?>)","type":"CtAssignmentImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"type":"returnedType"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:257","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"))","type":"CtThrowImpl"},"failures":[91,92,93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:150","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[94,95,96,97,98,99,100,101,76,102],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"ret":"ret","clazz":"clazz"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[103,3,104],"status":-1,"binaryOperator":"int <= 0","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:166","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Compare:53","failures":[105],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[12,13,14,15,106,107,23,108,109,41,44,45,46,47,48,49,50,110,110,111,111,103,112,113,114,115,5,116,117,118,119,120,8,121,122,123,81,124],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[125],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int)","name":"math","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:89","failures":[126,127,58,71,72],"status":-1,"binaryOperator":"java.lang.reflect.Method == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Same:43","sourceCode":"java.lang.StringBuffer.append(\")\")","type":"CtInvocationImpl"},"failures":[128,129,130],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:35","sourceCode":"java.lang.StringBuffer.append(\"null\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:50","sourceCode":"if (int == 1) {\n    java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n    java.lang.StringBuilder.append(\" (+1)\");\n}","type":"CtIfImpl"},"failures":[131,132,133,134,135,42,82],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[110,111,136,137,94,95,138,139,140,141,101,76,102,142,143,144,77,145,146,78,147,148,149,150,151,152,153,154,155,79,156,157,158,159,160,80,161,162,86,90,163],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[164,165,166,167,168,169,170,171,172,19,173,133,134,135,174,42,43,175,176,177,178,179,180,57,181,61,182,183,82,83],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[184],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.LastControl:93","sourceCode":"final java.util.List<org.easymock.IArgumentMatcher> java.util.List<org.easymock.IArgumentMatcher> = new java.util.LinkedList<org.easymock.IArgumentMatcher>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:48","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[123,185],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:813","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Byte>(byte))","type":"CtInvocationImpl"},"failures":[186],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Compare:47","failures":[],"status":0,"binaryOperator":"(((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:92","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[12,13,14,15,106,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,107,212,16,17,18,19,21,22,213,214,23,108,215,216,109,217,134,135,24,25,26,27,28,29,218,219,30,31,220,32,33,34,221,35,36,37,38,39,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,40,239,240,241,41,42,43,44,45,46,47,48,49,50,51,52,242,53,54,55,110,111,56,243,244,245,246,247,248,249,58,59,60,62,63,64,66,67,69,103,112,3,4,113,114,115,5,6,250,251,252,116,253,117,118,105,119,120,8,254,255,186,121,122,123,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,74,271,272,273,274,75,275,276,101,277,76,278,279,280,281,282,283,284,285,78,79,80,286,81,82,83,287,84,85,86,87,88,89,90,9,288,289,11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:140","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[290,291],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[110,110,111,111,292,95,293,101,76,102],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[290,291],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[187,189,190,191,217,135,41,243,247,248,249,256,81],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MockBuilder:201","failures":[294,295,296,51,297,57,298,58,59,60,61,182,299,71,72,300,101,78,79,80],"status":-1,"binaryOperator":"(java.util.Set<java.lang.reflect.Method>) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:83","failures":[164,165,166,167,168,169,173,133,134,135,174,42,177,178,179,82],"status":-1,"binaryOperator":"java.lang.Object[] == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[188,165,166,167,301,133,217,134,135,174,41,42,43,245,177,178,179,302,303,304,305,81,82,83],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:42","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[164,306,307,174,308,309],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value"}},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"failures":[310],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[311,125,312],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[313,101,277,314],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:140","sourceCode":"java.io.DataOutputStream.writeUTF(java.lang.Class<?>.getName())","type":"CtInvocationImpl"},"failures":[311,125,312],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:212","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:121","sourceCode":"break","type":"CtBreakImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests2.UsageTest.argumentsOrdered":179,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":187,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":284,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":237,"org.easymock.tests2.StubTest.stubWithReturnValue":287,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":94,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":31,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":186,"org.easymock.tests2.SerializationTest.testAllMockedMethod":314,"org.easymock.tests2.DelegateToTest.testReturnException":274,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":235,"org.easymock.tests.MockingTest.testPartialClassMocking":16,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":309,"org.easymock.samples.SupportTest.voteForRemovals":56,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":290,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":91,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":300,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":150,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":192,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":78,"org.easymock.tests.UsageExpectAndThrowTest.object":202,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":254,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":63,"org.easymock.tests2.DelegateToTest.testWrongClass":275,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":96,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":44,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":45,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":250,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":23,"org.easymock.tests2.UsageTest.wrongArguments":177,"org.easymock.tests.UsageStrictMockTest.range":42,"org.easymock.samples.ConstructorCalledMockTest.testTax":110,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":241,"org.easymock.samples.ExampleTest.answerVsDelegate":242,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":295,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":84,"org.easymock.tests2.UsageConstraintsTest.testNull":114,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":203,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":67,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":59,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":183,"org.easymock.tests2.CaptureTest.testPrimitive":288,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":109,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":211,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":142,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":166,"org.easymock.tests.UsageTest.moreThanOneArgument":188,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":240,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":66,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":14,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":310,"org.easymock.tests.UsageUnorderedTest.message":133,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":175,"org.easymock.tests.UsageVerifyTest.twoReturns":135,"org.easymock.tests2.ThreadingTest.testThreadSafe":269,"org.easymock.tests.UsageTest.argumentsOrdered":167,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":156,"org.easymock.tests2.CaptureTest.testCapture_2617107":10,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":46,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":297,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":216,"org.easymock.tests2.UsageConstraintsTest.any":251,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":50,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":236,"org.easymock.tests.UsageExpectAndThrowTest.longType":195,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":311,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":273,"org.easymock.tests2.SerializationTest.testClass":101,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":286,"org.easymock.tests.LimitationsTest.mockNativeMethod":40,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":296,"org.easymock.tests2.AnswerTest.answer":256,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":39,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":7,"org.easymock.tests2.CaptureTest.testAnd":9,"org.easymock.tests2.UsageTest.strictResetToDefault":244,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":137,"org.easymock.tests2.NameTest.nameForMocksControl":305,"org.easymock.tests2.MockedExceptionTest.testMockedException":264,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":13,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":281,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":21,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":146,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":190,"org.easymock.tests2.DelegateToTest.testDelegate":276,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":196,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":18,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":64,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":60,"org.easymock.tests.MockingTest.testNicePartialClassMocking":17,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":207,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":69,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":1,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":90,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":6,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":255,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":233,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":163,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":24,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":205,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":261,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":200,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":178,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":122,"org.easymock.tests.UsageThrowableTest.throwError":222,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":2,"org.easymock.tests.UsageStrictMockTest.differentMethods":43,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":270,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":176,"org.easymock.tests2.MockBuilderTest.testCreateMockString":182,"org.easymock.tests.UsageExpectAndThrowTest.floatType":194,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":106,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":147,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":144,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":257,"org.easymock.tests.UsageVerifyTest.twoThrows":134,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":79,"org.easymock.samples.PartialClassMockTest.testGetArea":51,"org.easymock.tests2.CompareToTest.testLessOrEqual":104,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":47,"org.easymock.samples.ExampleTest.voteAgainstRemoval":54,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":92,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":72,"org.easymock.tests2.UsageTest.niceToStrict":246,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":193,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":151,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":141,"org.easymock.tests2.UsageConstraintsTest.testNotNull":121,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":263,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":228,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":58,"org.easymock.tests2.MockBuilderTest.testCreateMock":181,"org.easymock.samples.ExampleTest.voteAgainstRemovals":52,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":158,"org.easymock.tests2.CallbackTest.callback":272,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":293,"org.easymock.tests.UsageTest.openCallCountByLastCall":189,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":308,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":201,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":282,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":103,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":239,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":215,"org.easymock.tests.UsageOverloadedMethodTest.overloading":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":155,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":160,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":117,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":87,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":32,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":253,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":125,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":289,"org.easymock.tests.UsageThrowableTest.throwCheckedException":225,"org.easymock.tests2.EasyMockSupportClassTest.testAll":77,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":307,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":209,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":130,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":262,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":231,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":212,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":89,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":86,"org.easymock.tests2.UsageConstraintsTest.testMatches":118,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":88,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":259,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":15,"org.easymock.samples.ExampleTest.voteForRemovals":55,"org.easymock.tests2.NameTest.nameForNiceMock":304,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":271,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":217,"org.easymock.tests2.DependencyTest.testInterfaceMocking":62,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":98,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":232,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":157,"org.easymock.tests2.DelegateToTest.testStubDelegate":75,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":161,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":227,"org.easymock.tests2.AnswerTest.stubAnswer":258,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":238,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":41,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":100,"org.easymock.tests2.UsageConstraintsTest.greaterThan":119,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":292,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":145,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":20,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":73,"org.easymock.samples.ExampleTest.voteForRemoval":53,"org.easymock.tests.UsageExpectAndReturnTest.floatType":26,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":38,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":299,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":76,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":111,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":120,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":243,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":112,"org.easymock.tests2.SerializationTest.test":277,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":95,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":279,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":223,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":25,"org.easymock.tests2.UsageConstraintsTest.testSame":115,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":143,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":234,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":280,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":249,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":173,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":219,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":148,"org.easymock.tests2.UsageTest.moreThanOneArgument":245,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":74,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":61,"org.easymock.tests.GenericTest.testBridgedEquals":291,"org.easymock.tests2.NameTest.nameForMock":302,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":171,"org.easymock.tests.UsageExpectAndReturnTest.longType":27,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":278,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":229,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":210,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":33,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":93,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":208,"org.easymock.tests2.UsageStrictMockTest.differentMethods":83,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":139,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":12,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":28,"org.easymock.tests.UsageCallCountTest.tooManyCalls":172,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":206,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":22,"org.easymock.tests2.MockedExceptionTest.testRealException":266,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":159,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":30,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":197,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":81,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":226,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":108,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":85,"org.easymock.tests2.NameTest.nameForStrictMock":303,"org.easymock.tests2.UsageConstraintsTest.testContains":116,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":127,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":265,"org.easymock.tests2.UsageConstraintsTest.testFind":113,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":214,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":267,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":68,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":268,"org.easymock.tests.UsageExpectAndReturnTest.object":220,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":8,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":131,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":70,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":57,"org.easymock.tests2.UsageStrictMockTest.range":82,"org.easymock.tests2.UsageConstraintsTest.lessThan":123,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":283,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":97,"org.easymock.tests.UsageTest.exactCallCountByLastCall":191,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":107,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":99,"org.easymock.tests2.CaptureTest.testCaptureRightOne":11,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":152,"org.easymock.tests2.UsageConstraintsTest.testOr":5,"org.easymock.tests.UsageRangeTest.combination":19,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":102,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":65,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":36,"org.easymock.tests.UsageTest.wrongArguments":165,"org.easymock.tests2.MockBuilderTest.testWithConstructor":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":149,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":29,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":34,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":153,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":128,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":260,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":168,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":170,"org.easymock.tests2.UsageConstraintsTest.cmpTo":252,"org.easymock.tests2.CompareToTest.testLessThan":185,"org.easymock.tests2.UsageTest.openCallCountByLastCall":247,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":248,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":285,"org.easymock.tests2.CaptureTest.testCaptureFromStub":124,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":298,"org.easymock.tests.UsageTest.unexpectedCallWithArray":164,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":169,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":154,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":224,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":174,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":138,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":221,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":71,"org.easymock.tests2.UsageConstraintsTest.constraints":3,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":198,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":37,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":80,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":129,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":230,"org.easymock.tests2.UsageTest.resumeIfFailure":180,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":48,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":294,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":218,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":301,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":49,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":132}}]

[{"position":"org.easymock.internal.matchers.Same:37","failures":[0],"status":-1,"binaryOperator":"(java.lang.Object) == java.lang.Object","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","failures":[1,2,3,4,5,6],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.Range:40","failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,0,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,5,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,6,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"failures":[54,492,69,72,77,493,83,151,156,157,494,495,496,497,498,499],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"paramType"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:786","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:102","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[440],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.RecordState:181","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"times\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[251],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[188],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:150","failures":[53,54,77,80,500,501,502,503,165],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,25,26,27,28,29,30,33,37,38,39,44,48,53,61,70,74,76,78,82,94,95,100,110,113,123,129,135,136,138,139,142,143,144,145,147,148,149,150,151,152,154,155,156,158,159,160,161,162,164,165,166,168,169,170,171,173,174,0,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197,198,200,202,203,204,207,208,211,213,214,221,238,240,249,250,252,253,254,257,291,292,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,340,344,357,390,392,393,394,395,396,397,398,400,407,408,410,411,414,438,440,450,452,453,457,462,463,465,472,473,474,477,479,480,482,486,491],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ArgumentToString:89","failures":[8,12,13,16,26,37,39,70,81,82,84,106,170,185,196,199,200,201,205,206,207,208,209,212,213,214,297,365,366,367,399,400,504,401,505,506,407,5,409,412,413,414,415,422,448,6,451,452,453],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:256","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"incompatible return value type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[507],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"returnValue":"arg","returnedType":"paramType"}},{"position":"org.easymock.internal.RecordState:305","failures":[245,368,369],"status":-1,"binaryOperator":"((org.easymock.internal.Result) != null)","name":"removeConditional","type":"mutation"},{"position":"org.easymock.EasyMock:2124","failures":[96,99,100,132,133,134,478],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionTarget:46","sourceCode":"java.lang.reflect.Field.getType()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"targetField":"targetField"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1107","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2189","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[508,509],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:96","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n    if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n        continue;\n    } \n    if (java.lang.reflect.Method.isBridge()) {\n        continue;\n    } \n    if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n        if (java.lang.Class<?>[] == null) {\n            if (java.lang.reflect.Method != null) {\n                throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n            } \n            java.lang.reflect.Method = java.lang.reflect.Method;\n        } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n            return java.lang.reflect.Method;\n        } \n    } \n}","type":"CtForEachImpl"},"failures":[25,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,53,54,510,68,511,70,71,73,74,75,76,78,80,81,82,512,513,84,85,89,514,515,516,517,518,519,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,149,150,151,152,155,156,165,167,326,342,343,344,345,349,350,351,352,353,354,355,356,377,382,429,430,431,432,433,434,436,437,438,439,440,441,442,459,460,461,462,463,465,468,475,475,476,476,486,488,489],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.Injector:72","sourceCode":"java.lang.Object java.lang.Object","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:893","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:202","sourceCode":"org.easymock.internal.MocksControl.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:49","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<org.easymock.internal.MocksControl>.set(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,25,26,27,28,29,30,33,37,38,39,42,43,44,45,46,47,48,49,50,51,53,61,70,74,76,78,82,94,95,96,97,98,99,100,101,106,110,113,123,129,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,158,159,160,161,162,163,164,165,166,168,169,170,171,173,174,0,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,221,245,251,253,254,255,256,257,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,334,335,337,338,340,344,346,347,348,357,358,361,362,364,367,368,369,371,372,373,374,375,376,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,407,408,410,411,412,413,414,415,416,417,418,420,421,423,424,425,426,427,438,440,442,443,444,445,446,447,448,449,450,451,452,453,454,457,462,463,465,469,470,471,472,473,474,475,475,476,476,477,478,479,480,482,484,486,491],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"control"}},{"position":"org.easymock.internal.RecordState:136","failures":[146,168,169,173,174,0,175,181,183,184,186,187,193,194,195,211,253,254,257,327,328,329,330,331,332,333,357,443,444,445,446,447,450,475,475,476,476],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:480","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:497","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","type":"CtReturnImpl"},"failures":[76,78,113,123,475,476,486],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:233","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[39],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[1,2,3,4,5,6],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,25,26,27,28,29,30,31,33,36,37,38,39,42,43,44,45,47,48,49,51,53,61,68,70,74,75,76,78,81,82,84,94,95,96,99,100,101,102,103,104,105,106,110,113,123,129,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,0,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,221,253,254,255,256,257,520,520,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,293,294,295,296,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,335,337,338,341,344,357,358,361,362,363,364,365,366,367,371,372,373,374,375,376,390,391,392,393,394,395,396,397,398,399,400,402,403,404,405,406,407,408,5,409,410,411,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,438,439,442,443,444,445,446,447,448,449,6,450,451,452,453,454,462,463,465,472,473,474,475,476,477,478,479,480,481,482,484,485,486,487,488,489,490,491],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"this.org.easymock.EasyMockSupport.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[377],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"support":"support"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[42,43,44,45,164,236,255,268,346,347,348,358,371,372,373,374,375,376],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:158","failures":[521],"status":-1,"binaryOperator":"((java.lang.reflect.Field.getModifiers()) & int) == int","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[370],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Equals:37","failures":[7,8,9,10,11,12,13,15,16,17,18,26,29,38,47,48,49,51,61,74,76,78,94,95,96,99,100,106,135,136,142,143,145,148,158,159,160,162,163,164,165,166,171,174,175,176,193,196,197,198,200,201,202,203,207,208,210,211,212,213,214,215,221,253,254,255,256,257,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,335,337,338,357,371,372,373,374,375,376,390,391,392,393,394,395,396,397,398,399,400,407,408,410,411,414,415,416,417,418,420,421,423,424,425,426,427,439,443,444,445,446,447,449,450,451,452,453,454,472,473,474,477,478,479,480,481,482,484,485,487,488,489,490,491],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:226","sourceCode":"throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[21,22,23,24,198,211,214,215,359,361,362,398,399,400,408,450,453,454],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[96,98,99,101,106,132,134,242,335,478],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:138","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No constructor matching arguments can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[53,54,77,522],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:46","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:173","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"bridgeMethod"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:43","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"equals\", new java.lang.Class[]{ java.lang.Object.java.lang.Object })","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[59,60,61,62,63,65,66,219,220,221,222,223,225,226,485,487],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[25,26,27,28,29,30,31,33,36,38,42,43,44,45,47,48,49,51,53,68,74,75,94,96,99,100,101,102,103,104,105,106,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,151,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,0,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,213,214,215,253,254,255,256,257,262,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,293,294,295,296,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,327,328,329,330,331,332,333,335,337,338,340,344,357,358,361,362,363,364,366,367,369,371,372,373,374,375,376,390,391,392,393,394,395,396,397,398,399,400,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,420,421,423,424,425,426,427,438,439,442,443,444,445,446,447,449,6,450,451,452,453,454,462,463,465,472,473,474,477,478,479,480,481,482,484],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[165,166,167,523],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ArgumentToString:52","sourceCode":"java.lang.StringBuffer.append(\"]\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:38","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[1,524,2,525,198,199,205,206,3,4,526,408,5,409,412,413,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,0,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,402,403,404,405,406,407,408,5,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,6,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,475,476,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[7,8,9,10,11,12,13,15,16,17,18,19,25,26,27,28,29,30,33,39,42,43,44,45,47,48,49,51,61,94,95,96,99,100,101,106,110,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,154,158,159,160,161,162,163,164,166,167,168,169,170,171,173,174,0,175,176,177,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,208,209,210,211,212,213,214,215,221,253,254,255,256,257,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,297,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,324,327,328,329,330,331,332,333,335,337,338,344,355,356,357,358,361,362,363,364,366,367,371,372,373,374,375,376,386,387,390,391,392,393,394,395,396,397,398,399,400,407,408,409,410,411,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,438,439,441,442,443,444,445,446,447,448,449,6,450,451,452,453,454,455,472,473,474,477,478,479,480,481,482,484,485,487,488,489,490,491],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:196","sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"failures":[38],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[171],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":171,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":407,"org.easymock.tests2.UsageTest.argumentsOrdered":206,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":17,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":239,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":201,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":487,"org.easymock.tests2.DelegateToTest.testReturnException":47,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":372,"org.easymock.tests.MockingTest.testPartialClassMocking":462,"org.easymock.tests.MockClassControlTest.testToString":351,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":20,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":457,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":41,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":117,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":113,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":270,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":95,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":500,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":177,"org.easymock.tests2.UsageTest.wrongArguments":199,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":253,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":67,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":295,"org.easymock.samples.ExampleTest.answerVsDelegate":478,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":382,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":467,"org.easymock.tests2.UsageConstraintsTest.testNull":174,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":28,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":16,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":356,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":514,"org.easymock.tests2.CaptureTest.testPrimitive":138,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":257,"org.easymock.tests.UsageTest.moreThanOneArgument":408,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":289,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":27,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":445,"org.easymock.tests.UsageTest.argumentsOrdered":413,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":385,"org.easymock.tests.UsageVarargTest.varargIntAccepted":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":244,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":327,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":68,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":87,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":226,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":331,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":61,"org.easymock.tests.ReplayStateInvalidUsageTest.times":266,"org.easymock.tests2.DependencyTest.testClassMocking":92,"org.easymock.tests2.AnswerTest.answer":96,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":178,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":246,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":105,"org.easymock.tests2.CaptureTest.testAnd":135,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":379,"org.easymock.tests2.UsageTest.strictResetToDefault":197,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":36,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":444,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":11,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":299,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":389,"org.easymock.tests2.DelegateToTest.testDelegate":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":285,"org.easymock.tests.LimitationsTest.mockFinalMethod":345,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":375,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":406,"org.easymock.tests2.DependencyTest.testClassMockingSupport":93,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":368,"org.easymock.tests2.CaptureTest.testCapture1_2446744":139,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":283,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":103,"org.easymock.tests.UsageThrowableTest.throwError":390,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":260,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":381,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":401,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":227,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":447,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":494,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":131,"org.easymock.samples.PartialClassMockTest.testGetArea":486,"org.easymock.tests.MockingTest.testInterfaceMocking":464,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":261,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":328,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":118,"org.easymock.tests2.UsageTest.niceToStrict":200,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":271,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":326,"org.easymock.tests2.ThreadingTest.testChangeDefault":508,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":507,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":229,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":74,"org.easymock.tests2.MockBuilderTest.testCreateMock":81,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":126,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":64,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":1,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":279,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":12,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":378,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":471,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":359,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":293,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":497,"org.easymock.tests.UsageOverloadedMethodTest.overloading":473,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":128,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":122,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":183,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":338,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":472,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":312,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":182,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":144,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":419,"org.easymock.tests2.EasyMockSupportClassTest.testAll":110,"org.easymock.tests.MockClassControlTest.testEquals":355,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":439,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":524,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":287,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":515,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":404,"org.easymock.tests2.CaptureTest.testCaptureAll":136,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":104,"org.easymock.tests.MockNameTest.defaultName":228,"org.easymock.tests2.UsageConstraintsTest.testMatches":184,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":446,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":258,"org.easymock.samples.ExampleTest.voteForRemovals":482,"org.easymock.tests.UsageVarargTest.allKinds":427,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":398,"org.easymock.samples.BasicClassMockTest.testPrintContent":489,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":405,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":396,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":209,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":50,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":376,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":503,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":435,"org.easymock.tests2.UsageConstraintsTest.greaterThan":186,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":111,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":298,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":39,"org.easymock.samples.ExampleTest.voteForRemoval":479,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":436,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":159,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":40,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":512,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":383,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":88,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":31,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":442,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":196,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":80,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":236,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":9,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":392,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":108,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":371,"org.easymock.tests2.CaptureTest.testCaptureFirst":148,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":235,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":10,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":208,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":341,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":308,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":161,"org.easymock.tests2.CaptureTest.testCapture2_2446744":147,"org.easymock.tests2.UsageTest.moreThanOneArgument":198,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":82,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":247,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":426,"org.easymock.tests.GenericTest.testBridgedEquals":441,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":498,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":366,"org.easymock.tests.UsageExpectAndReturnTest.longType":304,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":402,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":7,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":513,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":288,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":191,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":334,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":286,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":443,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":347,"org.easymock.tests.UsageCallCountTest.tooManyCalls":367,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":361,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":127,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":309,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":66,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":275,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":395,"org.easymock.tests.MockingTest.testNiceClassMocking":468,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":150,"org.easymock.tests.MockingTest.testClassMocking":460,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":511,"org.easymock.tests2.UsageConstraintsTest.testContains":181,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":360,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":44,"org.easymock.tests2.UsageConstraintsTest.testFind":173,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":474,"org.easymock.tests.MockTypeTest.fromEasyMockClass":380,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":448,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":134,"org.easymock.tests.UsageExpectAndReturnTest.object":311,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":33,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":65,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":15,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":501,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":421,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":324,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":499,"org.easymock.tests.UsageTest.exactCallCountByLastCall":414,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":357,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":234,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":456,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":386,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":526,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":54,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":416,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":317,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":337,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":217,"org.easymock.tests.MockClassControlTest.testHashCode":354,"org.easymock.tests2.EasyMockSupportTest.testVerify":19,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":120,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":387,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":470,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":335,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":505,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":102,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":52,"org.easymock.tests.UsageVarargTest.varargCharAccepted":420,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":428,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":252,"org.easymock.tests2.UsageTest.openCallCountByLastCall":202,"org.easymock.tests.DefaultClassInstantiatorTest.object":429,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":18,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":469,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":322,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":506,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":121,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":277,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":519,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":393,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":59,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":216,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":37,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":353,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":276,"org.easymock.tests.CapturesMatcherTest.test":520,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":318,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":129,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":352,"org.easymock.tests2.UsageTest.resumeIfFailure":207,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":377,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":86,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":374,"org.easymock.tests2.StubTest.stubWithReturnValue":164,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":77,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":192,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":310,"org.easymock.tests2.SerializationTest.testAllMockedMethod":167,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":245,"org.easymock.samples.SupportTest.voteForRemovals":491,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":2,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":437,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":219,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":282,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":523,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":251,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":97,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":458,"org.easymock.tests.UsageExpectAndThrowTest.object":280,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":189,"org.easymock.tests2.DelegateToTest.testWrongClass":49,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":332,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":333,"org.easymock.samples.ConstructorCalledMockTest.testTax":475,"org.easymock.tests.UsageStrictMockTest.range":452,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":90,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":14,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":149,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":496,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":281,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":76,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":107,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":268,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":294,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":3,"org.easymock.tests2.CaptureTest.testCaptureNone":143,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":292,"org.easymock.tests.UsageUnorderedTest.message":415,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":504,"org.easymock.tests.UsageVerifyTest.twoReturns":400,"org.easymock.tests.UsageVarargTest.varargByteAccepted":425,"org.easymock.tests2.ThreadingTest.testThreadSafe":158,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":124,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":364,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":488,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":325,"org.easymock.tests2.CaptureTest.testCapture_2617107":137,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":525,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":370,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":249,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":256,"org.easymock.tests2.UsageConstraintsTest.any":179,"org.easymock.tests2.StubTest.stub":163,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":265,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":250,"org.easymock.tests.UsageExpectAndThrowTest.longType":273,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":373,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":433,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":264,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":212,"org.easymock.tests2.SerializationTest.testClass":165,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":221,"org.easymock.tests.LimitationsTest.mockNativeMethod":344,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":440,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":320,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":518,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":58,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":215,"org.easymock.tests2.NameTest.nameForMocksControl":24,"org.easymock.tests2.MockedExceptionTest.testMockedException":43,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":112,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":411,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":465,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":133,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":274,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":25,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":78,"org.easymock.tests.MockingTest.testNicePartialClassMocking":463,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":30,"org.easymock.tests2.CaptureTest.testCaptureLast":142,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":56,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":369,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":176,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":156,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":190,"org.easymock.tests.MockingTest.testTwoMocks":461,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":157,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":301,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":278,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":205,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":194,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":509,"org.easymock.samples.ExampleTest.removeNonExistingDocument":483,"org.easymock.tests.UsageStrictMockTest.differentMethods":453,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":63,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":262,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":218,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":431,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":160,"org.easymock.tests2.MockBuilderTest.testCreateMockString":84,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":349,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":114,"org.easymock.tests.UsageExpectAndThrowTest.floatType":272,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":109,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":99,"org.easymock.tests.UsageVerifyTest.twoThrows":399,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":55,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":123,"org.easymock.samples.ExampleTest.voteAgainstRemoval":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":240,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":290,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":38,"org.easymock.tests.LimitationsTest.privateConstructor":343,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":495,"org.easymock.tests2.UsageConstraintsTest.testNotNull":193,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":397,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":42,"org.easymock.tests2.UsageTest.defaultResetToNice":204,"org.easymock.samples.ExampleTest.voteAgainstRemovals":477,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":241,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":316,"org.easymock.tests.UsageVarargTest.differentLength":422,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":57,"org.easymock.tests2.CallbackTest.callback":106,"org.easymock.tests2.UsageConstraintsTest.equals":172,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":34,"org.easymock.tests.UsageTest.openCallCountByLastCall":410,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":168,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":255,"org.easymock.tests.UsageCallCountTest.tooFewCalls":362,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":152,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":296,"org.easymock.tests.UsageThrowableTest.throwCheckedException":394,"org.easymock.tests.MockingTest.testStrictClassMocking":459,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":4,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":155,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":358,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":151,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":62,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":267,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":154,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":101,"org.easymock.tests.ObjectMethodsTest.testHashCode":323,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":162,"org.easymock.tests2.NameTest.nameForNiceMock":23,"org.easymock.tests2.DependencyTest.testInterfaceMocking":94,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":502,"org.easymock.samples.ExampleTest.addDocument":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":125,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":130,"org.easymock.tests2.DelegateToTest.testStubDelegate":48,"org.easymock.tests2.AnswerTest.stubAnswer":100,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":450,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":79,"org.easymock.tests.UsageVarargTest.varargLongAccepted":424,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":454,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":238,"org.easymock.tests.UsageExpectAndReturnTest.floatType":303,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":319,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":53,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":476,"org.easymock.tests.UsageThrowableTest.noUpperLimit":391,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":187,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":225,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":339,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":169,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":85,"org.easymock.tests2.SerializationTest.test":166,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":140,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":521,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":430,"org.easymock.tests2.UsageConstraintsTest.testSame":0,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":302,"org.easymock.samples.SupportTest.addDocument":490,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":153,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":263,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":115,"org.easymock.tests.GenericTest.testPackageScope":438,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":233,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":224,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":466,"org.easymock.tests2.NameTest.nameForMock":21,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":313,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":83,"org.easymock.tests2.UsageStrictMockTest.differentMethods":214,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":35,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":305,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":284,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":321,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":300,"org.easymock.tests2.MockedExceptionTest.testRealException":45,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":384,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":91,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":243,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":522,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":242,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":254,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":269,"org.easymock.tests2.NameTest.nameForStrictMock":22,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":73,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":492,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":132,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":29,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":89,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":432,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":188,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":70,"org.easymock.tests2.UsageStrictMockTest.range":213,"org.easymock.tests2.UsageConstraintsTest.lessThan":195,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":516,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":220,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":510,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":237,"org.easymock.tests2.CaptureTest.testCaptureRightOne":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":119,"org.easymock.tests2.UsageConstraintsTest.testOr":175,"org.easymock.tests.UsageRangeTest.combination":297,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":26,"org.easymock.tests.UsageTest.wrongArguments":409,"org.easymock.tests2.MockBuilderTest.testWithConstructor":69,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":116,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":350,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":306,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":314,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":434,"org.easymock.tests.UsageVarargTest.varargShortAccepted":423,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":365,"org.easymock.tests2.UsageConstraintsTest.cmpTo":180,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":232,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":203,"org.easymock.tests2.CaptureTest.testCaptureFromStub":146,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":259,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":71,"org.easymock.tests.UsageTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":363,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":493,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":315,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":451,"org.easymock.tests2.UsageConstraintsTest.constraints":170,"org.easymock.samples.ExampleTest.addAndChangeDocument":484,"org.easymock.tests.UsageStrictMockTest.testVerify":455,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":485,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":449,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":403,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":141,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":517,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":329,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":307,"org.easymock.tests.LimitationsTest.abstractClass":342,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":330,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":340,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":417,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":13}}]

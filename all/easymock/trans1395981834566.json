[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"))","position":"org.easymock.internal.ReflectionUtils:152","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean || (org.easymock.internal.AndroidClassProxyFactory.MockHandler.(isMocked(java.lang.reflect.Method)) && (!java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers()))))) {\n    return com.google.dexmaker.stock.ProxyBuilder.com.google.dexmaker.stock.ProxyBuilder.callSuper(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.AndroidClassProxyFactory:88","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportMatcher(org.easymock.IArgumentMatcher)","position":"org.easymock.EasyMock:2106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:121","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:40","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:256","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.DataOutputStream.writeShort(0)","position":"org.easymock.internal.DefaultClassInstantiator:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isResolvedTypeMatch(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return true;\n} ","position":"org.easymock.internal.BridgeMethodResolver:141","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","position":"org.easymock.internal.DefaultClassInstantiator:148","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:633","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType()","position":"org.easymock.internal.Injector:116","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.reflect.Field[] java.lang.reflect.Field[] = java.lang.Class<?>.getDeclaredFields()","position":"org.easymock.internal.Injector:105","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","position":"org.easymock.EasyMock:1482","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","position":"org.easymock.internal.ReplayState:68","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","position":"org.easymock.internal.LastControl:85","type":"CtInvocationImpl"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.easymock.internal.ArgumentToString:89","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.RecordState:315","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != (java.lang.Object.java.lang.Object)) {\n    org.easymock.internal.Injector.org.easymock.internal.Injector.createMocksForAnnotations(java.lang.Class<?>, java.lang.Object, org.easymock.internal.InjectionPlan);\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.Injector:65","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"gt\"","position":"org.easymock.internal.matchers.GreaterThan:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"status":-2},{"failures":[23],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(org.easymock.ConstructorArgs.getConstructor()))","position":"org.easymock.internal.MockBuilder:120","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"toString\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ReflectionUtils:48","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method.setAccessible(boolean)","position":"org.easymock.internal.DefaultClassInstantiator:196","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object)","position":"org.easymock.internal.RecordState:129","type":"CtAssignmentImpl"},"status":0},{"failures":[24,25],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","position":"org.easymock.EasyMock:1862","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","position":"org.easymock.Capture:112","type":"CtIfImpl"},"status":-1},{"failures":[26,27,28,29,30,31,0,1,32,33,34,35,36,37,38,7,39,8,40,41,42,43,44,45,46,47,48,49,24,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,15,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,18,95,96,97,98,99,100,101,102],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.easymock.internal.RecordState:185","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.easymock.EasyMock:1863","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","position":"org.easymock.internal.MockBuilder:184","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.easymock.internal.DefaultClassInstantiator:91","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.TypeVariable<?>.getBounds()","position":"org.easymock.internal.BridgeMethodResolver:350","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Invocation.org.easymock.internal.Invocation.isJavaIdentifier(java.lang.String)) {\n    return (java.lang.String + \".\") + java.lang.String;\n} ","position":"org.easymock.internal.Invocation:153","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.Results.getMainInterval()","position":"org.easymock.internal.Results:81","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IArgumentMatcher.appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.Not:41","type":"CtInvocationImpl"},"status":-2},{"failures":[103,104,105,106,107,23,108,109,110,111,112,113,114,115,116],"variableMapping":{"constructor":"constructor"},"name":"add","transplant":{"sourceCode":"if ((this.java.lang.reflect.Constructor<T>) == null) {\n    throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\");\n} ","position":"org.easymock.internal.MockBuilder:159","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"value":"mock"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","position":"org.easymock.internal.RecordState:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.Injection:50","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","position":"org.easymock.internal.LastControl:86","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:37","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:364","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Throwable java.lang.Throwable","position":"org.easymock.internal.EasyMockProperties:129","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * See {@link EasyMock#cmp}\n * \n * @author Henri Tremblay\n */\npublic enum LogicalOperator {\nLESS_THAN(\"<\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int < 0;\n        }\n    }, LESS_OR_EQUAL(\"<=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int <= 0;\n        }\n    }, EQUAL(\"==\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int == 0;\n        }\n    }, GREATER_OR_EQUAL(\">=\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int >= 0;\n        }\n    }, GREATER(\">\") {\n        @java.lang.Override\n        public boolean matchResult(final int result) {\n            return int > 0;\n        }\n    };\n    private java.lang.String symbol;\n    private LogicalOperator(final java.lang.String symbol) {\n        this.java.lang.String = java.lang.String;\n    }\n    public java.lang.String getSymbol() {\n        return java.lang.String;\n    }\n\n    public abstract boolean matchResult(int result);\n}","position":"org.easymock.LogicalOperator:23","type":"CtEnumImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.internal.InjectionTarget == null) {\n    continue;\n} ","position":"org.easymock.internal.Injector:165","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","position":"org.easymock.internal.MocksControl:131","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:115","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","position":"org.easymock.internal.DefaultClassInstantiator:117","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object))","position":"org.easymock.internal.ObjectMethodsFilter:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.internal.Invocation> == null) {\n    java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>();\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>);\n} ","position":"org.easymock.internal.LastControl:124","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.easymock.internal.Result = null","position":"org.easymock.internal.RecordState:186","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable)","position":"org.easymock.internal.RecordState:111","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))","position":"org.easymock.internal.AndroidClassProxyFactory:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-3018631689416120154L","position":"org.easymock.internal.matchers.EqualsWithDelta:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"-3743894206806704049L","position":"org.easymock.internal.matchers.Any:27","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.ObjectMethodsFilter:115","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long.valueOf(0))","position":"org.easymock.internal.RecordState:50","type":"CtInvocationImpl"},"status":-2},{"failures":[30,117],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<org.easymock.IArgumentMatcher>.next().appendTo(java.lang.StringBuffer)","position":"org.easymock.internal.matchers.And:49","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\")\")","position":"org.easymock.internal.ExpectedInvocation:112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[118],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:93","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"toMock":"toMock","this":"this"},"name":"add","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:380","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","position":"org.easymock.internal.ReflectionUtils:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchForMatch(java.lang.Class<?>, java.lang.reflect.Method)","position":"org.easymock.internal.BridgeMethodResolver:169","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"result":"actualTypeArgument","bound":"actualTypeArgument"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Type = java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:357","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type)","position":"org.easymock.internal.BridgeMethodResolver:327","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","position":"org.easymock.internal.matchers.Compare:47","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"result":"parameterPosition"},"name":"replace","transplant":{"sourceCode":"return int < 0","position":"org.easymock.internal.matchers.LessThan:39","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMockSupport.org.easymock.EasyMockSupport.injectMocks(java.lang.Object)","position":"org.easymock.internal.EasyMockStatement:42","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.Injection.isMatched())) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"Unsatisfied qualifier: \\'%s\\'\", org.easymock.internal.Injection.getAnnotation().java.lang.String()));\n} ","position":"org.easymock.internal.Injector:89","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"geq\"","position":"org.easymock.internal.matchers.GreaterOrEqual:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl","position":"org.easymock.internal.MockInvocationHandler:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object[].int) != (java.util.List<org.easymock.IArgumentMatcher>.size())) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:90","type":"CtIfImpl"},"status":-2},{"failures":[38],"binaryOperator":"(((java.lang.Number.doubleValue()) - (java.lang.Number.doubleValue())) <= (java.lang.Number.doubleValue()))","name":"negateConditional","position":"org.easymock.internal.matchers.EqualsWithDelta:40","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:69","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.matchers.Captures<?> org.easymock.internal.matchers.Captures<?> : java.util.Collection<org.easymock.internal.matchers.Captures<?>>) {\n    org.easymock.internal.matchers.Captures<?>.validateCapture();\n}","position":"org.easymock.internal.Invocation:167","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","position":"org.easymock.internal.LastControl:125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    java.util.Stack<org.easymock.IArgumentMatcher>.pop();\n}","position":"org.easymock.internal.LastControl:95","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","position":"org.easymock.internal.MocksControl:318","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:293","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:298","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.easymock.internal.matchers.Any:36","type":"CtReturnImpl"},"status":-2},{"failures":[119],"variableMapping":{"toMock":"toMock","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:450","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMockSupport:471","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.easymock.Capture:110","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","position":"org.easymock.EasyMock:1420","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","position":"org.easymock.internal.RecordState:241","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"new org.easymock.CaptureType()","position":"org.easymock.CaptureType:40","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1177","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:85","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Class<?>.getConstructor(new java.lang.Class[0])","position":"org.easymock.internal.DefaultClassInstantiator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.getConstructors()[0]","position":"org.easymock.internal.DefaultClassInstantiator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:115","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this","mock":"mock"},"name":"replace","transplant":{"sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","position":"org.easymock.internal.DefaultClassInstantiator:126","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n    java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n} else {\n    java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n}","position":"org.easymock.internal.Injector:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:1064","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.Invocation org.easymock.internal.Invocation = org.easymock.internal.LastControl.org.easymock.internal.LastControl.getCurrentInvocation()","position":"org.easymock.internal.Result:80","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((boolean) && ((org.easymock.internal.Result) == null)) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:217","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((((((java.util.Comparator<? super T>) + \"(\") + (T)) + \") \") + (org.easymock.LogicalOperator.getSymbol())) + \" 0\"))","position":"org.easymock.internal.matchers.Compare:47","type":"CtInvocationImpl"},"status":-2},{"failures":[120],"variableMapping":{"support":"support"},"name":"add","transplant":{"sourceCode":"this.org.easymock.EasyMockSupport.createControl()","position":"org.easymock.internal.MockBuilder:218","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"expected":"obj"},"name":"add","transplant":{"sourceCode":"return java.lang.Object","position":"org.easymock.internal.matchers.Equals:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n    return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:67","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:117","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","position":"org.easymock.EasyMock:1220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(java.lang.String + \".\")","name":"math","position":"org.easymock.internal.Invocation:154","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:197","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Short.java.lang.Class<java.lang.Short>, java.lang.Short.java.lang.Short)","position":"org.easymock.internal.RecordState:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\", \")","position":"org.easymock.internal.ExpectedInvocation:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.T = T","position":"org.easymock.internal.matchers.Captures:47","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","position":"org.easymock.internal.ClassProxyFactory:207","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","position":"org.easymock.internal.LastControl:37","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","position":"org.easymock.EasyMock:785","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"this":"this","value":"key","key":"key"},"name":"add","transplant":{"sourceCode":"return org.easymock.internal.EasyMockProperties.getInstance().setProperty(java.lang.String, java.lang.String)","position":"org.easymock.EasyMock:2189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","position":"org.easymock.EasyMock:2170","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return this","position":"org.easymock.internal.MockBuilder:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","position":"org.easymock.EasyMockSupport:497","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"parameterTypes":"candidateParameters","parameterPosition":"length"},"name":"replace","transplant":{"sourceCode":"return java.lang.Class<?>[][int].isPrimitive()","position":"org.easymock.internal.Invocation:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) != (java.lang.Class<?>[].int)) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksBehavior.shouldBeUsedInOneThread(boolean)","position":"org.easymock.internal.RecordState:340","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new java.lang.Class[]{ java.lang.Class<?> }","position":"org.easymock.internal.BridgeMethodResolver:378","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes())","position":"org.easymock.internal.DefaultClassInstantiator:53","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","position":"org.easymock.EasyMock:233","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((this.java.util.List<org.easymock.IArgumentMatcher>) == null)","name":"negateConditional","position":"org.easymock.internal.ExpectedInvocation:75","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","position":"org.easymock.internal.Injector:106","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.easymock.internal.RecordState:79","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.easymock.EasyMock:1235","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[121,122,123,26,124,125,126,127,27,105,128,129,0,32,130,6,131,132,133,8,40,134,135,136,137,138,139,140,141,142,143,144,119,145,146,147,148,43,47,48,149,24,25,50,51,52,150,53,151,152,153,154,155,156,157,158,54,159,55,56,57,58,160,161,162,163,164,165,166,167,168,59,169,170,171,172,61,62,173,174,63,175,64,65,66,67,176,68,69,70,71,177,72,73,74,75,178,179,180,181,76,182,183,184,185,186,187,188,189,77,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,15,78,211,212,213,214,215,216,217,79,16,17,80,81,218,219,82,220,83,84,85,86,221,87,88,89,90,222,91,92,93,94,18,95,96,97,98,223,224,225,226,227,228,229,230,231,232,233,234],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","position":"org.easymock.internal.LastControl:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","position":"org.easymock.internal.LastControl:70","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.ErrorMessage.isMatching()) {\n    int++;\n} ","position":"org.easymock.internal.MocksBehavior:131","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.IMocksControl.reset()","position":"org.easymock.EasyMockSupport:552","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"returnValue","position":"org.easymock.EasyMock:1135","type":"mutation","return":"return 0","status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"))","position":"org.easymock.internal.DefaultClassInstantiator:191","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.easymock.internal.ReflectionUtils:198","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((int[])(java.lang.Object)), ((int[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:47","type":"CtReturnImpl"},"status":0},{"failures":[235,236,237,238,103,105,239,240,135,241,136,242,243,244,245,246,137,247,248,249,250,251,252,154,253,155,156,254,255,256,257,258,259,260,261,262,263,264,161,162,115,115,116,116,265,120,266,267,268,269,270,271,272,273,274,224,275],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:416","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:839","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","position":"org.easymock.internal.ArgumentToString:36","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ","position":"org.easymock.internal.ClassProxyFactory:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","position":"org.easymock.internal.RecordState:289","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"endPosition":"position","behaviorLists":"behaviorLists"},"name":"add","transplant":{"sourceCode":"if (int == (this.java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    int--;\n} ","position":"org.easymock.internal.MocksBehavior:114","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.UnorderedBehavior org.easymock.internal.UnorderedBehavior : java.util.List<org.easymock.internal.UnorderedBehavior>.subList(int, java.util.List<org.easymock.internal.UnorderedBehavior>.size())) {\n    for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : org.easymock.internal.UnorderedBehavior.getMessages(null)) {\n        org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, 0);\n    }\n}","position":"org.easymock.internal.MocksBehavior:167","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.easymock.internal.ClassProxyFactory:107","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 0","position":"org.easymock.EasyMock:959","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:141","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    return java.lang.reflect.Type != null ? java.lang.reflect.Type : java.lang.Object.java.lang.Object;\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType();\n} else {\n    return java.lang.reflect.Type;\n}","position":"org.easymock.internal.BridgeMethodResolver:220","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","position":"org.easymock.internal.RecordState:292","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \")","name":"math","position":"org.easymock.internal.ClassProxyFactory:230","type":"mutation","status":-2},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":183,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":210,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":244,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":208,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":222,"org.easymock.tests.UsageVarargTest.varargIntAccepted":227,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":217,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":28,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":103,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":172,"org.easymock.tests2.UsageConstraintsTest.testContains":33,"org.easymock.tests2.UsageConstraintsTest.testFind":31,"org.easymock.tests2.StubTest.stubWithReturnValue":124,"org.easymock.tests.UsageVarargTest.allKinds":234,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":46,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":110,"org.easymock.tests2.CaptureTest.testCaptureAll":43,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":190,"org.easymock.samples.ExampleTest.addAndChangeDocument":59,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":249,"org.easymock.tests.UsageVarargTest.varargCharAccepted":228,"org.easymock.tests.UsageVerifyTest.twoThrows":16,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":204,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":229,"org.easymock.tests2.DelegateToTest.testReturnException":125,"org.easymock.tests2.ConstraintsToStringTest.andToString":117,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":104,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":147,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":131,"org.easymock.tests2.CaptureTest.testAnd":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":85,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":179,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":88,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":120,"org.easymock.tests2.UsageConstraintsTest.testMatches":36,"org.easymock.tests2.UsageConstraintsTest.testNull":0,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":258,"org.easymock.tests2.EasyMockSupportClassTest.testAll":235,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":112,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":143,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":70,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":91,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests.UsageThrowableTest.throwError":181,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":267,"org.easymock.tests2.UsageConstraintsTest.greaterThan":37,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":225,"org.easymock.samples.SupportTest.addDocument":169,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":207,"org.easymock.tests2.StubTest.stub":26,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":195,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":203,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":4,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":119,"org.easymock.tests.UsageExpectAndReturnTest.object":176,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":233,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":134,"org.easymock.tests.UsageExpectAndThrowTest.object":221,"org.easymock.tests2.DelegateToTest.testWrongClass":127,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":52,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":199,"org.easymock.tests2.UsageTest.moreThanOneArgument":54,"org.easymock.tests.UsageVarargTest.varargByteAccepted":232,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":84,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":264,"org.easymock.tests.UsageTest.wrongArguments":20,"org.easymock.samples.ExampleTest.voteAgainstRemoval":166,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":186,"org.easymock.tests.UsageVarargTest.varargShortAccepted":230,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":87,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":248,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":194,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":171,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":156,"org.easymock.tests2.MockBuilderTest.testCreateMock":254,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":150,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":250,"org.easymock.tests2.SerializationTest.testAllMockedMethod":239,"org.easymock.samples.ExampleTest.voteAgainstRemovals":163,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":101,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":206,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":188,"org.easymock.tests2.CaptureTest.testCapture1_2446744":45,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":160,"org.easymock.tests2.DelegateToTest.testStubDelegate":126,"org.easymock.tests.LimitationsTest.mockNativeMethod":272,"org.easymock.tests.UsageUnorderedTest.message":18,"org.easymock.samples.ExampleTest.answerVsDelegate":164,"org.easymock.samples.ExampleTest.voteForRemoval":165,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":67,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":122,"org.easymock.tests.UsageVerifyTest.twoReturns":17,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":63,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":86,"org.easymock.tests2.DependencyTest.testInterfaceMocking":152,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":138,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":198,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":141,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":108,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":130,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":211,"org.easymock.tests.MockingTest.testTwoMocks":268,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":64,"org.easymock.tests2.CaptureTest.testCaptureRightOne":149,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":60,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":242,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":100,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":68,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":260,"org.easymock.tests.UsageThrowableTest.throwCheckedException":184,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":94,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":214,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":79,"org.easymock.samples.PartialClassMockTest.testGetArea":265,"org.easymock.samples.ExampleTest.voteForRemovals":168,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":182,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":77,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":35,"org.easymock.samples.ConstructorCalledMockTest.testTax":115,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":180,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":200,"org.easymock.tests2.UsageTest.argumentsOrdered":11,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":136,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":95,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":113,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":175,"org.easymock.tests2.AnswerTest.answer":121,"org.easymock.tests.MockingTest.testNicePartialClassMocking":270,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":209,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":62,"org.easymock.tests2.UsageConstraintsTest.any":3,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":66,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":196,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":216,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":146,"org.easymock.tests.UsageExpectAndThrowTest.longType":219,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":42,"org.easymock.tests2.CallbackTest.callback":53,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":92,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":237,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":111,"org.easymock.tests.UsageTest.argumentsOrdered":22,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":129,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":155,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":34,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":74,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":205,"org.easymock.tests2.MockBuilderTest.testCreateMockString":257,"org.easymock.tests2.CaptureTest.testCaptureNone":48,"org.easymock.tests2.SerializationTest.test":128,"org.easymock.tests.UsageExpectAndReturnTest.longType":174,"org.easymock.tests2.SerializationTest.testClass":105,"org.easymock.tests2.CaptureTest.testCaptureFirst":24,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":5,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":161,"org.easymock.tests2.UsageTest.niceToStrict":159,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":197,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":253,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":220,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":89,"org.easymock.tests2.UsageTest.strictResetToDefault":158,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":13,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":73,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":137,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":255,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":80,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":65,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":243,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":38,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":226,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":241,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":240,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":202,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":271,"org.easymock.tests2.UsageConstraintsTest.testOr":32,"org.easymock.tests2.DelegateToTest.testDelegate":27,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":51,"org.easymock.tests2.UsageConstraintsTest.testNotNull":6,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":23,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":133,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":25,"org.easymock.tests2.CaptureTest.testCapture_2617107":44,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":69,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":187,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":191,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":266,"org.easymock.tests2.ThreadingTest.testThreadSafe":50,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":57,"org.easymock.tests.UsageThrowableTest.noUpperLimit":76,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":213,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":259,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":261,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":145,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":139,"org.easymock.tests.UsageExpectAndReturnTest.floatType":173,"org.easymock.tests2.UsageTest.wrongArguments":9,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":2,"org.easymock.tests2.UsageConstraintsTest.testSame":1,"org.easymock.tests2.UsageTest.resumeIfFailure":58,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":109,"org.easymock.tests.UsageOverloadedMethodTest.overloading":189,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":262,"org.easymock.tests.UsageRangeTest.combination":99,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":106,"org.easymock.samples.SupportTest.voteForRemovals":170,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":185,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":116,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":7,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":224,"org.easymock.tests.UsageTest.openCallCountByLastCall":97,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":83,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":102,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":212,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":132,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":71,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":90,"org.easymock.samples.BasicClassMockTest.testPrintContent":162,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":192,"org.easymock.tests.UsageExpectAndThrowTest.floatType":218,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":245,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":41,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":135,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":177,"org.easymock.tests2.UsageStrictMockTest.differentMethods":40,"org.easymock.tests.UsageTest.exactCallCountByLastCall":223,"org.easymock.tests2.AnswerTest.stubAnswer":123,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":140,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":144,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":275,"org.easymock.tests2.CaptureTest.testCaptureLast":47,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":256,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":81,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":153,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":236,"org.easymock.tests.UsageStrictMockTest.range":15,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":98,"org.easymock.tests.InvocationTest.testEquals":118,"org.easymock.tests.UsageTest.unexpectedCallWithArray":19,"org.easymock.tests.MockingTest.testPartialClassMocking":269,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":72,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":10,"org.easymock.tests2.UsageConstraintsTest.constraints":30,"org.easymock.samples.ExampleTest.addDocument":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":12,"org.easymock.tests2.UsageConstraintsTest.lessThan":39,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":21,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":178,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":215,"org.easymock.tests.UsageVarargTest.varargLongAccepted":231,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":246,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":247,"org.easymock.tests2.MockBuilderTest.testWithConstructor":107,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":14,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":238,"org.easymock.tests2.UsageStrictMockTest.range":8,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":263,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":252,"org.easymock.tests.UsageTest.moreThanOneArgument":96,"org.easymock.tests2.UsageTest.openCallCountByLastCall":56,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":193,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":251,"org.easymock.tests.UsageStrictMockTest.differentMethods":78,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":142,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":29,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":273,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":154,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":82,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":61,"org.easymock.tests2.CaptureTest.testCapture2_2446744":49,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":201,"org.easymock.tests.GenericTest.testPackageScope":274}}]

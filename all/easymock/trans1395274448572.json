[{"position":"org.easymock.internal.ReflectionUtils:180","failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"(java.lang.Class<?>[].int) != (java.lang.Object[].int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,7,232,233,8,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ErrorMessage:50","failures":[267,74],"status":-1,"binaryOperator":"int == 1","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[15,17,18,21,22,23,268,269,270,271,272,273,66,74,81,82,130,132,134,135,136,274,275,154,157,158,159,163,164,165,166,276,277,170,171,174,278,279,184,198,227,280,281,282,283,238,241,242,243],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:139","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[10,11,12,13,14,61,75,76,79,133,139,140,142,143,144,145,146,284,284,285,285,182,183,186,187,188,189,194,196,197,199,200,205,206,207,240,246,264],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"failures":[11,86,92,99,100,146],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[17,286,287,132,288,289],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.EasyMockProperties:44","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,307,47,48,270,49,50,51,52,53,54,55,56,57,58,59,60,271,272,273,308,61,62,309,310,311,63,64,312,65,313,314,315,66,67,68,69,316,317,318,319,320,70,321,322,71,72,323,73,324,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,103,104,105,106,107,108,109,110,111,112,113,114,115,347,116,117,348,349,118,119,120,121,122,123,350,351,124,352,353,354,355,356,125,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,126,127,128,129,395,396,397,398,399,400,130,131,132,133,134,135,136,137,138,139,140,401,402,403,404,405,406,407,408,409,410,141,411,412,413,414,415,416,142,143,144,145,146,417,418,419,147,148,149,150,151,152,420,153,284,285,421,422,423,424,154,155,156,157,158,159,160,161,162,163,164,165,166,167,276,425,426,168,169,427,428,429,1,277,170,171,430,431,172,432,173,174,175,176,177,178,433,434,179,435,436,180,278,181,279,437,438,182,183,184,185,439,186,187,188,189,190,191,440,192,193,194,195,196,197,198,199,200,201,202,203,441,204,205,206,207,442,443,444,445,446,447,208,448,449,209,210,211,212,213,214,215,216,217,218,219,220,450,221,222,451,223,224,225,226,227,452,453,454,455,456,457,458,459,460,461,462,463,464,228,229,230,465,231,7,232,233,8,9,466,280,467,468,469,281,282,470,471,283,472,473,474,475,234,235,236,237,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,238,239,240,241,242,243,244,245,246,247,248,249,250,519,520,521,251,252,522,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"status":-1,"binaryOperator":"(org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:210","sourceCode":"try {\n    this.java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:108","sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[7,232,233],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stream":"stream","method":"equalsMethod"}},{"transplant":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:109","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.assertRecordState();\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = java.lang.Class<T>.isInterface() ? org.easymock.internal.MocksControl.org.easymock.internal.IProxyFactory : org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory();\n    return org.easymock.internal.IProxyFactory.createProxy(java.lang.Class<T>, new org.easymock.internal.ObjectMethodsFilter(java.lang.Class<T> , new org.easymock.internal.MockInvocationHandler(this) , java.lang.String), java.lang.reflect.Method[], org.easymock.ConstructorArgs);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,290,291,292,293,296,297,298,299,300,301,302,303,304,305,306,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,307,47,48,270,49,50,51,52,53,54,55,56,57,58,59,60,271,272,273,308,61,62,309,310,311,63,64,312,65,313,314,315,66,67,68,69,316,317,318,319,320,70,321,322,71,72,323,73,324,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,347,116,117,348,349,118,119,120,121,122,123,350,351,124,352,353,354,355,356,125,357,358,359,360,361,362,363,523,364,365,366,367,368,369,524,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,126,127,128,129,395,396,397,398,399,400,130,131,132,133,134,135,136,137,138,139,140,401,402,403,404,405,406,407,408,409,410,141,411,412,413,414,415,416,142,143,144,145,146,417,418,419,147,148,149,150,151,152,420,153,284,284,285,285,421,422,423,424,154,155,156,157,158,159,160,161,162,163,164,165,166,167,525,276,425,526,426,168,169,427,0,428,1,277,170,527,171,430,431,172,432,173,174,175,176,177,178,433,434,179,435,436,180,278,181,279,437,438,182,183,184,185,439,186,187,188,189,190,191,440,192,193,194,195,196,197,198,199,200,201,202,203,441,204,205,206,207,208,448,449,209,210,211,212,213,214,215,216,217,218,219,220,450,221,222,223,224,225,226,227,452,453,454,455,456,457,458,459,460,461,462,463,464,228,229,230,465,231,7,232,233,8,9,528,466,280,467,468,469,281,282,470,471,283,472,473,474,475,234,235,236,237,476,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,238,239,240,241,242,243,244,245,246,247,248,249,250,519,521,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:40","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,307,47,48,270,49,50,51,52,53,54,55,56,57,58,59,60,271,272,273,308,61,62,309,310,311,63,64,312,65,313,314,315,66,67,68,69,316,317,318,319,320,70,321,322,71,72,323,73,324,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,347,116,117,348,349,118,119,120,121,122,123,350,351,124,352,353,354,355,356,125,357,358,359,360,361,362,363,523,364,365,366,367,368,369,524,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,126,127,128,129,395,396,397,398,399,400,130,131,132,133,134,135,136,137,138,139,140,401,402,403,404,405,406,407,408,409,275,410,141,411,412,413,414,415,416,142,143,144,145,146,417,418,419,147,148,149,150,151,152,420,153,284,285,421,422,423,424,154,155,156,157,158,159,160,161,162,163,164,165,166,167,525,276,425,526,426,168,169,427,0,428,429,1,277,170,527,171,430,431,172,432,173,174,175,176,177,178,433,434,179,435,436,180,278,181,279,437,438,182,183,184,185,439,186,187,188,189,190,191,440,192,193,194,195,196,197,198,199,200,201,202,203,441,204,205,206,207,208,448,449,209,210,211,212,213,214,215,216,217,218,219,220,450,221,222,223,224,225,226,227,452,453,454,455,456,457,458,459,460,461,462,463,464,228,229,230,465,231,7,232,233,8,9,528,466,280,467,468,469,281,282,470,471,283,472,473,474,475,234,235,236,237,476,477,478,529,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,238,239,240,241,242,243,244,245,246,247,248,249,250,519,520,521,251,252,522,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"status":-1,"binaryOperator":"(int >= 0)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:86","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Not(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(1).get(0)))","type":"CtInvocationImpl"},"failures":[187,440,201,205],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.MocksControl:128","sourceCode":"final java.lang.String java.lang.String = org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(org.easymock.EasyMock.java.lang.String)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[450],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:249","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1038","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessThan<java.lang.Integer>(int))","type":"CtInvocationImpl"},"failures":[196,203,207,247],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:117","sourceCode":"if (org.easymock.Capture<T>.hasCaptured()) {\n    org.easymock.Capture<T>.reset();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1915","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<T>(org.easymock.Capture<T>))","type":"CtInvocationImpl"},"failures":[253,255,257,258,259,262,263,264,265],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"captured"}},{"position":"org.easymock.EasyMock:1373","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:190","sourceCode":"org.easymock.internal.IMocksBehavior.checkOrder(((org.easymock.MockType) == (org.easymock.MockType.org.easymock.MockType)))","type":"CtInvocationImpl"},"failures":[310,63,64,312,314,315,66,130,135,136,158,170,180,227,280,281,282,283,238,242,243,520],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:134","sourceCode":"if ((java.util.List<T>.size()) == 1) {\n    return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:135","sourceCode":"return java.lang.String.java.lang.String.valueOf(java.util.List<T>.get(0))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:58","sourceCode":"try {\n    java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock());\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionTarget:59","sourceCode":"java.lang.reflect.Field.set(java.lang.Object, org.easymock.internal.Injection.getMock())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"injection":"injection","obj":"obj","targetField":"targetField"}},{"position":"org.easymock.internal.ErrorMessage:51","failures":[530,81,82,135,242],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"position":"org.easymock.EasyMock:1361","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:75","sourceCode":"return \"expected: \" + (org.easymock.internal.Range.toString())","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:65","sourceCode":"if (org.easymock.internal.Range.hasFixedCount()) {\n    return \"\" + (int);\n} else if (org.easymock.internal.Range.hasOpenCount()) {\n    return \"at least \" + (int);\n} else {\n    return ((\"between \" + (int)) + \" and \") + (int);\n}","type":"CtIfImpl"},"failures":[15,16,18,21,22,23,270,55,57,58,272,273,66,74,80,81,82,130,132,133,134,135,136,137,154,156,157,158,159,163,164,166,276,170,278,279,184,198,227,280,281,282,283,234,235,236,237,238,240,241,242,243,244],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:236","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11,12,13,14,61,75,76,79,371,375,376,385,390,133,139,140,404,142,143,144,145,146,284,284,285,285,182,183,186,187,188,189,194,196,197,199,200,205,206,207,240,246,264],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:47","sourceCode":"if (int > 0) {\n    java.lang.StringBuffer.append(\", \");\n} ","type":"CtIfImpl"},"failures":[286,287,132,288,289],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"candidateMethod"}},{"transplant":{"position":"org.easymock.internal.MocksControl:269","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:36","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(char.char, java.lang.Character.java.lang.Character)","type":"CtInvocationImpl"},"failures":[2,3,4,5,531,532,6],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[10,11,12,13,14,61,75,76,79,371,375,376,385,390,133,139,140,404,142,143,144,145,146,284,284,285,285,182,183,186,187,188,189,194,196,197,199,200,205,206,207,240,246,264],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:315","sourceCode":"return true","type":"CtReturnImpl"},"failures":[15,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,62,319,72,77,78,105,109,110,118,119,120,121,122,123,154,161,216,217,218,219,246],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:154","sourceCode":"return (java.lang.String + \".\") + java.lang.String","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:122","sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","type":"CtReturnImpl"},"failures":[434,447,451],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mockName":"value","methodName":"key"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[427],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:60","sourceCode":"return org.easymock.internal.Result.answer()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:59","sourceCode":"try {\n    return org.easymock.internal.Result.answer();\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n        throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n    } \n    throw java.lang.Throwable;\n}","type":"CtTryImpl"},"failures":[319,219],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[533,7,232,233],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1620","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(double[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[15,16,19,20,23,291,61,63,64,65,66,67,68,69,70,322,71,72,75,76,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,116,118,124,133,135,136,139,140,401,402,403,142,143,144,145,146,418,147,149,150,152,424,154,155,156,158,160,161,162,165,166,276,168,427,428,170,172,432,173,174,175,176,177,178,179,278,181,279,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,218,222,223,224,225,226,457,229,7,232,8,466,280,467,468,469,281,282,470,471,283,472,473,485,488,498,504,512,240,242,243,246,248,249,250,519,521,251,252,253,254,256,257,260,261,262,263,265,266],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[347,349],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"method":"bridgeMethod"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[534],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[184,185,189,190,440,201,253,255,263],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2039","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice()","type":"CtInvocationImpl"},"failures":[162],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[0,1,2,3,4,531,532,7,9],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:106","failures":[168,278,181,535,536,537],"status":-1,"binaryOperator":"java.lang.Class<?>[] == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.AndroidSupport:28","sourceCode":"final java.lang.ClassNotFoundException java.lang.ClassNotFoundException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[377,448,210,211],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.Range:44","failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,307,47,48,270,49,50,51,52,53,54,55,56,57,58,59,60,271,272,273,308,61,62,309,310,311,63,64,312,65,313,314,315,66,67,68,69,316,317,318,319,320,70,321,322,71,72,323,73,324,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,347,116,117,348,349,118,119,120,121,122,123,350,351,124,352,353,354,355,356,125,357,358,359,360,361,362,363,523,364,365,366,367,368,369,524,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,126,127,128,129,395,396,397,398,399,400,130,131,132,133,134,135,136,137,138,139,140,401,402,403,404,405,406,407,408,409,275,410,141,411,412,413,414,415,416,142,143,144,145,146,417,418,419,147,148,149,150,151,152,420,153,284,285,421,422,423,424,154,155,156,157,158,159,160,161,162,163,164,165,166,167,525,276,425,526,426,168,169,427,0,428,429,1,277,170,527,171,430,431,172,432,173,174,175,176,177,178,433,434,179,435,436,180,278,181,279,437,438,182,183,184,185,439,186,187,188,189,190,191,440,192,193,194,195,196,197,198,199,200,201,202,203,441,204,205,206,207,208,448,449,209,210,211,212,213,214,215,216,217,218,219,220,450,221,222,223,224,225,226,227,452,453,454,455,456,457,458,459,460,461,462,463,464,228,229,230,465,231,7,232,233,8,9,528,466,280,467,468,469,281,282,470,471,283,472,473,474,475,234,235,236,237,476,477,478,529,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,238,239,240,241,242,243,244,245,246,247,248,249,250,519,520,521,251,252,522,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"status":-1,"binaryOperator":"(int >= 1)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[10,11,12,13,14,16,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,158,159,162,165,167,168,169,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,226,227,228,229,231,7,232,233,8,234,235,236,237,239,240,243,244,245,246,249,250,251,252,253,254,255,256,258,259,260,261,262,263,266],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":185,"org.easymock.tests2.UsageTest.argumentsOrdered":164,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":15,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":472,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":458,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":381,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":159,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":419,"org.easymock.tests2.DelegateToTest.testReturnException":228,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":119,"org.easymock.tests.MockingTest.testPartialClassMocking":63,"org.easymock.tests.MockClassControlTest.testToString":411,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":475,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":291,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":438,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":390,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":492,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":488,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":24,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":432,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":346,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":191,"org.easymock.tests2.UsageTest.wrongArguments":157,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":75,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":518,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":128,"org.easymock.samples.ExampleTest.answerVsDelegate":148,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":298,"org.easymock.tests2.UsageConstraintsTest.testNull":187,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":314,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":176,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":416,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":283,"org.easymock.tests2.CaptureTest.testPrimitive":256,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":79,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":43,"org.easymock.tests.UsageTest.moreThanOneArgument":16,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":175,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":12,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":405,"org.easymock.tests.UsageTest.argumentsOrdered":22,"org.easymock.tests.UsageVarargTest.varargIntAccepted":46,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":386,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":142,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":532,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":167,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":478,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":462,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":169,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":146,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":330,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":512,"org.easymock.tests.ReplayStateInvalidUsageTest.times":360,"org.easymock.tests2.DependencyTest.testClassMocking":430,"org.easymock.tests2.AnswerTest.answer":208,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":388,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":215,"org.easymock.tests2.CaptureTest.testAnd":253,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":295,"org.easymock.tests2.UsageTest.strictResetToDefault":155,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":526,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":180,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":11,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":469,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":68,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":409,"org.easymock.tests2.DelegateToTest.testDelegate":231,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":329,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":39,"org.easymock.tests.LimitationsTest.mockFinalMethod":352,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":122,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":115,"org.easymock.tests2.DependencyTest.testClassMockingSupport":431,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":323,"org.easymock.tests2.CaptureTest.testCapture1_2446744":257,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":434,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":37,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":213,"org.easymock.tests.UsageThrowableTest.throwError":103,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":355,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":297,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":463,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":275,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":14,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":506,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":333,"org.easymock.samples.PartialClassMockTest.testGetArea":418,"org.easymock.tests.MockingTest.testInterfaceMocking":312,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":356,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":143,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":402,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":493,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":400,"org.easymock.tests2.UsageTest.niceToStrict":158,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":25,"org.easymock.tests2.ThreadingTest.testChangeDefault":451,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":371,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":168,"org.easymock.tests2.MockBuilderTest.testCreateMock":277,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":501,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":515,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":33,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":288,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":281,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":294,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":306,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":55,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":126,"org.easymock.tests.UsageOverloadedMethodTest.overloading":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":503,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":497,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":196,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":94,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":322,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":195,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":262,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":307,"org.easymock.tests2.EasyMockSupportClassTest.testAll":485,"org.easymock.tests.MockClassControlTest.testEquals":415,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":117,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":41,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":535,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":113,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":214,"org.easymock.tests2.CaptureTest.testCaptureAll":254,"org.easymock.tests.MockNameTest.defaultName":308,"org.easymock.tests2.UsageConstraintsTest.testMatches":197,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":13,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":353,"org.easymock.samples.ExampleTest.voteForRemovals":152,"org.easymock.tests.UsageVarargTest.allKinds":53,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":80,"org.easymock.samples.BasicClassMockTest.testPrintContent":422,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":114,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":109,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":238,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":465,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":459,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":123,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":524,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":6,"org.easymock.tests2.UsageConstraintsTest.greaterThan":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":486,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":67,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":279,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":334,"org.easymock.samples.ExampleTest.voteForRemoval":149,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":370,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":437,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":223,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":299,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":529,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":433,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":326,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":154,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":54,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":378,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":467,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":105,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":483,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":118,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":464,"org.easymock.tests2.CaptureTest.testCaptureFirst":266,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":377,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":468,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":166,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":321,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":90,"org.easymock.tests2.UsageTest.moreThanOneArgument":156,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":225,"org.easymock.tests2.CaptureTest.testCapture2_2446744":265,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":389,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":170,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":52,"org.easymock.tests.GenericTest.testBridgedEquals":349,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":272,"org.easymock.tests.UsageExpectAndReturnTest.longType":86,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":466,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":111,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":42,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":441,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":404,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":40,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":10,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":302,"org.easymock.tests.UsageCallCountTest.tooManyCalls":273,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":502,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":91,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":517,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":29,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":108,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":249,"org.easymock.tests.MockingTest.testNiceClassMocking":315,"org.easymock.tests.MockingTest.testClassMocking":310,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":56,"org.easymock.tests2.UsageConstraintsTest.testContains":194,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":218,"org.easymock.tests2.UsageConstraintsTest.testFind":186,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":72,"org.easymock.tests.MockTypeTest.fromEasyMockClass":296,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":130,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":221,"org.easymock.tests.UsageExpectAndReturnTest.object":93,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":179,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":516,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":471,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":3,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":48,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":398,"org.easymock.tests.UsageTest.exactCallCountByLastCall":23,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":61,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":376,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":406,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":290,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":9,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":99,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":44,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":318,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":453,"org.easymock.tests.MockClassControlTest.testHashCode":414,"org.easymock.tests2.EasyMockSupportTest.testVerify":474,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":495,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":407,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":305,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":316,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":212,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":268,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":247,"org.easymock.tests.UsageVarargTest.varargCharAccepted":47,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":523,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":394,"org.easymock.tests2.UsageTest.openCallCountByLastCall":160,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":473,"org.easymock.tests.DefaultClassInstantiatorTest.object":364,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":304,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":396,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":269,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":496,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":31,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":537,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":106,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":510,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":452,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":413,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":278,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":332,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":30,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":100,"org.easymock.tests.ReplayStateInvalidCallsTest.times":338,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":301,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":339,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":504,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":412,"org.easymock.tests2.UsageTest.resumeIfFailure":165,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":293,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":477,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":121,"org.easymock.tests2.StubTest.stubWithReturnValue":246,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":0,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":92,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":204,"org.easymock.tests2.SerializationTest.testAllMockedMethod":233,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":387,"org.easymock.samples.SupportTest.voteForRemovals":424,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":289,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":347,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":455,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":36,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":533,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":393,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":448,"org.easymock.tests.UsageExpectAndThrowTest.object":34,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":292,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":202,"org.easymock.tests2.DelegateToTest.testWrongClass":230,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":139,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":336,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":140,"org.easymock.tests.UsageStrictMockTest.range":135,"org.easymock.samples.ConstructorCalledMockTest.testTax":284,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":480,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":470,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":248,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":35,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":427,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":482,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":21,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":362,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":127,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":286,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":328,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":403,"org.easymock.tests2.CaptureTest.testCaptureNone":261,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":443,"org.easymock.tests.UsageUnorderedTest.message":74,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":274,"org.easymock.tests.UsageVerifyTest.twoReturns":82,"org.easymock.tests.UsageVarargTest.varargByteAccepted":51,"org.easymock.tests2.ThreadingTest.testThreadSafe":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":499,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":60,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":421,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":399,"org.easymock.tests2.CaptureTest.testCapture_2617107":255,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":324,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":391,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":78,"org.easymock.tests2.UsageConstraintsTest.any":192,"org.easymock.tests2.StubTest.stub":245,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":359,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":392,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":120,"org.easymock.tests.UsageExpectAndThrowTest.longType":27,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":368,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":358,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":241,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":457,"org.easymock.tests2.SerializationTest.testClass":7,"org.easymock.tests.LimitationsTest.mockNativeMethod":124,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":102,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":348,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":536,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":509,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":344,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":244,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":444,"org.easymock.tests2.NameTest.nameForMocksControl":237,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":511,"org.easymock.tests2.MockedExceptionTest.testMockedException":217,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":487,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":20,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":450,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":28,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":65,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":173,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":428,"org.easymock.tests.MockingTest.testNicePartialClassMocking":64,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":178,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":507,"org.easymock.tests2.CaptureTest.testCaptureLast":260,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":73,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":190,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":252,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":343,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":203,"org.easymock.tests.MockingTest.testTwoMocks":311,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":340,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":522,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":83,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":32,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":163,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":206,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":447,"org.easymock.samples.ExampleTest.removeNonExistingDocument":420,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":514,"org.easymock.tests.UsageStrictMockTest.differentMethods":136,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":125,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":454,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":446,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":366,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":224,"org.easymock.tests2.MockBuilderTest.testCreateMockString":171,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":410,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":489,"org.easymock.tests.UsageExpectAndThrowTest.floatType":26,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":198,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":484,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":209,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":528,"org.easymock.tests.UsageVerifyTest.twoThrows":81,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":498,"org.easymock.samples.ExampleTest.voteAgainstRemoval":150,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":382,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":181,"org.easymock.tests.LimitationsTest.privateConstructor":351,"org.easymock.tests2.UsageConstraintsTest.testNotNull":205,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":110,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":216,"org.easymock.tests2.UsageTest.defaultResetToNice":162,"org.easymock.samples.ExampleTest.voteAgainstRemovals":147,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":98,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":383,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":508,"org.easymock.tests.UsageVarargTest.differentLength":270,"org.easymock.tests2.CallbackTest.callback":227,"org.easymock.tests2.UsageConstraintsTest.equals":439,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":435,"org.easymock.tests.UsageTest.openCallCountByLastCall":19,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":182,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":77,"org.easymock.tests.UsageCallCountTest.tooFewCalls":58,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":519,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":129,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":445,"org.easymock.tests.UsageThrowableTest.throwCheckedException":107,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":287,"org.easymock.tests.MockingTest.testStrictClassMocking":309,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":62,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":513,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":250,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":361,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":521,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":211,"org.easymock.tests.ObjectMethodsTest.testHashCode":397,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":531,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":226,"org.easymock.tests2.NameTest.nameForNiceMock":236,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":342,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":337,"org.easymock.tests2.DependencyTest.testInterfaceMocking":172,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":4,"org.easymock.samples.ExampleTest.addDocument":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":500,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":505,"org.easymock.tests2.DelegateToTest.testStubDelegate":229,"org.easymock.tests2.AnswerTest.stubAnswer":210,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":133,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":429,"org.easymock.tests.UsageVarargTest.varargLongAccepted":50,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":137,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":380,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":101,"org.easymock.tests.UsageExpectAndReturnTest.floatType":85,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":8,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":285,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":461,"org.easymock.tests.UsageThrowableTest.noUpperLimit":104,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":200,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":183,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":476,"org.easymock.tests2.SerializationTest.test":232,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":258,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":365,"org.easymock.tests2.UsageConstraintsTest.testSame":188,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":84,"org.easymock.samples.SupportTest.addDocument":423,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":520,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":327,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":357,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":490,"org.easymock.tests.GenericTest.testPackageScope":116,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":408,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":375,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":460,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":313,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":325,"org.easymock.tests2.NameTest.nameForMock":234,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":95,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":527,"org.easymock.tests2.UsageStrictMockTest.differentMethods":243,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":436,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":87,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":38,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":395,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":69,"org.easymock.tests2.MockedExceptionTest.testRealException":219,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":300,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":384,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":240,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":76,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":363,"org.easymock.tests2.NameTest.nameForStrictMock":235,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":426,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":220,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":177,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":479,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":201,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":267,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":367,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":276,"org.easymock.tests2.UsageStrictMockTest.range":242,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":331,"org.easymock.tests2.UsageConstraintsTest.lessThan":207,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":456,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":534,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":5,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":280,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":379,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":494,"org.easymock.tests2.CaptureTest.testCaptureRightOne":263,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":442,"org.easymock.tests2.UsageConstraintsTest.testOr":189,"org.easymock.tests.UsageRangeTest.combination":66,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":174,"org.easymock.tests.UsageTest.wrongArguments":18,"org.easymock.tests2.MockBuilderTest.testWithConstructor":525,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":491,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":141,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":88,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":96,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":372,"org.easymock.tests.UsageVarargTest.varargShortAccepted":49,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":369,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":271,"org.easymock.tests2.UsageConstraintsTest.cmpTo":193,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":345,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":449,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":335,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":374,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":161,"org.easymock.tests2.CaptureTest.testCaptureFromStub":264,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":354,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":425,"org.easymock.tests.UsageTest.unexpectedCallWithArray":17,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":341,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":132,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":59,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":97,"org.easymock.tests2.UsageConstraintsTest.constraints":184,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":134,"org.easymock.samples.ExampleTest.addAndChangeDocument":153,"org.easymock.tests.UsageStrictMockTest.testVerify":138,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":417,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":131,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":112,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":259,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":144,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":89,"org.easymock.tests.LimitationsTest.abstractClass":350,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":145,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":70,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":530,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":45,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":282}}]

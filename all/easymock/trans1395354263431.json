[{"transplant":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:45","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:285","sourceCode":"org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[7,8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[9],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[11,13,15],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[21],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String)","type":"CtInvocationImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[48,49],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,1,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,22,101,102,103,104,105,23,24,106,107,25,26,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,27,28,135,29,30,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,31,32,33,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,2,195,196,197,198,199,200,201,202,203,203,204,204,205,206,207,208,209,210,211,212,213,214,215,21,216,217,218,219,220,221,222,223,224,225,226,37,38,39,40,227,228,229,230,41,42,231,232,233,234,9,43,44,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,45,265,46,47,266,267,268,10,11,269,12,270,13,14,271,15,272,273,274,275,276,277,278,279,280,16,281,282,283,284,17,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,3,311,4,5,6,18,312,19,313,314,315,316,317,318,319,20,320,321,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:280","sourceCode":"for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n            org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n        } \n    } else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[7],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"genericInterfaces":"actualTypeArguments","typeVariableMap":"typeVariableMap","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:840","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1409","sourceCode":"return float","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:194","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","type":"CtLocalVariableImpl"},"failures":[7,8],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.LastControl:116","sourceCode":"if ((java.util.Stack<org.easymock.internal.Invocation> == null) || (java.util.Stack<org.easymock.internal.Invocation>.empty())) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:119","sourceCode":"return java.util.Stack<org.easymock.internal.Invocation>.lastElement()","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:172","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[310,311],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:137","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[53,54,55,56,323,57,58,324,325,326,327,59,60,61,62,63,64,65,66,67,68,69,70,1,72,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,22,101,328,329,330,331,105,23,332,24,106,107,25,26,108,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,27,28,135,29,30,136,138,139,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,31,32,33,180,181,182,183,184,186,187,188,189,190,191,192,193,194,2,195,196,197,198,199,200,201,202,203,204,205,206,207,208,333,209,210,334,211,212,335,213,336,214,215,21,216,217,218,337,338,339,219,220,221,222,223,340,224,225,226,227,228,229,230,41,42,231,232,233,234,9,43,44,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,45,265,46,47,266,267,268,10,11,269,12,270,13,14,271,272,273,274,275,276,277,278,279,280,16,281,282,283,284,17,285,286,287,288,289,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,3,311,4,6,18,312,19,313,314,315,316,317,318,319,20,320,321,322],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.LastControl:73","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:126","sourceCode":"org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>.set(java.util.Stack<org.easymock.internal.Invocation>)","type":"CtInvocationImpl"},"failures":[53,54,55,56,323,57,58,324,325,326,327,59,60,61,62,63,64,65,66,67,68,69,70,1,72,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,22,101,328,329,330,331,105,23,332,24,106,107,25,26,108,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,27,28,135,29,30,136,138,139,341,341,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,31,32,33,180,181,182,183,184,186,187,188,189,190,191,192,193,194,2,195,196,197,198,199,200,201,202,203,204,205,206,207,208,333,209,210,334,211,212,335,213,336,214,215,21,216,217,218,337,338,339,219,220,221,222,223,224,225,226,227,228,229,230,41,42,231,232,233,234,9,43,44,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,45,265,46,47,266,267,268,10,11,269,12,270,13,14,271,272,273,274,275,276,277,278,279,280,16,281,282,283,284,17,285,286,287,288,289,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,3,311,4,6,18,312,19,313,314,315,316,317,318,319,20,320,321,322],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[50,22,23,112,118,124,128,130,150,156,162,166,168,193,199,214,215,21,223,224,41,249,267,276,279,286,6,312,317,318,322],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[238],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:90","sourceCode":"if (int > 0) {\n    java.lang.StringBuilder.append(\", \");\n} ","type":"CtIfImpl"},"failures":[342],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[343,344,345],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:785","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Short>(short))","type":"CtInvocationImpl"},"failures":[271],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:987","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:252","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[346],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:140","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:246","sourceCode":"final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:133","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub return value\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[341,18,312,19,313,314,315,316,317,319,20,320,321,322],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:160","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define constructor arguments without first setting their type.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:94","sourceCode":"throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"this.org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if (java.lang.reflect.Constructor<T> != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:149","sourceCode":"if (org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.isMatchingConstructor(java.lang.reflect.Constructor<?>, java.lang.Object[])) {\n    if (java.lang.reflect.Constructor<T> != null) {\n        throw new java.lang.IllegalArgumentException(((\"Ambiguity in the constructors for \" + (java.lang.Class<T>.getName())) + \".\"));\n    } \n    java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>));\n} ","type":"CtIfImpl"},"failures":[347,348,349,350,351,352,353,287,354,300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructor":"ret"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":11,"org.easymock.tests2.UsageTest.argumentsOrdered":44,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":105,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":260,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":345,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":84,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":232,"org.easymock.tests2.StubTest.stubWithReturnValue":226,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":347,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":284,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":205,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":159,"org.easymock.tests2.SerializationTest.testAllMockedMethod":302,"org.easymock.tests2.DelegateToTest.testReturnException":3,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":82,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":50,"org.easymock.tests.MockingTest.testPartialClassMocking":77,"org.easymock.samples.SupportTest.voteForRemovals":202,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":7,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":132,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":124,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":220,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":51,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":112,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":290,"org.easymock.tests.UsageExpectAndThrowTest.object":122,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":34,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":281,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":228,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":349,"org.easymock.tests2.DelegateToTest.testWrongClass":4,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":138,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":139,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":271,"org.easymock.tests2.UsageTest.wrongArguments":42,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":180,"org.easymock.samples.ConstructorCalledMockTest.testTax":203,"org.easymock.tests.UsageStrictMockTest.range":29,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":326,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":257,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":303,"org.easymock.tests2.UsageConstraintsTest.testNull":12,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":240,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":123,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":259,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":211,"org.easymock.tests2.CaptureTest.testPrimitive":313,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":184,"org.easymock.tests.UsageTest.moreThanOneArgument":23,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":25,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":131,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":325,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":239,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":188,"org.easymock.tests2.CaptureTest.testCaptureNone":318,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":104,"org.easymock.tests.UsageUnorderedTest.message":22,"org.easymock.tests.UsageVerifyTest.twoReturns":33,"org.easymock.tests.UsageVarargTest.varargByteAccepted":95,"org.easymock.tests2.ThreadingTest.testThreadSafe":214,"org.easymock.tests.UsageTest.argumentsOrdered":26,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":145,"org.easymock.tests.UsageVarargTest.varargIntAccepted":89,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":56,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":207,"org.easymock.tests2.CaptureTest.testCapture_2617107":19,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":174,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":333,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":183,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":334,"org.easymock.tests2.UsageConstraintsTest.any":272,"org.easymock.tests2.StubTest.stub":225,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":0,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":144,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":178,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":83,"org.easymock.tests.UsageExpectAndThrowTest.longType":115,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":265,"org.easymock.tests2.SerializationTest.testClass":300,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":299,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":288,"org.easymock.tests.LimitationsTest.mockNativeMethod":80,"org.easymock.tests2.DependencyTest.testClassMocking":48,"org.easymock.tests2.AnswerTest.answer":289,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":100,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":169,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":15,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":339,"org.easymock.tests2.CaptureTest.testAnd":18,"org.easymock.tests2.UsageTest.strictResetToDefault":230,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":266,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":245,"org.easymock.tests2.NameTest.nameForMocksControl":40,"org.easymock.tests2.MockedExceptionTest.testMockedException":296,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":187,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":172,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":107,"org.easymock.tests2.DelegateToTest.testDelegate":6,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":149,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":340,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":79,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":116,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":237,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":212,"org.easymock.tests.MockingTest.testNicePartialClassMocking":78,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":127,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":242,"org.easymock.tests2.CaptureTest.testCaptureLast":317,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":85,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":141,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":309,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":14,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":331,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":282,"org.easymock.tests.MockingTest.testTwoMocks":76,"org.easymock.tests2.DependencyTest.testClassMockingSupport":49,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":140,"org.easymock.tests2.CaptureTest.testCapture1_2446744":314,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":150,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":125,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":337,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":120,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":43,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":285,"org.easymock.tests.UsageThrowableTest.throwError":62,"org.easymock.tests.UsageStrictMockTest.differentMethods":30,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":343,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":21,"org.easymock.tests2.MockBuilderTest.testCreateMockString":336,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":185,"org.easymock.tests.UsageExpectAndThrowTest.floatType":114,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":190,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":278,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":292,"org.easymock.tests.UsageVerifyTest.twoThrows":32,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":71,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":221,"org.easymock.samples.PartialClassMockTest.testGetArea":206,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":175,"org.easymock.samples.ExampleTest.voteAgainstRemoval":196,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":102,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":103,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":247,"org.easymock.tests2.UsageTest.niceToStrict":231,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":113,"org.easymock.tests2.UsageConstraintsTest.testNotNull":17,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":295,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":69,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":210,"org.easymock.tests2.MockBuilderTest.testCreateMock":335,"org.easymock.tests2.UsageTest.defaultResetToNice":9,"org.easymock.samples.ExampleTest.voteAgainstRemovals":194,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":165,"org.easymock.tests.UsageVarargTest.differentLength":92,"org.easymock.tests2.CallbackTest.callback":249,"org.easymock.tests.UsageTest.openCallCountByLastCall":106,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":121,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":255,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":267,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":111,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":52,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":324,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":182,"org.easymock.tests.UsageCallCountTest.tooFewCalls":54,"org.easymock.tests.UsageOverloadedMethodTest.overloading":192,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":276,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":72,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":306,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":161,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":191,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":275,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":319,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":327,"org.easymock.tests.UsageThrowableTest.throwCheckedException":66,"org.easymock.tests2.EasyMockSupportClassTest.testAll":219,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":99,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":129,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":338,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":329,"org.easymock.tests2.CaptureTest.testCaptureAll":312,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":308,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":61,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":344,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":305,"org.easymock.tests2.UsageConstraintsTest.testMatches":277,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":307,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":294,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":189,"org.easymock.samples.ExampleTest.voteForRemovals":198,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":217,"org.easymock.tests2.NameTest.nameForNiceMock":39,"org.easymock.tests.UsageVarargTest.allKinds":97,"org.easymock.tests2.DependencyTest.testInterfaceMocking":227,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":351,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":330,"org.easymock.samples.BasicClassMockTest.testPrintContent":208,"org.easymock.samples.ExampleTest.addDocument":197,"org.easymock.tests2.DelegateToTest.testStubDelegate":311,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":68,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":263,"org.easymock.tests2.AnswerTest.stubAnswer":293,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":86,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":5,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":28,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":353,"org.easymock.tests2.UsageConstraintsTest.greaterThan":279,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":171,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":248,"org.easymock.tests.UsageVarargTest.varargLongAccepted":94,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":136,"org.easymock.samples.ExampleTest.voteForRemoval":195,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":215,"org.easymock.tests.UsageExpectAndReturnTest.floatType":152,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":168,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":287,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":243,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":204,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":280,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":73,"org.easymock.tests.UsageThrowableTest.noUpperLimit":63,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":268,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":229,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":59,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":315,"org.easymock.tests2.SerializationTest.test":301,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":348,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":252,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":64,"org.easymock.tests2.UsageConstraintsTest.testSame":270,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":151,"org.easymock.samples.SupportTest.addDocument":201,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":81,"org.easymock.tests2.CaptureTest.testCaptureFirst":322,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":310,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":253,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":236,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":75,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":157,"org.easymock.tests.GenericTest.testPackageScope":98,"org.easymock.tests2.CaptureTest.testCapture2_2446744":321,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":216,"org.easymock.tests2.UsageTest.moreThanOneArgument":41,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":148,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":213,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":96,"org.easymock.tests.GenericTest.testBridgedEquals":8,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":57,"org.easymock.tests2.NameTest.nameForMock":37,"org.easymock.tests.UsageExpectAndReturnTest.longType":153,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":250,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":101,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":130,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":162,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":283,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":179,"org.easymock.tests2.UsageStrictMockTest.differentMethods":47,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":128,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":143,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":186,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":154,"org.easymock.tests.UsageCallCountTest.tooManyCalls":58,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":126,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":173,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":53,"org.easymock.tests2.MockedExceptionTest.testRealException":298,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":158,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":117,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":67,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":181,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":304,"org.easymock.tests2.UsageConstraintsTest.testContains":274,"org.easymock.tests2.NameTest.nameForStrictMock":38,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":297,"org.easymock.tests2.UsageConstraintsTest.testFind":269,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":193,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":223,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":241,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":224,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":133,"org.easymock.tests.UsageExpectAndReturnTest.object":160,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":16,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":35,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":244,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":209,"org.easymock.tests2.UsageStrictMockTest.range":46,"org.easymock.tests2.UsageConstraintsTest.lessThan":286,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":258,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":350,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":91,"org.easymock.tests.UsageTest.exactCallCountByLastCall":108,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":60,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":352,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":251,"org.easymock.tests2.CaptureTest.testCaptureRightOne":20,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":146,"org.easymock.tests2.UsageConstraintsTest.testOr":13,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":354,"org.easymock.tests.UsageRangeTest.combination":170,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":238,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":87,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":166,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":1,"org.easymock.tests.UsageTest.wrongArguments":24,"org.easymock.tests2.EasyMockSupportTest.testVerify":262,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":155,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":346,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":147,"org.easymock.tests.UsageVarargTest.varargShortAccepted":93,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":70,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":110,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":323,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":218,"org.easymock.tests2.UsageConstraintsTest.cmpTo":273,"org.easymock.tests.UsageVarargTest.varargCharAccepted":90,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":291,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":264,"org.easymock.tests2.UsageTest.openCallCountByLastCall":233,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":234,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":261,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":109,"org.easymock.tests2.CaptureTest.testCaptureFromStub":320,"org.easymock.tests.UsageTest.unexpectedCallWithArray":332,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":342,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":119,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":65,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":27,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":55,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":164,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":246,"org.easymock.tests2.UsageConstraintsTest.constraints":10,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":135,"org.easymock.samples.ExampleTest.addAndChangeDocument":199,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":118,"org.easymock.tests.CapturesMatcherTest.test":341,"org.easymock.tests.UsageStrictMockTest.testVerify":137,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":167,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":142,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":200,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":222,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":134,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":328,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":316,"org.easymock.tests2.UsageTest.resumeIfFailure":235,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":176,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":156,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":74,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":177,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":256,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":88,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":36}}]

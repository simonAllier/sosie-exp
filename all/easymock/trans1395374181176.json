[{"transplantationPoint":{"position":"org.easymock.EasyMock:707","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<T>(java.lang.Comparable<T>))","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMockSupport:480","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:541","sourceCode":"for (final org.easymock.IMocksControl org.easymock.IMocksControl : java.util.List<org.easymock.IMocksControl>) {\n    org.easymock.IMocksControl.replay();\n}","type":"CtForEachImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:91","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:88","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return org.easymock.internal.ObjectMethodsFilter.mockToString(java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[1,2,3,4,5,6,7,7,8,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,0,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"method":"method","finalizeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.MocksControl:79","sourceCode":"return org.easymock.internal.MocksControl.createMock(null, java.lang.Class<T>, ((java.lang.reflect.Method[])(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[306],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:95","sourceCode":"java.lang.reflect.Method java.lang.reflect.Method = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:144","sourceCode":"final java.lang.reflect.Method java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findGenericDeclaration(java.lang.reflect.Method)","type":"CtLocalVariableImpl"},"failures":[307],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"failures":[208],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:169","sourceCode":"org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"interceptor":"interceptor","mockedMethods":"mockedMethods"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:223","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:74","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"matched","value":"matched"}},{"transplant":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[115],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1777","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:158","sourceCode":"return ((java.lang.Class<?>.getSimpleName()) + \".\") + java.lang.String","type":"CtReturnImpl"},"failures":[16,18,19,113,114,120,121,163,164,166,167,200,201,202,205,206,308,236,237,238,241,242,285],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:41","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:268","sourceCode":"return this","type":"CtReturnImpl"},"failures":[111,118,151,193,201,217,235,240,256,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,288,289,290,291,292,293,304],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1709","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:281","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[83],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1204","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[34],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:246","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:63","sourceCode":"throw new java.lang.RuntimeException(((\"Failed to instantiate \" + (java.lang.Class<?>.getName())) + \"\\'s mock: \") , java.lang.reflect.InvocationTargetException)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:41","sourceCode":"java.lang.StringBuffer.append(\"\\'\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[309,310,163,311,312,237],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[45],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:48","sourceCode":"java.lang.StringBuffer.append(\", \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[309,310,163,311,312,237],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[111,151,193,201,313,235],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.LessOrEqual:34","sourceCode":"return \"leq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[314],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[155,156,212,214,215],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"value"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:284","sourceCode":"if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.matchers.Captures:57","sourceCode":"org.easymock.Capture<T>.setValue(T)","type":"CtInvocationImpl"},"failures":[53,54,55,56,57,58,59,60,62,63,64,65,66,315],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:160","sourceCode":"return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:158","sourceCode":"if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n    java.lang.reflect.Field.setAccessible(true);\n    return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n} ","type":"CtIfImpl"},"failures":[316,317],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Results:40","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:61","sourceCode":"throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String))","type":"CtThrowImpl"},"failures":[318,319],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[111,151,193,201,313,217,235,256,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,286,288,289,290,291,292,293,299,300,301,304],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:152","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1568","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(T))","type":"CtInvocationImpl"},"failures":[29,31,34,35,50,53,63],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:118","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1988","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[29],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":29,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":235,"org.easymock.tests2.UsageTest.argumentsOrdered":121,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":101,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":192,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":129,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":116,"org.easymock.tests2.StubTest.stubWithReturnValue":151,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":49,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":178,"org.easymock.tests2.DelegateToTest.testReturnException":144,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":207,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":190,"org.easymock.tests.MockingTest.testPartialClassMocking":209,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":310,"org.easymock.samples.SupportTest.voteForRemovals":10,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":307,"org.easymock.tests.MockClassControlTest.testToString":229,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":319,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":199,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":277,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":84,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":265,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":208,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":140,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":68,"org.easymock.tests.UsageExpectAndThrowTest.object":275,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":12,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":46,"org.easymock.tests2.DelegateToTest.testWrongClass":146,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":258,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":259,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":0,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":253,"org.easymock.tests2.UsageTest.wrongArguments":114,"org.easymock.samples.ConstructorCalledMockTest.testTax":7,"org.easymock.tests.UsageStrictMockTest.range":166,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":154,"org.easymock.samples.ExampleTest.answerVsDelegate":2,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":98,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":224,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":130,"org.easymock.tests2.UsageConstraintsTest.testNull":31,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":276,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":76,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":107,"org.easymock.tests2.CaptureTest.testPrimitive":56,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":284,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":241,"org.easymock.tests.UsageTest.moreThanOneArgument":236,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":75,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":153,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":311,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":159,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":214,"org.easymock.tests2.CaptureTest.testCaptureNone":61,"org.easymock.tests.UsageUnorderedTest.message":285,"org.easymock.tests.UsageVerifyTest.twoReturns":202,"org.easymock.tests2.ThreadingTest.testThreadSafe":86,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":294,"org.easymock.tests.UsageTest.argumentsOrdered":242,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":219,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":245,"org.easymock.tests2.CaptureTest.testCapture_2617107":55,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":103,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":256,"org.easymock.tests2.UsageConstraintsTest.any":36,"org.easymock.tests2.StubTest.stub":150,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":249,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":234,"org.easymock.tests.UsageExpectAndThrowTest.longType":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":191,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":17,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":128,"org.easymock.tests2.SerializationTest.testClass":137,"org.easymock.tests.LimitationsTest.mockNativeMethod":227,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":24,"org.easymock.tests2.AnswerTest.answer":67,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":156,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":188,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":35,"org.easymock.tests2.CaptureTest.testAnd":53,"org.easymock.tests2.UsageTest.strictResetToDefault":112,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":80,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":20,"org.easymock.tests2.MockedExceptionTest.testMockedException":125,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":158,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":197,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":95,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":240,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":298,"org.easymock.tests2.DelegateToTest.testDelegate":148,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":269,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":211,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":73,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":108,"org.easymock.tests.MockingTest.testNicePartialClassMocking":210,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":280,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":78,"org.easymock.tests2.CaptureTest.testCaptureLast":60,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":193,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":206,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":34,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":136,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":264,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":47,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":205,"org.easymock.tests2.CaptureTest.testCapture1_2446744":57,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":169,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":278,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":273,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":22,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":120,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":51,"org.easymock.tests.UsageThrowableTest.throwError":286,"org.easymock.tests.UsageStrictMockTest.differentMethods":167,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":223,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":88,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":308,"org.easymock.tests2.MockBuilderTest.testCreateMockString":110,"org.easymock.tests.UsageExpectAndThrowTest.floatType":267,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":161,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":42,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":70,"org.easymock.tests.UsageVerifyTest.twoThrows":201,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":141,"org.easymock.samples.PartialClassMockTest.testGetArea":9,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":246,"org.easymock.samples.ExampleTest.voteAgainstRemoval":4,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":213,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":212,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":82,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":266,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":220,"org.easymock.tests2.UsageTest.niceToStrict":115,"org.easymock.tests2.UsageConstraintsTest.testNotNull":50,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":293,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":124,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":106,"org.easymock.tests2.UsageTest.defaultResetToNice":119,"org.easymock.samples.ExampleTest.voteAgainstRemovals":1,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":306,"org.easymock.tests2.CallbackTest.callback":149,"org.easymock.tests.UsageTest.openCallCountByLastCall":239,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":309,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":274,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":96,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":26,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":301,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":255,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":152,"org.easymock.tests.UsageOverloadedMethodTest.overloading":216,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":304,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":40,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":215,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":133,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":180,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":316,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":39,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":62,"org.easymock.tests.UsageThrowableTest.throwCheckedException":290,"org.easymock.tests2.EasyMockSupportClassTest.testAll":139,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":312,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":282,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":262,"org.easymock.tests2.CaptureTest.testCaptureAll":54,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":23,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":204,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":135,"org.easymock.tests.MockNameTest.defaultName":251,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":25,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":132,"org.easymock.tests2.UsageConstraintsTest.testMatches":41,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":134,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":72,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":160,"org.easymock.samples.ExampleTest.voteForRemovals":5,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":90,"org.easymock.tests.UsageVarargTest.allKinds":244,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":200,"org.easymock.tests2.DependencyTest.testInterfaceMocking":11,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":263,"org.easymock.tests2.DelegateToTest.testStubDelegate":145,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":292,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":15,"org.easymock.tests2.AnswerTest.stubAnswer":71,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":194,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":147,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":164,"org.easymock.tests2.UsageConstraintsTest.greaterThan":43,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":196,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":83,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":168,"org.easymock.samples.ExampleTest.voteForRemoval":3,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":87,"org.easymock.tests.UsageExpectAndReturnTest.floatType":171,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":187,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":225,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":85,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":8,"org.easymock.tests.UsageThrowableTest.noUpperLimit":287,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":44,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":252,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":27,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":111,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":58,"org.easymock.tests2.SerializationTest.test":138,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":317,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":93,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":288,"org.easymock.tests2.UsageConstraintsTest.testSame":32,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":170,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":189,"org.easymock.tests2.CaptureTest.testCaptureFirst":66,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":143,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":94,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":123,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":176,"org.easymock.tests.GenericTest.testPackageScope":155,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":89,"org.easymock.tests2.CaptureTest.testCapture2_2446744":65,"org.easymock.tests2.UsageTest.moreThanOneArgument":113,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":297,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":109,"org.easymock.tests.UsageExpectAndReturnTest.longType":172,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":260,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":91,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":283,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":181,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":250,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":48,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":281,"org.easymock.tests2.UsageStrictMockTest.differentMethods":19,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":233,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":157,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":173,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":279,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":198,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":228,"org.easymock.tests2.MockedExceptionTest.testRealException":127,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":226,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":177,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":270,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":16,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":291,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":254,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":131,"org.easymock.tests2.UsageConstraintsTest.testContains":38,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":126,"org.easymock.tests2.UsageConstraintsTest.testFind":30,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":217,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":13,"org.easymock.tests.MockTypeTest.fromEasyMockClass":222,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":77,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":14,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":162,"org.easymock.tests.UsageExpectAndReturnTest.object":179,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":79,"org.easymock.tests.ErrorMessageTest.testGetters":314,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":104,"org.easymock.tests2.UsageStrictMockTest.range":18,"org.easymock.tests2.UsageConstraintsTest.lessThan":52,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":99,"org.easymock.tests.UsageTest.exactCallCountByLastCall":243,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":203,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":92,"org.easymock.tests2.CaptureTest.testCaptureRightOne":63,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":295,"org.easymock.tests2.UsageConstraintsTest.testOr":33,"org.easymock.tests.UsageRangeTest.combination":195,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":74,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":185,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":303,"org.easymock.tests.UsageTest.wrongArguments":238,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":174,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":182,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":296,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":302,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":300,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":21,"org.easymock.tests2.UsageConstraintsTest.cmpTo":37,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":69,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":313,"org.easymock.tests2.UsageTest.openCallCountByLastCall":117,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":118,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":102,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":299,"org.easymock.tests2.CaptureTest.testCaptureFromStub":64,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":105,"org.easymock.tests.UsageTest.unexpectedCallWithArray":237,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":218,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":272,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":289,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":163,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":318,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":183,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":231,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":81,"org.easymock.tests2.UsageConstraintsTest.constraints":28,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":165,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":271,"org.easymock.samples.ExampleTest.addAndChangeDocument":6,"org.easymock.tests.CapturesMatcherTest.test":315,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":186,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":232,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":230,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":142,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":261,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":59,"org.easymock.tests2.UsageTest.resumeIfFailure":122,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":247,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":221,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":175,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":248,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":97}}]

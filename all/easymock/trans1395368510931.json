[{"transplant":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[0,1],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:229","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1531","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:336","sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[2],"status":-1,"binaryOperator":"(\"\" + int)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2096","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).checkOrder(boolean)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:147","sourceCode":"java.io.DataOutputStream.writeShort(0)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:146","sourceCode":"java.io.DataOutputStream.writeByte(2)","type":"CtInvocationImpl"},"failures":[0,3,1],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"data":"data"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:376","sourceCode":"assert java.lang.Class<?> != null : \"Class must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"clazz":"type"}},{"transplant":{"position":"org.easymock.EasyMock:1384","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1482","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(byte))","type":"CtInvocationImpl"},"failures":[4,5,6],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:265","sourceCode":"if (org.easymock.internal.RecordState.isValidThrowable(java.lang.Throwable)) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:70","failures":[7,8,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,4,66,67,68,69,5,70,2,71,72,73,74,75,76,77,78,79,6,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:1928","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.GreaterThan:39","sourceCode":"return int > 0","type":"CtReturnImpl"},"failures":[63,78,80,102],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:190","sourceCode":"final java.lang.IllegalAccessException java.lang.IllegalAccessException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:134","sourceCode":"java.lang.Object = org.easymock.internal.RecordState.convertNumberClassIfNeccessary(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1802","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.StartsWith(java.lang.String))","type":"CtInvocationImpl"},"failures":[85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"prefix"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:126","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:115","sourceCode":"if (org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:113","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.reflect.Method>.size()) ; int++) {\n    final java.lang.reflect.Method java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(int);\n    if (org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.isBridgeMethodFor(java.lang.reflect.Method, java.lang.reflect.Method, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)) {\n        return java.lang.reflect.Method;\n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"bridgeMethod","typeParameterMap":"typeParameterMap","candidateMethod":"bridgeMethod","this":"this"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:364","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[103,104],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[8,8,9,9,105,39,40,42,43,46,106,48,49,50,51,52,53,54,107,108,109,110,111,60,63,64,66,67,68,69,73,75,76,78,79,84,85,86,99],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2124","sourceCode":"if (org.easymock.internal.Invocation == null) {\n    throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:62","sourceCode":"if (org.easymock.internal.Result.shouldFillInStackTrace()) {\n    throw new org.easymock.internal.ThrowableWrapper(java.lang.Throwable);\n} ","type":"CtIfImpl"},"failures":[112,113],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:188","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    java.lang.Class<?> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.wrapPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[114,115,116,117,118,119,120,121,122,123],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"returnedType":"parameterType"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[124,125,126,127],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:259","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[128,129,130,131,132],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:300","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock is not a void method\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"failures":[133],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:78","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"m"}},{"transplant":{"position":"org.easymock.internal.matchers.Compare:52","sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:53","sourceCode":"if ((java.lang.Object == null) || (!(java.lang.Object.getClass().equals(java.lang.Object.getClass())))) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[37,134],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"actual":"o"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.Equals:63","sourceCode":"throw new java.lang.UnsupportedOperationException(\"hashCode() is not supported\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:42","sourceCode":"throw org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()","type":"CtThrowImpl"},"failures":[135],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:171","sourceCode":"net.sf.cglib.proxy.Enhancer.setCallbackType(org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.getClass())","type":"CtInvocationImpl"},"failures":[8,8,9,9,12,22,23,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,0,167,168,169,114,125,127,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,87,219,220,221,222,223,224,225,226,227,228,229,230,231],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:92","failures":[65,4,69,5,2,6,88,90,98],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":4,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":115,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":83,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":13,"org.easymock.tests2.SerializationTest.testAllMockedMethod":127,"org.easymock.tests.MockingTest.testPartialClassMocking":141,"org.easymock.samples.SupportTest.voteForRemovals":11,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":146,"org.easymock.tests.MockClassControlTest.testToString":157,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":226,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":180,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":124,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":176,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":80,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":59,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":117,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":53,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":54,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":70,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":42,"org.easymock.samples.ConstructorCalledMockTest.testTax":8,"org.easymock.tests.UsageStrictMockTest.range":131,"org.easymock.samples.ExampleTest.answerVsDelegate":15,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":207,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":137,"org.easymock.tests2.UsageConstraintsTest.testNull":67,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":215,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":201,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":162,"org.easymock.tests2.CaptureTest.testPrimitive":91,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":170,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":109,"org.easymock.tests2.CaptureTest.testCaptureNone":96,"org.easymock.tests.UsageUnorderedTest.message":55,"org.easymock.tests.UsageVerifyTest.twoReturns":130,"org.easymock.tests.UsageVarargTest.varargByteAccepted":35,"org.easymock.tests.UsageVarargTest.varargIntAccepted":29,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":187,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":22,"org.easymock.tests2.CaptureTest.testCapture_2617107":90,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":48,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":195,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":122,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":45,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":200,"org.easymock.tests2.UsageConstraintsTest.any":71,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":52,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":0,"org.easymock.tests2.SerializationTest.testClass":125,"org.easymock.tests.LimitationsTest.mockNativeMethod":153,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":149,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":2,"org.easymock.tests2.CaptureTest.testAnd":88,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":221,"org.easymock.tests2.MockedExceptionTest.testMockedException":230,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":175,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":143,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":213,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":202,"org.easymock.tests.MockingTest.testNicePartialClassMocking":142,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":217,"org.easymock.tests.LimitationsTest.mockFinalMethod":154,"org.easymock.tests2.CaptureTest.testCaptureLast":95,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":47,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":212,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":5,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":81,"org.easymock.tests.MockingTest.testTwoMocks":140,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":135,"org.easymock.tests2.CaptureTest.testCapture1_2446744":92,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":133,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":85,"org.easymock.samples.ExampleTest.removeNonExistingDocument":20,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":165,"org.easymock.tests2.MockBuilderTest.testCreateMockString":206,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":155,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":111,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":177,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":172,"org.easymock.tests.UsageVerifyTest.twoThrows":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":186,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":49,"org.easymock.samples.ExampleTest.voteAgainstRemoval":17,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":223,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":181,"org.easymock.tests.LimitationsTest.privateConstructor":152,"org.easymock.tests2.UsageConstraintsTest.testNotNull":84,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":229,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":199,"org.easymock.tests2.MockBuilderTest.testCreateMock":204,"org.easymock.samples.ExampleTest.voteAgainstRemovals":14,"org.easymock.tests.UsageVarargTest.differentLength":32,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":189,"org.easymock.tests2.UsageConstraintsTest.equals":134,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":219,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":63,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":26,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":44,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":191,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":75,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":112,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":210,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":74,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":3,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":97,"org.easymock.tests.MockClassControlTest.testEquals":161,"org.easymock.tests2.EasyMockSupportClassTest.testAll":173,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":148,"org.easymock.tests.MockingTest.testStrictClassMocking":138,"org.easymock.tests2.CaptureTest.testCaptureAll":89,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":211,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":41,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":209,"org.easymock.tests2.UsageConstraintsTest.testMatches":76,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":106,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":110,"org.easymock.samples.ExampleTest.voteForRemovals":19,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":121,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":62,"org.easymock.tests.UsageVarargTest.allKinds":37,"org.easymock.tests2.DependencyTest.testInterfaceMocking":58,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":119,"org.easymock.samples.BasicClassMockTest.testPrintContent":23,"org.easymock.samples.ExampleTest.addDocument":18,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":188,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":193,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":39,"org.easymock.tests2.UsageConstraintsTest.greaterThan":78,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":123,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":174,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":224,"org.easymock.tests.UsageVarargTest.varargLongAccepted":34,"org.easymock.samples.ExampleTest.voteForRemoval":16,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":168,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":225,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":218,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":169,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":9,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":79,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":64,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":145,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":227,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":93,"org.easymock.tests2.SerializationTest.test":126,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":203,"org.easymock.tests.DefaultClassInstantiatorTest.badSerializable":1,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":164,"org.easymock.tests2.UsageConstraintsTest.testSame":68,"org.easymock.samples.SupportTest.addDocument":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":171,"org.easymock.tests2.CaptureTest.testCaptureFirst":101,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":178,"org.easymock.tests.GenericTest.testPackageScope":147,"org.easymock.tests2.CaptureTest.testCapture2_2446744":100,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":205,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":36,"org.easymock.tests.GenericTest.testBridgedEquals":150,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":82,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":105,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":107,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":220,"org.easymock.tests2.MockedExceptionTest.testRealException":113,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":190,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":116,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":60,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":43,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":208,"org.easymock.tests.MockingTest.testNiceClassMocking":144,"org.easymock.tests.MockingTest.testClassMocking":139,"org.easymock.tests2.UsageConstraintsTest.testContains":73,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":231,"org.easymock.tests2.UsageConstraintsTest.testFind":66,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":198,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":56,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":216,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":57,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":228,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":6,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":166,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":87,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":196,"org.easymock.tests2.UsageStrictMockTest.range":132,"org.easymock.tests2.UsageConstraintsTest.lessThan":86,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":31,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":118,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":40,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":120,"org.easymock.tests2.CaptureTest.testCaptureRightOne":98,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":182,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":104,"org.easymock.tests2.UsageConstraintsTest.testOr":69,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":114,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":214,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":27,"org.easymock.tests.MockClassControlTest.testHashCode":160,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":179,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":156,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":183,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":25,"org.easymock.tests.UsageVarargTest.varargShortAccepted":33,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":167,"org.easymock.tests2.UsageConstraintsTest.cmpTo":72,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":61,"org.easymock.tests.UsageVarargTest.varargCharAccepted":30,"org.easymock.tests.DefaultClassInstantiatorTest.object":163,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":24,"org.easymock.tests2.CaptureTest.testCaptureFromStub":99,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":197,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":184,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":38,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":222,"org.easymock.tests2.UsageConstraintsTest.constraints":65,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":159,"org.easymock.samples.ExampleTest.addAndChangeDocument":21,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":7,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":192,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":158,"org.easymock.tests2.CompareToTest.testGreateThan":102,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":94,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":50,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":136,"org.easymock.tests.LimitationsTest.abstractClass":151,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":51,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":28,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":128}}]

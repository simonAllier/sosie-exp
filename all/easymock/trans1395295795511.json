[{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[0,1,2,3],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:866","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:113","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[4,5,6,7],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"failures":[8,9,10,11,12,13],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2066","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict();\n}","type":"CtForEachImpl"},"failures":[14],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[15,16,17,18,19,20,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[15,16,17,18,19,20,21],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:80","sourceCode":"if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.internal.ArgumentToString:45","sourceCode":"java.lang.StringBuffer.append(\"[\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \").append(java.lang.String).append(\", actual: \")","type":"CtInvocationImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[27,28,29,31,48,49,37,38,39,40,50,41,43,46,47],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:141","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"state":"state","delegateTo":"delegateTo"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"delegateTo":"delegateTo"}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[51,52,53,54,49,41],"status":-1,"binaryOperator":"int > 0","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:108","failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,46,90],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1659","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(long[]))","type":"CtInvocationImpl"},"failures":[91],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.MockBuilder:205","failures":[92,93,94,15,95,96,97,21,98,99,100,0,101],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1276","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[102],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:49","failures":[103,104,105,106,107],"status":-1,"binaryOperator":"(((org.easymock.internal.matchers.CompareTo<T>.(getName()) + \"(\") + (java.lang.Comparable<T>)) + \")\")","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"failures":[108],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:2080","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[109,110],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[92,92,93,93,111,101],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:95","failures":[112,102,113,114,115,116,117,118,119,120,121],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1927","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Captures<java.lang.Boolean>(org.easymock.Capture<java.lang.Boolean>))","type":"CtInvocationImpl"},"failures":[122],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"failures":[123,124],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[112,102,113,114,115,116,117,118,119,120,121],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,92,92,93,93,140,141,109,4,142,143,144,145,146,147,148,149,150,151,152,112,102,153,154,113,155,114,115,156,116,157,158,159,91,160,161,162,163,164,117,165,166,167,168,118,169,170,171,172,94,15,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,99,189,190,191,192,193,194,195,119,196,120,122,197,198,199,123,200,124,121,201,202,203,0,1,2,204,55,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,56,228,26,27,14,229,230,57,231,28,29,232,233,234,235,236,237,238,239,30,240,31,32,241,242,243,244,245,246,247,248,249,101,250,251,252,253,254,110,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,58,291,292,293,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,8,313,314,315,316,317,318,319,9,320,321,322,323,324,10,325,326,327,328,329,330,11,12,331,332,333,13,334,335,336,337,338,339,340,341,342,343,344,345,346,5,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,79,365,80,81,82,83,84,85,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,86,36,49,37,393,87,38,39,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,88,421,422,423,424,40,425,426,427,6,428,7,429,430,431,432,433,434,435,89,436,437,50,438,439,440,41,42,441,43,44,442,443,45,46,47,444,445,446,447,90,448,449,450,451,452,453,454,455,456,457,108,458,459,460,461,462,463,464,465,466,467,468,469,470],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object)","type":"CtInvocationImpl"},"failures":[228],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:107","sourceCode":"if (java.lang.reflect.Method != null) {\n    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:593","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[94,15,16,17,18,471,472,21,99,0],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:181","sourceCode":"return false","type":"CtReturnImpl"},"failures":[15,473,16,17,18,19,20,472,21,0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"failures":[4,5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:186","sourceCode":"java.lang.reflect.Method.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:98","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"method"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:351","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1831","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.EqualsWithDelta(double , double))","type":"CtInvocationImpl"},"failures":[164],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Injection:74","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:79","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[125,127,128,129,130,132,133,134,135,136,138,139,167,186,196,120,198,199,123,200,203,2,474,211,212,213,214,27,229,28,29,239,240,31,32,241,306,353,354,355,357,358,360,361,362,363,364,365,37,38,39,408,412,413,414,416,417,420,422,423,40,440,41,441,43,44,442],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"matched":"lastInvocationUsed"}},{"position":"org.easymock.EasyMock:760","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:205","sourceCode":"return java.lang.Number.doubleValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"failures":[319,320,331,332,333,444],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.AndroidSupport:29","sourceCode":"this.boolean = false","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:157","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[144,145,146,147,55,287,288,289,290,58,291,293,420],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.AndroidSupport.isAndroid":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:328","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:289","sourceCode":"if (org.easymock.internal.RecordState.isLastResultOrVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:297","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    return ;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[0,1,2,3],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1862","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Same(T))","type":"CtInvocationImpl"},"failures":[155],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:69","sourceCode":"try {\n    java.io.InputStream.close();\n} catch (final java.io.IOException java.io.IOException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:62","sourceCode":"if (java.io.InputStream != null) {\n    java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream);\n    try {\n        java.util.Properties.load(java.io.InputStream);\n    } catch (final java.io.IOException java.io.IOException) {\n        throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n    } finally {\n        try {\n            java.io.InputStream.close();\n        } catch (final java.io.IOException java.io.IOException) {\n        }\n    }\n} ","type":"CtIfImpl"},"failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,92,93,140,475,141,109,4,142,143,22,23,24,25,144,145,146,147,148,149,150,151,152,112,102,153,154,113,155,114,115,156,116,157,158,159,91,160,161,162,163,164,117,165,166,167,168,118,169,170,476,477,171,172,94,15,173,174,175,176,177,178,179,180,181,182,183,478,184,479,185,186,187,188,480,98,99,189,481,482,190,191,192,193,194,195,119,196,120,122,197,198,199,123,200,124,121,201,202,203,0,1,2,204,55,205,206,207,474,208,209,483,210,484,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,56,228,26,27,14,229,230,57,231,28,29,232,233,485,486,234,235,487,236,237,488,489,238,239,30,240,31,32,241,242,243,244,245,246,247,248,490,249,101,250,251,252,253,254,110,491,492,493,494,495,496,255,256,257,258,259,260,261,262,263,264,265,266,267,497,498,268,269,270,271,499,500,272,501,273,274,502,275,276,503,504,277,278,279,280,281,505,282,506,507,283,284,285,286,287,288,289,290,58,291,292,293,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,8,313,314,315,316,317,318,319,9,320,321,322,323,324,10,325,326,327,328,329,330,11,12,331,332,333,13,334,335,336,337,338,339,340,341,342,343,344,345,346,5,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,79,365,80,81,82,83,84,85,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,508,509,510,386,511,387,512,388,389,390,391,392,86,36,49,37,393,87,38,39,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,88,421,422,423,424,40,425,426,427,6,428,7,429,430,431,432,433,434,435,89,436,437,50,438,439,440,41,42,441,43,44,442,443,45,46,47,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,444,445,446,447,90,448,449,450,451,452,453,454,455,456,457,108,458,459,460,461,462,463,464,465,466,467,468,469,470],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:184","failures":[94,15,16,17,18,471,472,21,99,0],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[125,126,127,128,129,130,132,133,134,135,136,137,138,139,92,93,140,141,109,4,142,144,145,146,147,148,150,151,152,112,102,154,113,155,114,115,156,157,158,159,91,160,161,162,163,164,117,165,166,167,168,118,169,170,171,172,94,174,175,176,177,178,181,182,183,478,184,186,187,188,480,189,481,482,191,192,193,195,119,196,120,122,197,198,199,123,200,124,121,201,202,203,0,1,2,204,55,205,206,207,474,208,209,483,210,484,211,212,213,214,215,221,56,228,26,27,14,229,230,57,231,28,29,232,233,485,486,234,235,236,237,488,238,239,30,240,31,32,241,242,243,244,245,246,247,248,249,251,252,253,254,260,272,274,281,284,287,288,289,290,58,291,292,293,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,297,298,300,305,306,309,310,311,312,8,315,317,318,319,9,320,321,322,323,324,10,325,326,327,328,329,330,11,12,331,332,333,13,334,335,336,353,354,355,357,358,359,360,361,362,363,364,79,365,80,81,82,83,84,85,377,378,379,380,381,389,390,391,392,86,36,49,37,393,87,38,39,394,408,411,412,413,414,415,416,417,418,419,420,88,421,535,535,40,429,431,432,433,435,89,50,439,440,41,42,441,43,44,442,45,46,47,444,445,446,447,90],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:70","sourceCode":"return ((\"between \" + (int)) + \" and \") + (int)","type":"CtReturnImpl"},"failures":[31,32,43,44],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:117","failures":[135,136,137,92,92,93,93,146,94,536,478,184,479,186,187,188,480,189,481,482,0,2,485,486,234,235,237,488,242,243,245,246,247,248,249,251,252,253,254,272,274,281,284,296,297,298,300,305,306,307,315,408],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:217","failures":[125,126,127,128,129,130,132,133,134,135,136,137,138,139,4,142,146,102,113,115,156,157,158,91,162,117,165,166,167,168,118,171,172,94,178,181,186,188,480,191,193,195,119,196,120,122,198,199,123,200,124,121,203,0,1,2,205,206,207,474,208,209,483,484,211,212,213,214,215,221,56,228,27,14,229,28,29,233,485,486,234,235,236,237,488,239,30,240,31,32,241,242,243,244,245,246,247,249,253,260,272,274,281,284,61,62,64,69,74,297,298,300,305,306,315,319,9,321,325,330,353,354,355,357,358,360,361,362,363,364,79,365,80,81,82,83,84,85,37,38,39,394,408,412,413,414,416,417,418,419,420,88,422,423,40,429,433,435,89,437,440,41,42,441,43,44,442,46,47,446,447],"status":-1,"binaryOperator":"(boolean) && ((org.easymock.internal.Result) == null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:113","sourceCode":"if (java.lang.Class<?>[][int].isPrimitive()) {\n    java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n} else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n    java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n} else {\n    final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n    org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n    java.lang.Object[][int] = java.lang.Object;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:115","sourceCode":"java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.NotNull.org.easymock.internal.matchers.NotNull)","type":"CtInvocationImpl"},"failures":[148,150,167,118],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1816","sourceCode":"return null","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":102,"org.easymock.tests2.UsageTest.argumentsOrdered":29,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":86,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":212,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":108,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":229,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":133,"org.easymock.tests2.DelegateToTest.testReturnException":191,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":288,"org.easymock.tests.MockingTest.testPartialClassMocking":297,"org.easymock.tests.MockClassControlTest.testToString":368,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":143,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":428,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":491,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":466,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":503,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":59,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":274,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":33,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":172,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultThrowable":534,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":16,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":156,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":418,"org.easymock.tests2.UsageTest.wrongArguments":27,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":266,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":391,"org.easymock.samples.ExampleTest.answerVsDelegate":126,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":387,"org.easymock.tests2.UsageConstraintsTest.testNull":113,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":302,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":245,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":211,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":373,"org.easymock.tests2.CaptureTest.testPrimitive":122,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":421,"org.easymock.tests.UsageTest.moreThanOneArgument":36,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":78,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":244,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":334,"org.easymock.tests.UsageTest.argumentsOrdered":39,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":337,"org.easymock.tests.UsageVarargTest.varargIntAccepted":355,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":462,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":309,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":478,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":20,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":226,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":450,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":8,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndReturnObjectWithMinMax":518,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":260,"org.easymock.tests.ReplayStateInvalidUsageTest.times":349,"org.easymock.tests2.DependencyTest.testClassMocking":476,"org.easymock.tests2.AnswerTest.answer":178,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":464,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":177,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":510,"org.easymock.tests2.CaptureTest.testAnd":119,"org.easymock.tests2.UsageTest.strictResetToDefault":228,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":97,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":251,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":13,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":208,"org.easymock.tests2.DelegateToTest.testDelegate":195,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":341,"org.easymock.tests.ReplayStateInvalidCallsTest.makeThreadSafe":517,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":74,"org.easymock.tests.LimitationsTest.mockFinalMethod":316,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":58,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":381,"org.easymock.tests2.DependencyTest.testClassMockingSupport":477,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":422,"org.easymock.tests2.CaptureTest.testCapture1_2446744":197,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":490,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":72,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":175,"org.easymock.tests.UsageThrowableTest.throwError":79,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":344,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":511,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":227,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":336,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":286,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultVoidCallable":521,"org.easymock.samples.PartialClassMockTest.testGetArea":137,"org.easymock.tests.MockingTest.testInterfaceMocking":299,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":345,"org.easymock.tests2.CompareToTest.testLessOrEqual":107,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":310,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":504,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":400,"org.easymock.tests2.UsageTest.niceToStrict":14,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":60,"org.easymock.tests2.ThreadingTest.testChangeDefault":475,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":448,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":186,"org.easymock.tests2.MockBuilderTest.testCreateMock":189,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":506,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":263,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":51,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":68,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":209,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":509,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":427,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":409,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":389,"org.easymock.tests.UsageOverloadedMethodTest.overloading":447,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":280,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":160,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":89,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":446,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":326,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":91,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":124,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":356,"org.easymock.tests2.EasyMockSupportClassTest.testAll":272,"org.easymock.tests.MockClassControlTest.testEquals":372,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":306,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":76,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":536,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":176,"org.easymock.tests2.CaptureTest.testCaptureAll":196,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":379,"org.easymock.tests.MockNameTest.defaultName":382,"org.easymock.tests2.UsageConstraintsTest.testMatches":161,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":335,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":342,"org.easymock.samples.ExampleTest.voteForRemovals":130,"org.easymock.tests.UsageVarargTest.allKinds":364,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":45,"org.easymock.samples.BasicClassMockTest.testPrintContent":136,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":380,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":84,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":238,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":194,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":223,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":291,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":472,"org.easymock.tests2.UsageConstraintsTest.greaterThan":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":501,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":430,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":254,"org.easymock.tests.ReplayStateInvalidCallsTest.checkOrder":522,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":407,"org.easymock.samples.ExampleTest.voteForRemoval":127,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":141,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":110,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":512,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":248,"org.easymock.tests.ReplayStateInvalidCallsTest.setDefaultReturnValue":514,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":408,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":56,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":207,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":80,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":499,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":287,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":190,"org.easymock.tests2.CaptureTest.testCaptureFirst":203,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":454,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":474,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":233,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":50,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":323,"org.easymock.tests2.UsageTest.moreThanOneArgument":26,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":4,"org.easymock.tests2.CaptureTest.testCapture2_2446744":202,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":481,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":465,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":363,"org.easymock.tests.GenericTest.testBridgedEquals":308,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":416,"org.easymock.tests.UsageExpectAndReturnTest.longType":9,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":205,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":377,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":77,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":438,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":167,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":75,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":384,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":333,"org.easymock.tests.UsageCallCountTest.tooManyCalls":417,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":507,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":324,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":265,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":64,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":83,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":486,"org.easymock.tests.MockingTest.testNiceClassMocking":303,"org.easymock.tests.MockingTest.testClassMocking":295,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":410,"org.easymock.tests2.UsageConstraintsTest.testContains":159,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":146,"org.easymock.tests2.UsageConstraintsTest.testFind":154,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":90,"org.easymock.tests.MockTypeTest.fromEasyMockClass":386,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":439,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":150,"org.easymock.tests.UsageExpectAndReturnTest.object":325,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":249,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":264,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":484,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":17,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":358,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":398,"org.easymock.tests.UsageTest.exactCallCountByLastCall":394,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":292,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":453,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":6,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":338,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":15,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":11,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":353,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":435,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":217,"org.easymock.tests.MockClassControlTest.testHashCode":371,"org.easymock.tests2.EasyMockSupportTest.testVerify":214,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":278,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":339,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":433,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":426,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":174,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":173,"org.easymock.tests.UsageVarargTest.varargCharAccepted":357,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":239,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":470,"org.easymock.tests2.UsageTest.openCallCountByLastCall":230,"org.easymock.tests.DefaultClassInstantiatorTest.object":401,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":213,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":425,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":396,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":48,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":66,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":279,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":81,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":258,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":216,"org.easymock.tests.ReplayStateInvalidCallsTest.replay":520,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":252,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":370,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":65,"org.easymock.tests.CapturesMatcherTest.test":535,"org.easymock.tests.ReplayStateInvalidCallsTest.times":526,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":12,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":383,"org.easymock.tests.ReplayStateInvalidCallsTest.andReturn":527,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":284,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":369,"org.easymock.tests2.UsageTest.resumeIfFailure":232,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":508,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":497,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":290,"org.easymock.tests2.StubTest.stubWithReturnValue":55,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":21,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":168,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":10,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":463,"org.easymock.samples.SupportTest.voteForRemovals":139,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":52,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":304,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":219,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":71,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":3,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":469,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":179,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":7,"org.easymock.tests.UsageExpectAndThrowTest.object":69,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":165,"org.easymock.tests2.DelegateToTest.testWrongClass":193,"org.easymock.tests.ReplayStateInvalidCallsTest.andAnswer":524,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":444,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":445,"org.easymock.tests.UsageStrictMockTest.range":43,"org.easymock.samples.ConstructorCalledMockTest.testTax":92,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":269,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":210,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":485,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":70,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":188,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":38,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":271,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":351,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":390,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":53,"org.easymock.tests.ReplayStateInvalidCallsTest.asStub":516,"org.easymock.tests2.CaptureTest.testCaptureNone":200,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":376,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":493,"org.easymock.tests.UsageUnorderedTest.message":40,"org.easymock.tests.UsageVerifyTest.twoReturns":47,"org.easymock.tests.UsageVarargTest.varargByteAccepted":362,"org.easymock.tests2.ThreadingTest.testThreadSafe":140,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":505,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":414,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":399,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":135,"org.easymock.tests2.CaptureTest.testCapture_2617107":120,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":424,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":88,"org.easymock.tests2.UsageConstraintsTest.any":157,"org.easymock.tests2.StubTest.stub":204,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":348,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":385,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":468,"org.easymock.tests.UsageExpectAndThrowTest.longType":62,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":289,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":405,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":347,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":240,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":221,"org.easymock.tests.LimitationsTest.mockNativeMethod":315,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":307,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":332,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":257,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubAnswer":532,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":241,"org.easymock.tests2.NameTest.nameForMocksControl":25,"org.easymock.tests2.MockedExceptionTest.testMockedException":145,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":259,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":273,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":87,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":149,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":63,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":300,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":242,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":480,"org.easymock.tests.MockingTest.testNicePartialClassMocking":298,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":247,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":473,"org.easymock.tests2.CaptureTest.testCaptureLast":123,"org.easymock.tests2.CompareToTest.testCompareEqual":105,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":255,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":423,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubThrow":531,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":488,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":115,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":166,"org.easymock.tests.MockingTest.testTwoMocks":296,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultThrowable":528,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":489,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":317,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":67,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":28,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":169,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":496,"org.easymock.samples.ExampleTest.removeNonExistingDocument":131,"org.easymock.tests.UsageStrictMockTest.differentMethods":44,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":262,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":346,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":218,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":495,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":403,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":109,"org.easymock.tests2.MockBuilderTest.testCreateMockString":482,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":502,"org.easymock.tests.UsageExpectAndThrowTest.floatType":61,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":162,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":500,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":181,"org.easymock.tests.UsageVerifyTest.twoThrows":46,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":95,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":434,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":281,"org.easymock.samples.ExampleTest.voteAgainstRemoval":128,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":458,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":374,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":253,"org.easymock.tests.LimitationsTest.privateConstructor":314,"org.easymock.tests2.UsageConstraintsTest.testNotNull":118,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":144,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":85,"org.easymock.tests2.UsageTest.defaultResetToNice":231,"org.easymock.samples.ExampleTest.voteAgainstRemovals":125,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":330,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":256,"org.easymock.tests.UsageVarargTest.differentLength":359,"org.easymock.tests2.CallbackTest.callback":215,"org.easymock.tests2.UsageConstraintsTest.equals":153,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":101,"org.easymock.tests.UsageTest.openCallCountByLastCall":393,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":151,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":420,"org.easymock.tests.UsageCallCountTest.tooFewCalls":412,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":235,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":392,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":494,"org.easymock.tests.UsageThrowableTest.throwCheckedException":82,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":54,"org.easymock.tests.MockingTest.testStrictClassMocking":294,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":237,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":293,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":234,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":261,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":350,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":236,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":183,"org.easymock.tests.ObjectMethodsTest.testHashCode":397,"org.easymock.tests2.CompareToTest.testGreateOrEqual":106,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":19,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubDelegateTo":530,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":142,"org.easymock.tests2.NameTest.nameForNiceMock":24,"org.easymock.tests.ReplayStateInvalidCallsTest.callback":525,"org.easymock.tests2.DependencyTest.testInterfaceMocking":171,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":18,"org.easymock.samples.ExampleTest.addDocument":129,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":282,"org.easymock.tests2.DelegateToTest.testStubDelegate":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":285,"org.easymock.tests2.AnswerTest.stubAnswer":182,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":42,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":98,"org.easymock.tests.UsageVarargTest.varargLongAccepted":361,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":457,"org.easymock.tests.UsageExpectAndReturnTest.floatType":319,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":331,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":94,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":93,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":436,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":164,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":225,"org.easymock.tests.UsageThrowableTest.noUpperLimit":365,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":152,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":267,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":198,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":402,"org.easymock.tests2.UsageConstraintsTest.testSame":155,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":318,"org.easymock.samples.SupportTest.addDocument":138,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":487,"org.easymock.tests.ReplayStateInvalidCallsTest.andDelegateTo":515,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":5,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":275,"org.easymock.tests.GenericTest.testPackageScope":305,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":224,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":301,"org.easymock.tests.ReplayStateInvalidCallsTest.andStubReturn":513,"org.easymock.tests2.NameTest.nameForMock":22,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":327,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":100,"org.easymock.tests2.UsageStrictMockTest.differentMethods":32,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":250,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":320,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":73,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":395,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":432,"org.easymock.tests2.MockedExceptionTest.testRealException":147,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":388,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":461,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":270,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":460,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":30,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":419,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":352,"org.easymock.tests2.NameTest.nameForStrictMock":23,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":185,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":148,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":246,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":268,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":404,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":117,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":34,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":184,"org.easymock.tests2.UsageStrictMockTest.range":31,"org.easymock.tests.ReplayStateInvalidCallsTest.andThrow":519,"org.easymock.tests2.UsageConstraintsTest.lessThan":170,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":220,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":471,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":456,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":206,"org.easymock.tests2.CaptureTest.testCaptureRightOne":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":277,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":492,"org.easymock.tests2.UsageConstraintsTest.testOr":114,"org.easymock.tests.UsageRangeTest.combination":429,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":243,"org.easymock.tests.UsageTest.wrongArguments":37,"org.easymock.tests2.MockBuilderTest.testWithConstructor":96,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":276,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":367,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":321,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":449,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":328,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":406,"org.easymock.tests.UsageVarargTest.varargShortAccepted":360,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":415,"org.easymock.tests.ReplayStateInvalidCallsTest.expectAndThrowLongWithMinMax":533,"org.easymock.tests2.UsageConstraintsTest.cmpTo":158,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":180,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultReturnValue":523,"org.easymock.tests2.CompareToTest.testLessThan":103,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":451,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":57,"org.easymock.tests2.CaptureTest.testCaptureFromStub":201,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":343,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":479,"org.easymock.tests.UsageTest.unexpectedCallWithArray":49,"org.easymock.tests.ReplayStateInvalidCallsTest.defaultVoidCallable":529,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":41,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":413,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":111,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":329,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":441,"org.easymock.tests2.UsageConstraintsTest.constraints":112,"org.easymock.samples.ExampleTest.addAndChangeDocument":132,"org.easymock.tests.UsageStrictMockTest.testVerify":443,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":134,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":440,"org.easymock.tests2.CompareToTest.testGreateThan":104,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":378,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":199,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":311,"org.easymock.tests.LimitationsTest.abstractClass":313,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":322,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":437,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":312,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":483,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":35,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":354}}]

[{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:111","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:95","sourceCode":"return java.lang.StringBuilder.toString()","type":"CtReturnImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:281","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if ((java.lang.reflect.ParameterizedType.getRawType()) instanceof java.lang.Class<?>) {\n        org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n} else if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.Type)).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[22],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericInterface":"actualTypeArgument","typeVariableMap":"typeVariableMap","this":"this"}},{"position":"org.easymock.EasyMock:1163","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[23,0,1,2],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:85","failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,3,4,49,50,51,52,53,54,5,55,56,6,7,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,8,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,13,14,174,175,15,16,176,177,178,179,180,181,182,183,184,184,185,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,17,18,254,0,1,2,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,19,320,321,322,323,324,20,21,325,326,327,328,329,330,331,332,333],"status":-1,"binaryOperator":"org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:83","sourceCode":"return java.lang.Boolean.java.lang.Boolean.valueOf((java.lang.Object == (java.lang.Object[][0])))","type":"CtReturnImpl"},"failures":[334,26,335,336,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,48,3,4,49,50,51,52,53,54,5,55,56,6,7,57,58,59,61,62,63,64,337,71,72,85,86,87,88,89,90,91,92,8,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,138,139,141,142,143,144,145,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,14,174,175,15,16,176,181,182,183,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,225,229,234,235,236,237,238,239,242,243,250,251,252,253,17,18,254,1,2,255,256,257,258,259,260,261,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,309,310,314,315,316,317,318,319,19,320,321,322,323,20,21,325,326,327,328,330,331,332,333],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"position":"org.easymock.internal.ReflectionUtils:181","failures":[0,338,339,340,341,342,343,344,345,346],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Captures:43","sourceCode":"java.lang.StringBuffer.append(\"capture(\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[5,347,348,13,349,350],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:167","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[184,184,185,185,351,352],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:681","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:168","sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","type":"CtIfImpl"},"failures":[353,49,63,354,65,66,67,68,69,70,71,72,93,355,148,149,150,356,151,152,184,184,185,185,186,212,213,214,218,219,221,222,223,224,225,226,228,230,234,239,240,241,242,244,245,2,300,301,302,303,305,306,307,308,310,311,312,313,329,330],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.Capture:134","failures":[357],"status":-1,"binaryOperator":"(java.util.List<T>.size()) == 1","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:257","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1646","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(int[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[358,359,32,48,3,4,54,5,55,6,7,57,58,8,93,120,360,144,145,361,146,147,347,362,348,363,364,365,10,356,173,13,14,174,15,16,177,219,220,228,229,251,252,253,17,18,254,0,257,261,264,275,289,366,349,367,368,369,370,371,372,350,373,374,310,317,319,19,321,20,21,327],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1319","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Invocation:44","sourceCode":"new java.util.ArrayList<org.easymock.internal.matchers.Captures<?>>(0)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:879","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.EasyMockProperties:133","failures":[375,376,377],"status":-1,"binaryOperator":"java.lang.ClassLoader == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[3,89,90],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"position":"org.easymock.internal.Range:36","failures":[334,24,25,26,378,379,380,381,382,383,335,336,384,385,27,28,29,30,31,358,359,386,32,33,34,35,36,37,38,39,40,41,42,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,353,411,412,413,414,415,416,417,43,44,45,46,47,48,3,4,49,50,51,52,53,54,5,55,56,6,7,57,58,59,60,61,62,22,63,64,354,337,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,8,418,419,420,93,421,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,422,117,118,119,120,121,122,123,124,125,126,423,424,425,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,360,144,145,361,146,147,426,427,355,148,149,428,150,429,430,431,12,356,432,433,434,151,435,436,437,438,439,440,441,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,13,14,174,175,15,16,176,177,178,179,180,442,443,444,445,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,446,225,351,447,226,227,228,229,448,449,450,230,231,232,233,451,452,453,454,455,456,457,234,235,236,237,238,239,240,241,242,458,243,244,245,459,246,247,248,249,250,251,252,253,17,18,254,0,1,2,255,256,257,258,259,260,261,262,263,264,265,266,267,460,268,269,270,461,271,272,273,274,275,462,276,277,278,279,280,281,463,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,464,465,466,467,468,299,469,470,471,472,473,474,300,475,301,476,477,478,302,303,304,338,305,479,480,306,307,481,308,482,483,484,485,486,309,487,488,489,490,491,492,493,494,495,310,496,497,311,498,499,500,501,502,503,504,505,506,312,507,508,509,510,511,313,512,513,514,515,314,315,516,316,317,318,319,19,320,321,322,323,324,20,21,325,326,327,517,328,329,339,518,330,519,520,331,332,333],"status":-1,"binaryOperator":"(int <= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.RecordState:136","failures":[27,28,29,30,31,32,33,36,55,125,126,127,129,130,131,132,133,184,184,185,185,209,252,272,273,276,277,278,279,284,286,287,289,290,296,297,298],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:233","failures":[381,335,336,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,353,416,48,3,4,49,50,51,52,53,54,5,55,56,6,7,57,58,59,60,61,62,63,64,354,85,86,87,88,89,90,91,92,8,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,423,424,425,127,128,129,130,131,132,133,134,136,137,138,139,141,142,143,144,145,146,148,149,150,356,432,433,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,14,174,175,15,16,176,442,443,444,445,181,182,183,184,184,185,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,250,251,252,253,17,18,254,0,1,2,255,256,257,258,259,260,261,262,263,264,265,266,267,460,268,269,270,461,271,272,273,274,275,276,277,278,279,280,281,463,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,301,302,304,305,307,309,310,311,312,313,314,315,316,317,318,319,19,320,321,322,323,324,20,21,325,326,327,328,329,330,519,520,331,332,333],"status":-1,"binaryOperator":"(org.easymock.internal.ExpectedInvocation) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[198,200,208,274,275,277,279,280,463,291,296],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:746","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[281],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1220","sourceCode":"org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1396","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[291],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.ConstructorArgs:54","failures":[521,522,523,524,525,526,0,480,493,494,495,310,496,497,311,498,499,500,501,502,503,504,505,506,312,507,508,509,510,511,313,512,513,527,528],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"method":"method"}},{"position":"org.easymock.internal.ReflectionUtils:161","failures":[0,338,480,529,530,329,339,340,341,342,343,344,345,346],"status":-1,"binaryOperator":"java.lang.reflect.Constructor<T> != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:107","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[442,443,444],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[379,387,392,49,22,63,64,354,337,65,66,67,68,69,70,71,72,419,420,93,421,426,427,355,148,149,150,431,151,435,436,437,438,439,441,182,183,184,184,185,185,186,212,213,214,218,219,221,222,223,224,225,351,447,226,227,228,229,448,449,451,455,239,240,241,242,244,245,0,2,300,531,301,476,478,302,303,304,305,480,306,307,532,308,493,494,495,310,496,497,311,498,499,500,501,502,503,504,505,506,312,507,508,509,510,511,313,512,513,329,339,533],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"arg":"value"}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[379,392,67,68,69,12,451,241,244,304],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"proxy":"proxy"}},{"position":"org.easymock.internal.matchers.Contains:40","failures":[534],"status":-1,"binaryOperator":"((\"contains(\\\"\" + (java.lang.String)) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ErrorMessage:51","failures":[535,3,4,6,17],"status":-1,"binaryOperator":"(org.easymock.internal.ErrorMessage.(getActualCount()) + 1)","name":"math","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:38","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl)","type":"CtInvocationImpl"},"failures":[381,383,335,336,384,385,27,28,29,30,31,358,359,32,33,34,35,36,37,38,39,40,41,42,353,416,43,48,3,4,49,50,51,52,53,54,5,55,56,6,7,57,58,59,60,61,62,63,64,354,85,86,87,88,89,90,91,92,8,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,423,424,425,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,360,144,145,361,146,355,148,149,150,356,432,433,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,14,174,175,15,16,176,442,443,444,445,181,182,183,184,184,185,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,250,251,252,253,17,18,254,0,1,2,255,256,257,258,259,260,261,262,263,264,265,266,267,460,268,269,270,461,271,272,273,274,275,276,277,278,279,280,281,463,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,304,305,307,309,310,311,312,313,314,315,316,317,318,319,19,320,321,322,323,324,20,21,325,326,327,328,329,330,519,520,331,332,333],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:138","sourceCode":"java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:57","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[536,48,3,4,5,55,6,7,173,14,15,16,230,231,232,233,252,17,18,319,19,20,21],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:229","failures":[227,449,301,307,311],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:58","sourceCode":"java.lang.String[][int] = java.lang.Class<?>[][int].getName()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:72","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class.java.lang.Class.forName(java.lang.String[][int], true, java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader())","type":"CtAssignmentImpl"},"failures":[23,0,1,2],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"parameterTypeNames":"parameterTypeNames","i":"i","parameterTypes":"parameterTypes"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":275,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":172,"org.easymock.tests2.UsageTest.argumentsOrdered":21,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":265,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":469,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":405,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":321,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":187,"org.easymock.tests2.DelegateToTest.testReturnException":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":38,"org.easymock.tests.MockingTest.testPartialClassMocking":148,"org.easymock.tests.MockClassControlTest.testToString":67,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":450,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":381,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":449,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":413,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":501,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":94,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":311,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":536,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":315,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":341,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":281,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":32,"org.easymock.tests2.UsageTest.wrongArguments":19,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":492,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":179,"org.easymock.samples.ExampleTest.answerVsDelegate":189,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":392,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":430,"org.easymock.tests2.UsageConstraintsTest.testNull":277,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":221,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":72,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":264,"org.easymock.tests2.CaptureTest.testPrimitive":201,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":36,"org.easymock.tests.UsageTest.moreThanOneArgument":173,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":113,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":220,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":131,"org.easymock.tests.UsageTest.argumentsOrdered":16,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":383,"org.easymock.tests.UsageVarargTest.varargIntAccepted":116,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":410,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":373,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":27,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":300,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":345,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":473,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":453,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":303,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":397,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":31,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithChar":369,"org.easymock.tests.ReplayStateInvalidUsageTest.times":81,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":309,"org.easymock.tests2.DependencyTest.testClassMocking":514,"org.easymock.tests2.AnswerTest.answer":330,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":463,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":411,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":249,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":389,"org.easymock.tests2.CaptureTest.testAnd":198,"org.easymock.tests2.UsageTest.strictResetToDefault":318,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":477,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":226,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":130,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":61,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":259,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":385,"org.easymock.tests2.DelegateToTest.testDelegate":271,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":109,"org.easymock.tests.LimitationsTest.mockFinalMethod":421,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":41,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":47,"org.easymock.tests2.DependencyTest.testClassMockingSupport":515,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":358,"org.easymock.tests2.CaptureTest.testCapture1_2446744":202,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":446,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":107,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":247,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":75,"org.easymock.tests.UsageThrowableTest.throwError":85,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":391,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":474,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":12,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":133,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":513,"org.easymock.samples.PartialClassMockTest.testGetArea":186,"org.easymock.tests.MockingTest.testInterfaceMocking":428,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":28,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":432,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":502,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":95,"org.easymock.tests2.UsageTest.niceToStrict":320,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":379,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":526,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":395,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":302,"org.easymock.tests2.MockBuilderTest.testCreateMock":306,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":509,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":489,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":103,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":349,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":260,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":388,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":444,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":134,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":177,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":523,"org.easymock.tests.UsageOverloadedMethodTest.overloading":51,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":511,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":506,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":145,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":286,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":163,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":50,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":285,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":207,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":422,"org.easymock.tests.MockClassControlTest.testEquals":71,"org.easymock.tests2.EasyMockSupportClassTest.testAll":310,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":64,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":111,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithString":371,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":45,"org.easymock.tests2.CaptureTest.testCaptureAll":199,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":248,"org.easymock.tests.MockNameTest.defaultName":418,"org.easymock.tests2.UsageConstraintsTest.testMatches":287,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":132,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":73,"org.easymock.samples.ExampleTest.voteForRemovals":193,"org.easymock.tests.UsageVarargTest.allKinds":124,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":48,"org.easymock.samples.BasicClassMockTest.testPrintContent":183,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":46,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":91,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":250,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":470,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":461,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":42,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":440,"org.easymock.tests2.UsageConstraintsTest.greaterThan":289,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":346,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":496,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":60,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":229,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":441,"org.easymock.samples.ExampleTest.voteForRemoval":190,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":448,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":235,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":393,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":454,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":224,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":49,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":317,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":480,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":402,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":257,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":87,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":494,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":37,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":460,"org.easymock.tests2.CaptureTest.testCaptureFirst":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":401,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":258,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":326,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":147,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":159,"org.easymock.tests2.CaptureTest.testCapture2_2446744":210,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":237,"org.easymock.tests2.UsageTest.moreThanOneArgument":319,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":412,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":307,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":123,"org.easymock.tests.GenericTest.testBridgedEquals":337,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":524,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":521,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":141,"org.easymock.tests.UsageExpectAndReturnTest.longType":155,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":43,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":255,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":532,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":112,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":445,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":294,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":110,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":424,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":129,"org.easymock.tests.UsageCallCountTest.tooManyCalls":142,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Character":362,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":136,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":510,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":160,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":491,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":99,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":90,"org.easymock.tests.MockingTest.testNiceClassMocking":431,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":240,"org.easymock.tests.MockingTest.testClassMocking":427,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":531,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":135,"org.easymock.tests2.UsageConstraintsTest.testContains":284,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":214,"org.easymock.tests2.UsageConstraintsTest.testFind":276,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":52,"org.easymock.tests.MockTypeTest.fromEasyMockClass":390,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":53,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":328,"org.easymock.tests.UsageExpectAndReturnTest.object":162,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":225,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":490,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":263,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":118,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":342,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":26,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":525,"org.easymock.tests.UsageTest.exactCallCountByLastCall":176,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":127,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":400,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":335,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":380,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_String":365,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":339,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":168,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":114,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":144,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":465,"org.easymock.tests.MockClassControlTest.testHashCode":70,"org.easymock.tests2.EasyMockSupportTest.testVerify":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":504,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithChar":368,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":336,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":443,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":143,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":9,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":246,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":516,"org.easymock.tests.UsageVarargTest.varargCharAccepted":117,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":434,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":251,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":417,"org.easymock.tests2.UsageTest.openCallCountByLastCall":322,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":527,"org.easymock.tests.DefaultClassInstantiatorTest.object":151,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":266,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":442,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":24,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":10,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":505,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":101,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":88,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":485,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":464,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":69,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":227,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":100,"org.easymock.tests.CapturesMatcherTest.test":357,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":169,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":423,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":68,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":313,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":370,"org.easymock.tests2.UsageTest.resumeIfFailure":325,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":387,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":452,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":40,"org.easymock.tests2.StubTest.stubWithReturnValue":217,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":338,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":161,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":295,"org.easymock.tests2.SerializationTest.testAllMockedMethod":2,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":353,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":530,"org.easymock.samples.SupportTest.voteForRemovals":197,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":350,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":22,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":467,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":106,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":23,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":416,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":519,"org.easymock.tests.UsageExpectAndThrowTest.object":104,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":382,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":292,"org.easymock.tests2.DelegateToTest.testWrongClass":270,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":125,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":126,"org.easymock.samples.ConstructorCalledMockTest.testTax":184,"org.easymock.tests.UsageStrictMockTest.range":6,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":456,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":262,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":239,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":522,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":105,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":304,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":493,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":15,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":83,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":178,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":347,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":433,"org.easymock.tests2.CaptureTest.testCaptureNone":206,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":376,"org.easymock.tests.UsageUnorderedTest.message":8,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":11,"org.easymock.tests.UsageVerifyTest.twoReturns":4,"org.easymock.tests.UsageVarargTest.varargByteAccepted":122,"org.easymock.tests2.ThreadingTest.testThreadSafe":234,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":507,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":139,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":182,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":378,"org.easymock.tests2.CaptureTest.testCapture_2617107":200,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithString":374,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":386,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":414,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":35,"org.easymock.tests2.UsageConstraintsTest.any":282,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":80,"org.easymock.tests2.StubTest.stub":216,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":425,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":415,"org.easymock.tests.UsageExpectAndThrowTest.longType":97,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":39,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":438,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":79,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":253,"org.easymock.tests2.SerializationTest.testClass":0,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":299,"org.easymock.tests.LimitationsTest.mockNativeMethod":93,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":171,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":354,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":484,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":254,"org.easymock.tests2.NameTest.nameForMocksControl":233,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":486,"org.easymock.tests2.MockedExceptionTest.testMockedException":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":497,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":175,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":517,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":150,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":98,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":218,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":305,"org.easymock.tests.MockingTest.testNicePartialClassMocking":149,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":223,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":482,"org.easymock.tests2.CaptureTest.testCaptureLast":205,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":340,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":359,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":245,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":280,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":293,"org.easymock.tests.MockingTest.testTwoMocks":355,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":152,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":102,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":20,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":297,"org.easymock.samples.ExampleTest.removeNonExistingDocument":194,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":488,"org.easymock.tests.UsageStrictMockTest.differentMethods":7,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":77,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":466,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":436,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":377,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":236,"org.easymock.tests2.ConstraintsToStringTest.andToString":372,"org.easymock.tests2.MockBuilderTest.testCreateMockString":308,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":65,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":498,"org.easymock.tests.UsageExpectAndThrowTest.floatType":96,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":288,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":495,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":331,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":518,"org.easymock.tests.UsageVerifyTest.twoThrows":3,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":360,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":312,"org.easymock.samples.ExampleTest.voteAgainstRemoval":191,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":406,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":356,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":228,"org.easymock.tests.LimitationsTest.privateConstructor":420,"org.easymock.tests2.UsageConstraintsTest.testNotNull":296,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":92,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":212,"org.easymock.tests2.UsageTest.defaultResetToNice":324,"org.easymock.samples.ExampleTest.voteAgainstRemovals":188,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":407,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":167,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":483,"org.easymock.tests.UsageVarargTest.differentLength":119,"org.easymock.tests2.CallbackTest.callback":316,"org.easymock.tests2.UsageConstraintsTest.equals":462,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":351,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":363,"org.easymock.tests.UsageTest.openCallCountByLastCall":174,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":272,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":34,"org.easymock.tests.UsageCallCountTest.tooFewCalls":137,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":242,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":180,"org.easymock.tests.UsageThrowableTest.throwCheckedException":89,"org.easymock.tests.MockingTest.testStrictClassMocking":426,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":348,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":128,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":244,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":487,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":241,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":82,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":243,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":333,"org.easymock.tests.ObjectMethodsTest.testHashCode":25,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":344,"org.easymock.tests2.NameTest.nameForNiceMock":232,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":238,"org.easymock.tests2.DependencyTest.testInterfaceMocking":314,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":343,"org.easymock.samples.ExampleTest.addDocument":192,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":508,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":512,"org.easymock.tests2.DelegateToTest.testStubDelegate":269,"org.easymock.tests2.AnswerTest.stubAnswer":332,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":55,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":479,"org.easymock.tests.UsageVarargTest.varargLongAccepted":121,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":404,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":170,"org.easymock.tests.UsageExpectAndReturnTest.floatType":154,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":329,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":185,"org.easymock.tests2.ConstraintsToStringTest.orToString":366,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":472,"org.easymock.tests.UsageThrowableTest.noUpperLimit":86,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":290,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":361,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":273,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":451,"org.easymock.tests2.SerializationTest.test":1,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":203,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":435,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":153,"org.easymock.tests2.UsageConstraintsTest.testSame":278,"org.easymock.samples.SupportTest.addDocument":196,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":458,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":78,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":499,"org.easymock.tests.GenericTest.testPackageScope":63,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":384,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":399,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":471,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":429,"org.easymock.tests2.NameTest.nameForMock":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":164,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":481,"org.easymock.tests2.UsageStrictMockTest.differentMethods":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":447,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":156,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":108,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":334,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":62,"org.easymock.tests2.MockedExceptionTest.testRealException":215,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":394,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":457,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":409,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":364,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":529,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":408,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":252,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":33,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":84,"org.easymock.tests2.NameTest.nameForStrictMock":231,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":478,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":528,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":327,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":222,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":455,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":437,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":291,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":301,"org.easymock.tests2.UsageStrictMockTest.range":17,"org.easymock.tests2.UsageConstraintsTest.lessThan":298,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":468,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":403,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":503,"org.easymock.tests2.CaptureTest.testCaptureRightOne":208,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":375,"org.easymock.tests2.UsageConstraintsTest.testOr":279,"org.easymock.tests.UsageRangeTest.combination":59,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":219,"org.easymock.tests.UsageTest.wrongArguments":14,"org.easymock.tests2.MockBuilderTest.testWithConstructor":475,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":500,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":66,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":157,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":396,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":165,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":439,"org.easymock.tests.UsageVarargTest.varargShortAccepted":120,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":140,"org.easymock.tests2.UsageConstraintsTest.cmpTo":283,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":520,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":398,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":323,"org.easymock.tests2.CaptureTest.testCaptureFromStub":209,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":74,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":476,"org.easymock.tests.UsageTest.unexpectedCallWithArray":13,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":138,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":352,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":166,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":56,"org.easymock.tests2.UsageConstraintsTest.constraints":274,"org.easymock.samples.ExampleTest.addAndChangeDocument":195,"org.easymock.tests2.ConstraintsToStringTest.notToString":367,"org.easymock.tests2.ConstraintsToStringTest.containsToString":534,"org.easymock.tests.UsageStrictMockTest.testVerify":58,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":181,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":54,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":44,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":204,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":533,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":29,"org.easymock.tests.LimitationsTest.abstractClass":419,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":158,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":146,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":30,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":535,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":115,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":261}}]

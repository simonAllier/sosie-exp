[{"transplant":{"position":"org.easymock.internal.matchers.Any:40","sourceCode":"java.lang.StringBuffer.append(\"<any>\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:54","sourceCode":"java.lang.StringBuffer.append(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:310","sourceCode":"this.org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:276","sourceCode":"org.easymock.internal.IMocksControlState.andAnswer(org.easymock.IAnswer<?>)","type":"CtInvocationImpl"},"failures":[27,28,29,30,31],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"answer"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","failures":[32,33,34,35],"status":-1,"binaryOperator":"int < (java.lang.String[].int)","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[7,36,37,38,10,39,12,16,18,19,40,41,42,43,26],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:223","failures":[44,45,46,47,48,49],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:83","sourceCode":"throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())))","type":"CtThrowImpl"},"failures":[50],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Find:41","failures":[51],"status":-1,"binaryOperator":"((\"find(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:116","sourceCode":"throw new java.lang.IllegalArgumentException(((((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String)) + \"\\\"\"))","type":"CtThrowImpl"},"failures":[52],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:37","failures":[53,54,27,55,56,57,6,58,7,8,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,28,32,33,76,77,78,79,80,81,82,83,84,85,9,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,10,121,122,123,124,125,126,127,11,128,12,13,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,17,18,19,199,200,201,202,20,203,204,205,206,207,208,209,210,211,212,213,214,215,216],"status":-1,"binaryOperator":"(this.java.lang.Object) == null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[217,218,219,220,221,222,223],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[224,225],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[226,217,227,228,229,230,231,232,233,234,235,236,237,238,239,240,223,241,242,243],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:218","sourceCode":"org.easymock.EasyMock.createControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[32,33,34,35],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:48","failures":[244],"status":-1,"binaryOperator":"(\"\" + (org.easymock.internal.Invocation.getArguments().int))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[],"status":0,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:194","sourceCode":"try {\n    java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:196","sourceCode":"java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"args":"args","mockClass":"mockClass","cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:142","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:51","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.Capture:67","sourceCode":"return !(java.util.List<T>.isEmpty())","type":"CtReturnImpl"},"failures":[245,246,80,247,248,83],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:602","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:188","sourceCode":"try {\n    java.lang.Long = ((java.lang.Long)(java.lang.reflect.Method.invoke(null, new java.lang.Object[]{ java.lang.Class<?> })));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" should have been accessible\"));\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.InternalError((((\"ObjectStreamClass.\" + java.lang.String) + \" failled to be called: \") + (java.lang.reflect.InvocationTargetException.getMessage())));\n}","type":"CtTryImpl"},"failures":[10],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[249,250,251,252],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:946","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:44","sourceCode":"return int","type":"CtReturnImpl"},"failures":[6,7,8,9,10,11,12,13,253,254,255,256,17,18,19,20],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:185","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[7,8,72,73,74,28,29,30,76,79,257,258,245,80,81,259,83,9,87,88,89,90,95,260,261,262,263,97,264,98,265,266,251,267,268,269,270,252,117,10,12,13,271,135,136,139,141,142,143,144,146,147,148,149,151,152,153,154,156,163,164,167,169,170,171,172,174,175,176,177,179,180,181,182,272,273,274,275,17,201,202,20,203,204],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.ConstructorArgs:50","sourceCode":"if ((java.lang.Object[].int) != (java.lang.Class<?>[].int)) {\n    throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:54","sourceCode":"for (int int = 0 ; int < (java.lang.Object[].int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>[][int];\n    final java.lang.Object java.lang.Object = java.lang.Object[][int];\n    if (java.lang.Class<?>.isPrimitive()) {\n        if (java.lang.Object == null) {\n            throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n        } \n        try {\n            final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n            final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n            if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n                continue;\n            } \n        } catch (final java.lang.Exception java.lang.Exception) {\n            throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n        }\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n    if (java.lang.Object == null) {\n        continue;\n    } \n    if (!(java.lang.Class<?>.isAssignableFrom(java.lang.Object.getClass()))) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    } \n}","type":"CtForImpl"},"failures":[276,227,230,231,232,233,234,235],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[32,33,34,35],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:317","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[277,93,278],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[27,55,279,28,29,30,112,208],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:2024","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset();\n}","type":"CtForEachImpl"},"failures":[6,7,8,280,281,39,11,12,13,282],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:224","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[283],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:509","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType.org.easymock.MockType)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:519","sourceCode":"return org.easymock.EasyMockSupport.createControl(org.easymock.MockType.org.easymock.MockType)","type":"CtReturnImpl"},"failures":[54,64,70,71,49,284,285,242,243,119,286],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:112","sourceCode":"if (!org.easymock.Capture<T>.(hasCaptured())) {\n    java.util.List<T>.add(T);\n} ","type":"CtIfImpl"},"failures":[83],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:932","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Float>(float))","type":"CtInvocationImpl"},"failures":[287],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":96,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":202,"org.easymock.tests2.UsageTest.argumentsOrdered":38,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":70,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":214,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":278,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":87,"org.easymock.tests2.StubTest.stubWithReturnValue":77,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":223,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":120,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":172,"org.easymock.tests2.SerializationTest.testAllMockedMethod":34,"org.easymock.tests2.DelegateToTest.testReturnException":92,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":212,"org.easymock.samples.SupportTest.voteForRemovals":119,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":45,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":147,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":35,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":49,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":135,"org.easymock.tests.UsageExpectAndThrowTest.object":145,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":253,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":287,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":54,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":218,"org.easymock.tests2.DelegateToTest.testWrongClass":94,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":206,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":207,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":250,"org.easymock.tests2.UsageTest.wrongArguments":36,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":130,"org.easymock.samples.ConstructorCalledMockTest.testTax":242,"org.easymock.tests.UsageStrictMockTest.range":12,"org.easymock.samples.ExampleTest.answerVsDelegate":112,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":231,"org.easymock.tests2.UsageConstraintsTest.testNull":97,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":280,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":146,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":69,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":105,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":134,"org.easymock.tests.UsageTest.moreThanOneArgument":20,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":42,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":154,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":123,"org.easymock.tests2.CaptureTest.testCaptureNone":81,"org.easymock.tests.UsageUnorderedTest.message":10,"org.easymock.tests.UsageVerifyTest.twoReturns":19,"org.easymock.tests.UsageVarargTest.varargByteAccepted":196,"org.easymock.tests2.ThreadingTest.testThreadSafe":72,"org.easymock.tests.UsageTest.argumentsOrdered":43,"org.easymock.tests.UsageVarargTest.varargIntAccepted":191,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":109,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithObject":5,"org.easymock.tests2.CaptureTest.testCapture_2617107":257,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":184,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":222,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":46,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":283,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":133,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":47,"org.easymock.tests2.StubTest.stub":76,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":188,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":213,"org.easymock.tests.UsageExpectAndThrowTest.longType":138,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":58,"org.easymock.tests2.SerializationTest.testClass":32,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":107,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":60,"org.easymock.tests2.AnswerTest.answer":27,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":182,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":244,"org.easymock.tests2.CaptureTest.testAnd":78,"org.easymock.tests2.UsageTest.strictResetToDefault":85,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":240,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":59,"org.easymock.tests2.EasyMockPropertiesTest.testSetProperty":52,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":122,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":274,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":65,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":204,"org.easymock.tests2.DelegateToTest.testDelegate":95,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":139,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":106,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":150,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":281,"org.easymock.tests2.CaptureTest.testCaptureLast":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":215,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":22,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":237,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":99,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":21,"org.easymock.tests2.CaptureTest.testCapture1_2446744":258,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":238,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":163,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":148,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":143,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":37,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":270,"org.easymock.tests.UsageThrowableTest.throwError":155,"org.easymock.tests.UsageStrictMockTest.differentMethods":13,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":74,"org.easymock.tests2.ConstraintsToStringTest.andToString":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":125,"org.easymock.tests.UsageExpectAndThrowTest.floatType":137,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":55,"org.easymock.tests.UsageVerifyTest.twoThrows":18,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":23,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":228,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":284,"org.easymock.samples.PartialClassMockTest.testGetArea":286,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":185,"org.easymock.samples.ExampleTest.voteAgainstRemoval":114,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":103,"org.easymock.tests2.UsageTest.niceToStrict":86,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":229,"org.easymock.tests2.UsageConstraintsTest.testNotNull":100,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":48,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":162,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":235,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":104,"org.easymock.samples.ExampleTest.voteAgainstRemovals":111,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":178,"org.easymock.tests2.CallbackTest.callback":28,"org.easymock.tests.UsageTest.openCallCountByLastCall":203,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":1,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":144,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":66,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":260,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":132,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":232,"org.easymock.tests.UsageOverloadedMethodTest.overloading":200,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":251,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":210,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":199,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":174,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":266,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":247,"org.easymock.tests.UsageThrowableTest.throwCheckedException":159,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":126,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":14,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":152,"org.easymock.tests2.CaptureTest.testCaptureAll":79,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":236,"org.easymock.tests2.UsageConstraintsTest.testMatches":267,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":279,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":124,"org.easymock.tests2.CompareToTest.testGreateOrEqual":249,"org.easymock.samples.ExampleTest.voteForRemovals":116,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":221,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":75,"org.easymock.tests.UsageVarargTest.allKinds":198,"org.easymock.tests2.DependencyTest.testInterfaceMocking":53,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":17,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":220,"org.easymock.samples.BasicClassMockTest.testPrintContent":110,"org.easymock.samples.ExampleTest.addDocument":115,"org.easymock.tests2.DelegateToTest.testStubDelegate":93,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":161,"org.easymock.tests2.AnswerTest.stubAnswer":56,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":216,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":11,"org.easymock.tests2.UsageConstraintsTest.greaterThan":268,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":273,"org.easymock.tests.UsageVarargTest.varargLongAccepted":195,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":129,"org.easymock.samples.ExampleTest.voteForRemoval":113,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":73,"org.easymock.tests.UsageExpectAndReturnTest.floatType":165,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":181,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":226,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":44,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":243,"org.easymock.tests2.ConstraintsToStringTest.orToString":0,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":269,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":24,"org.easymock.tests.UsageThrowableTest.noUpperLimit":156,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":261,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":84,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":245,"org.easymock.tests2.SerializationTest.test":33,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":224,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":63,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":157,"org.easymock.tests2.UsageConstraintsTest.testSame":264,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":164,"org.easymock.samples.SupportTest.addDocument":118,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":211,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":277,"org.easymock.tests2.CaptureTest.testCaptureFirst":83,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":64,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":91,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":26,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":170,"org.easymock.tests2.CaptureTest.testCapture2_2446744":259,"org.easymock.tests2.UsageTest.moreThanOneArgument":9,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":197,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":233,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":230,"org.easymock.tests.UsageExpectAndReturnTest.longType":166,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":61,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":153,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":175,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":241,"org.easymock.tests2.UsageStrictMockTest.differentMethods":8,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":151,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":121,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":167,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":149,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":275,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":271,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":171,"org.easymock.tests.ArgumentToStringTest.testArgumentToString":15,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":6,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":31,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":140,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":131,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":160,"org.easymock.tests2.UsageConstraintsTest.testContains":265,"org.easymock.tests2.UsageConstraintsTest.testFind":263,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":201,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":227,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":29,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":102,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":30,"org.easymock.tests.UsageExpectAndReturnTest.object":173,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":254,"org.easymock.tests.ErrorMessageTest.testGetters":255,"org.easymock.tests2.UsageStrictMockTest.range":7,"org.easymock.tests2.UsageConstraintsTest.lessThan":252,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":68,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":219,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":193,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":234,"org.easymock.tests.UsageTest.exactCallCountByLastCall":205,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":183,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":62,"org.easymock.tests2.CaptureTest.testCaptureRightOne":82,"org.easymock.tests2.ConstraintsToStringTest.findToString":51,"org.easymock.tests2.UsageConstraintsTest.testOr":98,"org.easymock.tests.UsageRangeTest.combination":272,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":217,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":101,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":179,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":189,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":209,"org.easymock.tests.UsageTest.wrongArguments":41,"org.easymock.tests2.MockBuilderTest.testWithConstructor":239,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":168,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":176,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":225,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":208,"org.easymock.tests.UsageVarargTest.varargShortAccepted":194,"org.easymock.tests.UsageVarargTest.varargCharAccepted":192,"org.easymock.tests2.CaptureTest.testCaptureMultiple":50,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":57,"org.easymock.tests2.UsageTest.openCallCountByLastCall":88,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":89,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":276,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":71,"org.easymock.tests.UsageTest.unexpectedCallWithArray":40,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":16,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":142,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":39,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":158,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":177,"org.easymock.tests2.CaptureTest.testCapture":248,"org.easymock.tests2.UsageConstraintsTest.constraints":262,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":128,"org.easymock.samples.ExampleTest.addAndChangeDocument":117,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":141,"org.easymock.tests2.ConstraintsToStringTest.notToString":2,"org.easymock.tests.UsageStrictMockTest.testVerify":282,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":180,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":108,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":285,"org.easymock.tests2.ConstraintsToStringTest.sameToStringWithObject":3,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":127,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":246,"org.easymock.tests2.UsageTest.resumeIfFailure":90,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":186,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":169,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":25,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":187,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":256,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":67,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":190}}]

[{"transplant":{"position":"org.easymock.internal.ArgumentToString:36","sourceCode":"if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < (java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:34","sourceCode":"if (java.lang.Object == null) {\n    java.lang.StringBuffer.append(\"null\");\n} else if (java.lang.Object instanceof java.lang.String) {\n    java.lang.StringBuffer.append(\"\\\"\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\\"\");\n} else if (java.lang.Object instanceof java.lang.Character) {\n    java.lang.StringBuffer.append(\"\\'\");\n    java.lang.StringBuffer.append(java.lang.Object);\n    java.lang.StringBuffer.append(\"\\'\");\n} else if (java.lang.Object.getClass().isArray()) {\n    java.lang.StringBuffer.append(\"[\");\n    for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n        if (int > 0) {\n            java.lang.StringBuffer.append(\", \");\n        } \n        org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n    }\n    java.lang.StringBuffer.append(\"]\");\n} else {\n    java.lang.StringBuffer.append(java.lang.Object);\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","value":"value","this":"this"}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:41","sourceCode":"return java.util.Arrays.equals(((char[])(java.lang.Object)), ((char[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:53","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[5,6,7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"expected":"actual","actual":"expected","this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:50","sourceCode":"return java.lang.Object","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"mock"}},{"transplant":{"position":"org.easymock.EasyMock:1408","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:53","sourceCode":"java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount())","type":"CtInvocationImpl"},"failures":[8,9],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.ConstructorArgs:64","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n    final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n    if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n        continue;\n    } \n} catch (final java.lang.Exception java.lang.Exception) {\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:59","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    if (java.lang.Object == null) {\n        throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n    } \n    try {\n        final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Object.getClass().getDeclaredField(\"TYPE\");\n        final java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(java.lang.reflect.Field.get(null)));\n        if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n            continue;\n        } \n    } catch (final java.lang.Exception java.lang.Exception) {\n        throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n    }\n    throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object);\n} ","type":"CtIfImpl"},"failures":[10,11,12,13,14],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg","this":"this","paramType":"paramType"}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:94","sourceCode":"java.util.List<org.easymock.IArgumentMatcher>.addAll(java.util.Stack<org.easymock.IArgumentMatcher>.subList(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) - int), java.util.Stack<org.easymock.IArgumentMatcher>.size()))","type":"CtInvocationImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[27,28],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:186","sourceCode":"this.org.easymock.internal.Result = null","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:120","sourceCode":"org.easymock.internal.Result = org.easymock.internal.Result.org.easymock.internal.Result.createAnswerResult(org.easymock.IAnswer<?>)","type":"CtAssignmentImpl"},"failures":[29,30,31,32,33,34,35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"lastResult":"lastResult"}},{"position":"org.easymock.internal.EasyMockProperties:116","failures":[],"status":0,"binaryOperator":"(((\"Invalid key (\" + java.lang.String) + \"), an easymock property starts with \\\"\") + (org.easymock.internal.EasyMockProperties.java.lang.String))","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[37],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[38,39,40,41,42,43,44,45,46,9,7,47,48,49],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:47","failures":[1,2,50,3,43,7],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2170","sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[51,52,53],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReplayState:73","sourceCode":"this.org.easymock.internal.IMocksBehavior.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:211","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.replay();\n    org.easymock.internal.IMocksControlState = new org.easymock.internal.ReplayState(org.easymock.internal.IMocksBehavior);\n    org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[54,29,55,56,57,58,59,60,61,62,63,64,65,66,10,10,11,11,67,68,69,70,71,72,73,74,75,76,77,78,79,30,31,80,81,15,16,82,17,18,19,83,84,85,86,87,5,88,89,0,90,91,21,92,93,94,95,22,23,96,97,98,12,99,100,101,102,103,32,33,104,34,105,106,107,108,109,110,111,112,113,114,115,116,24,117,25,118,119,120,121,122,123,124,26,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,35,146,147,148,149,38,150,151,152,153,154,39,40,155,156,157,158,159,160,161,162,163,164,165,166,167,41,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,6,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,43,44,285,286,45,46,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,9,302,303,304,305,306,307,308,7,309,310,47,311,312,313,314,48,49,315,316,317,318],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"behavior":"behavior"}},{"position":"org.easymock.Capture:82","failures":[24,25,118,119,120,121,122,124,319,26,125,127],"status":-1,"binaryOperator":"(java.util.List<T>.size()) > 1","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[1,2,50,3,43,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[76,77,78,79,132,186,187,188,189,190,191,193,320,321,322,323,298,324],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1013","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:177","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:147","sourceCode":"boolean = true","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"checkOrder":"lastInvocationUsed","value":"lastInvocationUsed"}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:66","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[62,63,64,10,10,11,11,78,12,105,106,325,107,108,109,110,326,111,112,128,130,157,158,159,160,162,163,170,171,173,174,175,327,176,177,178,179,180,328,182,183,184,185,329,214,215,216,217,218,330,224,331,273,332,333,334,335,336,337,338,288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"position":"org.easymock.EasyMock:1445","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:161","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub answer\")","type":"CtInvocationImpl"},"failures":[339],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2067","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToStrict()","type":"CtInvocationImpl"},"failures":[150],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1318","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[16],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1397","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:171","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:90","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType).createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[340,341,342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Compare:53","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Results:81","sourceCode":"return org.easymock.internal.Results.getMainInterval().contains(org.easymock.internal.Results.getCallCount())","type":"CtReturnImpl"},"failures":[54,29,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,78,30,31,80,81,15,16,82,17,18,19,83,84,85,86,87,5,88,89,0,90,91,21,92,93,95,22,23,96,97,98,12,32,33,104,34,107,109,110,113,114,116,24,117,25,118,120,121,122,123,124,26,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,35,146,148,150,151,155,157,158,159,160,161,162,163,165,167,41,168,170,172,173,174,175,176,179,181,182,183,184,185,190,192,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,256,257,258,259,260,261,262,263,264,6,266,267,288,291,293,294,296,297,300,302,303,304,305,308,310,47,311,314,48,49,315,316,317,318],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1444","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[148,343],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[74,177,328],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[62,63,64,10,10,11,11,78,12,344,345,346,105,347,106,325,107,108,109,110,326,111,348,112,128,130,157,158,159,160,162,163,170,171,173,174,175,327,176,177,178,179,180,182,183,184,185,329,214,215,216,217,218,330,224,273,336,337,288],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:63","failures":[],"status":0,"binaryOperator":"(\"Failed to instantiate \" + (java.lang.Class<?>.getName()))","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:89","failures":[15,0,106,326,111,112,134,138,139,142,35,147,38,150,151,39,40,155,156,164,167,41,168,171,178,180,349,350,42,283,43,44,45,46,287,351,352,295,9,302,307,7,310,47,311,48,49,353,354],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:334","sourceCode":"org.easymock.internal.IMocksControlState.times(new org.easymock.internal.Range(int))","type":"CtInvocationImpl"},"failures":[67,68,69,80,88,90,96,116,117,122,123,127,35,149,194,200,206,210,212,225,231,237,241,243,284,9,318,355],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:44","failures":[54,29,55,56,57,58,356,59,60,61,62,63,64,65,66,10,11,67,68,69,70,71,357,72,73,74,75,76,77,78,79,30,358,31,80,81,15,16,359,82,17,18,19,83,84,20,85,86,87,5,88,89,0,90,91,21,92,93,94,95,22,23,96,360,361,97,98,12,362,363,99,100,101,102,103,32,364,365,33,104,34,105,366,106,325,367,368,107,108,109,369,110,370,371,326,111,372,112,373,113,114,115,374,116,24,117,25,118,119,120,121,122,123,124,26,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,35,375,376,377,378,379,146,340,380,381,382,383,384,147,148,149,38,150,151,152,153,154,39,40,155,156,157,158,159,160,385,161,162,163,386,164,165,166,167,41,168,169,170,171,172,173,174,175,327,387,176,388,343,177,178,179,180,389,328,390,391,392,393,394,181,341,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,182,410,411,183,412,413,414,415,416,417,418,419,420,184,421,422,423,424,425,185,426,427,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,428,429,329,214,215,430,216,431,432,433,37,217,218,330,434,219,220,221,222,223,435,436,224,437,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,438,439,440,441,442,443,250,444,251,252,445,253,446,447,254,320,255,256,257,258,448,259,260,349,261,262,263,264,6,265,266,267,268,269,270,271,272,331,273,332,333,334,335,449,450,451,452,453,274,275,276,277,278,454,321,322,323,336,455,456,457,342,337,458,459,279,280,281,282,283,284,43,44,285,286,45,46,287,460,461,462,463,464,338,465,466,27,467,468,469,28,470,471,288,289,290,291,292,293,294,351,352,295,296,297,298,299,300,472,301,473,9,474,475,476,477,478,479,302,303,304,305,36,480,481,482,483,306,484,485,307,308,7,309,310,47,311,312,313,314,48,49,315,316,486,317,318,354,487,488,489,490,491,492,339,324,493,494,495,496,355,497,498,499,500,501,502,503,504,505,506,507],"status":-1,"binaryOperator":"(int >= 1)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:184","inlineConstant":"int int = 0","failures":[362,508,509,510,511,512,369],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:56","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"equals\", java.lang.Object.java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"equalsMethod","equalsMethod":"equalsMethod"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:50","sourceCode":"org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getDeclaredMethod(java.lang.Object.java.lang.Object, \"finalize\", ((java.lang.Class[])(null)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[60,61,378,379,146,340,380,382,383,393,394,181,341,395,397,398],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:63","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Long.java.lang.Class<java.lang.Long>, java.lang.Long.java.lang.Long)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:153","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":16,"org.easymock.tests2.UsageTest.argumentsOrdered":40,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":283,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":143,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":340,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":495,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":151,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":60,"org.easymock.tests2.DelegateToTest.testReturnException":113,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":187,"org.easymock.tests.MockingTest.testPartialClassMocking":214,"org.easymock.tests.MockClassControlTest.testToString":332,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":357,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":503,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":328,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":415,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":183,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":194,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":508,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":84,"org.easymock.tests2.UsageTest.wrongArguments":38,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":296,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":399,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":281,"org.easymock.samples.ExampleTest.answerVsDelegate":29,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":337,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":432,"org.easymock.tests2.UsageConstraintsTest.testNull":17,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":173,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":450,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":142,"org.easymock.tests2.CaptureTest.testPrimitive":118,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":300,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":213,"org.easymock.tests.UsageTest.moreThanOneArgument":284,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":172,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":247,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":438,"org.easymock.tests.UsageTest.argumentsOrdered":46,"org.easymock.tests.UsageVarargTest.varargIntAccepted":258,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":219,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":512,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":105,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":402,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":383,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":108,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":489,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":223,"org.easymock.tests.ReplayStateInvalidUsageTest.times":447,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":181,"org.easymock.tests2.DependencyTest.testClassMocking":360,"org.easymock.tests2.AnswerTest.answer":32,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":20,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":501,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":103,"org.easymock.tests.MockTypeTest.fromEasyMockControlWithName":456,"org.easymock.tests2.CaptureTest.testAnd":24,"org.easymock.tests2.UsageTest.strictResetToDefault":148,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":177,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":367,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":246,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":137,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":304,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":442,"org.easymock.tests2.DelegateToTest.testDelegate":116,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":209,"org.easymock.tests.LimitationsTest.mockFinalMethod":437,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":190,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":278,"org.easymock.tests2.DependencyTest.testClassMockingSupport":361,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":472,"org.easymock.tests2.CaptureTest.testCapture1_2446744":119,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":387,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":207,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":101,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":444,"org.easymock.tests.UsageThrowableTest.throwError":265,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":342,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":384,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":354,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":249,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":13,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":427,"org.easymock.samples.PartialClassMockTest.testGetArea":64,"org.easymock.tests.MockingTest.testInterfaceMocking":430,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":251,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":220,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":452,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":416,"org.easymock.tests2.UsageTest.niceToStrict":150,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":195,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":338,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":487,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":107,"org.easymock.tests2.MockBuilderTest.testCreateMock":326,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":423,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":396,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":1,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":203,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":138,"org.easymock.tests.MockTypeTest.fromEasyMockSupportControlWithName":455,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":476,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":289,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":279,"org.easymock.tests.UsageOverloadedMethodTest.overloading":317,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":425,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":420,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":482,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":88,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":486,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":236,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":5,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":124,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":448,"org.easymock.tests.MockClassControlTest.testEquals":449,"org.easymock.tests2.EasyMockSupportClassTest.testAll":182,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":218,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":211,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":344,"org.easymock.tests2.CaptureTest.testCaptureAll":117,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":102,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":276,"org.easymock.tests.MockNameTest.defaultName":454,"org.easymock.tests2.UsageConstraintsTest.testMatches":89,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":443,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":248,"org.easymock.samples.ExampleTest.voteForRemovals":58,"org.easymock.tests.UsageVarargTest.allKinds":6,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":314,"org.easymock.samples.BasicClassMockTest.testPrintContent":63,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":277,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":271,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":164,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":191,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":374,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":380,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":470,"org.easymock.tests2.UsageConstraintsTest.greaterThan":90,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":410,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":303,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":180,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":471,"org.easymock.samples.ExampleTest.voteForRemoval":55,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":389,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":68,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":458,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":403,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":327,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":147,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":288,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":371,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":324,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":135,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":408,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":186,"org.easymock.tests2.CaptureTest.testCaptureFirst":127,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":373,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":339,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":136,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":156,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":484,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":232,"org.easymock.tests2.UsageTest.moreThanOneArgument":149,"org.easymock.tests2.CaptureTest.testCapture2_2446744":126,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":70,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":502,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":111,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":264,"org.easymock.tests.GenericTest.testBridgedEquals":434,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":352,"org.easymock.tests.UsageExpectAndReturnTest.longType":228,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":133,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":274,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":212,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":348,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":485,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":94,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":210,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":245,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":322,"org.easymock.tests.UsageCallCountTest.tooManyCalls":295,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":291,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":424,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":233,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":398,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":199,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":270,"org.easymock.tests.MockingTest.testNiceClassMocking":433,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":158,"org.easymock.tests.MockingTest.testClassMocking":429,"org.easymock.tests2.UsageConstraintsTest.testContains":87,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":290,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":347,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":78,"org.easymock.tests2.UsageConstraintsTest.testFind":82,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":318,"org.easymock.tests.MockTypeTest.fromEasyMockClass":457,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":31,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":307,"org.easymock.tests.UsageExpectAndReturnTest.object":235,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":176,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":397,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":141,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":509,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":260,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":463,"org.easymock.tests.UsageTest.exactCallCountByLastCall":287,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":192,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":492,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":477,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":439,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":362,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":241,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":256,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":481,"org.easymock.tests.MockClassControlTest.testHashCode":335,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":376,"org.easymock.tests2.EasyMockSupportTest.testVerify":145,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":418,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":440,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":475,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":36,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":100,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString_null":350,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":99,"org.easymock.tests.UsageVarargTest.varargCharAccepted":259,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":465,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":165,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":507,"org.easymock.tests2.UsageTest.openCallCountByLastCall":152,"org.easymock.tests.DefaultClassInstantiatorTest.object":466,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":144,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":474,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":461,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":42,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":419,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":201,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":268,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":393,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":375,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":178,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":334,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":200,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":242,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":185,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":333,"org.easymock.tests2.UsageTest.resumeIfFailure":155,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":336,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":401,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":189,"org.easymock.tests2.StubTest.stubWithReturnValue":132,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":369,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":95,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":234,"org.easymock.tests2.SerializationTest.testAllMockedMethod":130,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":500,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":2,"org.easymock.samples.SupportTest.voteForRemovals":66,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":37,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":378,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":206,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":506,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":364,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":479,"org.easymock.tests.UsageExpectAndThrowTest.object":204,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":92,"org.easymock.tests2.DelegateToTest.testWrongClass":115,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":315,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":316,"org.easymock.tests.UsageStrictMockTest.range":47,"org.easymock.samples.ConstructorCalledMockTest.testTax":10,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":405,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":140,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":157,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":205,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":109,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":407,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":45,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":320,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":280,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":50,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":453,"org.easymock.tests2.CaptureTest.testCaptureNone":123,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":51,"org.easymock.tests.UsageUnorderedTest.message":9,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfNoToStringMethod":353,"org.easymock.tests.UsageVerifyTest.twoReturns":49,"org.easymock.tests.UsageVarargTest.varargByteAccepted":263,"org.easymock.tests2.ThreadingTest.testThreadSafe":67,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":421,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":294,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":464,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":62,"org.easymock.tests2.CaptureTest.testCapture_2617107":25,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":504,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":299,"org.easymock.tests2.UsageConstraintsTest.any":85,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":446,"org.easymock.tests2.StubTest.stub":131,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":323,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":505,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":188,"org.easymock.tests.UsageExpectAndThrowTest.longType":197,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":469,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":253,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":167,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":146,"org.easymock.tests2.SerializationTest.testClass":128,"org.easymock.tests.LimitationsTest.mockNativeMethod":224,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":244,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":330,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":392,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":346,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":169,"org.easymock.tests2.NameTest.nameForMocksControl":75,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":394,"org.easymock.tests2.MockedExceptionTest.testMockedException":77,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":411,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":286,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":198,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":216,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":358,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":170,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":110,"org.easymock.tests.MockingTest.testNicePartialClassMocking":215,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":175,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":390,"org.easymock.tests2.CaptureTest.testCaptureLast":122,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":301,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":163,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":83,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":93,"org.easymock.tests.MockingTest.testTwoMocks":329,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":386,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":225,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":202,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":39,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":23,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":53,"org.easymock.samples.ExampleTest.removeNonExistingDocument":356,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":395,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":252,"org.easymock.tests.UsageStrictMockTest.differentMethods":311,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":377,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":467,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":52,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":69,"org.easymock.tests2.MockBuilderTest.testCreateMockString":112,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":331,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":412,"org.easymock.tests.UsageExpectAndThrowTest.floatType":196,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":0,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":409,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":33,"org.easymock.tests.UsageVerifyTest.twoThrows":48,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":363,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":480,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":184,"org.easymock.samples.ExampleTest.voteAgainstRemoval":56,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":496,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":451,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":179,"org.easymock.tests.LimitationsTest.privateConstructor":436,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":14,"org.easymock.tests2.UsageConstraintsTest.testNotNull":22,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":76,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":272,"org.easymock.tests2.UsageTest.defaultResetToNice":154,"org.easymock.samples.ExampleTest.voteAgainstRemovals":54,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":240,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":355,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":391,"org.easymock.tests.UsageVarargTest.differentLength":349,"org.easymock.tests2.CallbackTest.callback":35,"org.easymock.tests2.UsageConstraintsTest.equals":359,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":388,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_null":4,"org.easymock.tests.UsageTest.openCallCountByLastCall":285,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":80,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":298,"org.easymock.tests.UsageCallCountTest.tooFewCalls":292,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":160,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":282,"org.easymock.tests.UsageThrowableTest.throwCheckedException":269,"org.easymock.tests.MockingTest.testStrictClassMocking":428,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":3,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":162,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":193,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":159,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":341,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":254,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":161,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":34,"org.easymock.tests.ObjectMethodsTest.testHashCode":462,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":511,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":71,"org.easymock.tests2.NameTest.nameForNiceMock":74,"org.easymock.tests2.DependencyTest.testInterfaceMocking":97,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":510,"org.easymock.samples.ExampleTest.addDocument":57,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":422,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":426,"org.easymock.tests2.DelegateToTest.testStubDelegate":114,"org.easymock.tests2.AnswerTest.stubAnswer":104,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":309,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":370,"org.easymock.tests.UsageVarargTest.varargLongAccepted":262,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":312,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":494,"org.easymock.tests.UsageExpectAndReturnTest.floatType":227,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":243,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":12,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":11,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":483,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":91,"org.easymock.tests.UsageThrowableTest.noUpperLimit":266,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":382,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":81,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":400,"org.easymock.tests2.SerializationTest.test":129,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":120,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":27,"org.easymock.tests2.UsageConstraintsTest.testSame":18,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":226,"org.easymock.samples.SupportTest.addDocument":65,"org.easymock.tests2.MocksControlTest.testCreateMocksControlFromOldMockType":385,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":445,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":413,"org.easymock.tests.GenericTest.testPackageScope":217,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":441,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":491,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":381,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":431,"org.easymock.tests2.NameTest.nameForMock":72,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":237,"org.easymock.tests2.UsageStrictMockTest.differentMethods":168,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":372,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":343,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":229,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":208,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":460,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":305,"org.easymock.tests2.MockedExceptionTest.testRealException":79,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":459,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":498,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":406,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":497,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":166,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":255,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":297,"org.easymock.tests2.NameTest.nameForStrictMock":73,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":368,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":30,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":174,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":404,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":468,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":8,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":21,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":106,"org.easymock.tests2.UsageStrictMockTest.range":41,"org.easymock.tests2.UsageConstraintsTest.lessThan":96,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":379,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":493,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":417,"org.easymock.tests2.CaptureTest.testCaptureRightOne":26,"org.easymock.tests2.UsageConstraintsTest.testOr":19,"org.easymock.tests.UsageRangeTest.combination":302,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":171,"org.easymock.tests.UsageTest.wrongArguments":44,"org.easymock.tests2.MockBuilderTest.testWithConstructor":366,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":414,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":273,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":230,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":488,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":238,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":28,"org.easymock.tests.UsageVarargTest.varargShortAccepted":261,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":351,"org.easymock.tests2.UsageConstraintsTest.cmpTo":86,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":365,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":490,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":153,"org.easymock.tests2.CaptureTest.testCaptureFromStub":125,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":250,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":325,"org.easymock.tests.UsageTest.unexpectedCallWithArray":43,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":293,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":239,"org.easymock.tests2.CaptureTest.testCapture":319,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":310,"org.easymock.samples.ExampleTest.addAndChangeDocument":59,"org.easymock.tests.UsageStrictMockTest.testVerify":313,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":61,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":308,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":275,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":121,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":221,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":345,"org.easymock.tests.LimitationsTest.abstractClass":435,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":231,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":222,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":306,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":139,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":257}}]

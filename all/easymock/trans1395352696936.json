[{"position":"org.easymock.EasyMock:1832","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ReplayState:40","sourceCode":"org.easymock.internal.IMocksBehavior.checkThreadSafety()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:265","sourceCode":"java.lang.Class<?> = java.lang.Class<?>","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:272","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ClassInstantiatorFactory:79","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = new org.easymock.internal.ObjenesisClassInstantiator()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:72","sourceCode":"org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.IClassInstantiator = org.easymock.internal.IClassInstantiator","type":"CtAssignmentImpl"},"failures":[1,2,3],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"finalizeMethod","method":"finalizeMethod"}},{"transplant":{"position":"org.easymock.EasyMock:682","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:206","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[4],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[5,6,7,8,9,10],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:47","sourceCode":"if ((org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties) == null) {\n    org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:49","sourceCode":"org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties = new org.easymock.internal.EasyMockProperties()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"failures":[11,12],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:44","sourceCode":"final java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:268","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"number":"number"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:131","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Class mocking is currently disabled. Change \" + (org.easymock.EasyMock.java.lang.String)) + \" to true do modify this behavior\"))","type":"CtThrowImpl"},"failures":[42],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1506","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(double))","type":"CtInvocationImpl"},"failures":[43,44,45],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:43","sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.RecordState:323","sourceCode":"if (java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>)) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:75","sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","type":"CtReturnImpl"},"failures":[46,47,48,49,50,51],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exception":"clazz","throwableClass":"clazz"}},{"position":"org.easymock.EasyMock:1483","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ExpectedInvocationAndResults:46","sourceCode":"return ((org.easymock.internal.ExpectedInvocation.toString()) + \": \") + (org.easymock.internal.Results.toString())","type":"CtReturnImpl"},"failures":[52,53,54,55,56,57,6,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1080","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:261","sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtAssignmentImpl"},"failures":[75],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1248","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:45","sourceCode":"try {\n    return org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation);\n} finally {\n    java.util.concurrent.locks.ReentrantLock.unlock();\n}","type":"CtTryImpl"},"failures":[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,13,14,15,16,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,53,121,122,123,124,125,126,54,5,55,127,128,56,57,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,6,58,152,59,60,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,17,180,181,182,61,62,63,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,18,209,210,211,19,20,212,21,22,213,23,214],"status":-2,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:116","sourceCode":"try {\n    java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","type":"CtTryImpl"},"failures":[215],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:326","sourceCode":"this.org.easymock.internal.IMocksControlState.asStub()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:361","sourceCode":"org.easymock.internal.IMocksControlState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[216,127,128,59,60,217,218,176,61,195,219,220,73,74,221,222,223,224,225,226,227,228,229],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"failures":[230],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.EasyMock:1190","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:182","sourceCode":"org.easymock.internal.RecordState.requireLastResultOrVoidMethod()","type":"CtInvocationImpl"},"failures":[231,232,76,77,78,79,81,82,87,88,90,91,92,93,94,95,96,97,98,99,100,52,13,14,15,16,106,108,109,110,111,112,113,114,115,116,117,118,119,120,53,126,54,55,127,128,56,57,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,6,58,152,59,60,153,233,154,155,217,218,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,234,177,178,179,17,180,181,182,61,62,63,183,184,185,186,187,193,194,195,196,197,198,199,200,201,202,203,204,205,208,18,209,210,19,20,21,22,23,235,236,0,24,237,25,26,27,28,238,239,240,241,64,65,66,67,242,243,244,245,68,69,246,247,219,220,248,70,71,249,250,29,251,30,31,252,32,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,72,273,73,74,274,275,221,222,43,223,276,224,225,44,277,278,279,280,226,281,282,227,283,284,228,45,285,286,287,288,289,229,290,33,291,292,293,294,295,296,297,215,298,299,34,35,36,37,38,39,40,300,41,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:43","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((double[])(java.lang.Object)), ((double[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[281],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:201","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[25,245,316,258],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:138","sourceCode":"java.io.DataOutputStream.writeByte(java.io.ObjectStreamConstants.byte)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:126","sourceCode":"java.lang.ClassLoader java.lang.ClassLoader = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:103","sourceCode":"continue","type":"CtContinueImpl"},"failures":[317],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:61","failures":[88,89,106,118,53,6,58,154,155,179,17,180,181,182,183,184,185,186,187,24,238,239,253,72,318,275,221,222,43,223,276,224,225,44,277,278,279,280,226,281,282,227,283,284,228,45,285,286,287,288,289,229,290,303,304,305,306,307,308,309,310,311,312,313,319,314,315],"status":-1,"binaryOperator":"java.util.Stack<org.easymock.IArgumentMatcher> == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((this.org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:210","sourceCode":"if ((org.easymock.ConstructorArgs) == null) {\n    throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\");\n} ","type":"CtIfImpl"},"failures":[206,206,207,207,320,321,322,33,323,215],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:109","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[215,298,299],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"toStringMethod","method":"toStringMethod"}},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:126","sourceCode":"org.easymock.EasyMock.replay(java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2025","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).reset()","type":"CtInvocationImpl"},"failures":[5,6,58,59,60,233,251,31,32,324,256,72,73,74],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:59","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.findMethod(java.lang.Class<?>, \"finalize\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[87,325,13,14,15,16,119,120,317,326,206,206,207,207,18,209,210,211,19,20,212,21,22,213,23,214,25,26,27,28,29,251,31,252,32,327,253,324,254,255,256,33,296,215,299,34,35,36,37,39,40],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.LastControl:96","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:111","sourceCode":"java.util.Stack<org.easymock.IArgumentMatcher>.push(new org.easymock.internal.matchers.Or(org.easymock.internal.LastControl.org.easymock.internal.LastControl.popLastArgumentMatchers(int)))","type":"CtInvocationImpl"},"failures":[43,225,278],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplant":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:371","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[251],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":43,"org.easymock.tests2.UsageTest.argumentsOrdered":71,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":126,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":268,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":105,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":247,"org.easymock.tests2.StubTest.stubWithReturnValue":241,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":288,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":208,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":165,"org.easymock.tests2.SerializationTest.testAllMockedMethod":299,"org.easymock.tests2.DelegateToTest.testReturnException":300,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":231,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":103,"org.easymock.tests.MockingTest.testPartialClassMocking":13,"org.easymock.samples.SupportTest.voteForRemovals":205,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":10,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":75,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":142,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":26,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":130,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":11,"org.easymock.tests.UsageExpectAndThrowTest.object":140,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":285,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":243,"org.easymock.tests2.DelegateToTest.testWrongClass":301,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":154,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":155,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":277,"org.easymock.tests2.UsageTest.wrongArguments":69,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":183,"org.easymock.samples.ConstructorCalledMockTest.testTax":206,"org.easymock.tests.UsageStrictMockTest.range":59,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":85,"org.easymock.samples.ExampleTest.answerVsDelegate":197,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":265,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":34,"org.easymock.tests2.UsageConstraintsTest.testNull":276,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":31,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":141,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":267,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":21,"org.easymock.tests2.CaptureTest.testPrimitive":306,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":187,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":56,"org.easymock.tests.UsageTest.moreThanOneArgument":54,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":149,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":84,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":30,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":7,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":190,"org.easymock.tests2.CaptureTest.testCaptureNone":311,"org.easymock.tests.UsageUnorderedTest.message":53,"org.easymock.tests.UsageVerifyTest.twoReturns":63,"org.easymock.tests.UsageVarargTest.varargByteAccepted":116,"org.easymock.tests2.ThreadingTest.testThreadSafe":235,"org.easymock.tests.UsageTest.argumentsOrdered":57,"org.easymock.tests.UsageVarargTest.varargIntAccepted":110,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":79,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":209,"org.easymock.tests2.CaptureTest.testCapture_2617107":305,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":179,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":211,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":186,"org.easymock.tests2.UsageConstraintsTest.any":279,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":212,"org.easymock.tests2.StubTest.stub":240,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":182,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":104,"org.easymock.tests.UsageExpectAndThrowTest.longType":133,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":273,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":297,"org.easymock.tests2.SerializationTest.testClass":215,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":291,"org.easymock.tests.LimitationsTest.mockNativeMethod":16,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":317,"org.easymock.tests2.AnswerTest.answer":292,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":175,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":278,"org.easymock.tests2.CaptureTest.testAnd":303,"org.easymock.tests2.UsageTest.strictResetToDefault":245,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":324,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":274,"org.easymock.tests2.NameTest.nameForMocksControl":67,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":189,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":262,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":177,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":128,"org.easymock.tests2.DelegateToTest.testDelegate":302,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":15,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":134,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":29,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":22,"org.easymock.tests.MockingTest.testNicePartialClassMocking":14,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":145,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":32,"org.easymock.tests2.CaptureTest.testCaptureLast":310,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":106,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":40,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":44,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":286,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":125,"org.easymock.tests.MockingTest.testTwoMocks":325,"org.easymock.tests2.CaptureTest.testCapture1_2446744":307,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":42,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":156,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":143,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":138,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":70,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":229,"org.easymock.tests.UsageThrowableTest.throwError":90,"org.easymock.tests.UsageStrictMockTest.differentMethods":60,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":48,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":0,"org.easymock.tests2.MockBuilderTest.testCreateMockString":214,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":192,"org.easymock.tests.UsageExpectAndThrowTest.floatType":132,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":283,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":293,"org.easymock.tests.UsageVerifyTest.twoThrows":62,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":4,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":27,"org.easymock.samples.PartialClassMockTest.testGetArea":18,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":17,"org.easymock.samples.ExampleTest.voteAgainstRemoval":199,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":255,"org.easymock.tests2.UsageTest.niceToStrict":246,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":131,"org.easymock.tests2.UsageConstraintsTest.testNotNull":289,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":97,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":20,"org.easymock.tests2.UsageTest.defaultResetToNice":248,"org.easymock.tests2.MockBuilderTest.testCreateMock":213,"org.easymock.samples.ExampleTest.voteAgainstRemovals":196,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":171,"org.easymock.tests.UsageVarargTest.differentLength":113,"org.easymock.tests2.CallbackTest.callback":257,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":322,"org.easymock.tests.UsageTest.openCallCountByLastCall":127,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":9,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":139,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":263,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":275,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":232,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":83,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":185,"org.easymock.tests.UsageCallCountTest.tooFewCalls":77,"org.easymock.tests.UsageOverloadedMethodTest.overloading":194,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":282,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":100,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":193,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":37,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":167,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":281,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":312,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":86,"org.easymock.tests.UsageThrowableTest.throwCheckedException":94,"org.easymock.tests2.EasyMockSupportClassTest.testAll":25,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":120,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":8,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":147,"org.easymock.tests2.CaptureTest.testCaptureAll":304,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":123,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":89,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":39,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":36,"org.easymock.tests2.UsageConstraintsTest.testMatches":227,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":38,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":295,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":191,"org.easymock.samples.ExampleTest.voteForRemovals":201,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":237,"org.easymock.tests2.NameTest.nameForNiceMock":66,"org.easymock.tests.UsageVarargTest.allKinds":118,"org.easymock.tests2.DependencyTest.testInterfaceMocking":242,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":61,"org.easymock.samples.BasicClassMockTest.testPrintContent":210,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":124,"org.easymock.samples.ExampleTest.addDocument":200,"org.easymock.tests2.DelegateToTest.testStubDelegate":41,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":96,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":271,"org.easymock.tests2.AnswerTest.stubAnswer":294,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":107,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":58,"org.easymock.tests2.UsageConstraintsTest.greaterThan":284,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":3,"org.easymock.tests2.MockBuilderTest.testCreateMock_ConstructorWithoutArgs":320,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":234,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":256,"org.easymock.tests.UsageVarargTest.varargLongAccepted":115,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":153,"org.easymock.samples.ExampleTest.voteForRemoval":198,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":51,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":236,"org.easymock.tests.UsageExpectAndReturnTest.floatType":158,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":174,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":327,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":33,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":207,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":228,"org.easymock.tests.UsageThrowableTest.noUpperLimit":91,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":244,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":221,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":87,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":308,"org.easymock.tests2.SerializationTest.test":298,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":321,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":260,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":47,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":92,"org.easymock.tests2.UsageConstraintsTest.testSame":224,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":157,"org.easymock.samples.SupportTest.addDocument":204,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":102,"org.easymock.tests2.CaptureTest.testCaptureFirst":315,"org.easymock.tests.ClassInstantiatorFactoryTest.getInstantiator_Overriden":1,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":261,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":250,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":101,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":163,"org.easymock.tests.GenericTest.testPackageScope":119,"org.easymock.tests2.CaptureTest.testCapture2_2446744":314,"org.easymock.tests2.UsageTest.moreThanOneArgument":68,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":24,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":23,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":117,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":81,"org.easymock.tests2.NameTest.nameForMock":64,"org.easymock.tests.UsageExpectAndReturnTest.longType":159,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":258,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":121,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":148,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":168,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":287,"org.easymock.tests2.UsageStrictMockTest.differentMethods":74,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":146,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":188,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":316,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":160,"org.easymock.tests.UsageCallCountTest.tooManyCalls":82,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":144,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":178,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":76,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":164,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":72,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":135,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":95,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":184,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":35,"org.easymock.tests2.UsageConstraintsTest.testContains":226,"org.easymock.tests2.NameTest.nameForStrictMock":65,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":296,"org.easymock.tests2.UsageConstraintsTest.testFind":223,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":195,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":238,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":252,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":239,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":150,"org.easymock.tests.UsageExpectAndReturnTest.object":166,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":49,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":45,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":253,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":19,"org.easymock.tests2.UsageStrictMockTest.range":73,"org.easymock.tests2.UsageConstraintsTest.lessThan":290,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":266,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":112,"org.easymock.tests.UsageTest.exactCallCountByLastCall":129,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":88,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":259,"org.easymock.tests2.CaptureTest.testCaptureRightOne":313,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":217,"org.easymock.tests2.UsageConstraintsTest.testOr":225,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":323,"org.easymock.tests.UsageRangeTest.combination":176,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":251,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":108,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":172,"org.easymock.tests.UsageTest.wrongArguments":55,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":99,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":326,"org.easymock.tests2.EasyMockSupportTest.testVerify":270,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":216,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":169,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":218,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":50,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":98,"org.easymock.tests.UsageVarargTest.varargShortAccepted":114,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":80,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":318,"org.easymock.tests2.UsageConstraintsTest.cmpTo":280,"org.easymock.tests.UsageVarargTest.varargCharAccepted":111,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":2,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":12,"org.easymock.tests2.CompareToTest.testLessThan":230,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":272,"org.easymock.tests2.UsageTest.openCallCountByLastCall":219,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":220,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":269,"org.easymock.tests.DefaultClassInstantiatorTest.object":46,"org.easymock.tests2.CaptureTest.testCaptureFromStub":319,"org.easymock.tests.UsageTest.unexpectedCallWithArray":5,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":137,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":93,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":78,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":170,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":254,"org.easymock.tests2.UsageConstraintsTest.constraints":222,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":152,"org.easymock.samples.ExampleTest.addAndChangeDocument":202,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":136,"org.easymock.tests.UsageStrictMockTest.testVerify":233,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":173,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":203,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":28,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":151,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":122,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":309,"org.easymock.tests2.UsageTest.resumeIfFailure":249,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":180,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":162,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":52,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":181,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":264,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":109}}]

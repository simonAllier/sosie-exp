[{"transplant":{"position":"org.easymock.EasyMockSupport:52","sourceCode":"new java.util.ArrayList<org.easymock.IMocksControl>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:116","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"candidateMethod"}},{"transplant":{"position":"org.easymock.Capture:107","sourceCode":"break","type":"CtBreakImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:127","sourceCode":"java.lang.Object[][int] = java.lang.Object","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.LastControl:85","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState((java.util.Stack<org.easymock.IArgumentMatcher> != null), org.easymock.internal.LastControl.java.lang.String)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if ((org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1432","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:71","sourceCode":"if ((java.util.Set<java.lang.reflect.Method>) == null) {\n    java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockMethodInterceptor:136","sourceCode":"for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n    java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n}","type":"CtForEachImpl"},"failures":[12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1135","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:159","sourceCode":"java.lang.reflect.Field.setAccessible(true)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:74","sourceCode":"java.lang.Object = java.lang.reflect.Field.get(java.lang.Object)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"f":"f"}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[1,3,7,9,10,12,13,298,15,16,17,18,19,299,300,301,302,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,55,56,303,304,59,62,63,65,66,69,70,71,72,74,75,305,306,307,308,309,310,311,312,313,314,315,316,317,78,81,88,89,90,92,94,95,96,99,100,101,318,102,103,319,320,104,105,107,108,109,110,111,112,113,115,117,118,119,120,321,322,323,121,123,124,126,129,130,131,132,133,140,141,142,146,148,149,157,158,159,160,174,179,181,182,185,186,188,199,324,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,256,257,260,261,264,266,267,268,270,271,272,273,274,275,276,278,279,280],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:262","sourceCode":"if (java.lang.Throwable == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"null cannot be thrown\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:301","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[325],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable"}},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:39","sourceCode":"return int < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:83","sourceCode":"return (int) == (java.lang.Integer.int)","type":"CtReturnImpl"},"failures":[9,10,94,95,142,148,149,186,260,261],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"maximum"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:100","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:143","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T> , java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[101,326],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.LastControl:133","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,298,15,16,17,18,19,299,300,301,302,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,303,304,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,305,306,307,308,309,310,311,312,313,314,315,316,317,327,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,318,102,103,319,320,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,321,322,328,329,330,331,323,332,121,122,123,124,125,126,128,333,334,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,159,160,174,175,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,283,284,285,286,287,288,289,335,335],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:221","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.verify();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n} catch (final org.easymock.internal.AssertionErrorWrapper org.easymock.internal.AssertionErrorWrapper) {\n    throw ((java.lang.AssertionError)(org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[7,10,11,90,146,149,150,179,186,187,188,257,336],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:380","sourceCode":"new org.easymock.internal.Range(1)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:385","sourceCode":"new org.easymock.internal.Range(1 , java.lang.Integer.int)","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:145","sourceCode":"org.easymock.internal.RecordState.requireVoidMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:106","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"Throwable\")","type":"CtInvocationImpl"},"failures":[88,95,107,138,142,337,338,339,340,178,187,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,261,268,270,271,272,273,274,275],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:90","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:183","sourceCode":"throw new java.lang.InternalError(((\"ObjectStreamClass.\" + java.lang.String) + \" seems to have vanished\"))","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:229","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2011","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).replay();\n}","type":"CtForEachImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,118,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,166,174,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,208,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,291],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"method":"result"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:68","sourceCode":"if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.reflect.Method.getModifiers())) {\n    throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method","bridgeMethod":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:174","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.Invocation:126","sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareTo:45","sourceCode":"return org.easymock.internal.matchers.CompareTo<T>.matchResult(((java.lang.Comparable)(java.lang.Object)).compareTo(java.lang.Comparable<T>))","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"otherArgument":"actual","myArgument":"actual"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:245","sourceCode":"if (java.lang.Class<?>.isPrimitive()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n} ","type":"CtIfImpl"},"failures":[341],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:93","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalStateException(((\"Unable to locate bridged method for bridge method \\'\" + java.lang.reflect.Method) + \"\\'\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:89","sourceCode":"if (java.lang.reflect.Method == null) {\n    throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String));\n} ","type":"CtIfImpl"},"failures":[342],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"m","bridgeMethod":"m"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:120","sourceCode":"return ((java.lang.String)(java.util.Properties.remove(java.lang.String)))","type":"CtReturnImpl"},"failures":[115,343,344,116,117,118,119,345,346,322,329,329,330,330,333,334,156,161,347,348,349,350,351,352,353,354,174,355,356,357,358,199,200,324,359,360,361,362,278,279,280,363,290,291,292,293,294,295,296,297],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2052","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault();\n}","type":"CtForEachImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2079","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify();\n}","type":"CtForEachImpl"},"failures":[7,10,11,90,146,149,150,179,186,187,188,240,244,245,247,250,257,336],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mocks":"mocks","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1726","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:210","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[119,280],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:826","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.LessOrEqual<java.lang.Double>(double))","type":"CtInvocationImpl"},"failures":[50],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:275","sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[364],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:240","sourceCode":"if (org.easymock.internal.RecordState.lastMethodIsVoidMethod()) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:154","sourceCode":"org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.Capture:80","sourceCode":"throw new java.lang.AssertionError(\"Nothing captured yet\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[365,366,164],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:34","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:48","sourceCode":"java.lang.StringBuilder.append(\"\\n    \")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":30,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":256,"org.easymock.tests2.UsageTest.argumentsOrdered":98,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":316,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":137,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":93,"org.easymock.tests2.StubTest.stubWithReturnValue":107,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":328,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":224,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":50,"org.easymock.tests2.SerializationTest.testAllMockedMethod":14,"org.easymock.tests2.DelegateToTest.testReturnException":80,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":135,"org.easymock.tests.MockingTest.testPartialClassMocking":278,"org.easymock.samples.SupportTest.voteForRemovals":323,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":358,"org.easymock.tests.MockClassControlTest.testToString":292,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":346,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":248,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":366,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":300,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":236,"org.easymock.tests.UsageExpectAndThrowTest.object":246,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":321,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":47,"org.easymock.tests2.DelegateToTest.testWrongClass":82,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":266,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":267,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":36,"org.easymock.tests2.UsageTest.wrongArguments":91,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":181,"org.easymock.samples.ConstructorCalledMockTest.testTax":329,"org.easymock.tests.UsageStrictMockTest.range":148,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":154,"org.easymock.samples.ExampleTest.answerVsDelegate":122,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":313,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":357,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":318,"org.easymock.tests2.UsageConstraintsTest.testNull":32,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":247,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":111,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":315,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":303,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":297,"org.easymock.tests2.CaptureTest.testPrimitive":65,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":185,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":262,"org.easymock.tests.UsageTest.moreThanOneArgument":257,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":255,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":172,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":110,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":153,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":191,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":341,"org.easymock.tests2.CaptureTest.testCaptureNone":70,"org.easymock.tests.UsageUnorderedTest.message":235,"org.easymock.tests.UsageVerifyTest.twoReturns":188,"org.easymock.tests.UsageVarargTest.varargByteAccepted":209,"org.easymock.tests2.ThreadingTest.testThreadSafe":15,"org.easymock.tests.UsageTest.argumentsOrdered":263,"org.easymock.tests.UsageVarargTest.varargIntAccepted":203,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":286,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":365,"org.easymock.tests2.CaptureTest.testCapture_2617107":64,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":129,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":54,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":336,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":184,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":57,"org.easymock.tests2.UsageConstraintsTest.any":37,"org.easymock.tests2.StubTest.stub":106,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":169,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":133,"org.easymock.tests.UsageExpectAndThrowTest.longType":239,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":136,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":350,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":168,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":8,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":305,"org.easymock.tests2.SerializationTest.testClass":12,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":298,"org.easymock.tests.ReplayStateInvalidUsageTest.times":170,"org.easymock.tests.LimitationsTest.mockNativeMethod":174,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":324,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":234,"org.easymock.tests2.AnswerTest.answer":1,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":87,"org.easymock.tests2.CaptureTest.testAnd":62,"org.easymock.tests2.UsageTest.strictResetToDefault":89,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":11,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":116,"org.easymock.tests2.NameTest.nameForMocksControl":26,"org.easymock.tests2.MockedExceptionTest.testMockedException":77,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":190,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":310,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":159,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":261,"org.easymock.tests2.DelegateToTest.testDelegate":83,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":280,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":240,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":108,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":304,"org.easymock.tests.MockingTest.testNicePartialClassMocking":279,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":251,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":113,"org.easymock.tests.LimitationsTest.mockFinalMethod":355,"org.easymock.tests2.CaptureTest.testCaptureLast":69,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":138,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":265,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":35,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":105,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":198,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":48,"org.easymock.tests.MockingTest.testTwoMocks":362,"org.easymock.tests2.CaptureTest.testCapture1_2446744":66,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":215,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":249,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":244,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":85,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":97,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":52,"org.easymock.tests.UsageThrowableTest.throwError":268,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":164,"org.easymock.samples.ExampleTest.removeNonExistingDocument":127,"org.easymock.tests.UsageStrictMockTest.differentMethods":149,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":166,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":348,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":17,"org.easymock.tests2.MockBuilderTest.testCreateMockString":60,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":290,"org.easymock.tests.UsageExpectAndThrowTest.floatType":238,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":193,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":43,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":2,"org.easymock.tests.UsageVerifyTest.twoThrows":187,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":176,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":301,"org.easymock.samples.PartialClassMockTest.testGetArea":322,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":165,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":130,"org.easymock.samples.ExampleTest.voteAgainstRemoval":124,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":118,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":237,"org.easymock.tests2.UsageTest.niceToStrict":92,"org.easymock.tests.LimitationsTest.privateConstructor":354,"org.easymock.tests2.UsageConstraintsTest.testNotNull":51,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":275,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":76,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":56,"org.easymock.tests2.MockBuilderTest.testCreateMock":58,"org.easymock.tests2.UsageTest.defaultResetToNice":96,"org.easymock.samples.ExampleTest.voteAgainstRemovals":121,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":230,"org.easymock.tests.UsageVarargTest.differentLength":206,"org.easymock.tests2.CallbackTest.callback":22,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":343,"org.easymock.tests.UsageTest.openCallCountByLastCall":260,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":245,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":311,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":27,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":340,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":281,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":152,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":183,"org.easymock.tests.UsageCallCountTest.tooFewCalls":284,"org.easymock.tests.UsageOverloadedMethodTest.overloading":141,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":41,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":178,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":319,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":226,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":140,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":40,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":71,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":155,"org.easymock.tests.UsageThrowableTest.throwCheckedException":272,"org.easymock.tests2.EasyMockSupportClassTest.testAll":299,"org.easymock.tests.MockClassControlTest.testEquals":296,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":200,"org.easymock.tests.MockingTest.testStrictClassMocking":360,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":253,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":196,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":86,"org.easymock.tests2.CaptureTest.testCaptureAll":63,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":277,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":104,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":103,"org.easymock.tests2.UsageConstraintsTest.testMatches":42,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":171,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":320,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":4,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":192,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":162,"org.easymock.tests.ObjectMethodsTest.testHashCode":213,"org.easymock.samples.ExampleTest.voteForRemovals":126,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":19,"org.easymock.tests2.NameTest.nameForNiceMock":25,"org.easymock.tests.UsageVarargTest.allKinds":211,"org.easymock.tests2.DependencyTest.testInterfaceMocking":120,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":186,"org.easymock.samples.BasicClassMockTest.testPrintContent":334,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":197,"org.easymock.samples.ExampleTest.addDocument":125,"org.easymock.tests2.DelegateToTest.testStubDelegate":81,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":274,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":5,"org.easymock.tests2.AnswerTest.stubAnswer":3,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":139,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":146,"org.easymock.tests2.UsageConstraintsTest.greaterThan":44,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":158,"org.easymock.tests.UsageVarargTest.varargLongAccepted":208,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":119,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":150,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":352,"org.easymock.samples.ExampleTest.voteForRemoval":123,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":345,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":16,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":233,"org.easymock.tests.UsageExpectAndReturnTest.floatType":217,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":101,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":114,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":330,"org.easymock.tests.UsageThrowableTest.noUpperLimit":269,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":45,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":88,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":28,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":156,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":67,"org.easymock.tests2.SerializationTest.test":13,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":347,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":308,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":270,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":216,"org.easymock.tests2.UsageConstraintsTest.testSame":33,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":364,"org.easymock.samples.SupportTest.addDocument":331,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":134,"org.easymock.tests2.CaptureTest.testCaptureFirst":75,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":309,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":100,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":167,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":180,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":222,"org.easymock.tests.GenericTest.testPackageScope":199,"org.easymock.tests2.UsageTest.moreThanOneArgument":90,"org.easymock.tests2.CaptureTest.testCapture2_2446744":74,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":18,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":59,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":210,"org.easymock.tests.GenericTest.testBridgedEquals":359,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":288,"org.easymock.tests2.NameTest.nameForMock":23,"org.easymock.tests.UsageExpectAndReturnTest.longType":218,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":306,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":194,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":227,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":49,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":252,"org.easymock.tests2.UsageStrictMockTest.differentMethods":10,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":189,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":344,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":219,"org.easymock.tests.UsageCallCountTest.tooManyCalls":289,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":250,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":160,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":283,"org.easymock.tests2.MockedExceptionTest.testRealException":79,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":223,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":241,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":7,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":273,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":173,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":182,"org.easymock.tests.MockingTest.testNiceClassMocking":363,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":102,"org.easymock.tests.MockingTest.testClassMocking":361,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":282,"org.easymock.tests2.NameTest.nameForStrictMock":24,"org.easymock.tests2.UsageConstraintsTest.testContains":39,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":78,"org.easymock.tests2.UsageConstraintsTest.testFind":31,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":142,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":20,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":112,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":21,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":143,"org.easymock.tests.UsageExpectAndReturnTest.object":225,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":349,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":46,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":115,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":55,"org.easymock.tests2.UsageStrictMockTest.range":9,"org.easymock.tests2.UsageConstraintsTest.lessThan":53,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":314,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":205,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":214,"org.easymock.tests.UsageTest.exactCallCountByLastCall":264,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":342,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":276,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":307,"org.easymock.tests2.CaptureTest.testCaptureRightOne":72,"org.easymock.tests2.UsageConstraintsTest.testOr":34,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":326,"org.easymock.tests.UsageRangeTest.combination":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":231,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":201,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":109,"org.easymock.tests.UsageTest.wrongArguments":259,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":177,"org.easymock.tests2.MockBuilderTest.testWithConstructor":0,"org.easymock.tests.MockClassControlTest.testHashCode":295,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":291,"org.easymock.tests2.EasyMockSupportTest.testVerify":327,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":220,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":228,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":351,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":339,"org.easymock.tests.UsageVarargTest.varargShortAccepted":207,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":175,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":287,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":84,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":61,"org.easymock.tests2.UsageConstraintsTest.cmpTo":38,"org.easymock.tests.UsageVarargTest.varargCharAccepted":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":337,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":6,"org.easymock.tests2.UsageTest.openCallCountByLastCall":94,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":95,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":317,"org.easymock.tests.DefaultClassInstantiatorTest.object":161,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":338,"org.easymock.tests2.CaptureTest.testCaptureFromStub":73,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":163,"org.easymock.tests.UsageTest.unexpectedCallWithArray":258,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":212,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":243,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":271,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":145,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":285,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":229,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":294,"org.easymock.tests2.UsageConstraintsTest.constraints":29,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":117,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":147,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":242,"org.easymock.samples.ExampleTest.addAndChangeDocument":128,"org.easymock.tests.CapturesMatcherTest.test":335,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":232,"org.easymock.tests.UsageStrictMockTest.testVerify":151,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":325,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":332,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":302,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":293,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":144,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":195,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":68,"org.easymock.tests2.UsageTest.resumeIfFailure":99,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":131,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":356,"org.easymock.tests.LimitationsTest.abstractClass":353,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":221,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":132,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":312,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":202}}]

[{"transplant":{"position":"org.easymock.internal.MocksControl:214","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1234","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:57","sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"hashCodeMethod","equalsMethod":"hashCodeMethod"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:334","sourceCode":"java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:222","sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","typeVariableArgument":"tv"}},{"transplant":{"position":"org.easymock.internal.RecordState:290","sourceCode":"return ","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:321","sourceCode":"for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n    final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int];\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = java.lang.reflect.TypeVariable<?>[][int];\n    if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n    } else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n        java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n        if (java.lang.reflect.Type == null) {\n            java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n        } \n        if (java.lang.reflect.Type != null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n        } \n    } \n}","type":"CtForImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[175,152],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:98","sourceCode":"org.easymock.internal.RecordState.requireAssignable(java.lang.Object)","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,176,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:105","sourceCode":"if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n    if (java.lang.Class<?>[] == null) {\n        if (java.lang.reflect.Method != null) {\n            throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n        } \n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n        return java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result"}},{"transplant":{"position":"org.easymock.Capture:132","sourceCode":"return \"Nothing captured yet\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.CompareEqual:34","sourceCode":"return \"cmpEq\"","type":"CtReturnImpl"},"failures":[177],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.EasyMock:2038","sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Object[]) {\n    org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToNice();\n}","type":"CtForEachImpl"},"failures":[78],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksBehavior:120","sourceCode":"java.lang.StringBuilder.append(\"\\n  Unexpected method call \")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:51","sourceCode":"java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1))","type":"CtInvocationImpl"},"failures":[178,36,47,179,133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"errorMessage":"buffer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:212","sourceCode":"org.easymock.internal.IMocksControlState.replay()","type":"CtInvocationImpl"},"failures":[180,0,1,181,182,2,3,183,184,4,185,186,187,188,189,190,191,192,193,194,195,5,6,196,197,7,8,9,10,11,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,12,216,217,218,219,220,221,222,223,224,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,225,226,227,228,229,230,231,232,233,34,35,178,36,234,37,38,235,236,237,238,239,39,40,41,42,43,44,240,241,242,243,244,245,246,247,248,249,250,251,45,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,46,280,47,48,281,282,283,49,284,50,51,52,53,54,55,56,57,58,59,60,61,285,65,286,66,287,287,288,288,67,289,68,69,290,70,291,292,293,294,71,295,296,72,73,74,297,75,298,76,77,78,299,300,79,80,301,81,82,302,83,84,303,85,304,86,87,88,89,90,91,92,93,94,95,96,97,98,305,99,306,100,101,102,103,104,105,106,107,108,307,308,309,310,109,311,110,312,111,112,113,114,115,116,313,314,117,315,118,119,120,121,122,123,124,125,126,127,128,129,316,317,318,319,320,321,322,130,323,324,325,131,326,327,132,328,133,134,329,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,330,157,158,159,160,161,162,163,164,331,165,166,332,167,168,333,334,169,170,171,172,335,173,174,336,337],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.internal.MethodSerializationWrapper:30","sourceCode":"new java.util.HashMap<java.lang.String, java.lang.Class<?>>(10)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[338,339,340],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,341,342,343,344,345,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,176,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"failures":[346,183,184,185,186,187,188,189,191,192,193,194,195,5,6,196,8,228,230,233,178,234,40,277,278,46,280,47,48,281,49,51,52,53,54,55,66,67,68,69,70,292,71,73,75,298,299,300,82,85,94,97,101,118,119,120,121,123,124,127,128,129,317,324,326,327,132,328,133,134,329,138,140,143,144,145,148,151,154,155,156,330,157,158,166,332,167,333,334,169,170,171,172,174],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:275","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:75","sourceCode":"throw org.easymock.ConstructorArgs.throwException(java.lang.Class<?>, java.lang.Object)","type":"CtThrowImpl"},"failures":[347],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:88","sourceCode":"java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"result","candidateMethods":"candidateMethods"}},{"transplant":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[0,1,2,3,4,5,6,7,8,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,341,342,343,344,345,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,176,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","answer":"value"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1776","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Find(java.lang.String))","type":"CtInvocationImpl"},"failures":[139],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:79","sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"failures":[348,165,332,167,168,333,334,169,171,349,172,335,174],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:203","sourceCode":"return java.lang.Number.floatValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[58,66,67,68,69,70],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:325","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.asStub();\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:110","sourceCode":"org.easymock.internal.IMocksControlState.assertRecordState()","type":"CtInvocationImpl"},"failures":[350,351,352,353,354,355,346,180,356,0,1,181,182,2,3,183,184,4,185,186,187,357,188,189,190,191,192,193,194,195,5,6,196,197,7,8,9,10,11,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,358,12,216,338,339,340,359,13,360,217,218,219,220,221,361,362,363,364,222,223,224,365,366,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,225,226,227,228,229,230,231,232,233,367,368,369,370,371,372,373,374,375,341,376,342,377,378,379,380,381,382,383,384,343,344,385,345,386,387,388,34,389,35,178,36,234,37,38,235,236,237,238,239,39,40,41,390,391,392,42,43,393,44,394,395,396,240,241,242,243,244,245,246,247,248,249,250,251,45,252,253,254,255,256,397,398,399,400,401,402,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,46,280,47,48,281,282,283,403,404,405,406,407,408,49,284,50,51,52,53,54,55,56,57,58,59,60,409,61,285,176,410,62,63,64,65,286,66,287,287,288,288,67,289,68,69,290,70,291,292,293,294,71,295,296,72,73,74,297,75,298,76,77,78,299,300,79,80,411,412,413,414,301,81,415,416,82,302,83,84,417,303,85,304,86,87,88,89,90,91,92,93,94,95,96,97,98,305,418,99,419,420,306,100,101,102,421,422,423,424,425,426,427,103,428,429,430,431,432,433,434,435,436,104,437,438,105,439,440,441,442,443,444,445,446,447,106,448,449,450,451,452,107,453,454,455,456,457,458,459,108,460,461,462,463,464,465,307,308,309,310,109,466,467,311,110,312,111,468,112,113,114,115,116,313,314,117,315,118,119,120,121,122,123,124,125,126,127,128,129,316,317,469,318,319,320,321,470,322,130,323,471,324,325,131,326,327,132,328,133,134,329,135,136,137,138,472,139,140,141,142,143,144,473,145,146,147,148,149,150,151,152,153,154,155,156,330,157,158,159,160,474,475,161,162,163,164,331,165,166,332,167,168,333,334,169,170,171,172,335,173,174,336,476,337],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"state":"state"}},{"transplantationPoint":{"position":"org.easymock.internal.MethodSerializationWrapper:70","sourceCode":"java.lang.Class<?>[][int] = java.lang.Class<?>","type":"CtAssignmentImpl"},"failures":[477,163,164],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReplayState:48","sourceCode":"java.util.concurrent.locks.ReentrantLock.unlock()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReplayState:44","sourceCode":"java.util.concurrent.locks.ReentrantLock.lock()","type":"CtInvocationImpl"},"failures":[0,1,181,182,2,3,183,184,4,185,186,187,188,189,190,191,192,193,194,195,5,6,196,197,7,8,10,11,198,199,200,201,202,203,212,214,215,216,217,218,219,220,221,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,227,228,229,230,231,232,233,34,35,178,36,234,37,38,235,236,237,238,239,39,40,41,42,43,44,45,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,46,280,47,48,281,49,284,50,51,52,53,54,55,56,57,58,59,60,61,285,65,286,66,287,288,67,289,68,69,290,70,292,293,294,71,295,296,72,73,74,297,75,298,76,77,78,299,300,79,80,301,81,82,302,83,84,303,85,304,86,87,88,89,90,91,92,93,94,95,96,97,98,305,99,306,100,101,102,103,104,105,106,107,108,307,308,309,310,109,311,110,312,111,112,113,115,116,313,314,117,315,118,119,120,121,122,123,124,125,126,127,128,129,316,317,322,130,323,324,325,131,326,327,132,328,133,134,329,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,330,157,158,159,160,161,162,163,164,331,165,166,332,167,168,333,334,169,170,171,172,335,173,174,336,337],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:86","sourceCode":"throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:328","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[380,385],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1176","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[350,351,352,353,354,355,346,180,356,0,1,181,182,2,3,183,184,4,185,186,187,357,188,189,190,191,192,193,194,195,5,6,196,197,7,8,9,10,11,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,358,12,216,338,339,340,359,13,360,217,218,219,220,221,361,362,363,364,222,223,224,365,366,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,225,226,227,228,229,230,231,232,233,367,368,369,370,371,372,373,374,375,341,376,342,377,378,379,380,381,382,383,384,343,344,385,345,386,387,388,34,389,35,178,36,234,37,38,235,236,237,238,239,39,40,41,390,391,392,42,43,393,44,394,395,396,240,241,242,243,244,245,246,247,248,249,250,251,45,252,253,254,255,256,397,398,399,400,401,402,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,46,280,47,48,281,282,478,283,403,404,405,406,407,479,408,49,284,50,51,52,53,54,55,56,57,58,59,60,409,61,285,176,410,62,63,64,65,286,66,287,287,288,288,67,289,68,69,290,70,291,292,293,294,71,295,296,72,73,74,297,75,298,76,77,78,299,300,79,80,411,412,413,414,480,301,481,482,81,415,483,416,82,302,83,484,84,417,303,85,485,486,487,488,304,489,86,87,88,89,90,91,92,93,94,95,96,97,98,305,99,419,420,306,100,101,102,421,422,423,424,425,426,427,103,428,429,430,431,432,433,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,434,435,436,104,437,438,105,439,440,441,442,443,444,445,446,447,106,448,449,450,451,452,107,453,454,455,456,457,458,459,108,460,461,462,463,464,465,307,308,309,310,109,466,467,311,110,312,506,111,468,507,112,113,114,115,116,313,314,117,315,118,119,120,121,122,123,124,125,126,127,128,129,316,317,318,319,320,321,470,322,130,323,471,324,325,131,326,327,132,328,133,134,329,135,136,137,138,472,139,140,141,142,143,144,473,145,146,147,148,149,150,151,152,153,154,155,156,330,157,158,159,160,161,162,163,164,331,165,166,332,167,168,333,334,169,170,171,172,335,173,174,336,476,337],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockInvocationHandler:44","sourceCode":"throw org.easymock.internal.AssertionErrorWrapper.getAssertionError().fillInStackTrace()","type":"CtThrowImpl"},"failures":[0,181,182,183,184,4,190,8,231,232,233,178,36,234,277,279,280,47,48,72,297,75,298,299,300,79,80,81,303,85,304,94,100,102,114,119,123,124,127,317,326,328,133,134,137,151],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:324","sourceCode":"return true","type":"CtReturnImpl"},"failures":[178,52,53],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:190","sourceCode":"if (!(java.lang.Object instanceof java.lang.Number)) {\n    return java.lang.Object;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:85","sourceCode":"if (java.lang.reflect.Method.equals(java.lang.reflect.Method)) {\n    return java.lang.Integer.java.lang.Integer.valueOf(java.lang.System.java.lang.System.identityHashCode(java.lang.Object));\n} ","type":"CtIfImpl"},"failures":[350,351,352,353,354,355,346,180,0,1,181,182,2,3,183,184,4,195,5,6,196,197,7,8,9,10,11,198,199,200,201,202,203,204,206,207,208,209,212,213,214,215,358,12,216,338,339,340,13,217,218,219,220,221,361,362,363,222,223,365,366,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,227,381,385,386,34,35,178,36,234,37,38,235,236,237,238,239,39,40,41,392,42,43,44,45,252,253,254,255,256,397,398,399,400,401,402,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,279,46,280,47,48,281,49,284,50,51,52,53,54,55,56,57,58,59,60,61,176,62,63,64,65,66,287,287,288,288,67,289,68,69,70,292,71,72,73,74,297,75,298,76,77,78,299,300,79,80,301,81,415,82,302,83,84,303,85,304,86,87,88,89,90,91,92,93,94,95,96,97,98,305,99,306,100,101,102,422,103,428,104,105,106,107,108,460,307,308,309,310,109,466,467,311,110,312,111,112,113,114,115,116,313,314,117,315,118,119,120,121,122,123,124,125,126,127,128,129,317,470,322,130,323,471,324,325,131,326,132,328,133,134,329,135,136,137,138,139,140,141,142,143,144,473,145,146,147,148,149,150,151,152,153,154,155,156,330,157,158,159,160,161,162,163,164,165,166,332,167,168,333,334,169,170,171,172,335,173,174,336,337],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"value":"proxy"}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":138,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":0,"org.easymock.tests2.UsageTest.argumentsOrdered":300,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":128,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":460,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":376,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":298,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":296,"org.easymock.tests2.DelegateToTest.testReturnException":322,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":199,"org.easymock.tests.MockingTest.testPartialClassMocking":42,"org.easymock.tests.MockClassControlTest.testToString":206,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":469,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":13,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":422,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":384,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":442,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":105,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":257,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":162,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_protected":491,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":144,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":5,"org.easymock.tests2.UsageTest.wrongArguments":297,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":433,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":255,"org.easymock.samples.ExampleTest.answerVsDelegate":289,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":353,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":395,"org.easymock.tests2.UsageConstraintsTest.testNull":140,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":96,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":127,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":211,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_NotFound":493,"org.easymock.tests2.CaptureTest.testPrimitive":167,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":7,"org.easymock.tests.UsageTest.moreThanOneArgument":1,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":276,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":95,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":237,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":398,"org.easymock.tests.UsageTest.argumentsOrdered":184,"org.easymock.tests.UsageVarargTest.varargIntAccepted":187,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_NotFound":502,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":380,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":56,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_private":503,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":301,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":464,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":369,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":60,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":103,"org.easymock.tests.ReplayStateInvalidUsageTest.times":248,"org.easymock.tests2.DependencyTest.testClassMocking":474,"org.easymock.tests2.AnswerTest.answer":109,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":473,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":382,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":310,"org.easymock.tests2.CaptureTest.testAnd":165,"org.easymock.tests2.UsageTest.strictResetToDefault":73,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":483,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":306,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":236,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":122,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":10,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":402,"org.easymock.tests2.DelegateToTest.testDelegate":324,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":272,"org.easymock.tests.LimitationsTest.mockFinalMethod":389,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":202,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":221,"org.easymock.tests2.DependencyTest.testClassMockingSupport":475,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":346,"org.easymock.tests2.CaptureTest.testCapture1_2446744":168,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":418,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":270,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":308,"org.easymock.tests.UsageThrowableTest.throwError":49,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":242,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":352,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":465,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":239,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":454,"org.easymock.samples.PartialClassMockTest.testGetArea":71,"org.easymock.tests.MockingTest.testInterfaceMocking":393,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":243,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":57,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":63,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":443,"org.easymock.tests2.UsageTest.niceToStrict":75,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":258,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":366,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":367,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":82,"org.easymock.tests2.MockBuilderTest.testCreateMock":303,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":450,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":430,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":266,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":123,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":363,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":225,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":253,"org.easymock.tests.UsageOverloadedMethodTest.overloading":40,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":452,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":447,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":149,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":215,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":39,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":25,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":148,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":171,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":357,"org.easymock.tests2.EasyMockSupportClassTest.testAll":104,"org.easymock.tests.MockClassControlTest.testEquals":210,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":285,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":274,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":494,"org.easymock.tests2.CaptureTest.testCaptureAll":166,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":219,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":309,"org.easymock.tests.MockNameTest.defaultName":397,"org.easymock.tests2.UsageConstraintsTest.testMatches":150,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":238,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":240,"org.easymock.samples.ExampleTest.voteForRemovals":70,"org.easymock.tests.UsageVarargTest.allKinds":195,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":35,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":220,"org.easymock.samples.BasicClassMockTest.testPrintContent":294,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":54,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":326,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":471,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":461,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":203,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":504,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":479,"org.easymock.tests2.UsageConstraintsTest.greaterThan":152,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":437,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":9,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":102,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":408,"org.easymock.samples.ExampleTest.voteForRemoval":68,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":421,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":113,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":485,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":354,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":305,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":65,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":72,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":417,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":120,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":50,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":435,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":198,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":470,"org.easymock.tests2.CaptureTest.testCaptureFirst":174,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":373,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":121,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":80,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":216,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":21,"org.easymock.tests2.CaptureTest.testCapture2_2446744":173,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":115,"org.easymock.tests2.UsageTest.moreThanOneArgument":74,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":85,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":383,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":194,"org.easymock.tests.GenericTest.testBridgedEquals":410,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":232,"org.easymock.tests.UsageExpectAndReturnTest.longType":17,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":118,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":217,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":487,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":275,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":386,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":330,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":273,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":235,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":339,"org.easymock.tests.UsageCallCountTest.tooManyCalls":233,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":227,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":451,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":22,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":432,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":262,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":53,"org.easymock.tests.MockingTest.testNiceClassMocking":396,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":87,"org.easymock.tests.MockingTest.testClassMocking":391,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":482,"org.easymock.tests2.UsageConstraintsTest.testContains":147,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":226,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":117,"org.easymock.tests2.UsageConstraintsTest.testFind":139,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":41,"org.easymock.tests.MockTypeTest.fromEasyMockClass":351,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":277,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":337,"org.easymock.tests.UsageExpectAndReturnTest.object":24,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":99,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":431,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":126,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_public":495,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":189,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":224,"org.easymock.tests.UsageTest.exactCallCountByLastCall":4,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":45,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":372,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":399,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":359,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":468,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":185,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":30,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":214,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":456,"org.easymock.tests.MockClassControlTest.testHashCode":209,"org.easymock.tests2.EasyMockSupportTest.testVerify":316,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":445,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":400,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":212,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":362,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":307,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":506,"org.easymock.tests.UsageVarargTest.varargCharAccepted":188,"org.easymock.tests2.ReflectionUtilsTest.testGetDeclareMethod_Found":492,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":478,"org.easymock.tests2.CaptureTest.testCaptureMultiple":348,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":345,"org.easymock.tests2.UsageTest.openCallCountByLastCall":76,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":129,"org.easymock.tests.DefaultClassInstantiatorTest.object":283,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":361,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":222,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":446,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":264,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":505,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":51,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":426,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":455,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":100,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":208,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":263,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":31,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":338,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":107,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":207,"org.easymock.tests2.UsageTest.resumeIfFailure":79,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":350,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":201,"org.easymock.tests2.StubTest.stubWithReturnValue":131,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":484,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":157,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":23,"org.easymock.tests2.SerializationTest.testAllMockedMethod":331,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":381,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":489,"org.easymock.samples.SupportTest.voteForRemovals":66,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":409,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":458,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":269,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":477,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":385,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":466,"org.easymock.tests.UsageExpectAndThrowTest.object":267,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":360,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":155,"org.easymock.tests2.DelegateToTest.testWrongClass":323,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":37,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":38,"org.easymock.tests.UsageStrictMockTest.range":47,"org.easymock.samples.ConstructorCalledMockTest.testTax":287,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":413,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":125,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":86,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":347,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":268,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":83,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":434,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":183,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":250,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":254,"org.easymock.tests2.CaptureTest.testCaptureNone":170,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":64,"org.easymock.tests.UsageUnorderedTest.message":234,"org.easymock.tests.UsageVerifyTest.twoReturns":36,"org.easymock.tests.UsageVarargTest.varargByteAccepted":193,"org.easymock.tests2.ThreadingTest.testThreadSafe":112,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":448,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":230,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":293,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":365,"org.easymock.tests2.CaptureTest.testCapture_2617107":332,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":356,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":343,"org.easymock.tests2.UsageConstraintsTest.any":145,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":247,"org.easymock.tests2.StubTest.stub":325,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":340,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":200,"org.easymock.tests.UsageExpectAndThrowTest.longType":260,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":344,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":406,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":246,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":328,"org.easymock.tests2.SerializationTest.testClass":163,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":108,"org.easymock.tests.LimitationsTest.mockNativeMethod":34,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":176,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":33,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":500,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":425,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":329,"org.easymock.tests2.NameTest.nameForMocksControl":321,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":427,"org.easymock.tests2.MockedExceptionTest.testMockedException":314,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":438,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":3,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":476,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":44,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":261,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":93,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":84,"org.easymock.tests.MockingTest.testNicePartialClassMocking":43,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":98,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_WrongParams":490,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":423,"org.easymock.tests2.CompareToTest.testCompareEqual":177,"org.easymock.tests2.CaptureTest.testCaptureLast":169,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":180,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":143,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":92,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":156,"org.easymock.tests.MockingTest.testTwoMocks":392,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":14,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":265,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":299,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":159,"org.easymock.samples.ExampleTest.removeNonExistingDocument":291,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":429,"org.easymock.tests.UsageStrictMockTest.differentMethods":48,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":244,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":457,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":404,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":114,"org.easymock.tests2.MockBuilderTest.testCreateMockString":304,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":204,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":439,"org.easymock.tests.UsageExpectAndThrowTest.floatType":259,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":151,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":436,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":311,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":507,"org.easymock.tests.UsageVerifyTest.twoThrows":178,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":213,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":106,"org.easymock.samples.ExampleTest.voteAgainstRemoval":69,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":62,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":342,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":101,"org.easymock.tests.LimitationsTest.privateConstructor":388,"org.easymock.tests2.UsageConstraintsTest.testNotNull":158,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":55,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":313,"org.easymock.tests2.UsageTest.defaultResetToNice":78,"org.easymock.samples.ExampleTest.voteAgainstRemovals":67,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":29,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":377,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":424,"org.easymock.tests.UsageVarargTest.differentLength":190,"org.easymock.tests2.CallbackTest.callback":317,"org.easymock.tests2.UsageConstraintsTest.equals":472,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":419,"org.easymock.tests.UsageTest.openCallCountByLastCall":2,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":135,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":196,"org.easymock.tests.UsageCallCountTest.tooFewCalls":228,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":89,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":256,"org.easymock.tests.UsageThrowableTest.throwCheckedException":52,"org.easymock.tests.MockingTest.testStrictClassMocking":390,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":91,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":252,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":428,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":88,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":249,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":90,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":312,"org.easymock.tests.ObjectMethodsTest.testHashCode":223,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_notFound":501,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":116,"org.easymock.tests2.NameTest.nameForNiceMock":320,"org.easymock.tests2.DependencyTest.testInterfaceMocking":161,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_default":496,"org.easymock.samples.ExampleTest.addDocument":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":449,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":453,"org.easymock.tests2.DelegateToTest.testStubDelegate":130,"org.easymock.tests2.AnswerTest.stubAnswer":110,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":46,"org.easymock.tests.UsageVarargTest.varargLongAccepted":192,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":281,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":341,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":32,"org.easymock.tests.UsageExpectAndReturnTest.floatType":16,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":111,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":288,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":463,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":153,"org.easymock.tests.UsageThrowableTest.noUpperLimit":284,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":358,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":136,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":411,"org.easymock.tests2.SerializationTest.test":164,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":333,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":403,"org.easymock.tests2.UsageConstraintsTest.testSame":141,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":15,"org.easymock.samples.SupportTest.addDocument":286,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":440,"org.easymock.tests.GenericTest.testPackageScope":61,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":401,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":371,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":462,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":394,"org.easymock.tests2.NameTest.nameForMock":318,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":26,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":486,"org.easymock.tests2.UsageStrictMockTest.differentMethods":134,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":420,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":18,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":271,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":364,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":11,"org.easymock.tests2.MockedExceptionTest.testRealException":315,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":355,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":379,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":488,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":132,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":378,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":6,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":251,"org.easymock.tests2.NameTest.nameForStrictMock":319,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":416,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":336,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":97,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":412,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":405,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":154,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":81,"org.easymock.tests2.UsageStrictMockTest.range":133,"org.easymock.tests2.UsageConstraintsTest.lessThan":160,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":498,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":459,"org.easymock.tests2.MockBuilderTest.testAddMethodWithParams_NotExisting":480,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_twoMatching":497,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":119,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":375,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":444,"org.easymock.tests2.CaptureTest.testCaptureRightOne":172,"org.easymock.tests2.UsageConstraintsTest.testOr":142,"org.easymock.tests.UsageRangeTest.combination":8,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":94,"org.easymock.tests.UsageTest.wrongArguments":182,"org.easymock.tests2.MockBuilderTest.testWithConstructor":481,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":441,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":205,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":19,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":27,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":368,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":407,"org.easymock.tests.UsageVarargTest.varargShortAccepted":191,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":231,"org.easymock.tests2.UsageConstraintsTest.cmpTo":146,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":467,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":370,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":77,"org.easymock.tests2.CaptureTest.testCaptureFromStub":335,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":241,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":415,"org.easymock.tests.UsageTest.unexpectedCallWithArray":181,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":279,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":229,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":28,"org.easymock.tests2.CaptureTest.testCapture":349,"org.easymock.tests2.UsageConstraintsTest.constraints":137,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":280,"org.easymock.samples.ExampleTest.addAndChangeDocument":292,"org.easymock.tests.UsageStrictMockTest.testVerify":282,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":295,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":278,"org.easymock.tests2.CompareToTest.testGreateThan":175,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":218,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":334,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":499,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":58,"org.easymock.tests.LimitationsTest.abstractClass":387,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":20,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":12,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":59,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":186,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":179,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":124}}]

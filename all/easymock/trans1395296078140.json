[{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:68","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    continue;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.Range:52","failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:156","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createThrowResult(java.lang.Throwable))","type":"CtInvocationImpl"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:118","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[74,75,76,77,0,78,79,1,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,64,111,111,112,112,113,114,115,116,117,118,119,51,120,121,122,123,124,125,126],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:417","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.RecordState:153","failures":[62,63,64,65,66,67,68,69,70,71,72,73],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[127,128],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:410","sourceCode":"assert java.lang.String != null : \"Method name must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.InjectionPlan:60","sourceCode":"if (!(java.util.Set<java.lang.String>.add(java.lang.String))) {\n    throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks have fieldName qualifier \\'%s\\'\", java.lang.String));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[127],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:197","sourceCode":"return java.lang.Number.shortValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:195","sourceCode":"return java.lang.Number.byteValue()","type":"CtReturnImpl"},"failures":[129,130,131,132,133,134],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MocksControl:183","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:185","sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","type":"CtReturnImpl"},"failures":[135,0,79,91,117,136,137,138,139,140],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.LogicalOperator:62","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[141,142],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.matchers.GreaterOrEqual:39","failures":[143,144,145,146],"status":-1,"binaryOperator":"int >= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:907","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:106","sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:281","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"))","type":"CtThrowImpl"},"failures":[147,148],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:82","sourceCode":"if ((java.util.List<T>.size()) > 1) {\n    throw new java.lang.AssertionError((\"More than one value captured: \" + org.easymock.Capture<T>.(getValues())));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2012","sourceCode":"org.easymock.EasyMock.getControl(java.lang.Object).replay()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[165],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplant":{"position":"org.easymock.internal.AndroidClassProxyFactory:57","sourceCode":"java.io.IOException java.io.IOException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1263","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1348","sourceCode":"org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1148","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[166],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:45","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"maximum must be >= 1\"))","type":"CtThrowImpl"},"failures":[167],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[14,17,18,32,168,38,41,42,47,53,54,169,170,55,57],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:85","sourceCode":"if (org.easymock.internal.LastControl.(org.easymock.internal.LastControl.pullMatchers()) != null) {\n    throw new java.lang.IllegalStateException(\"matcher calls were used outside expectations\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1262","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"failures":[171],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"this.java.lang.reflect.Method = this.java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:112","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"finalizeMethod","equalsMethod":"finalizeMethod"}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:89","sourceCode":"return java.util.Properties.getProperty(java.lang.String, java.lang.String)","type":"CtReturnImpl"},"failures":[172],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:235","sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:127","sourceCode":"try {\n    java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"No empty constructor can be found\" , java.lang.NoSuchMethodException);\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:211","sourceCode":"throw new java.lang.IllegalStateException(\"Picked a constructor but didn\\'t pass arguments to it\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:216","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[173],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:93","sourceCode":"while (java.lang.Class<?> != null) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.getDeclaredMethods();\n    java.lang.reflect.Method java.lang.reflect.Method = null;\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isPrivate(java.lang.reflect.Method.getModifiers())) {\n            continue;\n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            continue;\n        } \n        if (java.lang.String.equals(java.lang.reflect.Method.getName())) {\n            if (java.lang.Class<?>[] == null) {\n                if (java.lang.reflect.Method != null) {\n                    throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n                } \n                java.lang.reflect.Method = java.lang.reflect.Method;\n            } else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n                return java.lang.reflect.Method;\n            } \n        } \n    }\n    if (java.lang.reflect.Method != null) {\n        return java.lang.reflect.Method;\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:412","sourceCode":"while ((!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) && (java.lang.Class<?> != null)) {\n    final java.lang.reflect.Method[] java.lang.reflect.Method[] = java.lang.Class<?>.isInterface() ? java.lang.Class<?>.getMethods() : java.lang.Class<?>.getDeclaredMethods();\n    for (final java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[]) {\n        if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n            return java.lang.reflect.Method;\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"name":"name","searchType":"searchType","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.EasyMock:827","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterThan:34","sourceCode":"return \"gt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:101","sourceCode":"return java.util.Properties.getProperty(java.lang.String)","type":"CtReturnImpl"},"failures":[174,175,176,177,178],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:193","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:64","sourceCode":"try {\n    java.util.Properties.load(java.io.InputStream);\n} catch (final java.io.IOException java.io.IOException) {\n    throw new java.lang.RuntimeException(((\"Failed to read \" + java.lang.String) + \" file\"));\n} finally {\n    try {\n        java.io.InputStream.close();\n    } catch (final java.io.IOException java.io.IOException) {\n    }\n}","type":"CtTryImpl"},"failures":[179,175,172,177],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[180,181,182,183],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.EasyMock:1519","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.Null:39","sourceCode":"java.lang.StringBuffer.append(\"isNull()\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:61","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(org.easymock.internal.matchers.Equals.getExpected(), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[184,55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"transplant":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:149","sourceCode":"throw new java.lang.RuntimeException(\"Class mocking requires to have cglib and objenesis librairies in the classpath\" , java.lang.NoClassDefFoundError)","type":"CtThrowImpl"},"failures":[185,186],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.CompareTo:42","failures":[187],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.RecordState:117","failures":[11,188,182,189,190,191,34,192],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.ArrayEquals:37","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.ArrayEquals:39","sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)))","type":"CtReturnImpl"},"failures":[193],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1928","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:72","sourceCode":"if (!(java.lang.reflect.Method.isBridge())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:160","sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"method"}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[74,194,75,195],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1458","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[166],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:2000","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:323","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[101],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[141,142],"status":-1,"name":"inlineConstant","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":171,"org.easymock.tests2.UsageTest.argumentsOrdered":18,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":71,"org.easymock.tests2.StubTest.stubWithReturnValue":61,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":6,"org.easymock.tests2.SerializationTest.testAllMockedMethod":75,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":69,"org.easymock.tests.MockingTest.testPartialClassMocking":124,"org.easymock.samples.SupportTest.voteForRemovals":129,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":127,"org.easymock.tests.MockClassControlTest.testToString":137,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":195,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":82,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":180,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":144,"org.easymock.tests2.UsageTest.wrongArguments":14,"org.easymock.tests.UsageStrictMockTest.range":57,"org.easymock.samples.ConstructorCalledMockTest.testTax":111,"org.easymock.samples.ExampleTest.answerVsDelegate":34,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":76,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":117,"org.easymock.tests2.UsageConstraintsTest.testNull":24,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":102,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":91,"org.easymock.tests2.CaptureTest.testPrimitive":153,"org.easymock.tests.UsageTest.moreThanOneArgument":37,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":41,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":175,"org.easymock.tests.UsageUnorderedTest.message":47,"org.easymock.tests.UsageVerifyTest.twoReturns":54,"org.easymock.tests.UsageTest.argumentsOrdered":42,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":167,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":45,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":114,"org.easymock.tests2.CaptureTest.testCapture_2617107":152,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":85,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":90,"org.easymock.tests2.UsageConstraintsTest.any":26,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":70,"org.easymock.tests2.SerializationTest.testClass":74,"org.easymock.tests.LimitationsTest.mockNativeMethod":119,"org.easymock.tests2.DependencyTest.testClassMocking":185,"org.easymock.tests2.AnswerTest.answer":11,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":121,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":99,"org.easymock.tests2.CaptureTest.testAnd":150,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":5,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":107,"org.easymock.tests2.NameTest.nameForMocksControl":23,"org.easymock.tests2.MockedExceptionTest.testMockedException":63,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":40,"org.easymock.tests2.DelegateToTest.testDelegate":30,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":126,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":100,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":92,"org.easymock.tests.MockingTest.testNicePartialClassMocking":125,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":104,"org.easymock.tests2.CompareToTest.testNotComparable":187,"org.easymock.tests2.CaptureTest.testCaptureLast":157,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":72,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":173,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":1,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":166,"org.easymock.tests.MockingTest.testTwoMocks":123,"org.easymock.tests2.DependencyTest.testClassMockingSupport":186,"org.easymock.tests2.CaptureTest.testCapture1_2446744":154,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":2,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":174,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":17,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":29,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":177,"org.easymock.tests.UsageStrictMockTest.differentMethods":58,"org.easymock.tests2.EasyMockPropertiesTest.testNoEasymockPropertiesFile":176,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":165,"org.easymock.tests2.MockBuilderTest.testCreateMockString":96,"org.easymock.tests.InvocationTest.testShouldDisplayMocksToStringIfValidJavaIdentifier":140,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":188,"org.easymock.tests.UsageVerifyTest.twoThrows":53,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":9,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":83,"org.easymock.samples.PartialClassMockTest.testGetArea":113,"org.easymock.samples.ExampleTest.voteAgainstRemoval":132,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":109,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":10,"org.easymock.tests2.ThreadingTest.testChangeDefault":178,"org.easymock.tests2.UsageConstraintsTest.testNotNull":28,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":62,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":89,"org.easymock.tests2.MockBuilderTest.testCreateMock":93,"org.easymock.samples.ExampleTest.voteAgainstRemovals":130,"org.easymock.tests2.CallbackTest.callback":191,"org.easymock.tests.UsageTest.openCallCountByLastCall":39,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":184,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":67,"org.easymock.tests.UsageCallCountTest.tooFewCalls":44,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":145,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":78,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":193,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":158,"org.easymock.tests2.EasyMockPropertiesTest.testGetProperty":172,"org.easymock.tests2.EasyMockSupportClassTest.testAll":81,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":120,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":97,"org.easymock.tests2.CaptureTest.testCaptureAll":151,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":79,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":66,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":0,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":182,"org.easymock.tests2.CompareToTest.testGreateOrEqual":143,"org.easymock.samples.ExampleTest.voteForRemovals":133,"org.easymock.tests2.NameTest.nameForNiceMock":22,"org.easymock.tests.UsageVarargTest.allKinds":50,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":52,"org.easymock.samples.BasicClassMockTest.testPrintContent":115,"org.easymock.tests2.AnswerTest.stubAnswer":181,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":73,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":148,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":56,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":110,"org.easymock.samples.ExampleTest.voteForRemoval":131,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":80,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":105,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":112,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":12,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":118,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":135,"org.easymock.tests2.SerializationTest.test":194,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":155,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":141,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":48,"org.easymock.tests2.UsageConstraintsTest.testSame":25,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":68,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":147,"org.easymock.tests2.CaptureTest.testCaptureFirst":163,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":183,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":19,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":169,"org.easymock.tests.GenericTest.testPackageScope":51,"org.easymock.tests2.UsageTest.moreThanOneArgument":13,"org.easymock.tests2.CaptureTest.testCapture2_2446744":162,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":94,"org.easymock.tests.GenericTest.testBridgedEquals":128,"org.easymock.tests2.NameTest.nameForMock":20,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":95,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":8,"org.easymock.tests2.UsageStrictMockTest.differentMethods":33,"org.easymock.tests.UsageCallCountTest.tooManyCalls":46,"org.easymock.tests2.MockedExceptionTest.testRealException":65,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":31,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":77,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":86,"org.easymock.tests2.NameTest.nameForStrictMock":21,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":64,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":35,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":189,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":103,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":190,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":106,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":87,"org.easymock.tests2.UsageStrictMockTest.range":32,"org.easymock.tests2.UsageConstraintsTest.lessThan":146,"org.easymock.tests.UsageTest.exactCallCountByLastCall":43,"org.easymock.tests2.CaptureTest.testCaptureRightOne":160,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":59,"org.easymock.tests2.EasyMockPropertiesTest.testBadPropertiesFile":179,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":3,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":49,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":101,"org.easymock.tests.UsageTest.wrongArguments":38,"org.easymock.tests2.MockBuilderTest.testWithConstructor":4,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":122,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":60,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":192,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":142,"org.easymock.tests2.UsageConstraintsTest.cmpTo":27,"org.easymock.tests2.CaptureTest.testCaptureMultiple":149,"org.easymock.tests2.UsageTest.openCallCountByLastCall":15,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":16,"org.easymock.tests2.CaptureTest.testCaptureFromStub":161,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":88,"org.easymock.tests.UsageTest.unexpectedCallWithArray":168,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":170,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":55,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":7,"org.easymock.tests2.CaptureTest.testCapture":159,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":108,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":139,"org.easymock.tests.CapturesMatcherTest.test":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":84,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":138,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":156,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":98,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":134,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":116}}]

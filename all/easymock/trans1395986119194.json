[{"failures":[0,1,2,3,4,5],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    int += 1;\n    return java.util.List<org.easymock.internal.Result>.get(int);\n} ","position":"org.easymock.internal.Results:67","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:346","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl() : org.easymock.EasyMockSupport.createNiceControl()","position":"org.easymock.internal.MockBuilder:223","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:328","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.lang.Class<?>.getComponentType().equals(org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.getRawType(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)).getGenericComponentType(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)))) {\n    return false;\n} ","position":"org.easymock.internal.BridgeMethodResolver:200","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:373","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.MocksControl.MockType(org.easymock.MockType.org.easymock.MockType)","position":"org.easymock.internal.MocksControl:47","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","mockName":"mockName"},"name":"add","transplant":{"sourceCode":"if ((((java.lang.String.length()) == 0) || ((java.lang.String.indexOf(' ')) > (-1))) || (!java.lang.Character.(java.lang.Character.isJavaIdentifierStart(java.lang.String.charAt(0))))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final char char : java.lang.String.substring(1).toCharArray()) {\n    if (!java.lang.Character.(java.lang.Character.isJavaIdentifierPart(char))) {\n        return false;\n    } \n}","position":"org.easymock.internal.Invocation:199","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.io.IOException(java.lang.NoSuchMethodException.toString())","position":"org.easymock.internal.Invocation:214","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(org.easymock.internal.Range.hasFixedCount())) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"last method called on mock already has a non-fixed count set.\"));\n} ","position":"org.easymock.internal.Results:39","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.NotNull()","position":"org.easymock.internal.matchers.NotNull:29","type":"CtNewClassImpl"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(java.util.List<org.easymock.IArgumentMatcher>.get(int).matches(java.lang.Object[][int]))) {\n    return false;\n} ","position":"org.easymock.internal.ExpectedInvocation:94","type":"CtIfImpl"},"status":-1},{"failures":[67],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.easymock.internal.matchers.And:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)))","position":"org.easymock.internal.matchers.ArrayEquals:51","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","position":"org.easymock.internal.AndroidClassProxyFactory:42","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:141","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<org.easymock.IArgumentMatcher>.hasNext()) {\n    java.lang.StringBuffer.append(\", \");\n} ","position":"org.easymock.internal.matchers.And:50","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:109","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.easymock.internal.matchers.And:43","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.easymock.internal.Invocation:201","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"message":"key"},"name":"add","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.internal.ErrorMessage:40","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.EasyMockProperties.org.easymock.internal.EasyMockProperties.getInstance().getProperty(java.lang.String)","position":"org.easymock.EasyMock:2170","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"interfaces":"interfaces","length":"length","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n    final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n    if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n        java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n    } \n}","position":"org.easymock.internal.BridgeMethodResolver:382","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be <= maximum\"))","position":"org.easymock.internal.Range:37","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Number of provided arguments doesn\\'t match constructor ones\")","position":"org.easymock.ConstructorArgs:51","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Float>(float))","position":"org.easymock.EasyMock:746","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object != java.lang.Object) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:126","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.String","position":"org.easymock.LogicalOperator:62","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((T)(net.sf.cglib.proxy.Factory))","position":"org.easymock.internal.ClassProxyFactory:247","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.getControlForLastCall()","position":"org.easymock.EasyMock:551","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.BridgeMethodResolver:171","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"method":"method"},"name":"replace","transplant":{"sourceCode":"if ((java.lang.reflect.Method != null) && (!(java.lang.reflect.Method.isBridge()))) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.BridgeMethodResolver:160","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Method","position":"org.easymock.internal.Invocation:84","type":"CtReturnImpl"},"status":-2},{"failures":[68,69,70,71,72,73],"variableMapping":{"number":"number"},"name":"replace","transplant":{"sourceCode":"return java.lang.Number.byteValue()","position":"org.easymock.internal.RecordState:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Number.doubleValue()","position":"org.easymock.internal.RecordState:205","type":"CtReturnImpl"},"status":-1},{"failures":[74],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","position":"org.easymock.internal.RecordState:115","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","position":"org.easymock.internal.RecordState:126","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getResults().hasResults())) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))) {\n    continue;\n} ","position":"org.easymock.internal.UnorderedBehavior:57","type":"CtIfImpl"},"status":0},{"failures":[75,76,77],"variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:111","type":"CtAssignmentImpl"},"status":-1},{"failures":[17,78,47,79],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.checkOrder(boolean)","position":"org.easymock.internal.MocksControl:232","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"leq\"","position":"org.easymock.internal.matchers.LessOrEqual:34","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.java.lang.System.getProperty(\"java.vm.vendor\")","position":"org.easymock.internal.ClassInstantiatorFactory:39","type":"CtReturnImpl"},"status":-2},{"failures":[80,81],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"new org.easymock.internal.ObjenesisClassInstantiator()","position":"org.easymock.internal.ClassInstantiatorFactory:25","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n    if (java.lang.Class<?>[][int].isPrimitive()) {\n        java.lang.Object[][int] = org.easymock.internal.RecordState.org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class<?>[][int]);\n    } else if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isFinal(java.lang.Class<?>[][int].getModifiers())) {\n        java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int]);\n    } else {\n        final java.lang.Object java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createNiceMock(java.lang.Class<?>[][int]);\n        org.easymock.EasyMock.org.easymock.EasyMock.replay(java.lang.Object);\n        java.lang.Object[][int] = java.lang.Object;\n    }\n}","position":"org.easymock.internal.DefaultClassInstantiator:111","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((this.java.lang.Object) == null) {\n    return java.lang.Object == null;\n} ","position":"org.easymock.internal.matchers.Equals:37","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ReturningAnswer() , true)","position":"org.easymock.internal.Result:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.List<org.easymock.internal.Result>.get(int)","position":"org.easymock.internal.Results:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.Capture<T>.reset()","position":"org.easymock.Capture:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MockInvocationHandler:41","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = new java.util.ArrayList<org.easymock.internal.ErrorMessage>(java.util.List<org.easymock.internal.ExpectedInvocationAndResults>.size())","position":"org.easymock.internal.UnorderedBehavior:83","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"try {\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n    java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod();\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n}","position":"org.easymock.internal.ObjectMethodsFilter:108","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).verify()","position":"org.easymock.EasyMock:2080","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","position":"org.easymock.internal.InjectionPlan:34","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{"varArgsCount":"length","nonVarArgsCount":"length"},"name":"add","transplant":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = new java.lang.Object[int + int]","position":"org.easymock.internal.Invocation:62","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Object[] java.lang.Object[] = org.easymock.internal.Invocation.org.easymock.internal.Invocation.createObjectArray(java.lang.Object[][((java.lang.Object[].int) - 1)])","position":"org.easymock.internal.Invocation:59","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalArgumentException(\"minimum must be >= 0\"))","position":"org.easymock.internal.Range:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","position":"org.easymock.internal.MockBuilder:90","type":"CtThrowImpl"},"status":-2},{"failures":[82,32,41,42,83],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","position":"org.easymock.Capture:79","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<T>.add(T)","position":"org.easymock.Capture:109","type":"CtInvocationImpl"},"status":-1},{"failures":[23,84,85,86,87,88,89,90,45,48,49,61,62,91,92,3,63,93,94,95,96,97,98,64,65,66],"variableMapping":{"errorMessage":"buffer","matches":"matches"},"name":"add","transplant":{"sourceCode":"if (int > 1) {\n    java.lang.StringBuilder.append(\". Possible matches are marked with (+1):\");\n} else {\n    java.lang.StringBuilder.append(\":\");\n}","position":"org.easymock.internal.MocksBehavior:137","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    if (int == 1) {\n        java.lang.StringBuilder.append((org.easymock.internal.ErrorMessage.(getActualCount()) + 1));\n    } else {\n        java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n        java.lang.StringBuilder.append(\" (+1)\");\n    }\n} else {\n    java.lang.StringBuilder.append(org.easymock.internal.ErrorMessage.getActualCount());\n}","position":"org.easymock.internal.ErrorMessage:49","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.easymock.internal.Range.hasOpenCount()) {\n    return true;\n} ","position":"org.easymock.internal.Results:52","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.String + \".\") + java.lang.String","position":"org.easymock.internal.Invocation:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:1385","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","position":"org.easymock.internal.BridgeMethodResolver:257","type":"CtInvocationImpl"},"status":-2},{"failures":[82,31,32,33,34,35,36,37,38,39,99,40,41,42,43,83],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Number java.lang.Number = ((java.lang.Number)(java.lang.Object))","position":"org.easymock.internal.RecordState:193","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","position":"org.easymock.Capture:105","type":"CtSwitchImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.easymock.internal.Invocation:122","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.IArgumentMatcher org.easymock.IArgumentMatcher : java.util.List<org.easymock.IArgumentMatcher>) {\n    if (!(org.easymock.IArgumentMatcher.matches(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.easymock.internal.matchers.And:38","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.lang.Number.floatValue();\n} else if (java.lang.Class<?>.equals(java.lang.Double.java.lang.Class<java.lang.Double>)) {\n    return java.lang.Number.doubleValue();\n} else {\n    return java.lang.Number;\n}","position":"org.easymock.internal.RecordState:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.internal.matchers.NotNull()","position":"org.easymock.internal.matchers.NotNull:29","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.easymock.internal.BridgeMethodResolver:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type instanceof java.lang.Class<?> ? ((java.lang.Class<?>)(java.lang.reflect.Type)) : null","position":"org.easymock.internal.BridgeMethodResolver:362","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","position":"org.easymock.internal.MocksControl:270","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Null.org.easymock.internal.matchers.Null)","position":"org.easymock.EasyMock:1708","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()","position":"org.easymock.internal.ArgumentToString:87","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((70 * ((int - int) + 1)))","position":"org.easymock.internal.MocksBehavior:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"delegateTo":"value"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","position":"org.easymock.internal.RecordState:280","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(\", \");\n    } \n    org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer);\n}","position":"org.easymock.internal.ArgumentToString:46","type":"CtForImpl"},"status":0},{"failures":[],"binaryOperator":"(org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\")","name":"math","position":"org.easymock.internal.Invocation:110","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.ClassLoader == null) {\n    java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader();\n} ","position":"org.easymock.internal.EasyMockProperties:133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(\"\\\"\")","position":"org.easymock.internal.ArgumentToString:39","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Double.java.lang.Class<java.lang.Double>, java.lang.Double.java.lang.Double)","position":"org.easymock.internal.RecordState:65","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!boolean) {\n    org.easymock.internal.LastControl.java.lang.ThreadLocal<java.util.Stack<org.easymock.IArgumentMatcher>>.remove();\n    throw new java.lang.IllegalStateException(java.lang.String);\n} ","position":"org.easymock.internal.LastControl:102","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"result":"hashCodeMethod","method":"hashCodeMethod"},"name":"add","transplant":{"sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","position":"org.easymock.internal.ReflectionUtils:111","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ObjectMethodsFilter.org.easymock.internal.ObjectMethodsFilter.extractMethod(java.lang.Class<?>, \"hashCode\", ((java.lang.Class[])(null)))","position":"org.easymock.internal.ObjectMethodsFilter:57","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.MockType","position":"org.easymock.internal.MocksControl:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.io.Serializable.java.io.Serializable.isAssignableFrom(java.lang.Class<?>)","position":"org.easymock.internal.DefaultClassInstantiator:75","type":"CtReturnImpl"},"status":-2},{"failures":[100],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","position":"org.easymock.EasyMock:2125","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Partial mocking doesn\\'t make sense for interface\")","position":"org.easymock.internal.MocksControl:106","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Constructor<T>) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor call more than once.\");\n} ","position":"org.easymock.internal.MockBuilder:235","type":"CtIfImpl"},"status":-2},{"failures":[101,102,6,103,104,105,106,107,108,109,7,110,111,112,74,75,76,77,8,9,10,113,11,114,12,13,115,116,117,118,14,67,15,16,17,18,19,119,120,121,122,123,124,20,21,22,125,23,126,84,85,127,128,129,130,131,78,132,133,134,135,136,137,138,139,140,141,142,143,144,145,24,25,146,26,27,28,147,29,30,148,149,150,31,32,33,34,35,36,37,38,151,39,40,41,42,43,152,153,154,155,156,157,44,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,90,45,46,47,0,1,183,48,49,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,68,69,214,215,216,217,218,219,70,220,221,222,223,224,225,71,226,227,228,229,230,231,232,233,234,83,83,50,51,235,52,53,54,55,56,236,57,2,237,238,239,240,72,241,242,243,244,245,246,247,248,249,250,251,58,252,253,59,254,255,60,256,61,62,257,91,92,258,259,260,261,73,262,263,264,3,63,93,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,97,289,98,290,64,4,5,65,66,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.pop()","position":"org.easymock.internal.LastControl:133","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","position":"org.easymock.internal.LastControl:128","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.reflect.Method = org.easymock.internal.ReflectionUtils.java.lang.reflect.Method","position":"org.easymock.internal.ObjectMethodsFilter:52","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper","position":"org.easymock.internal.MocksControl:363","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","position":"org.easymock.internal.MocksControl:284","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException)","position":"org.easymock.internal.ClassProxyFactory:214","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.easymock.internal.RecordState:266","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return \"Nothing captured yet\"","position":"org.easymock.Capture:132","type":"CtReturnImpl"},"status":-2},{"failures":[85,92,63],"variableMapping":{"entry":"entry"},"name":"replace","transplant":{"sourceCode":"final boolean boolean = org.easymock.internal.ExpectedInvocationAndResults.getResults().hasValidCallCount()","position":"org.easymock.internal.UnorderedBehavior:86","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean boolean = (org.easymock.internal.Invocation != null) && (org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation().matches(org.easymock.internal.Invocation))","position":"org.easymock.internal.UnorderedBehavior:87","type":"CtLocalVariableImpl"},"status":-1},{"failures":[101,102,6,109,7,110,111,112,74,75,76,113,114,13,115,124,125,23,126,84,85,127,129,78,137,145,24,25,146,26,27,28,29,30,148,149,31,32,38,151,40,43,152,153,154,155,157,44,162,163,164,167,169,170,181,182,90,46,47,0,1,184,185,186,187,188,189,190,191,192,193,194,198,199,200,201,68,69,214,215,216,217,218,219,70,220,221,222,223,224,225,71,226,227,228,229,231,232,233,50,51,235,52,53,54,55,56,236,57,2,240,72,241,242,243,244,245,246,247,248,249,250,251,58,252,253,59,254,256,62,257,91,92,258,259,260,261,73,262,263,3,63,93,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,97,289,98,4,5,291,296,297,298,299,300,301,303,304,305,306,307],"binaryOperator":"(this.java.lang.Object) == null","name":"removeConditional","position":"org.easymock.internal.matchers.Equals:37","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.Class<T>)","position":"org.easymock.EasyMock:170","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","position":"org.easymock.EasyMock:190","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Integer>(int))","position":"org.easymock.EasyMock:759","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Defines how arguments will be captured by a <tt>Capture<\/tt> object\n * \n * @author Henri Tremblay\n * @see Capture\n */\npublic enum CaptureType {\nNONE, FIRST, LAST, ALL;}","position":"org.easymock.CaptureType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterThan<java.lang.Short>(short))","position":"org.easymock.EasyMock:971","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    java.lang.Class.java.lang.Class.forName(\"dalvik.system.PathClassLoader\");\n    org.easymock.internal.AndroidSupport.boolean = true;\n} catch (final java.lang.ClassNotFoundException java.lang.ClassNotFoundException) {\n    org.easymock.internal.AndroidSupport.boolean = false;\n}","position":"org.easymock.internal.AndroidSupport:25","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.MockBuilder<T>.createStrictMock(null)","position":"org.easymock.internal.MockBuilder:196","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.EasyMockSupport.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","position":"org.easymock.EasyMockSupport:325","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Object>.put(java.lang.Character.java.lang.Class<java.lang.Character>, java.lang.Character.java.lang.Character.valueOf(((char)(0))))","position":"org.easymock.internal.RecordState:48","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<org.easymock.internal.ErrorMessage> java.util.List<org.easymock.internal.ErrorMessage> = java.util.List<org.easymock.internal.UnorderedBehavior>.get(int).getMessages(org.easymock.internal.Invocation)","position":"org.easymock.internal.MocksBehavior:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","type":"type"},"name":"replace","transplant":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.createControl(org.easymock.MockType)","position":"org.easymock.EasyMockSupport:508","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","position":"org.easymock.internal.MockBuilder:178","type":"CtLocalVariableImpl"},"status":-2},{"failures":[308,309,310,104,311,312,105,313,314,315,316,317,318,319,320,321,106,322,323,324,325,326,107,327,328,329,330,75,331,332,333,334,335,336,337],"binaryOperator":"int < (java.lang.Object[].int)","name":"negateConditional","position":"org.easymock.ConstructorArgs:54","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<java.lang.reflect.Field>.add(java.lang.reflect.Field)","position":"org.easymock.internal.InjectionPlan:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","position":"org.easymock.internal.ObjectMethodsFilter:110","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((org.easymock.internal.Invocation.(getMockAndMethodName()) + \"(\") + org.easymock.internal.ArgumentToString.(org.easymock.internal.ArgumentToString.argumentsToString(java.lang.Object[]))) + \")\"","name":"math","position":"org.easymock.internal.Invocation:110","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.easymock.internal.Invocation:88","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Type","position":"org.easymock.internal.BridgeMethodResolver:227","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final org.easymock.internal.ErrorMessage org.easymock.internal.ErrorMessage : java.util.List<org.easymock.internal.ErrorMessage>) {\n    org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int);\n}","position":"org.easymock.internal.MocksBehavior:143","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.easymock.internal.Result(new ThrowingAnswer() , true)","position":"org.easymock.internal.Result:54","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.easymock.internal.Result","position":"org.easymock.internal.MocksBehavior:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"actualTypeArgument":"actualTypeArgument","typeVariableMap":"typeVariableMap","variable":"variable","this":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:326","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","position":"org.easymock.internal.BridgeMethodResolver:330","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ErrorMessage.appendTo(java.lang.StringBuilder, int)","position":"org.easymock.internal.MocksBehavior:144","type":"CtInvocationImpl"},"status":-2},{"failures":[6,7,13,119,22,23,24,25,26,27,28,29,30,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66],"variableMapping":{"actual":"actual"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object != null","position":"org.easymock.internal.matchers.NotNull:36","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Object.equals(java.lang.Object)","position":"org.easymock.internal.matchers.Equals:40","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"typeVariableMap":"typeVariableMap","this":"this","genericType":"genericType","type":"type"},"name":"add","transplant":{"sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","position":"org.easymock.internal.BridgeMethodResolver:266","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:254","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-6657694947057597484L","position":"org.easymock.internal.matchers.Matches:27","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.easymock.internal.MocksControl:277","type":"CtReturnImpl"},"status":-2},{"failures":[338,18],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return int >= 0","position":"org.easymock.LogicalOperator:45","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int > 0","position":"org.easymock.internal.matchers.GreaterThan:39","type":"CtReturnImpl"},"status":-1},{"failures":[],"binaryOperator":"((((\"\" + (org.easymock.internal.Invocation.getArguments().int)) + \" matchers expected, \") + (java.util.List<org.easymock.IArgumentMatcher>.size())) + \" recorded.\\n\")","name":"math","position":"org.easymock.internal.ExpectedInvocation:48","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return ((java.lang.String)(java.util.Properties.setProperty(java.lang.String, java.lang.String)))","position":"org.easymock.internal.EasyMockProperties:122","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    return ((java.lang.String)(java.util.Properties.remove(java.lang.String)));\n} ","position":"org.easymock.internal.EasyMockProperties:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:420","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.easymock.internal.UnorderedBehavior:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.easymock.EasyMock:747","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","position":"org.easymock.internal.RecordState:317","type":"CtIfImpl"},"status":-2},{"failures":[101,110,112,231,232],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","position":"org.easymock.internal.MockBuilder:164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.Throwable","position":"org.easymock.internal.ReplayState:65","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"stream":"stream"},"name":"replace","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.easymock.internal.ClassProxyFactory:130","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"public static class MockMethodInterceptor implements java.io.Serializable , net.sf.cglib.proxy.MethodInterceptor {\n    private static final long serialVersionUID = -9054190871232972342L;\n\n    private final java.lang.reflect.InvocationHandler handler;\n\n    private transient java.util.Set<java.lang.reflect.Method> mockedMethods;\n\n    public MockMethodInterceptor(final java.lang.reflect.InvocationHandler handler) {\n        this.java.lang.reflect.InvocationHandler = java.lang.reflect.InvocationHandler;\n    }\n\n    public java.lang.Object intercept(final java.lang.Object obj, java.lang.reflect.Method method, final java.lang.Object[] args, final net.sf.cglib.proxy.MethodProxy proxy) throws java.lang.Throwable {\n        if (java.lang.reflect.Modifier.java.lang.reflect.Modifier.isAbstract(java.lang.reflect.Method.getModifiers())) {\n            return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n        } \n        if ((java.lang.Object instanceof java.lang.Throwable) && (java.lang.reflect.Method.getName().equals(\"fillInStackTrace\"))) {\n            if (org.easymock.internal.ClassProxyFactory.org.easymock.internal.ClassProxyFactory.isCallerMockInvocationHandlerInvoke(new java.lang.Throwable())) {\n                return java.lang.Object;\n            } \n        } \n        if (java.lang.reflect.Method.isBridge()) {\n            java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n        } \n        if (((java.util.Set<java.lang.reflect.Method>) != null) && (!(java.util.Set<java.lang.reflect.Method>.contains(java.lang.reflect.Method)))) {\n            return net.sf.cglib.proxy.MethodProxy.invokeSuper(java.lang.Object, java.lang.Object[]);\n        } \n        return java.lang.reflect.InvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);\n    }\n\n    public void setMockedMethods(final java.lang.reflect.Method... mockedMethods) {\n        this.java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Arrays.java.util.Arrays.asList(java.lang.reflect.Method[]));\n    }\n\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    private void readObject(final java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {\n        java.io.ObjectInputStream.defaultReadObject();\n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = ((java.util.Set<org.easymock.internal.MethodSerializationWrapper>)(java.io.ObjectInputStream.readObject()));\n        if (java.util.Set<org.easymock.internal.MethodSerializationWrapper> == null) {\n            return ;\n        } \n        java.util.Set<java.lang.reflect.Method> = new java.util.HashSet<java.lang.reflect.Method>(java.util.Set<org.easymock.internal.MethodSerializationWrapper>.size());\n        for (final org.easymock.internal.MethodSerializationWrapper org.easymock.internal.MethodSerializationWrapper : java.util.Set<org.easymock.internal.MethodSerializationWrapper>) {\n            try {\n                java.util.Set<java.lang.reflect.Method>.add(org.easymock.internal.MethodSerializationWrapper.getMethod());\n            } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n                throw new java.io.IOException(java.lang.NoSuchMethodException.toString());\n            }\n        }\n    }\n\n    private void writeObject(final java.io.ObjectOutputStream stream) throws java.io.IOException {\n        java.io.ObjectOutputStream.defaultWriteObject();\n        if ((java.util.Set<java.lang.reflect.Method>) == null) {\n            java.io.ObjectOutputStream.writeObject(null);\n            return ;\n        } \n        final java.util.Set<org.easymock.internal.MethodSerializationWrapper> java.util.Set<org.easymock.internal.MethodSerializationWrapper> = new java.util.HashSet<org.easymock.internal.MethodSerializationWrapper>(java.util.Set<java.lang.reflect.Method>.size());\n        for (final java.lang.reflect.Method java.lang.reflect.Method : java.util.Set<java.lang.reflect.Method>) {\n            java.util.Set<org.easymock.internal.MethodSerializationWrapper>.add(new org.easymock.internal.MethodSerializationWrapper(java.lang.reflect.Method));\n        }\n        java.io.ObjectOutputStream.writeObject(java.util.Set<org.easymock.internal.MethodSerializationWrapper>);\n    }\n}","position":"org.easymock.internal.ClassProxyFactory:51","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.boolean = boolean","position":"org.easymock.internal.MocksBehavior:185","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.util.List<java.lang.reflect.Field>) {\n    final org.easymock.internal.InjectionTarget org.easymock.internal.InjectionTarget = org.easymock.internal.Injector.org.easymock.internal.Injector.injectionTargetWithField(java.lang.reflect.Field);\n    if (org.easymock.internal.InjectionTarget == null) {\n        continue;\n    } \n    final org.easymock.internal.Injection org.easymock.internal.Injection = org.easymock.internal.Injector.org.easymock.internal.Injector.findUniqueAssignable(java.util.List<org.easymock.internal.Injection>, org.easymock.internal.InjectionTarget);\n    if (org.easymock.internal.Injection == null) {\n        continue;\n    } \n    org.easymock.internal.InjectionTarget.inject(java.lang.Object, org.easymock.internal.Injection);\n}","position":"org.easymock.internal.Injector:181","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.reflect.Method[] != null) {\n    org.easymock.internal.ClassProxyFactory.MockMethodInterceptor.setMockedMethods(java.lang.reflect.Method[]);\n} ","position":"org.easymock.internal.ClassProxyFactory:168","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","position":"org.easymock.internal.MocksControl:267","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"constructorArgs":"constructorArgs","builder":"builder"},"name":"replace","transplant":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs())","position":"org.easymock.internal.AndroidClassProxyFactory:43","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Enum describing the 3 possibles kind of mocks\n * \n * @author Henri Tremblay\n * @since 3.2\n */\npublic enum MockType {\nNICE, DEFAULT, STRICT;}","position":"org.easymock.MockType:24","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.ReplayState.throwWrappedIllegalStateException()","position":"org.easymock.internal.ReplayState:89","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuffer.append(\"\\'\")","position":"org.easymock.internal.ArgumentToString:41","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Object[][int] = org.easymock.internal.DefaultClassInstantiator.newInstance(java.lang.Class<?>[][int])","position":"org.easymock.internal.DefaultClassInstantiator:121","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","position":"org.easymock.internal.MocksControl:214","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{"proxy":"proxy"},"name":"replace","transplant":{"sourceCode":"return ((java.lang.Class<T>)(V.getClass().getSuperclass()))","position":"org.easymock.internal.MocksControl:185","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.reflect.Proxy.java.lang.reflect.Proxy.isProxyClass(V.getClass())) {\n    return ((java.lang.Class<T>)(V.getClass().getInterfaces()[0]));\n} ","position":"org.easymock.internal.MocksControl:182","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.easymock.internal.IMocksControlState = new org.easymock.internal.RecordState(org.easymock.internal.IMocksBehavior)","position":"org.easymock.internal.MocksControl:191","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:438","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"length":"length","clazz":"clazz"},"name":"add","transplant":{"sourceCode":"if ((this.int) == 0) {\n    throw new java.lang.IllegalArgumentException((\"No visible constructors in class \" + (java.lang.Class<?>.getName())));\n} ","position":"org.easymock.internal.DefaultClassInstantiator:93","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.lang.Class<?> != null) {\n    for (int int = 0 ; int < (java.lang.Class<?>.getInterfaces().int) ; int++) {\n        final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int];\n        if (!(java.util.List<java.lang.Class<?>>.contains(java.lang.Class<?>))) {\n            java.util.List<java.lang.Class<?>>.add(java.lang.Class<?>);\n        } \n    }\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","position":"org.easymock.internal.BridgeMethodResolver:381","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getClassProxyFactory().getInvocationHandler(java.lang.Object)","position":"org.easymock.internal.MocksControl:165","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.easymock.MockType()","position":"org.easymock.MockType:27","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Collection<org.easymock.internal.matchers.Captures<?>>.add(org.easymock.internal.matchers.Captures<java.lang.Object>)","position":"org.easymock.internal.Invocation:163","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","position":"org.easymock.internal.ReflectionUtils:106","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"cls":"clazz"},"name":"add","transplant":{"sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","position":"org.easymock.internal.BridgeMethodResolver:253","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getInterfaces()[int]","position":"org.easymock.internal.BridgeMethodResolver:383","type":"CtLocalVariableImpl"},"status":-2},{"failures":[339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException((\"method call on the mock needed before setting \" + java.lang.String)))","position":"org.easymock.internal.RecordState:234","type":"CtThrowImpl"},"status":-1},{"failureDictionary":{"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":52,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":134,"org.easymock.tests2.MockedExceptionTest.testRealException":144,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":257,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":313,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":284,"org.easymock.tests.UsageVarargTest.varargIntAccepted":299,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":263,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":8,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":108,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":201,"org.easymock.tests2.UsageConstraintsTest.testContains":14,"org.easymock.tests.UsageCallCountTest.tooManyCalls":208,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":323,"org.easymock.tests2.UsageConstraintsTest.testFind":11,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":100,"org.easymock.tests2.CompareToTest.testGreateThan":338,"org.easymock.tests2.StubTest.stubWithReturnValue":7,"org.easymock.tests.UsageVarargTest.allKinds":307,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":36,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":328,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":268,"org.easymock.tests2.CaptureTest.testCaptureAll":32,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":240,"org.easymock.samples.ExampleTest.addAndChangeDocument":194,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":165,"org.easymock.tests.UsageVarargTest.varargCharAccepted":300,"org.easymock.tests2.CaptureTest.testCaptureFromStub":41,"org.easymock.tests.UsageVerifyTest.twoThrows":63,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":331,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":252,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":301,"org.easymock.tests2.DelegateToTest.testReturnException":110,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongPrimitive":332,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":47,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":17,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":149,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":125,"org.easymock.tests2.CaptureTest.testAnd":31,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":81,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":277,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":39,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":232,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":281,"org.easymock.tests2.UsageConstraintsTest.testMatches":16,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":210,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":349,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":350,"org.easymock.tests2.UsageConstraintsTest.testNull":114,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":174,"org.easymock.tests2.EasyMockSupportClassTest.testAll":104,"org.easymock.tests2.PartialMockingTest.testPartialMock_InvalidParams":330,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":27,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":224,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":285,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":162,"org.easymock.tests.UsageThrowableTest.throwError":50,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":230,"org.easymock.tests2.UsageConstraintsTest.greaterThan":18,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":297,"org.easymock.samples.SupportTest.addDocument":198,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":254,"org.easymock.tests2.StubTest.stub":109,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":79,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":244,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":58,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":359,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":29,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":119,"org.easymock.tests.UsageExpectAndReturnTest.object":221,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":229,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":360,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":306,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":127,"org.easymock.tests.UsageExpectAndThrowTest.object":279,"org.easymock.tests2.DelegateToTest.testWrongClass":112,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":155,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":341,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":248,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":325,"org.easymock.tests2.UsageTest.moreThanOneArgument":90,"org.easymock.tests.UsageVarargTest.varargByteAccepted":305,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButPrivate":335,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":276,"org.easymock.tests.UsageTest.wrongArguments":64,"org.easymock.samples.ExampleTest.voteAgainstRemoval":191,"org.easymock.tests.CapturesMatcherTest.test":83,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":212,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":55,"org.easymock.tests.UsageVarargTest.varargShortAccepted":303,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":280,"org.easymock.tests2.UsageTest.defaultResetToNice":183,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":143,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":243,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":156,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":200,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":170,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":310,"org.easymock.tests2.MockBuilderTest.testCreateMock":171,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":157,"org.easymock.tests2.SerializationTest.testAllMockedMethod":77,"org.easymock.tests2.NameTest.nameForMocksControl":89,"org.easymock.samples.ExampleTest.voteAgainstRemovals":188,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":22,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":293,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":59,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":236,"org.easymock.tests2.CaptureTest.testCapture1_2446744":35,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":185,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":316,"org.easymock.tests2.DelegateToTest.testStubDelegate":111,"org.easymock.tests.LimitationsTest.mockNativeMethod":255,"org.easymock.tests.UsageUnorderedTest.message":97,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":353,"org.easymock.samples.ExampleTest.answerVsDelegate":189,"org.easymock.samples.ExampleTest.voteForRemoval":190,"org.easymock.tests.UsageCallCountTest.tooFewCalls":203,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":220,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":102,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":205,"org.easymock.tests.UsageVerifyTest.twoReturns":93,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":324,"org.easymock.tests2.PartialMockingTest.testPartialMock_ConstructorNotFound":329,"org.easymock.tests2.DependencyTest.testInterfaceMocking":163,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":216,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":278,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":352,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":145,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":247,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":354,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":146,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":161,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":115,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":258,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":265,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingMultiple":95,"org.easymock.tests2.CaptureTest.testCaptureRightOne":40,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":218,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":202,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":266,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":141,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":132,"org.easymock.tests2.UsageConstraintsTest.cmpTo":118,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":314,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":222,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":176,"org.easymock.tests2.MockedExceptionTest.testMockedException":142,"org.easymock.tests.UsageThrowableTest.throwCheckedException":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":309,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":357,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":123,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":261,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":288,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":3,"org.easymock.samples.PartialClassMockTest.testGetArea":197,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":346,"org.easymock.samples.ExampleTest.voteForRemovals":193,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":235,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":2,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":15,"org.easymock.samples.ConstructorCalledMockTest.testTax":195,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":233,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":249,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":315,"org.easymock.tests2.UsageTest.argumentsOrdered":49,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":78,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":289,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":103,"org.easymock.tests2.CaptureTest.testCaptureMultiple":82,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":217,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":209,"org.easymock.tests2.AnswerTest.answer":101,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":339,"org.easymock.tests.MockingTest.testNicePartialClassMocking":238,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_PrimitiveForObject":336,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":62,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":69,"org.easymock.tests2.UsageConstraintsTest.any":117,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":340,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":70,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":245,"org.easymock.tests2.CaptureTest.testCapture":99,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":343,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":262,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":148,"org.easymock.tests.UsageExpectAndThrowTest.longType":272,"org.easymock.tests2.CallbackTest.callback":44,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":140,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":286,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":106,"org.easymock.tests2.NameTest.nameForMock":86,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":147,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":347,"org.easymock.tests.UsageTest.argumentsOrdered":66,"org.easymock.tests2.UsageConstraintsTest.orOverloaded":113,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":169,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":67,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":228,"org.easymock.tests2.NameTest.nameForStrictMock":87,"org.easymock.tests2.MockBuilderTest.testCreateMockString":173,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":253,"org.easymock.tests2.CaptureTest.testCaptureNone":151,"org.easymock.tests2.SerializationTest.test":76,"org.easymock.tests.UsageExpectAndReturnTest.longType":215,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":37,"org.easymock.tests2.SerializationTest.testClass":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":345,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":358,"org.easymock.tests2.CaptureTest.testCaptureFirst":43,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":120,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":186,"org.easymock.tests2.UsageTest.niceToStrict":46,"org.easymock.tests2.EasyMockSupportTest.testVerify":150,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":246,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":213,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":168,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":60,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":274,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":122,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":181,"org.easymock.tests2.UsageTest.strictResetToDefault":182,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":282,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":308,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":137,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":172,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":227,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":264,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":269,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":116,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":178,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":219,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":158,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":133,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":19,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":131,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":298,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":128,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":251,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":239,"org.easymock.tests2.UsageConstraintsTest.testOr":13,"org.easymock.tests2.DelegateToTest.testDelegate":74,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":154,"org.easymock.tests2.UsageConstraintsTest.testNotNull":124,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":126,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":152,"org.easymock.tests2.CaptureTest.testCapture_2617107":33,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":355,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":56,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":72,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":223,"org.easymock.tests2.ThreadingTest.testThreadSafe":153,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":1,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":356,"org.easymock.tests.UsageThrowableTest.noUpperLimit":51,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":260,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":175,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":177,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":327,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":30,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":24,"org.easymock.tests.UsageExpectAndReturnTest.floatType":214,"org.easymock.tests2.UsageTest.wrongArguments":45,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":311,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":160,"org.easymock.tests2.UsageConstraintsTest.testSame":12,"org.easymock.tests2.UsageTest.resumeIfFailure":184,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":337,"org.easymock.tests.UsageOverloadedMethodTest.overloading":57,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":179,"org.easymock.samples.SupportTest.voteForRemovals":199,"org.easymock.tests.UsageRangeTest.combination":292,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":54,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":321,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":318,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":196,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_TypeExistsButNotStatic":334,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":20,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":296,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":317,"org.easymock.tests.UsageTest.openCallCountByLastCall":4,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":275,"org.easymock.tests2.NameTest.nameForNiceMock":88,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":294,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":326,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":259,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":23,"org.easymock.tests2.CaptureTest.testPrimitive":34,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":130,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":225,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":283,"org.easymock.samples.BasicClassMockTest.testPrintContent":187,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":267,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":241,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingOne":96,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":135,"org.easymock.tests.UsageExpectAndThrowTest.floatType":271,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":322,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":71,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":129,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":139,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":207,"org.easymock.tests2.UsageStrictMockTest.differentMethods":85,"org.easymock.tests.UsageTest.exactCallCountByLastCall":291,"org.easymock.tests2.AnswerTest.stubAnswer":6,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":319,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":25,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":28,"org.easymock.tests2.CaptureTest.testCaptureLast":38,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":206,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":270,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":204,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":105,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":164,"org.easymock.tests.UsageStrictMockTest.range":91,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":5,"org.easymock.tests.UsageTest.unexpectedCallWithArray":290,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":320,"org.easymock.tests.MockingTest.testPartialClassMocking":237,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":226,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":342,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":48,"org.easymock.tests2.UsageConstraintsTest.constraints":10,"org.easymock.samples.ExampleTest.addDocument":192,"org.easymock.tests.ErrorMessageTest.testAppendTo_matchingNone":94,"org.easymock.tests2.UsageConstraintsTest.lessThan":21,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":234,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":159,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":65,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":231,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":73,"org.easymock.tests.UsageVarargTest.varargLongAccepted":304,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":136,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_WrongArgument":333,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":138,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":351,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":61,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":287,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":107,"org.easymock.tests2.UsageStrictMockTest.range":84,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":180,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":211,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":344,"org.easymock.tests.UsageTest.moreThanOneArgument":98,"org.easymock.tests2.UsageTest.openCallCountByLastCall":0,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":242,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":166,"org.easymock.tests.UsageStrictMockTest.differentMethods":92,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":80,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":26,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":9,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":167,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":348,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":273,"org.easymock.tests.UsageVarargTest.differentLength":302,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":68,"org.easymock.tests2.CaptureTest.testCapture2_2446744":42,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":312,"org.easymock.tests.GenericTest.testPackageScope":295}}]

[{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:301","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.LastControl:92","failures":[1,2,3,4,5,6,7,8,9],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:70","sourceCode":"assert java.lang.reflect.Method != null : \"Method must not be null\"","type":"CtAssertImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:75","sourceCode":"if (java.lang.reflect.Method.isBridge()) {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"bridgeMethod":"m"}},{"position":"org.easymock.internal.EasyMockProperties:119","failures":[10,11,12],"status":-1,"binaryOperator":"java.lang.String == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:69","sourceCode":"throw new java.lang.IllegalArgumentException(\"Final methods can\\'t be mocked\")","type":"CtThrowImpl"},"failures":[13,14],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:314","sourceCode":"if (java.lang.Throwable instanceof java.lang.RuntimeException) {\n    return true;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:317","sourceCode":"if (java.lang.Throwable instanceof java.lang.Error) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[15,16],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:113","sourceCode":"this.java.lang.reflect.Constructor<T> = ((java.lang.reflect.Constructor<T>)(java.lang.reflect.Constructor<?>))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:139","sourceCode":"java.lang.reflect.Constructor<T> = org.easymock.internal.ReflectionUtils.org.easymock.internal.ReflectionUtils.getConstructor(java.lang.Class<T>, java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructor":"constructor"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:285","sourceCode":"org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())).getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:270","sourceCode":"org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","pt":"pt","this":"this"}},{"transplant":{"position":"org.easymock.EasyMockSupport:71","sourceCode":"return org.easymock.EasyMockSupport.createStrictControl().createMock(java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:256","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[17],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Compare:55","sourceCode":"return org.easymock.LogicalOperator.matchResult(java.util.Comparator<? super T>.compare(((T)(java.lang.Object)), T))","type":"CtReturnImpl"},"failures":[18],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.GreaterThan:39","failures":[19,20],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:245","sourceCode":"net.sf.cglib.proxy.Factory.getCallback(0)","type":"CtInvocationImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,17,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,0,80,81,82],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ObjectMethodsFilter:83","failures":[83,84,21,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,23,25,116,27,117,118,1,119,2,120,121,122,123,124,125,126,3,127,128,129,42,43,130,44,45,46,48,55,131,4,5,132,133,134,6,7,135,136,137,138,139,140,141,18,20,142,9,143,144,145,146,147,148,149,56,57,58,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,60,61,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,64,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,65,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,15,246,247,16,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,66,67,272,75,76,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"status":-1,"binaryOperator":"(java.lang.Object == (java.lang.Object[][0]))","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1916","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:183","sourceCode":"return org.easymock.EasyMockSupport.createControl().createMock(java.lang.String, java.lang.Class<T>, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[295],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:959","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:164","sourceCode":"throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[296],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.EasyMock:1333","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:2125","sourceCode":"throw new java.lang.IllegalStateException(\"current arguments are only available when executing callback methods\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:241","sourceCode":"throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"void method cannot return a value\"))","type":"CtThrowImpl"},"failures":[296],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.LessThan:39","failures":[297,149],"status":-1,"binaryOperator":"int < 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:2124","failures":[85,86,87,91,92,171],"status":-1,"binaryOperator":"org.easymock.internal.Invocation == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:136","sourceCode":"return org.easymock.EasyMock.createControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:122","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[298,17,54],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","this":"this"}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[272],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ReplayState:68","sourceCode":"org.easymock.internal.LastControl.popCurrentInvocation()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1120","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportAnd(2)","type":"CtInvocationImpl"},"failures":[7,135],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:266","sourceCode":"while (java.lang.Class<?>.isMemberClass()) {\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:254","sourceCode":"while (!(java.lang.Object.java.lang.Object.equals(java.lang.Class<?>))) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.populateTypeMapFromParameterizedType(java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    } \n    org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractTypeVariablesFromGenericInterfaces(java.lang.Class<?>.getGenericInterfaces(), java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    java.lang.reflect.Type = java.lang.Class<?>.getGenericSuperclass();\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","genericType":"genericType","type":"type","this":"this"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:1079","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.InstanceOf(java.lang.Class<T>))","type":"CtInvocationImpl"},"failures":[2,4,7,9],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:128","sourceCode":"java.lang.ClassLoader = java.lang.Thread.java.lang.Thread.currentThread().getContextClassLoader()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:135","sourceCode":"java.lang.ClassLoader = java.lang.Object.getClass().getClassLoader()","type":"CtAssignmentImpl"},"failures":[299],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.matchers.Equals:53","failures":[100,300,212],"status":-1,"binaryOperator":"(java.lang.Object == null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"failures":[301],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.Capture:118","sourceCode":"org.easymock.Capture<T>.reset()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.Capture:105","sourceCode":"switch (org.easymock.CaptureType) {\n    case NONE :\n        break;\n    case ALL :\n        java.util.List<T>.add(T);\n        break;\n    case FIRST :\n        if (!org.easymock.Capture<T>.(hasCaptured())) {\n            java.util.List<T>.add(T);\n        } \n        break;\n    case LAST :\n        if (org.easymock.Capture<T>.hasCaptured()) {\n            org.easymock.Capture<T>.reset();\n        } \n        java.util.List<T>.add(T);\n        break;\n    default :\n        throw new java.lang.IllegalArgumentException((\"Unknown capture type: \" + (org.easymock.CaptureType)));\n}","type":"CtSwitchImpl"},"failures":[302,119,128,129,303],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2053","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).resetToDefault()","type":"CtInvocationImpl"},"failures":[94],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"delegateTo":"mock"}},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:305","sourceCode":"return ((org.easymock.internal.Result) != null) || org.easymock.internal.RecordState.(lastMethodIsVoidMethod())","type":"CtReturnImpl"},"failures":[83,304,84,21,85,86,87,88,89,90,91,92,93,94,95,305,96,97,98,99,306,100,307,101,102,103,104,105,106,107,108,109,308,110,111,112,113,114,115,23,24,309,25,116,26,310,311,27,28,29,30,312,298,313,314,117,118,32,35,37,38,40,1,119,2,120,121,122,123,124,125,126,3,128,129,42,43,130,44,45,46,48,51,52,17,55,131,4,5,132,133,134,6,7,135,8,136,137,138,139,140,141,18,20,142,9,143,144,145,146,147,148,149,58,151,152,153,154,155,156,157,158,159,160,315,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,59,60,61,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,64,208,209,316,210,211,212,317,213,318,214,215,216,217,218,219,220,221,222,223,224,225,65,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,15,246,247,16,248,249,250,251,252,253,260,262,263,264,265,266,319,267,268,269,270,271,66,67,273,274,275,281,282,283,320,284,321,285,286,322,287,323,288,289,290,291,292,324,0,80,81,293,294],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.MockBuilder:163","sourceCode":"if ((org.easymock.ConstructorArgs) != null) {\n    throw new java.lang.IllegalStateException(\"Trying to define the constructor arguments more than once.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.AndroidClassProxyFactory:42","sourceCode":"if (org.easymock.ConstructorArgs != null) {\n    com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(org.easymock.ConstructorArgs.getConstructor().getParameterTypes()).constructorArgValues(org.easymock.ConstructorArgs.getInitArgs());\n} else {\n    try {\n        org.easymock.internal.DefaultClassInstantiator org.easymock.internal.DefaultClassInstantiator = new org.easymock.internal.DefaultClassInstantiator();\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?> = org.easymock.internal.DefaultClassInstantiator.getConstructorToUse(java.lang.Class<T>);\n        java.lang.Object[] java.lang.Object[] = org.easymock.internal.DefaultClassInstantiator.getArgsForTypes(java.lang.reflect.Constructor<?>.getParameterTypes());\n        com.google.dexmaker.stock.ProxyBuilder<T>.constructorArgTypes(java.lang.reflect.Constructor<?>.getParameterTypes()).constructorArgValues(java.lang.Object[]);\n    } catch (java.lang.InstantiationException java.lang.InstantiationException) {\n        throw new java.lang.RuntimeException((\"Fail to instantiate mock for \" + java.lang.Class<T>));\n    }\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"constructorArgs":"constructorArgs"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injection:82","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[325,326,327,328,329,330,331,332],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MockBuilder:235","failures":[304,311,333,334,335,336,337,338,339,340,341,342,343,344,345],"status":-1,"binaryOperator":"(java.lang.reflect.Constructor<T>) != null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:192","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportLastControl(null)","type":"CtInvocationImpl"},"failures":[346,347],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.EasyMockProperties:63","sourceCode":"java.io.InputStream = new java.io.BufferedInputStream(java.io.InputStream)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.EasyMockProperties:70","sourceCode":"java.io.InputStream.close()","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"in":"in"}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[304,84,21,348],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:225","sourceCode":"return ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:227","sourceCode":"return java.lang.reflect.Type","type":"CtReturnImpl"},"failures":[349,272],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"genericType":"genericType"}},{"transplantationPoint":{"position":"org.easymock.ConstructorArgs:69","sourceCode":"continue","type":"CtContinueImpl"},"failures":[309,310,350,333,334,335,336,338,339,351,352],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[1,2,3,4,5,133,6,7,8,9,147],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[353,354,355,356,357,323],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:70","sourceCode":"if (java.util.Stack<org.easymock.IArgumentMatcher> == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:74","sourceCode":"return new java.util.ArrayList<org.easymock.IArgumentMatcher>(java.util.Stack<org.easymock.IArgumentMatcher>)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"stack":"stack"}},{"transplantationPoint":{"position":"org.easymock.EasyMock:772","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.GreaterOrEqual<java.lang.Long>(long))","type":"CtInvocationImpl"},"failures":[135],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[349,272],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1093","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:98","sourceCode":"return (java.lang.String) != null ? java.lang.String : \"EasyMock for \" + org.easymock.internal.MocksControl.(org.easymock.internal.MocksControl.getMockedType(java.lang.Object))","type":"CtReturnImpl"},"failures":[83,358,93,95,305,96,97,100,307,101,102,104,106,108,109,110,111,115,24,309,26,310,312,298,313,314,31,32,33,37,38,39,40,41,43,50,17,54,4,18,151,359,315,162,163,164,165,166,62,360,361,63,362,363,208,209,355,316,212,317,213,318,214,215,364,218,219,225,365,366,367,368,369,370,319,71,72,73,273,274,275,371,372,320,373,284,322,323,288,289,290,291,292],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[304,84,21,348],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:66","sourceCode":"return \"\" + (int)","type":"CtReturnImpl"},"failures":[95,305,100,307,312,298,313,314,162,165,209,316,212,317,225,274,275,323,288,291],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[374,375],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ClassProxyFactory:204","sourceCode":"try {\n    java.lang.reflect.Constructor<?>.setAccessible(true);\n    T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:207","sourceCode":"T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())))","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"mock":"mock","args":"args","cstr":"cstr"}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Equals:54","sourceCode":"return false","type":"CtReturnImpl"},"failures":[300],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1594","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(byte[]))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.ArgumentToString:50","sourceCode":"org.easymock.internal.ArgumentToString.org.easymock.internal.ArgumentToString.appendArgument(java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int), java.lang.StringBuffer)","type":"CtInvocationImpl"},"failures":[353,354,355,316,210,211,212,317,213,356,357,284,323,288],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:115","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"answer\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:125","sourceCode":"org.easymock.internal.RecordState.requireValidDelegation(java.lang.Object)","type":"CtInvocationImpl"},"failures":[376],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Result:110","sourceCode":"return boolean","type":"CtReturnImpl"},"failures":[281,282],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":5,"org.easymock.tests2.UsageTest.argumentsOrdered":307,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":208,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":112,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":359,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":259,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":97,"org.easymock.tests2.StubTest.stubWithReturnValue":118,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":336,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":197,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":146,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":169,"org.easymock.tests2.SerializationTest.testAllMockedMethod":21,"org.easymock.tests2.DelegateToTest.testReturnException":152,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":257,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor_NoEmptyConstructor":342,"org.easymock.tests.MockingTest.testPartialClassMocking":0,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":354,"org.easymock.samples.SupportTest.voteForRemovals":168,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":349,"org.easymock.tests.MockClassControlTest.testToString":71,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":238,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":54,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":348,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":226,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":28,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":347,"org.easymock.tests.UsageExpectAndThrowTest.object":236,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":90,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":143,"org.easymock.tests2.DelegateToTest.testWrongClass":154,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":252,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":253,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":135,"org.easymock.tests2.UsageTest.wrongArguments":305,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":183,"org.easymock.samples.ConstructorCalledMockTest.testTax":344,"org.easymock.tests.UsageStrictMockTest.range":290,"org.easymock.samples.ExampleTest.answerVsDelegate":171,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":308,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":63,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":23,"org.easymock.tests2.UsageConstraintsTest.testNull":133,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":237,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":44,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":76,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":37,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":111,"org.easymock.tests2.CaptureTest.testPrimitive":120,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":187,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":245,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":212,"org.easymock.tests.UsageTest.moreThanOneArgument":209,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":130,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":356,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":278,"org.easymock.tests2.CaptureTest.testCaptureNone":125,"org.easymock.tests2.EasyMockPropertiesTest.testNoThreadContextClassLoader":299,"org.easymock.tests.UsageUnorderedTest.message":225,"org.easymock.tests.UsageVerifyTest.twoReturns":275,"org.easymock.tests.UsageVarargTest.varargByteAccepted":269,"org.easymock.tests2.ThreadingTest.testThreadSafe":156,"org.easymock.tests.UsageTest.argumentsOrdered":317,"org.easymock.tests.UsageVarargTest.varargIntAccepted":264,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":217,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":369,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":60,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":220,"org.easymock.tests2.CaptureTest.testCapture_2617107":2,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":31,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":332,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":186,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":36,"org.easymock.tests2.UsageConstraintsTest.any":136,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":301,"org.easymock.tests2.StubTest.stub":117,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":224,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":258,"org.easymock.tests.UsageExpectAndThrowTest.longType":229,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":163,"org.easymock.tests2.SerializationTest.testClass":304,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":151,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":83,"org.easymock.tests.LimitationsTest.mockNativeMethod":65,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":207,"org.easymock.tests2.AnswerTest.answer":85,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":68,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests2.CaptureTest.testAnd":1,"org.easymock.tests2.UsageTest.strictResetToDefault":94,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":335,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":50,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":166,"org.easymock.tests2.NameTest.nameForMocksControl":314,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":325,"org.easymock.tests2.MockedExceptionTest.testMockedException":57,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":277,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":285,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":107,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":211,"org.easymock.tests2.DelegateToTest.testDelegate":155,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":230,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":81,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":42,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":38,"org.easymock.tests.MockingTest.testNicePartialClassMocking":80,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":241,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":46,"org.easymock.tests2.CaptureTest.testCaptureLast":124,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":260,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":367,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":310,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":7,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":144,"org.easymock.tests.MockingTest.testTwoMocks":79,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":366,"org.easymock.tests2.CaptureTest.testCapture1_2446744":121,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":350,"org.easymock.tests2.EasyMockClassExtensionTest.testDisablingClassMocking":10,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":188,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":239,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":234,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":100,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":148,"org.easymock.tests2.EasyMockPropertiesTest.testGetInstance":11,"org.easymock.tests.UsageThrowableTest.throwError":15,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":326,"org.easymock.tests.UsageStrictMockTest.differentMethods":291,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":361,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":158,"org.easymock.tests2.MockBuilderTest.testCreateMockString":41,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":69,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":280,"org.easymock.tests.UsageExpectAndThrowTest.floatType":228,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":18,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":86,"org.easymock.tests.UsageVerifyTest.twoThrows":274,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":371,"org.easymock.tests2.MockBuilderTest.testWithConstructor_WrongClass":340,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":351,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":29,"org.easymock.samples.PartialClassMockTest.testGetArea":59,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":221,"org.easymock.samples.ExampleTest.voteAgainstRemoval":173,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":296,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":52,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":370,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":227,"org.easymock.tests2.UsageTest.niceToStrict":96,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":352,"org.easymock.tests2.ThreadingTest.testChangeDefault":12,"org.easymock.tests2.UsageConstraintsTest.testNotNull":147,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":251,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":56,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":35,"org.easymock.tests2.UsageTest.defaultResetToNice":306,"org.easymock.tests2.MockBuilderTest.testCreateMock":39,"org.easymock.samples.ExampleTest.voteAgainstRemovals":170,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":203,"org.easymock.tests.UsageVarargTest.differentLength":319,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":295,"org.easymock.tests2.CallbackTest.callback":115,"org.easymock.tests2.UsageConstraintsTest.equals":300,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":343,"org.easymock.tests.UsageTest.openCallCountByLastCall":210,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":353,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":235,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":108,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":55,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":318,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":185,"org.easymock.tests.UsageCallCountTest.tooFewCalls":215,"org.easymock.tests.UsageOverloadedMethodTest.overloading":181,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":283,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":140,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":199,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":25,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":180,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":139,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":126,"org.easymock.tests.UsageThrowableTest.throwCheckedException":248,"org.easymock.tests.MockClassControlTest.testEquals":75,"org.easymock.tests2.EasyMockSupportClassTest.testAll":27,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":67,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":357,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":243,"org.easymock.tests.MockingTest.testStrictClassMocking":77,"org.easymock.tests2.CaptureTest.testCaptureAll":119,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":26,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":179,"org.easymock.tests.MockNameTest.defaultName":365,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":358,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":309,"org.easymock.tests2.UsageConstraintsTest.testMatches":141,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":116,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":88,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":279,"org.easymock.samples.ExampleTest.voteForRemovals":175,"org.easymock.tests2.NameTest.nameForNiceMock":313,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":160,"org.easymock.tests.UsageVarargTest.allKinds":271,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":273,"org.easymock.tests2.DependencyTest.testInterfaceMocking":89,"org.easymock.samples.BasicClassMockTest.testPrintContent":61,"org.easymock.samples.ExampleTest.addDocument":174,"org.easymock.tests2.DelegateToTest.testStubDelegate":153,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":250,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":315,"org.easymock.tests2.AnswerTest.stubAnswer":87,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":376,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":330,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":261,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":288,"org.easymock.tests2.UsageConstraintsTest.greaterThan":20,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":321,"org.easymock.tests.UsageVarargTest.varargLongAccepted":268,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":17,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":292,"org.easymock.samples.ExampleTest.voteForRemoval":172,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":53,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":157,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":206,"org.easymock.tests.UsageExpectAndReturnTest.floatType":190,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":362,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":311,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":47,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":345,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":372,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":331,"org.easymock.tests.UsageThrowableTest.noUpperLimit":246,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":142,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":93,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":64,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":131,"org.easymock.tests2.SerializationTest.test":84,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":122,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":337,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":374,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":105,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":247,"org.easymock.tests2.UsageConstraintsTest.testSame":134,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":189,"org.easymock.samples.SupportTest.addDocument":167,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":256,"org.easymock.tests2.CaptureTest.testCaptureFirst":129,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":106,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":102,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":373,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":195,"org.easymock.tests.GenericTest.testPackageScope":66,"org.easymock.tests2.UsageTest.moreThanOneArgument":95,"org.easymock.tests2.CaptureTest.testCapture2_2446744":128,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":159,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":40,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":270,"org.easymock.tests.GenericTest.testBridgedEquals":272,"org.easymock.tests2.NameTest.nameForMock":312,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":218,"org.easymock.tests.UsageExpectAndReturnTest.longType":191,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":103,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":244,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":200,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":14,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":145,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":339,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":242,"org.easymock.tests2.UsageStrictMockTest.differentMethods":165,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":276,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":49,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":192,"org.easymock.tests.UsageCallCountTest.tooManyCalls":219,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":240,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":254,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":286,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":214,"org.easymock.tests2.MockedExceptionTest.testRealException":150,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":363,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":196,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":328,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs_NotExisting":341,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":231,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":162,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":249,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":184,"org.easymock.tests.MockingTest.testNiceClassMocking":82,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":24,"org.easymock.tests.MockingTest.testClassMocking":78,"org.easymock.tests2.NameTest.nameForStrictMock":298,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":13,"org.easymock.tests2.UsageConstraintsTest.testContains":138,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":58,"org.easymock.tests2.UsageConstraintsTest.testFind":132,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":182,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":34,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":91,"org.easymock.tests.MockTypeTest.fromEasyMockClass":360,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":45,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":322,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":92,"org.easymock.tests.UsageExpectAndReturnTest.object":198,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":22,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":9,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":48,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":32,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":327,"org.easymock.tests2.UsageStrictMockTest.range":164,"org.easymock.tests2.UsageConstraintsTest.lessThan":149,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":110,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":266,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":329,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":255,"org.easymock.tests.UsageTest.exactCallCountByLastCall":213,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":178,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":104,"org.easymock.tests2.CaptureTest.testCaptureRightOne":3,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":346,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":293,"org.easymock.tests2.UsageConstraintsTest.testOr":6,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":333,"org.easymock.tests.UsageRangeTest.combination":284,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":262,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":204,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":43,"org.easymock.tests.UsageTest.wrongArguments":316,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":282,"org.easymock.tests2.MockBuilderTest.testWithConstructor":334,"org.easymock.tests.MockClassControlTest.testHashCode":74,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":70,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":193,"org.easymock.tests2.EasyMockSupportTest.testVerify":114,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":201,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":294,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":375,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":281,"org.easymock.tests.UsageVarargTest.varargShortAccepted":267,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":364,"org.easymock.tests2.UsageConstraintsTest.cmpTo":137,"org.easymock.tests.UsageVarargTest.varargCharAccepted":265,"org.easymock.tests2.CaptureTest.testCaptureMultiple":302,"org.easymock.tests2.CompareToTest.testLessThan":297,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":161,"org.easymock.tests2.UsageTest.openCallCountByLastCall":98,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":99,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":113,"org.easymock.tests2.CaptureTest.testCaptureFromStub":127,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":33,"org.easymock.tests.UsageTest.unexpectedCallWithArray":355,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":368,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":233,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":323,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":16,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":216,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":338,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":202,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":289,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":73,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":51,"org.easymock.tests2.UsageConstraintsTest.constraints":4,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":232,"org.easymock.samples.ExampleTest.addAndChangeDocument":176,"org.easymock.tests.CapturesMatcherTest.test":303,"org.easymock.tests.UsageStrictMockTest.testVerify":324,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":205,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":177,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":287,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":72,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":30,"org.easymock.tests2.CompareToTest.testGreateThan":19,"org.easymock.tests2.UsageTest.resumeIfFailure":101,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":123,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":222,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":194,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":62,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":320,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":223,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":263,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":109}}]

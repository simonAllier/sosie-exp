[{"position":"org.easymock.internal.BridgeMethodResolver:321","failures":[0],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.MockBuilder:178","failures":[1],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[2,3,4,5,6,7],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:92","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.assertState(((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int), ((((\"\" + int) + \" matchers expected, \") + (java.util.Stack<org.easymock.IArgumentMatcher>.size())) + \" recorded.\"))","type":"CtInvocationImpl"},"failures":[8,9],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:77","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:430","sourceCode":"final java.util.List<java.lang.reflect.Method> java.util.List<java.lang.reflect.Method> = new java.util.LinkedList<java.lang.reflect.Method>()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.Range:52","failures":[10,11,12,13,14,15,16,17,18,19,9,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,6,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"status":-1,"binaryOperator":"(int) == (int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:125","sourceCode":"java.util.Stack<org.easymock.internal.Invocation> = new java.util.Stack<org.easymock.internal.Invocation>()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.LastControl:128","sourceCode":"java.util.Stack<org.easymock.internal.Invocation>.push(org.easymock.internal.Invocation)","type":"CtInvocationImpl"},"failures":[57,10,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,15,96,16,17,97,98,99,100,101,102,18,19,103,104,105,9,20,106,107,108,109,110,111,112,113,114,115,116,117,21,22,118,119,120,121,122,23,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,1,163,164,165,24,166,167,168,25,169,26,27,170,171,28,29,172,30,31,173,32,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,33,200,201,202,202,203,204,34,205,206,207,208,209,210,211,212,213,35,36,37,38,214,215,216,217,218,219,220,6,39,221,40,41,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,42,239,240,241,242,243,244,245,43,246,44,247,248,45,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,46,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,47,48,7,49,50,51,52,53,54,305,306],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:1459","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassProxyFactory:188","sourceCode":"try {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, new net.sf.cglib.proxy.Callback[]{ org.easymock.internal.ClassProxyFactory.MockMethodInterceptor });\n    if (org.easymock.ConstructorArgs != null) {\n        java.lang.reflect.Constructor<?> java.lang.reflect.Constructor<?>;\n        try {\n            java.lang.reflect.Constructor<?> = java.lang.Class<?>.getDeclaredConstructor(org.easymock.ConstructorArgs.getConstructor().getParameterTypes());\n        } catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n            throw new java.lang.RuntimeException(\"Fail to find constructor for param types\" , java.lang.NoSuchMethodException);\n        }\n        T T;\n        try {\n            java.lang.reflect.Constructor<?>.setAccessible(true);\n            T = ((T)(java.lang.reflect.Constructor<?>.newInstance(org.easymock.ConstructorArgs.getInitArgs())));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.InstantiationException);\n        } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor\" , java.lang.IllegalAccessException);\n        } catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n            throw new java.lang.RuntimeException(\"Failed to instantiate mock calling constructor: Exception in constructor\" , java.lang.reflect.InvocationTargetException.getTargetException());\n        }\n        return T;\n    } else {\n        net.sf.cglib.proxy.Factory net.sf.cglib.proxy.Factory;\n        try {\n            net.sf.cglib.proxy.Factory = ((net.sf.cglib.proxy.Factory)(org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getInstantiator().newInstance(java.lang.Class<?>)));\n        } catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n            throw new java.lang.RuntimeException(((((\"Fail to instantiate mock for \" + java.lang.Class<T>) + \" on \") + org.easymock.internal.ClassInstantiatorFactory.(org.easymock.internal.ClassInstantiatorFactory.getJVM())) + \" JVM\"));\n        }\n        net.sf.cglib.proxy.Factory.getCallback(0);\n        return ((T)(net.sf.cglib.proxy.Factory));\n    }\n} finally {\n    net.sf.cglib.proxy.Enhancer.net.sf.cglib.proxy.Enhancer.registerCallbacks(java.lang.Class<?>, null);\n}","type":"CtTryImpl"},"failures":[63,65,66,67,67,68,68,72,73,75,76,77,78,79,307,308,80,81,82,83,309,310,84,311,312,85,88,89,90,123,125,313,314,139,140,141,142,144,145,158,315,159,316,317,318,160,161,162,319,1,320,163,164,321,165,322,323,324,188,325,326,189,327,328,329,330,331,332,333,334,335,190,336,337,338,339,340,191,341,342,192,343,344,345,346,347,348,349,350,351,0,203,204,352,353,354,355,356,357,358,359,360,361,362,363,364,269,270,271,365,366,367,368,304],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.BridgeMethodResolver:142","failures":[353],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[345,349],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:612","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(org.easymock.internal.matchers.Any.org.easymock.internal.matchers.Any)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:243","sourceCode":"if (java.lang.Object == null) {\n    final java.lang.Class<?> java.lang.Class<?> = org.easymock.internal.ExpectedInvocation.getMethod().getReturnType();\n    if (java.lang.Class<?>.isPrimitive()) {\n        throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.IllegalStateException(\"can\\'t return null for a method returning a primitive type\"));\n    } \n    return ;\n} ","type":"CtIfImpl"},"failures":[57,59,63,67,67,68,68,72,73,74,75,76,77,79,81,82,83,84,87,90,92,93,15,16,17,98,99,100,101,102,18,19,103,104,105,9,20,106,107,108,109,110,111,112,113,114,115,117,21,22,118,119,123,124,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,145,147,148,149,150,151,157,159,160,162,1,164,24,167,25,169,26,170,28,29,172,173,32,174,175,177,178,181,182,183,184,185,186,187,188,189,190,191,198,199,33,200,203,34,36,38,214,215,216,217,218,39,40,41,223,369,224,225,370,234,235,238,269,270,271,46,275,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,47,48,50,51,54,305,306],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.LastControl:92","failures":[100,101,103,104,8,113,174,176,184],"status":-1,"binaryOperator":"((java.util.Stack<org.easymock.IArgumentMatcher>.size()) >= int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.EasyMock:1235","failures":[],"status":0,"name":"returnValue","return":"return false","type":"mutation"},{"position":"org.easymock.internal.BridgeMethodResolver:193","failures":[0,353],"status":-1,"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.matchers.Matches:40","failures":[371],"status":-1,"binaryOperator":"((\"matches(\\\"\" + (java.lang.String.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\"))) + \"\\\")\")","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ExpectedInvocation:75","failures":[110,116,175,176,178,179,180,181,182,187],"status":-1,"binaryOperator":"(((this.java.util.List<org.easymock.IArgumentMatcher>) != null) && (this.java.util.List<org.easymock.IArgumentMatcher>.equals(org.easymock.internal.ExpectedInvocation.java.util.List<org.easymock.IArgumentMatcher>)))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.Injector:62","sourceCode":"final org.easymock.internal.InjectionPlan org.easymock.internal.InjectionPlan = new org.easymock.internal.InjectionPlan()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:62","sourceCode":"org.easymock.internal.RecordState.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(java.lang.Integer.java.lang.Class<java.lang.Integer>, java.lang.Integer.java.lang.Integer)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","failures":[344,345,346,347,349,351],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:76","sourceCode":"org.easymock.internal.RecordState.closeMethod()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:144","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub behavior\")","type":"CtInvocationImpl"},"failures":[156,372,373],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.easymock.internal.RecordState:96","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"return value\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:99","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[15,24,25,28,29,32,36,38,39,47,50,51,54],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:57","failures":[123,124,125,374],"status":-1,"binaryOperator":"int < (java.lang.Class<?>[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[57,10,58,59,60,61,375,62,63,64,65,66,67,67,68,68,69,70,71,376,72,73,74,75,76,77,78,79,307,308,80,81,82,83,309,84,311,85,377,86,378,379,380,381,382,87,383,384,385,386,387,388,88,89,90,91,92,93,389,94,95,15,96,16,17,97,98,99,100,101,390,102,18,19,103,104,105,8,9,20,106,107,108,109,110,111,112,113,114,115,116,117,21,22,118,391,392,393,394,395,119,396,397,398,399,400,401,402,120,121,122,403,23,123,124,125,313,314,404,405,126,127,128,130,131,133,135,136,137,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,159,318,160,161,162,320,163,24,406,407,166,167,168,25,169,26,27,170,171,28,29,172,30,31,173,32,174,175,176,177,178,179,180,181,182,183,184,185,186,187,322,188,326,189,328,329,332,333,334,335,190,337,340,191,341,342,408,409,410,192,193,194,195,196,197,198,199,33,200,201,344,345,346,347,348,349,351,0,203,204,352,353,34,205,206,411,207,208,209,210,211,212,213,35,36,37,38,412,413,414,214,215,216,217,218,219,220,6,39,221,40,41,222,415,223,369,224,225,354,355,356,357,358,359,360,361,226,227,228,229,416,417,418,230,419,231,232,420,370,233,234,235,236,237,238,421,422,423,424,425,426,42,239,240,241,242,243,244,427,428,429,430,431,245,43,246,44,247,248,45,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,362,363,364,269,270,432,271,433,434,365,272,273,46,274,275,276,277,278,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,372,462,463,464,465,466,467,373,468,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,469,470,299,300,301,302,303,471,367,472,368,473,304,474,47,48,7,49,50,51,52,53,54,305,306,475,55,56,476,477,478,479,480],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.LastControl:37","sourceCode":"new java.lang.ThreadLocal<java.util.Stack<org.easymock.internal.Invocation>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:106","sourceCode":"for (final java.lang.reflect.Field java.lang.reflect.Field : java.lang.reflect.Field[]) {\n    final org.easymock.TestSubject org.easymock.TestSubject = java.lang.reflect.Field.getAnnotation(org.easymock.TestSubject.org.easymock.TestSubject);\n    if (org.easymock.TestSubject != null) {\n        org.easymock.internal.InjectionPlan.addTestSubjectField(java.lang.reflect.Field);\n        continue;\n    } \n    final org.easymock.Mock org.easymock.Mock = java.lang.reflect.Field.getAnnotation(org.easymock.Mock.org.easymock.Mock);\n    if (org.easymock.Mock == null) {\n        continue;\n    } \n    final java.lang.Class<?> java.lang.Class<?> = java.lang.reflect.Field.getType();\n    java.lang.String java.lang.String = org.easymock.Mock.java.lang.String();\n    java.lang.String = (java.lang.String.length()) == 0 ? null : java.lang.String;\n    final org.easymock.MockType org.easymock.MockType = org.easymock.Mock.org.easymock.MockType();\n    java.lang.Object java.lang.Object;\n    if (java.lang.Object instanceof org.easymock.EasyMockSupport) {\n        java.lang.Object = ((org.easymock.EasyMockSupport)(java.lang.Object)).createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    } else {\n        java.lang.Object = org.easymock.EasyMock.org.easymock.EasyMock.createMock(java.lang.String, org.easymock.MockType, java.lang.Class<?>);\n    }\n    java.lang.reflect.Field.setAccessible(true);\n    try {\n        java.lang.reflect.Field.set(java.lang.Object, java.lang.Object);\n    } catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n        throw new java.lang.RuntimeException(java.lang.IllegalAccessException);\n    }\n    org.easymock.internal.InjectionPlan.addInjection(new org.easymock.internal.Injection(java.lang.Object , org.easymock.Mock));\n}","type":"CtForEachImpl"},"failures":[64,71,381,382,87,383,384,386,387,394,395,119,396,397,399,400],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.And:43","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1235","sourceCode":"return false","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.MethodSerializationWrapper:67","inlineConstant":"int int = 0","failures":[123,124,125,374],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && (java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:106","sourceCode":"if (java.lang.Class<?>[] == null) {\n    if (java.lang.reflect.Method != null) {\n        throw new java.lang.RuntimeException((\"Ambiguous name: More than one method are named \" + java.lang.String));\n    } \n    java.lang.reflect.Method = java.lang.reflect.Method;\n} else if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[63,65,66,67,67,68,68,72,73,75,76,77,78,79,307,308,80,81,82,83,309,310,84,311,88,89,90,481,482,483,484,485,123,125,313,314,139,140,141,142,144,145,158,486,159,316,318,160,161,162,1,320,163,164,487,165,322,323,324,188,325,326,189,327,328,329,330,331,332,333,334,335,190,336,337,338,339,340,191,341,342,192,344,345,346,347,348,349,351,0,203,204,352,353,354,355,356,357,358,359,360,361,426,362,363,364,269,270,271,365,366,367,368,473,304,474],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"name":"name","method":"result","paramTypes":"paramTypes","this":"this"}},{"position":"org.easymock.internal.ArgumentToString:90","failures":[16,27,30,31,488,37,38,6,40,42,7,49,52,53],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:234","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[441],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.Capture:83","failures":[489],"status":-1,"binaryOperator":"(\"More than one value captured: \" + org.easymock.Capture<T>.(getValues()))","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MockBuilder:188","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(((java.lang.String)(null)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:184","sourceCode":"return org.easymock.internal.MockBuilder<T>.createMock(null, org.easymock.IMocksControl)","type":"CtReturnImpl"},"failures":[318],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.InjectionPlan:36","sourceCode":"new java.util.ArrayList<org.easymock.internal.Injection>(5)","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.StartsWith:27","sourceCode":"-658998692584342514L","type":"CtUnaryOperatorImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:47","failures":[2,3,4,5,6,7],"status":-1,"binaryOperator":"int > 0","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.RecordState:153","failures":[88,89,90,91,201,236,239,240,241,242,243,244],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:324","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.Class<?>) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n    java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)).getRawType());\n} else if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:330","sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n    final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(java.lang.reflect.Type));\n    java.lang.reflect.Type java.lang.reflect.Type = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.TypeVariable<?>);\n    if (java.lang.reflect.Type == null) {\n        java.lang.reflect.Type = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.extractClassForTypeVariable(java.lang.reflect.TypeVariable<?>);\n    } \n    if (java.lang.reflect.Type != null) {\n        java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.put(java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type);\n    } \n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"typeVariableMap":"typeVariableMap","actualTypeArgument":"actualTypeArgument","variable":"variable","this":"this"}},{"transplant":{"position":"org.easymock.EasyMock:1290","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportOr(2)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:1687","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.ArrayEquals(T[]))","type":"CtInvocationImpl"},"failures":[107,35,6],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:231","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.checkOrder(boolean);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[76,110,171,441],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:206","sourceCode":"org.easymock.MockType = org.easymock.MockType.org.easymock.MockType","type":"CtAssignmentImpl"},"failures":[131,170],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MocksControl:302","sourceCode":"org.easymock.internal.IMocksControlState.andStubThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:267","sourceCode":"org.easymock.internal.IMocksControlState.andThrow(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[157,25,37,243,450,47],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"throwable":"throwable","state":"state"}},{"transplant":{"position":"org.easymock.internal.RecordState:151","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"stub Throwable\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:152","sourceCode":"org.easymock.internal.RecordState.requireValidThrowable(java.lang.Throwable)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:573","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:224","sourceCode":"return (java.lang.reflect.Field == null) || (((java.lang.reflect.Field.getModifiers()) & ((java.lang.reflect.Modifier.int) + (java.lang.reflect.Modifier.int))) != 0)","type":"CtReturnImpl"},"failures":[378,382,385,386,387,391,395,398,399,400],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:74","sourceCode":"java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method)","type":"CtInvocationImpl"},"failures":[63,78,81,82,310,123,158,159,316,160,162,1,164,165,189,190,191,352,366,367],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.ArgumentToString:90","failures":[16,27,30,31,488,37,38,6,40,42,7,49,52,53],"status":-1,"binaryOperator":"int > 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.internal.ObjectMethodsFilter:50","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:76","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.findBridgedMethod(java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[353],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.ReflectionUtils.OBJECT_EQUALS":"m","equalsMethod":"m"}},{"transplant":{"position":"org.easymock.internal.InjectionTarget:65","sourceCode":"org.easymock.internal.Injection.setMatched()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.Injector:231","sourceCode":"if (org.easymock.internal.InjectionTarget.accepts(org.easymock.internal.Injection)) {\n    if (org.easymock.internal.Injection != null) {\n        throw new java.lang.RuntimeException(java.lang.String.java.lang.String.format(\"At least two mocks can be assigned to \\'%s\\': %s and %s\", org.easymock.internal.InjectionTarget.getTargetField(), org.easymock.internal.Injection.getMock(), org.easymock.internal.Injection.getMock()));\n    } \n    org.easymock.internal.Injection = org.easymock.internal.Injection;\n} ","type":"CtIfImpl"},"failures":[64,71,378,383,391,396],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:2110","sourceCode":"return org.easymock.internal.MocksControl.getControl(java.lang.Object)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:155","sourceCode":"try {\n    final org.easymock.internal.IProxyFactory org.easymock.internal.IProxyFactory = org.easymock.internal.MocksControl.org.easymock.internal.MocksControl.getProxyFactory(java.lang.Object);\n    final org.easymock.internal.ObjectMethodsFilter org.easymock.internal.ObjectMethodsFilter = ((org.easymock.internal.ObjectMethodsFilter)(org.easymock.internal.IProxyFactory.getInvocationHandler(java.lang.Object)));\n    return org.easymock.internal.ObjectMethodsFilter.getDelegate().getControl();\n} catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n    throw new java.lang.IllegalArgumentException((\"Not a mock: \" + (java.lang.Object.getClass().getName())));\n}","type":"CtTryImpl"},"failures":[57,10,58,59,60,61,375,62,376,72,73,74,75,76,77,78,79,308,80,81,82,83,309,84,85,86,88,89,90,91,92,11,12,13,14,94,95,15,96,16,17,97,98,99,100,101,102,18,19,103,104,105,9,20,106,107,108,109,110,111,112,113,114,115,116,117,21,22,118,120,121,122,23,123,124,125,490,491,492,314,405,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,316,318,160,161,163,164,165,24,166,167,168,25,169,26,27,170,171,28,29,172,30,31,173,32,174,175,176,177,178,179,180,181,182,183,184,185,186,187,192,193,194,195,196,197,198,199,33,200,201,344,203,204,34,205,206,207,208,209,210,211,212,213,35,36,37,38,214,215,216,217,218,219,220,6,39,221,40,41,222,415,223,369,224,225,354,355,356,357,358,359,360,361,226,227,228,229,417,418,230,419,231,232,370,233,234,235,236,237,238,422,423,424,42,239,240,241,242,243,244,430,431,245,43,246,44,247,248,45,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,362,363,269,270,432,271,433,434,365,272,273,46,274,275,276,277,278,435,436,437,438,439,440,441,442,443,444,445,446,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,366,471,493,367,494,472,304,47,48,7,49,50,51,52,53,54,305,306],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"mock":"mock","this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:176","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createDelegatingResult(java.lang.Object))","type":"CtInvocationImpl"},"failures":[121],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.LessThan:34","sourceCode":"return \"lt\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ErrorMessage:40","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[495],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.Capture:79","sourceCode":"if (this.java.util.List<T>.isEmpty()) {\n    throw new java.lang.AssertionError(\"Nothing captured yet\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.Capture:60","sourceCode":"java.util.List<T>.clear()","type":"CtInvocationImpl"},"failures":[181,183,496],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"values":"values"}},{"transplant":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:318","sourceCode":"org.easymock.internal.IMocksControlState.andStubDelegateTo(java.lang.Object)","type":"CtInvocationImpl"},"failures":[121,457],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":101,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":47,"org.easymock.tests2.UsageTest.argumentsOrdered":31,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":136,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":383,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":457,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":171,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":71,"org.easymock.tests2.DelegateToTest.testReturnException":120,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":240,"org.easymock.tests.MockingTest.testPartialClassMocking":269,"org.easymock.tests.MockClassControlTest.testToString":356,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":389,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":409,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":465,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":310,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":330,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":189,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":249,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":93,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":105,"org.easymock.tests2.UsageTest.wrongArguments":27,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":234,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":401,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":228,"org.easymock.samples.ExampleTest.answerVsDelegate":10,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":367,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":434,"org.easymock.tests2.UsageConstraintsTest.testNull":18,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":75,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":135,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":361,"org.easymock.tests2.CaptureTest.testPrimitive":177,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":238,"org.easymock.tests.UsageTest.moreThanOneArgument":48,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":268,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":74,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":216,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":475,"org.easymock.tests.UsageTest.argumentsOrdered":53,"org.easymock.tests.UsageVarargTest.varargIntAccepted":206,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":372,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":299,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":158,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_NotAMock":491,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":387,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":161,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":449,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":303,"org.easymock.tests.ReplayStateInvalidUsageTest.times":443,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":119,"org.easymock.tests2.AnswerTest.answer":24,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":8,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":463,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":155,"org.easymock.tests2.CaptureTest.testAnd":174,"org.easymock.tests2.UsageTest.strictResetToDefault":169,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":80,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":317,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":215,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":130,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":224,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":477,"org.easymock.tests2.DelegateToTest.testDelegate":23,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":264,"org.easymock.tests.LimitationsTest.mockFinalMethod":474,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":243,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":197,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":416,"org.easymock.tests2.CaptureTest.testCapture1_2446744":178,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":262,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":153,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":437,"org.easymock.tests.UsageThrowableTest.throwError":272,"org.easymock.tests.MockTypeTest.fromEasyMockClassWithName":493,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":388,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":218,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":342,"org.easymock.samples.PartialClassMockTest.testGetArea":63,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":438,"org.easymock.tests.MockingTest.testInterfaceMocking":432,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":300,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":479,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":426,"org.easymock.tests2.UsageTest.niceToStrict":170,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":250,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":331,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":447,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":160,"org.easymock.tests2.MockBuilderTest.testCreateMock":163,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":338,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":398,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":2,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":258,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":131,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":429,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":430,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":226,"org.easymock.tests.UsageOverloadedMethodTest.overloading":199,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":335,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":340,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":108,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":232,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":198,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":290,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":107,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":183,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":411,"org.easymock.tests2.EasyMockSupportClassTest.testAll":188,"org.easymock.tests.MockClassControlTest.testEquals":360,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":204,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":266,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":481,"org.easymock.tests2.CaptureTest.testCaptureAll":175,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":154,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":195,"org.easymock.tests.MockNameTest.defaultName":469,"org.easymock.tests2.UsageConstraintsTest.testMatches":109,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":435,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":217,"org.easymock.samples.ExampleTest.voteForRemovals":61,"org.easymock.tests.UsageVarargTest.allKinds":35,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":36,"org.easymock.samples.BasicClassMockTest.testPrintContent":66,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":196,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":277,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":94,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":403,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":384,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":244,"org.easymock.tests2.UsageConstraintsTest.greaterThan":111,"org.easymock.tests.DefaultClassInstantiatorTest.privateConstructorLimitation":350,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":325,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":369,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":83,"org.easymock.samples.ExampleTest.voteForRemoval":58,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":351,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":148,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":309,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClassWithName":494,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_ProxyButNotMock":492,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":78,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":25,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":192,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":320,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":454,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":128,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":46,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":323,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":239,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":402,"org.easymock.tests2.CaptureTest.testCaptureFirst":187,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":453,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":129,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":32,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":233,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":286,"org.easymock.tests2.CaptureTest.testCapture2_2446744":186,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":150,"org.easymock.tests2.UsageTest.moreThanOneArgument":26,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":464,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":164,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":213,"org.easymock.tests.GenericTest.testBridgedEquals":353,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":248,"org.easymock.tests.UsageExpectAndReturnTest.longType":282,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":126,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":193,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":487,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":267,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":470,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":116,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":265,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":413,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":214,"org.easymock.tests.UsageCallCountTest.tooManyCalls":45,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":245,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":339,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":287,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":400,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":254,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":276,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":140,"org.easymock.tests.MockingTest.testNiceClassMocking":365,"org.easymock.tests.MockingTest.testClassMocking":363,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":486,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":431,"org.easymock.tests2.UsageConstraintsTest.testContains":106,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":90,"org.easymock.tests2.UsageConstraintsTest.testFind":102,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":33,"org.easymock.tests.MockTypeTest.fromEasyMockClass":471,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":86,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":219,"org.easymock.tests.UsageExpectAndReturnTest.object":289,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":79,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":399,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":134,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":208,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":424,"org.easymock.tests.UsageTest.exactCallCountByLastCall":54,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":200,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":452,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":408,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":55,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":311,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":34,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":295,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":231,"org.easymock.tests.MockClassControlTest.testHashCode":359,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":379,"org.easymock.tests2.EasyMockSupportTest.testVerify":138,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":333,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":56,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":428,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":230,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":152,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":376,"org.easymock.tests.UsageVarargTest.varargCharAccepted":207,"org.easymock.tests.DefaultClassInstantiatorTest.constructorWithCodeLimitation":343,"org.easymock.tests2.CaptureTest.testCaptureMultiple":489,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":95,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":468,"org.easymock.tests2.UsageTest.openCallCountByLastCall":28,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":137,"org.easymock.tests.DefaultClassInstantiatorTest.object":344,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":427,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":422,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":488,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":256,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":334,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_WrongParams":485,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":274,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":394,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":378,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":81,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":358,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":255,"org.easymock.tests.CapturesMatcherTest.test":202,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":296,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":412,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":191,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":357,"org.easymock.tests2.UsageTest.resumeIfFailure":173,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":366,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EnhancedButNotAMock":490,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":242,"org.easymock.tests2.StubTest.stubWithReturnValue":157,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":319,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":117,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":288,"org.easymock.tests2.SerializationTest.testAllMockedMethod":125,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":462,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":3,"org.easymock.samples.SupportTest.voteForRemovals":70,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":0,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":381,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":261,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":374,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":373,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":406,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":410,"org.easymock.tests.UsageExpectAndThrowTest.object":259,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":114,"org.easymock.tests2.DelegateToTest.testWrongClass":122,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":305,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":306,"org.easymock.tests.UsageStrictMockTest.range":40,"org.easymock.samples.ConstructorCalledMockTest.testTax":67,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":404,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":133,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":139,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":260,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":162,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":445,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":52,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":322,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":227,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":4,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":480,"org.easymock.tests2.CaptureTest.testCaptureNone":182,"org.easymock.tests.UsageUnorderedTest.message":42,"org.easymock.tests.UsageVerifyTest.twoReturns":38,"org.easymock.tests.UsageVarargTest.varargByteAccepted":212,"org.easymock.tests2.ThreadingTest.testThreadSafe":147,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":336,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":44,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":425,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":65,"org.easymock.tests2.CaptureTest.testCapture_2617107":176,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":418,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":466,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":237,"org.easymock.tests2.UsageConstraintsTest.any":9,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":442,"org.easymock.tests2.StubTest.stub":156,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":414,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":467,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":241,"org.easymock.tests.UsageExpectAndThrowTest.longType":252,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":348,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":441,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":96,"org.easymock.tests2.SerializationTest.testClass":123,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":87,"org.easymock.tests.LimitationsTest.mockNativeMethod":304,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":298,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":352,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":484,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":393,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":97,"org.easymock.tests2.NameTest.nameForMocksControl":14,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":395,"org.easymock.tests2.MockedExceptionTest.testMockedException":89,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":326,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":51,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":253,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":271,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":377,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":72,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":1,"org.easymock.tests.MockingTest.testNicePartialClassMocking":270,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":77,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":391,"org.easymock.tests2.CaptureTest.testCaptureLast":181,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":417,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":145,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":104,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":115,"org.easymock.tests.MockingTest.testTwoMocks":364,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":279,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":257,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":30,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":22,"org.easymock.samples.ExampleTest.removeNonExistingDocument":375,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":439,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":397,"org.easymock.tests.UsageStrictMockTest.differentMethods":41,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":380,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":346,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":149,"org.easymock.tests2.MockBuilderTest.testCreateMockString":165,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":354,"org.easymock.tests.UsageExpectAndThrowTest.floatType":251,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":327,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":110,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":324,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":166,"org.easymock.tests.UsageVerifyTest.twoThrows":37,"org.easymock.tests2.PartialMockingTest.testPartialMock_ExceptionInConstructor":312,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":419,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":190,"org.easymock.samples.ExampleTest.voteAgainstRemoval":59,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":478,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":458,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":82,"org.easymock.tests.LimitationsTest.privateConstructor":473,"org.easymock.tests2.UsageConstraintsTest.testNotNull":21,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":88,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":278,"org.easymock.tests2.UsageTest.defaultResetToNice":172,"org.easymock.samples.ExampleTest.voteAgainstRemovals":57,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":459,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":294,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":392,"org.easymock.tests.UsageVarargTest.differentLength":209,"org.easymock.tests2.CallbackTest.callback":146,"org.easymock.tests2.UsageConstraintsTest.equals":390,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":307,"org.easymock.tests.UsageTest.openCallCountByLastCall":50,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":98,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":236,"org.easymock.tests.UsageCallCountTest.tooFewCalls":43,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":142,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":229,"org.easymock.tests.UsageThrowableTest.throwCheckedException":275,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":5,"org.easymock.tests.MockingTest.testStrictClassMocking":362,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":144,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":201,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":396,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":141,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":444,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":143,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":168,"org.easymock.tests.ObjectMethodsTest.testHashCode":423,"org.easymock.tests2.ConstraintsToStringTest.matchesToString":371,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":151,"org.easymock.tests2.NameTest.nameForNiceMock":13,"org.easymock.tests2.DependencyTest.testInterfaceMocking":92,"org.easymock.samples.ExampleTest.addDocument":60,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":337,"org.easymock.tests2.DelegateToTest.testStubDelegate":121,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":341,"org.easymock.tests2.AnswerTest.stubAnswer":167,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":39,"org.easymock.tests.UsageVarargTest.varargLongAccepted":211,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":222,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":456,"org.easymock.tests.UsageExpectAndReturnTest.floatType":281,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":297,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":84,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":68,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":420,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":386,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":112,"org.easymock.tests.UsageThrowableTest.noUpperLimit":273,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":99,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":313,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":179,"org.easymock.tests2.SerializationTest.test":124,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":345,"org.easymock.tests2.UsageConstraintsTest.testSame":19,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":280,"org.easymock.samples.SupportTest.addDocument":69,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":440,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":328,"org.easymock.tests.GenericTest.testPackageScope":203,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":476,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":451,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":385,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":433,"org.easymock.tests2.NameTest.nameForMock":11,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":291,"org.easymock.tests2.UsageStrictMockTest.differentMethods":17,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":321,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":308,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":283,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":263,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":421,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":225,"org.easymock.tests2.MockedExceptionTest.testRealException":91,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":461,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":405,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":460,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":15,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":446,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":235,"org.easymock.tests2.NameTest.nameForStrictMock":12,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":318,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":85,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":76,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":314,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":113,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":347,"org.easymock.tests.ErrorMessageTest.testGetters":495,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":159,"org.easymock.tests2.UsageStrictMockTest.range":16,"org.easymock.tests2.UsageConstraintsTest.lessThan":118,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Ambiguous":482,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":382,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":455,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":127,"org.easymock.tests2.CaptureTest.testCaptureRightOne":184,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":332,"org.easymock.tests2.UsageConstraintsTest.testOr":103,"org.easymock.tests.UsageRangeTest.combination":223,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":73,"org.easymock.tests.UsageTest.wrongArguments":49,"org.easymock.tests2.MockBuilderTest.testWithConstructor":315,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":329,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":355,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":284,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":448,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":292,"org.easymock.tests.UsageVarargTest.varargShortAccepted":210,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":349,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":247,"org.easymock.tests2.UsageConstraintsTest.cmpTo":20,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":407,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":450,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":29,"org.easymock.tests2.CaptureTest.testCaptureFromStub":185,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":436,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":316,"org.easymock.tests.UsageTest.unexpectedCallWithArray":7,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":6,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":246,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":293,"org.easymock.tests2.CaptureTest.testCapture":496,"org.easymock.tests2.UsageConstraintsTest.constraints":100,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":221,"org.easymock.samples.ExampleTest.addAndChangeDocument":62,"org.easymock.tests.UsageStrictMockTest.testVerify":415,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":64,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":220,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":194,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":180,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":483,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":301,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":285,"org.easymock.tests.LimitationsTest.abstractClass":368,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":302,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":370,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":132,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":205}}]

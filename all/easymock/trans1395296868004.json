[{"position":"org.easymock.internal.BridgeMethodResolver:321","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.matchers.And:40","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.ClassInstantiatorFactory:52","sourceCode":"return org.easymock.internal.ClassInstantiatorFactory.org.easymock.internal.ClassInstantiatorFactory.getJVMSpecificationVersion().equals(\"1.3\")","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.GreaterOrEqual:34","sourceCode":"return \"geq\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:68","sourceCode":"return \"at least \" + (int)","type":"CtReturnImpl"},"failures":[1,2,3,4,5],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.EasyMock:480","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMockSupport:497","sourceCode":"return new org.easymock.internal.MockBuilder<T>(java.lang.Class<T> , this)","type":"CtReturnImpl"},"failures":[6,7,8,9,10,11,12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:175","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:416","sourceCode":"if ((java.lang.String.equals(java.lang.reflect.Method.getName())) && java.util.Arrays.(java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes()))) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[13],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ObjectMethodsFilter:98","failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,8,35,36,37,38,1,2,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,3,58,59,60,61,62,63,64,65,66,67,4,5,68,69,70,71,72,73,74,75,76,77,78,79],"status":-1,"binaryOperator":"(java.lang.String) != null","name":"removeConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[80],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.EasyMockSupport:508","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:178","sourceCode":"final org.easymock.IMocksControl org.easymock.IMocksControl = (org.easymock.EasyMockSupport) == null ? org.easymock.EasyMock.org.easymock.EasyMock.createControl(org.easymock.MockType) : org.easymock.EasyMockSupport.createControl(org.easymock.MockType)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.DefaultClassInstantiator:111","inlineConstant":"int int = 0","failures":[81,82],"status":-1,"name":"inlineConstant","type":"mutation"},{"position":"org.easymock.internal.MethodSerializationWrapper:57","inlineConstant":"int int = 0","failures":[83,84,85,86],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.MocksControl:257","sourceCode":"try {\n    this.org.easymock.internal.IMocksControlState.andReturn(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:284","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andDelegateTo(java.lang.Object);\n    return this;\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[87,88,89,90,91,92,93],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state","value":"answer"}},{"transplant":{"position":"org.easymock.internal.MocksControl:222","sourceCode":"this.org.easymock.internal.IMocksControlState.verify()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:293","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubReturn(java.lang.Object);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,37,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,66,130,131,132,10,10,11,11],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"state":"state"}},{"transplant":{"position":"org.easymock.EasyMock:560","sourceCode":"throw new java.lang.IllegalStateException(\"no last call on a mock available\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:81","sourceCode":"throw new java.lang.IllegalArgumentException((\"Method not found (or private): \" + java.lang.String))","type":"CtThrowImpl"},"failures":[133],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:89","inlineConstant":"int int = 0","failures":[19,22,23,1,47,48,49,50,58,59,65,4,134,69,79],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.RecordState:274","sourceCode":"if (org.easymock.IAnswer<?> == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"answer object must not be null\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.MocksControl:309","sourceCode":"try {\n    org.easymock.internal.IMocksControlState.andStubAnswer(org.easymock.IAnswer<?>);\n} catch (final org.easymock.internal.RuntimeExceptionWrapper org.easymock.internal.RuntimeExceptionWrapper) {\n    throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()));\n}","type":"CtTryImpl"},"failures":[135],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"answer":"answer"}},{"transplant":{"position":"org.easymock.EasyMock:190","sourceCode":"return org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:466","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createNiceControl().createMock(java.lang.String, java.lang.Class<T>, org.easymock.ConstructorArgs, java.lang.reflect.Method[])","type":"CtReturnImpl"},"failures":[136],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"toMock":"toMock","name":"name","this":"this"}},{"position":"org.easymock.internal.matchers.LessOrEqual:39","failures":[137,94,103,138],"status":-1,"binaryOperator":"int <= 0","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ArgumentToString:46","inlineConstant":"int int = 0","failures":[139,140,47,65,141,142],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:87","sourceCode":"if ((java.util.List<java.lang.reflect.Method>.size()) == 1) {\n    java.lang.reflect.Method = java.util.List<java.lang.reflect.Method>.get(0);\n} else {\n    java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:90","sourceCode":"java.lang.reflect.Method = org.easymock.internal.BridgeMethodResolver.org.easymock.internal.BridgeMethodResolver.searchCandidates(java.util.List<java.lang.reflect.Method>, java.lang.reflect.Method)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.ConstructorArgs:54","failures":[143,144,145,146,147,148,149,150,6,151,152,153,154,155,156,157,158,159,7,160,161,162,163,164,165,166,167,26,168,169,83,170,171,172,173,174,175,176,177,10,11],"status":-1,"binaryOperator":"int < (java.lang.Object[].int)","name":"conditionalBoundary","type":"mutation"},{"position":"org.easymock.internal.ReflectionUtils:107","failures":[178,179,145,146,147,148,149,150,6,151,152,153,154,155,156,157,158,159,7,160,161,162,163,164,165,166,167,180,181,26,182,27,168,83,85,183,28,184,185,186,187,188,189,190,136,191,192,29,193,194,195,196,197,198,170,171,199,200,34,201,202,203,204,8,9,175,35,205,206,207,43,208,209,210,211,212,213,214,215,216,217,218,219,220,81,221,222,223,82,224,13,225,226,227,228,229,230,70,71,72,231,232,233,234,74,10,10,11,11,235,236,12],"status":-1,"binaryOperator":"java.lang.reflect.Method != null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.easymock.internal.BridgeMethodResolver:210","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.Invocation:99","sourceCode":"return ((this.java.lang.Object.equals(org.easymock.internal.Invocation.java.lang.Object)) && (this.java.lang.reflect.Method.equals(org.easymock.internal.Invocation.java.lang.reflect.Method))) && org.easymock.internal.Invocation.(equalArguments(org.easymock.internal.Invocation.java.lang.Object[]))","type":"CtReturnImpl"},"failures":[22,37,237,49,3,58,59,238,239,66,69],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ReflectionUtils:93","failures":[148,6,7,165,180,181,26,182,27,168,83,85,183,28,184,185,186,187,188,136,191,192,29,240,195,241,198,170,199,200,34,201,203,204,8,9,35,205,206,207,210,211,212,213,217,219,225,226,227,230,234,74,10,10,11,11,235,236,12],"status":-1,"binaryOperator":"java.lang.Class<?> != null","name":"negateConditional","type":"mutation"},{"position":"org.easymock.internal.LastControl:95","inlineConstant":"int int = 0","failures":[15,242,97,99,243,244,0,105,245,246,247],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.RecordState:146","sourceCode":"org.easymock.internal.IMocksBehavior.addStub(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result.org.easymock.internal.Result.createReturnResult(null))","type":"CtInvocationImpl"},"failures":[248,249],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.DefaultClassInstantiator:166","sourceCode":"throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.easymock.internal.Range:52","sourceCode":"return (int) == (int)","type":"CtReturnImpl"},"failures":[14,90,15,97,98,250,251,16,105,106,17,18,19,20,21,252,253,22,23,25,254,255,256,257,191,29,258,31,32,259,33,34,205,36,37,38,1,2,39,45,46,48,260,261,49,50,51,262,52,53,54,263,56,57,3,58,59,60,264,61,265,266,238,239,64,65,66,67,4,5,68,267,69,93],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.RecordState:201","sourceCode":"return java.lang.Number.longValue()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:199","sourceCode":"return java.lang.Number.intValue()","type":"CtReturnImpl"},"failures":[268,148,6,7,165,269,180,181,26,182,270,27,168,183,271,184,186,170,34,203,8,9,205,114,211,212,213,217,12],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.easymock.internal.ArgumentToString:46","failures":[139,140,47,65,141,142],"status":-1,"binaryOperator":"int < java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.easymock.ConstructorArgs:77","sourceCode":"if (java.lang.Object == null) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:60","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.IllegalArgumentException((\"Null argument for primitive param \" + int));\n} ","type":"CtIfImpl"},"failures":[272],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"arg":"arg"}},{"transplant":{"position":"org.easymock.EasyMock:1470","sourceCode":"org.easymock.EasyMock.reportMatcher(new org.easymock.internal.matchers.Equals(boolean))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:2143","sourceCode":"org.easymock.EasyMock.org.easymock.EasyMock.getControl(java.lang.Object).makeThreadSafe(boolean)","type":"CtInvocationImpl"},"failures":[273,258],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"value":"threadSafe","this":"this"}},{"position":"org.easymock.ConstructorArgs:60","failures":[143,144,26,168,169,171,172,173,174,176,177],"status":-1,"binaryOperator":"java.lang.Object == null","name":"removeConditional","type":"mutation"},{"position":"org.easymock.internal.ObjectMethodsFilter:44","failures":[14,274,87,268,88,89,90,178,179,275,276,145,148,150,6,152,153,156,157,158,159,7,161,164,165,166,167,94,95,15,242,277,96,97,98,99,243,278,244,250,251,100,279,101,102,16,103,104,0,280,281,282,138,105,106,107,17,283,18,19,20,21,252,253,284,22,23,24,25,245,285,246,286,287,288,289,290,291,292,247,108,293,294,295,296,273,269,297,298,299,300,301,248,109,26,182,270,27,83,84,85,183,28,271,184,185,186,187,188,189,190,136,191,192,29,193,258,135,302,303,304,305,196,197,198,306,307,308,309,310,311,30,312,313,314,315,316,317,318,31,319,320,32,321,33,322,323,324,325,326,170,171,34,202,203,204,8,175,35,36,327,37,38,1,2,39,328,329,330,331,332,40,333,334,335,336,337,338,339,340,341,342,343,344,41,345,346,42,43,110,44,111,112,347,348,349,350,351,352,353,354,113,114,115,116,117,208,209,210,211,212,355,213,356,357,214,358,359,360,45,46,47,48,260,261,49,50,51,361,362,262,363,364,365,215,216,217,218,118,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,52,391,53,54,392,263,55,56,57,219,3,58,59,60,393,394,395,396,397,398,399,400,401,119,402,403,404,405,406,407,408,409,410,411,412,264,413,414,415,416,417,61,418,419,420,421,265,120,422,91,423,121,122,424,425,426,427,428,429,430,431,123,432,266,433,434,124,435,436,437,438,220,81,221,222,223,82,224,125,126,127,128,129,439,238,239,440,441,62,63,442,443,444,445,64,446,65,66,67,4,5,68,447,448,449,267,450,451,452,453,454,13,225,226,227,228,69,229,230,70,71,72,231,232,233,73,74,75,455,76,92,456,77,78,79,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,130,131,477,249,132,478,479,10,10,11,11,480,481,235,236,482,93,483,484,485,486,487,488,12],"status":-1,"binaryOperator":"(java.lang.String != null)","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.MocksControl:304","sourceCode":"throw ((java.lang.RuntimeException)(org.easymock.internal.RuntimeExceptionWrapper.getRuntimeException().fillInStackTrace()))","type":"CtThrowImpl"},"failures":[358,359,360,411,425],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:112","sourceCode":"if (java.util.Arrays.java.util.Arrays.equals(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes())) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"transplantationPoint":{"position":"org.easymock.internal.DefaultClassInstantiator:155","sourceCode":"try {\n    final java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<?>.getDeclaredField(\"serialVersionUID\");\n    final int int = (java.lang.reflect.Modifier.int) | (java.lang.reflect.Modifier.int);\n    if (((java.lang.reflect.Field.getModifiers()) & int) == int) {\n        java.lang.reflect.Field.setAccessible(true);\n        return java.lang.Long.java.lang.Long.valueOf(java.lang.reflect.Field.getLong(null));\n    } \n} catch (final java.lang.NoSuchFieldException java.lang.NoSuchFieldException) {\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new java.lang.RuntimeException(\"Should have been able to get serialVersionUID since it\\'s there\");\n}","type":"CtTryImpl"},"failures":[80],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.RecordState:124","sourceCode":"org.easymock.internal.RecordState.requireMethodCall(\"delegate\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:108","sourceCode":"if ((org.easymock.internal.Result) != null) {\n    org.easymock.internal.RecordState.times(org.easymock.internal.MocksControl.org.easymock.internal.Range);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"this":"this"}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:111","sourceCode":"java.lang.reflect.Method = java.lang.reflect.Method","type":"CtAssignmentImpl"},"failures":[148,6,7,165,180,181,26,182,27,168,83,85,183,28,184,185,186,187,188,136,191,192,29,195,198,170,199,200,34,201,203,204,8,9,35,205,206,207,210,211,212,213,217,219,225,226,227,230,234,74,10,10,11,11,235,236,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.easymock.internal.MockBuilder:121","sourceCode":"this.org.easymock.ConstructorArgs = org.easymock.ConstructorArgs","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.easymock.internal.MockBuilder:132","sourceCode":"org.easymock.ConstructorArgs = new org.easymock.ConstructorArgs(java.lang.reflect.Constructor<T>)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.matchers.CompareTo:41","sourceCode":"if (!(java.lang.Object instanceof java.lang.Comparable)) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.matchers.Null:35","sourceCode":"return java.lang.Object == null","type":"CtReturnImpl"},"failures":[97,282,269,265],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.easymock.internal.ReflectionUtils:39","sourceCode":"org.easymock.internal.ReflectionUtils.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.put(float.float, java.lang.Float.java.lang.Float)","type":"CtInvocationImpl"},"failures":[489],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.matchers.Captures:53","failures":[245,285,246,286,287,288,289,290,291,292,247,108,293,294,490],"status":-1,"name":"returnValue","return":"return true","type":"mutation"},{"position":"org.easymock.EasyMock:1940","failures":[],"status":0,"name":"returnValue","return":"return 0","type":"mutation"},{"transplant":{"position":"org.easymock.EasyMock:1372","sourceCode":"org.easymock.internal.LastControl.org.easymock.internal.LastControl.reportNot()","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.easymock.internal.RecordState:280","sourceCode":"if (java.lang.Object == null) {\n    throw new org.easymock.internal.RuntimeExceptionWrapper(new java.lang.NullPointerException(\"delegated to object must not be null\"));\n} ","type":"CtIfImpl"},"failures":[274,87,268,88,89,90,92,93],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.Invocation:54","sourceCode":"return java.lang.Object[] == null ? this.java.lang.Object[] : java.lang.Object[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.ConstructorArgs:94","sourceCode":"return java.lang.Object[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"org.easymock.internal.Invocation.NO_ARGS":"initArgs","args":"initArgs"}},{"transplant":{"position":"org.easymock.EasyMock:1459","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.easymock.EasyMock:104","sourceCode":"return org.easymock.EasyMock.org.easymock.EasyMock.createStrictControl().createMock(java.lang.Class<T>)","type":"CtReturnImpl"},"failures":[14,283,288,289,299,301,248,109,180,184,185,186,29,36,327,37,38,1,2,39,208,356,60,393,394,395,264,413,414,416,417,61,418,419,420,421,265,266,64,446,65,66,67,4,5,68,447],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.easymock.internal.ReflectionUtils:117","sourceCode":"if (java.lang.reflect.Method != null) {\n    return java.lang.reflect.Method;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.easymock.internal.BridgeMethodResolver:161","sourceCode":"return java.lang.reflect.Method","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"result":"method"}},{"position":"org.easymock.internal.MockBuilder:172","failures":[8,74],"status":-1,"binaryOperator":"(org.easymock.EasyMockSupport) == null","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.easymock.internal.ObjectMethodsFilter:110","sourceCode":"java.lang.reflect.Method = ((org.easymock.internal.MethodSerializationWrapper)(java.io.ObjectInputStream.readObject())).getMethod()","type":"CtAssignmentImpl"},"failures":[83,84,85],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.easymock.internal.RecordState:183","failures":[14,87,268,88,90,6,7,165,94,95,15,242,96,97,98,99,243,278,250,251,100,279,101,102,16,103,104,0,280,281,282,138,105,106,107,17,283,18,20,21,252,253,25,245,285,246,286,288,289,290,291,292,247,294,295,273,269,297,299,301,248,109,180,181,26,182,270,27,168,83,84,85,183,271,184,186,258,303,304,305,198,30,318,319,491,320,32,492,33,322,323,324,325,326,170,203,8,9,327,37,38,1,2,39,40,111,112,113,114,115,116,117,211,212,213,45,46,260,261,51,362,262,217,118,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,53,54,392,263,56,57,219,3,58,59,60,394,395,264,413,414,416,417,418,419,420,421,265,446,66,67,4,5,68,448,449,267,450,451,452,453,454,226,69,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,130,131,477,249,132,478,479,480,481,235,236,482,93,483,484,485,486,488,12],"status":-1,"binaryOperator":"(org.easymock.internal.Result) != null","name":"negateConditional","type":"mutation"},{"failureDictionary":{"org.easymock.tests2.UsageConstraintsTest.orOverloaded":242,"org.easymock.tests.UsageTest.exactCallCountByLastThrowable":45,"org.easymock.tests2.UsageTest.argumentsOrdered":23,"org.easymock.tests2.EasyMockSupportTest.testCreateMock":322,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateAssignmentPossible":333,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubDelegateToWithoutMethodCall":428,"org.easymock.tests2.UsageTest.mixingOrderedAndUnordered":21,"org.easymock.samples.AnnotatedMockWithRuleTest.addDocument":478,"org.easymock.tests2.DelegateToTest.testReturnException":87,"org.easymock.tests.UsageExpectAndDefaultThrowTest.longType":397,"org.easymock.tests.MockingTest.testPartialClassMocking":211,"org.easymock.tests.MockClassControlTest.testToString":70,"org.easymock.tests2.NameTest.shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier":298,"org.easymock.tests.RecordStateInvalidUsageTest.setWrongReturnValueBoolean":348,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectDefaultReturnValueWithoutMethodCall":124,"org.easymock.tests2.EasyMockClassExtensionTest.testNamedMock":194,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTConstructorArgsMethodArray":154,"org.easymock.tests2.EasyMockSupportClassTest.testAllMockBuilderFlavors":6,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndCount":371,"org.easymock.tests2.DependencyTest.testInterfaceMockingSupport":326,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqualOverloaded":278,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValueBoolean":130,"org.easymock.tests2.UsageTest.wrongArguments":19,"org.easymock.tests2.EasyMockRuleTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":317,"org.easymock.tests.NiceMockControlTest.defaultReturnValueDouble":369,"org.easymock.samples.ExampleTest.answerVsDelegate":93,"org.easymock.tests.MockTypeTest.fromMockBuilderClass":74,"org.easymock.tests2.UsageConstraintsTest.testNull":97,"org.easymock.tests.MockingTest.testNiceInterfaceMocking":357,"org.easymock.tests2.EasyMockClassExtensionTest.testResetReplay":184,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictControl":33,"org.easymock.tests.MockClassControlTest.testEquals_WithOverload":233,"org.easymock.tests2.CaptureTest.testPrimitive":286,"org.easymock.tests.UsageDefaultReturnValueTest.returnValueAndDefaultReturnValue":132,"org.easymock.tests.UsageExpectAndThrowTest.floatAndRange":390,"org.easymock.tests.UsageTest.moreThanOneArgument":46,"org.easymock.tests2.EasyMockClassExtensionTest.testInterfaceMocking":271,"org.easymock.tests.UsageExpectAndDefaultReturnTest.booleanType":127,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMaximumCount":439,"org.easymock.tests.UsageTest.argumentsOrdered":50,"org.easymock.tests.UsageVarargTest.varargIntAccepted":414,"org.easymock.tests.InvocationTest.testEquals":237,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultVoidCallableWithoutMethodCall":432,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnShort":113,"org.easymock.tests2.MockBuilderTest.testCreateNiceMockString":199,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":337,"org.easymock.tests2.MockBuilderTest.testCreateNiceMock":204,"org.easymock.tests.RecordStateMethodCallMissingTest.setDelegateToWithoutMethodCall":91,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnLong":117,"org.easymock.tests.ReplayStateInvalidUsageTest.times":409,"org.easymock.tests2.EasyMockRuleTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":30,"org.easymock.tests2.AnswerTest.answer":258,"org.easymock.tests2.UsageConstraintsTest.equalsMissing":244,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnyTimesWithoutMethodCall":433,"org.easymock.tests2.NiceMockTest.defaultReturnValueObject":342,"org.easymock.tests2.CaptureTest.testAnd":245,"org.easymock.tests2.UsageTest.strictResetToDefault":283,"org.easymock.tests2.MockBuilderTest.testWithConstructorConstructorArgs":173,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock":136,"org.easymock.tests.UsageExpectAndDefaultReturnTest.longType":126,"org.easymock.tests.UsageRangeTest.zeroOrMoreOneCall":394,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceMock":320,"org.easymock.tests.RecordStateInvalidRangeTest.setMinimumBiggerThanMaximum":441,"org.easymock.tests2.DelegateToTest.testDelegate":90,"org.easymock.tests.UsageExpectAndThrowTest.doubleType":386,"org.easymock.tests.LimitationsTest.mockFinalMethod":218,"org.easymock.tests.UsageExpectAndDefaultThrowTest.throwableAndDefaultThrowable":400,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.longReturningValue":354,"org.easymock.tests.RecordStateInvalidStateChangeTest.secondCallWithoutReturnValue":62,"org.easymock.tests2.CaptureTest.testCapture1_2446744":287,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndRange":384,"org.easymock.tests2.NiceMockTest.defaultReturnValueFloat":340,"org.easymock.tests.UsageThrowableTest.throwError":448,"org.easymock.tests.ReplayStateInvalidUsageTest.asStub":403,"org.easymock.tests2.EasyMockRunnerTest.shouldNotAssignUnqualifiedMockWhereQualifiedMockAssigned":338,"org.easymock.tests.UsageExpectAndDefaultReturnTest.objectType":129,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs":143,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTConstructorArgsMethodArray":167,"org.easymock.samples.PartialClassMockTest.testGetArea":12,"org.easymock.tests.ReplayStateInvalidUsageTest.makeThreadSafe":404,"org.easymock.tests.MockingTest.testInterfaceMocking":355,"org.easymock.tests2.CompareToTest.testLessOrEqual":137,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnInt":114,"org.easymock.tests.RecordStateInvalidReturnValueTest.setInvalidBooleanReturnValue":364,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfT":155,"org.easymock.tests.ObjectMethodsTest.toStringForClasses":43,"org.easymock.tests2.UsageTest.niceToStrict":20,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndRange":372,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongDefaultReturnValueWithoutMethodCall":120,"org.easymock.tests2.MockBuilderTest.testAddMockedMethod":203,"org.easymock.tests2.MockBuilderTest.testCreateMock":35,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTMethodArray":162,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":314,"org.easymock.tests2.ConstraintsToStringTest.arrayEqualsToString":139,"org.easymock.tests.UsageExpectAndThrowTest.longAndMinMax":380,"org.easymock.tests2.EasyMockSupportTest.niceToStrict":32,"org.easymock.tests.RecordStateInvalidThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":445,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtVerify":52,"org.easymock.tests.NiceMockControlTest.defaultReturnValueBoolean":367,"org.easymock.tests.UsageOverloadedMethodTest.overloading":362,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfT":164,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTConstructorArgsMethodArray":159,"org.easymock.tests.StacktraceTest.assertFillWhenThrowingAnswer":456,"org.easymock.tests2.UsageConstraintsTest.greaterOrEqual":101,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndMinMax":468,"org.easymock.tests.UsageOverloadedMethodTest.nullReturnValue":361,"org.easymock.tests.DefaultClassInstantiatorTest.serializableWithUID":80,"org.easymock.tests2.UsageConstraintsTest.arrayEquals":279,"org.easymock.tests2.CaptureTest.testPrimitiveVsObject":292,"org.easymock.tests.UsageVarargTest.varargAcceptedIfArrayIsGiven":415,"org.easymock.tests2.EasyMockSupportClassTest.testAll":148,"org.easymock.tests.MockClassControlTest.testEquals":232,"org.easymock.tests.GenericTest.testTheBridgeMethodIsRecordedNotTheBridge":226,"org.easymock.tests.UsageExpectAndThrowTest.longAndRange":388,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod_Superclass":240,"org.easymock.tests2.CaptureTest.testCaptureAll":285,"org.easymock.tests2.NiceMockTest.defaultReturnValueDouble":341,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.shortReturningValue":352,"org.easymock.tests.MockNameTest.defaultName":44,"org.easymock.tests2.UsageConstraintsTest.testMatches":102,"org.easymock.tests.UsageExpectAndDefaultReturnTest.doubleType":128,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubReturn":119,"org.easymock.samples.ExampleTest.voteForRemovals":486,"org.easymock.tests.UsageVarargTest.allKinds":265,"org.easymock.tests.UsageVerifyTest.atLeastTwoReturns":3,"org.easymock.samples.BasicClassMockTest.testPrintContent":236,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.intReturningValue":353,"org.easymock.tests.UsageThrowableTest.throwRuntimeException":453,"org.easymock.tests2.UsageStrictMockTest.unorderedCallsFailure":36,"org.easymock.tests.UsageExpectAndDefaultThrowTest.doubleType":401,"org.easymock.tests2.DelegateToTest.nullDelegationNotAllowed":89,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":334,"org.easymock.tests2.ReflectionUtilsTest.testGetConstructor_AllPrimitives":489,"org.easymock.tests2.UsageConstraintsTest.greaterThan":103,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTConstructorArgsMethodArray":149,"org.easymock.tests.UsageRangeTest.zeroOrMoreNoCalls":393,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock":29,"org.easymock.samples.ExampleTest.voteForRemoval":483,"org.easymock.tests.DefaultClassInstantiatorTest.newInstance":224,"org.easymock.tests2.EasyMockClassExtensionTest.testMakeThreadSafe":193,"org.easymock.tests2.ThreadingTest.testMockUsedCorrectly":296,"org.easymock.tests2.MockBuilderTest.testAddMethod_NotExisting":133,"org.easymock.tests2.EasyMockClassExtensionTest.testNiceMock_Partial":187,"org.easymock.tests2.UsageTest.exactCallCountByLastThrowable":17,"org.easymock.tests.ConstructorTest.constructorCallingPublicMethod":219,"org.easymock.tests2.MockBuilderTest.testWithEmptyConstructor":175,"org.easymock.tests.RecordStateMethodCallMissingTest.setDefaultThrowableWithoutMethodCall":425,"org.easymock.tests2.EasyMockSupportTest.testCreateNiceControl":319,"org.easymock.tests.UsageThrowableTest.throwAfterReturnValue":267,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfTMethodArray":146,"org.easymock.tests.UsageExpectAndDefaultThrowTest.floatType":396,"org.easymock.tests2.DelegateToTest.nullStubDelegationNotAllowed":274,"org.easymock.tests2.CaptureTest.testCaptureFirst":294,"org.easymock.tests.RecordStateMethodCallMissingTest.setStubAnswerWithoutMethodCall":424,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedMock":491,"org.easymock.tests2.UsageTest.exactCallCountByLastCall":25,"org.easymock.tests.StacktraceTest.assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock":79,"org.easymock.tests.UsageExpectAndReturnTest.objectAndRange":464,"org.easymock.tests2.UsageTest.moreThanOneArgument":18,"org.easymock.tests2.ThreadingTest.testCleanupAfterFailureInRecordPhase":269,"org.easymock.tests2.CaptureTest.testCapture2_2446744":293,"org.easymock.tests.RecordStateMethodCallMissingTest.setOnceWithoutMethodCall":434,"org.easymock.tests2.MockBuilderTest.testCreateStrictMockString":205,"org.easymock.tests.UsageVarargTest.varargDoubleAccepted":421,"org.easymock.tests.GenericTest.testBridgedEquals":228,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallFailsAtSecondCall":56,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullPrimitive":272,"org.easymock.tests.UsageExpectAndReturnTest.longType":460,"org.easymock.tests2.EasyMockSupportTest.strictResetToDefault":318,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.byteReturningValue":350,"org.easymock.tests.UsageExpectAndThrowTest.floatAndCount":389,"org.easymock.tests2.MockBuilderTest.testAddMethods_Final":206,"org.easymock.tests.RecordStateInvalidDefaultReturnValueTest.setInvalidStubReturnValue":110,"org.easymock.tests2.UsageConstraintsTest.differentConstraintsOnSameCall":282,"org.easymock.tests.UsageExpectAndThrowTest.longAndCount":387,"org.easymock.tests.UsageExpectAndDefaultReturnTest.floatType":125,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwWrongCheckedException":359,"org.easymock.tests.UsageCallCountTest.tooManyCalls":57,"org.easymock.tests.UsageCallCountTest.noUpperLimitWithoutCallCountSet":53,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockStringClassOfTMethodArray":163,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndMinMax":465,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableStaticField":316,"org.easymock.tests.UsageExpectAndThrowTest.booleanType":376,"org.easymock.tests.UsageThrowableTest.throwSubclassOfCheckedException":452,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_NoConstructorCalled":181,"org.easymock.tests.MockingTest.testNiceClassMocking":214,"org.easymock.tests.MockingTest.testClassMocking":209,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsPassesWithNoCalls":391,"org.easymock.tests2.UsageConstraintsTest.testContains":100,"org.easymock.tests2.MockBuilderTest.testAddMethod_Final":200,"org.easymock.tests2.MockedExceptionTest.testExplicitFillInStackTrace":198,"org.easymock.tests2.UsageConstraintsTest.testFind":96,"org.easymock.tests.UsageOverloadedMethodTest.moreThanOneResultAndOpenCallCount":262,"org.easymock.tests.MockTypeTest.fromEasyMockClass":73,"org.easymock.tests.UsageStrictMockTest.unorderedCallsFailure":64,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArguments":301,"org.easymock.tests.UsageExpectAndReturnTest.object":467,"org.easymock.tests2.EasyMockClassExtensionTest.testCompare":188,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":315,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedNiceMock":492,"org.easymock.tests.UsageVarargTest.varargFloatAccepted":417,"org.easymock.tests.ObjectMethodsTest.equalsAfterActivation":346,"org.easymock.tests.UsageTest.exactCallCountByLastCall":51,"org.easymock.tests.UsageOverloadedDefaultValueTest.overloading":118,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatDefaultReturnValueWithoutMethodCall":122,"org.easymock.tests.RecordStateInvalidRangeTest.setOpenCallCountTwice":238,"org.easymock.tests.RecordStateInvalidUsageTest.openVoidCallCountWithoutMethodCall":347,"org.easymock.tests2.PartialMockingTest.testPartialMock_PublicConstructor":171,"org.easymock.tests.UsageExpectAndReturnTest.longAndCount":473,"org.easymock.tests.UsageVarargTest.varargObjectAccepted":264,"org.easymock.tests.StacktraceTest.assertNoFillWhenDelegatingAnswer":92,"org.easymock.tests.MockClassControlTest.testHashCode":231,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":329,"org.easymock.tests2.EasyMockSupportTest.testVerify":324,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockClassOfTMethodArray":157,"org.easymock.tests.RecordStateInvalidRangeTest.setCloseCallAfterOpenOne":239,"org.easymock.tests.StacktraceTest.assertNoFillWhenIAnswerAnswer":455,"org.easymock.tests.RecordStateInvalidThrowableTest.throwWrongCheckedException":444,"org.easymock.tests2.NiceMockTest.defaultReturnValueBoolean":339,"org.easymock.tests2.UsageMatchersTest.additionalMatchersFailAtReplay":343,"org.easymock.tests.UsageVarargTest.varargCharAccepted":416,"org.easymock.tests2.UsageStrictMockTest.orderedCallsSucces":327,"org.easymock.tests.RecordStateMethodCallMissingTest.setObjectReturnValueWithoutMethodCall":438,"org.easymock.tests2.UsageTest.openCallCountByLastCall":252,"org.easymock.tests.DefaultClassInstantiatorTest.object":220,"org.easymock.tests2.EasyMockSupportTest.testCreateControl":323,"org.easymock.tests.RecordStateInvalidThrowableTest.throwNull":443,"org.easymock.tests.ObjectMethodsTest.toStringAfterActivation":41,"org.easymock.tests.ArgumentToStringTest.testArgumentsToString":134,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictControl":158,"org.easymock.tests.UsageExpectAndThrowTest.objectAndRange":378,"org.easymock.tests.UsageThrowableTest.throwSubclassOfError":450,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateQualifiers":310,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectMocksWhereTypeCompatible":328,"org.easymock.tests2.EasyMockClassExtensionTest.testStrictMock_Partial":191,"org.easymock.tests.MockClassControlTest.testToString_WithOverload":72,"org.easymock.tests.UsageExpectAndThrowTest.objectAndCount":377,"org.easymock.tests.CapturesMatcherTest.test":490,"org.easymock.tests.UsageExpectAndReturnTest.longAndRange":474,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwNull":358,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder_existingControl":165,"org.easymock.tests.MockClassControlTest.testToString_WithTwoOverload":71,"org.easymock.tests2.UsageTest.resumeIfFailure":24,"org.easymock.tests.MockTypeTest.fromMockBuilderClassWithName":234,"org.easymock.tests.UsageExpectAndDefaultThrowTest.object":399,"org.easymock.tests2.StubTest.stubWithReturnValue":109,"org.easymock.tests2.MockBuilderTest.testWithConstructorWithArgs":174,"org.easymock.tests.UsageExpectAndReturnTest.longAndMinMax":466,"org.easymock.tests2.UsageConstraintsTest.lessOrEqualOverloaded":138,"org.easymock.tests2.SerializationTest.testAllMockedMethod":85,"org.easymock.tests.RecordStateMethodCallMissingTest.timesWithoutReturnValue":266,"org.easymock.samples.SupportTest.voteForRemovals":481,"org.easymock.tests2.ConstraintsToStringTest.equalsToStringWithArray":140,"org.easymock.tests.GenericTest.testPartialMockBridgeMethodAreUnmocked":13,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenDuplicateQualifiers":331,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndCount":383,"org.easymock.tests.MethodSerializationWrapperTest.testGetMethod":86,"org.easymock.tests.RecordStateMethodCallMissingTest.asStubWithNonVoidMethod":437,"org.easymock.tests2.AnswerTest.nullStubAnswerNotAllowed":135,"org.easymock.tests.RecordStateInvalidUsageTest.notAMockPassedToExpect":349,"org.easymock.tests.UsageExpectAndThrowTest.object":381,"org.easymock.tests2.UsageConstraintsTest.greaterThanOverloaded":280,"org.easymock.tests2.DelegateToTest.testWrongClass":88,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnFloat":111,"org.easymock.tests.UsageFloatingPointReturnValueTest.returnDouble":112,"org.easymock.samples.ConstructorCalledMockTest.testTax":10,"org.easymock.tests.UsageStrictMockTest.range":4,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Interface":275,"org.easymock.tests2.EasyMockSupportTest.defaultResetToNice":321,"org.easymock.tests2.MocksControlTest.testMocksControl_Class_WithName":180,"org.easymock.tests.UsageExpectAndThrowTest.booleanAndMinMax":382,"org.easymock.tests2.MockBuilderTest.testWithMockSupport":8,"org.easymock.tests.ReplayStateInvalidUsageTest.andStubThrow":411,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfT":145,"org.easymock.tests.UsageTest.summarizeSameObjectArguments":49,"org.easymock.tests.NiceMockControlTest.defaultReturnValueFloat":368,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Array":141,"org.easymock.tests2.CaptureTest.testCaptureNone":291,"org.easymock.tests.RecordStateInvalidReturnValueTest.nullForPrimitive":365,"org.easymock.tests.UsageUnorderedTest.message":69,"org.easymock.tests.UsageVerifyTest.twoReturns":59,"org.easymock.tests.UsageVarargTest.varargByteAccepted":420,"org.easymock.tests2.ThreadingTest.testThreadSafe":295,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceMockStringClassOfT":160,"org.easymock.tests.UsageCallCountTest.correctNumberOfCalls":263,"org.easymock.tests.ObjectMethodsTest.toStringBeforeActivation":42,"org.easymock.samples.BasicClassMockTest.testPrintEmptyContent":235,"org.easymock.tests2.CaptureTest.testCapture_2617107":246,"org.easymock.tests.RecordStateInvalidStateChangeTest.verifyWithoutActivation":442,"org.easymock.tests.RecordStateMethodCallMissingTest.setLongReturnValueWithoutMethodCall":435,"org.easymock.tests.UsageDefaultReturnValueTest.defaultVoidCallable":249,"org.easymock.tests2.UsageConstraintsTest.any":250,"org.easymock.tests.ReplayStateInvalidUsageTest.anyTimes":408,"org.easymock.tests2.StubTest.stub":248,"org.easymock.tests.RecordStateInvalidDefaultThrowableTest.throwCheckedExceptionWhereNoCheckedExceptionIsThrown":360,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleReturnValueWithoutMethodCall":436,"org.easymock.tests.UsageExpectAndDefaultThrowTest.booleanType":398,"org.easymock.tests.UsageExpectAndThrowTest.longType":374,"org.easymock.tests.DefaultClassInstantiatorTest.serializable":223,"org.easymock.tests.ReplayStateInvalidUsageTest.checkOrder":407,"org.easymock.tests2.UsageStrictMockTest.tooManyCallsFailure":38,"org.easymock.tests2.EasyMockRunnerTest.shouldCreateMocksUsingTestClassWhenExtendsEasyMockSupport":40,"org.easymock.tests2.SerializationTest.testClass":83,"org.easymock.tests.LimitationsTest.mockNativeMethod":217,"org.easymock.tests.UsageExpectAndReturnTest.floatAndRange":476,"org.easymock.tests.GenericTest.testPartialMockingSeesBridgeHasUnmocked":227,"org.easymock.tests2.ReflectionUtilsTest.testFindMethodClassOfQStringClassOfQArray":241,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToNamedFields":309,"org.easymock.tests2.UsageStrictMockTest.tooFewCallsFailure":39,"org.easymock.tests2.NameTest.nameForMocksControl":257,"org.easymock.tests2.MockedExceptionTest.testMockedException":197,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenUnsatisfiedQualifier":311,"org.easymock.tests2.EasyMockSupportClassTest.testCreateNiceControl":150,"org.easymock.tests.UsageTest.openCallCountByLastThrowable":261,"org.easymock.tests.MockingTest.testStrictPartialClassMocking":213,"org.easymock.tests2.CallbackAndArgumentsTest.currentArgumentsFailsOutsideCallbacks":300,"org.easymock.tests.UsageExpectAndThrowTest.floatAndMinMax":375,"org.easymock.tests2.EasyMockClassExtensionTest.testClassMocking":183,"org.easymock.tests2.MockBuilderTest.testWithMockSupportNamed":9,"org.easymock.tests.MockingTest.testNicePartialClassMocking":212,"org.easymock.tests2.EasyMockClassExtensionTest.testVarargs":186,"org.easymock.tests2.CaptureTest.testCaptureLast":290,"org.easymock.tests2.EasyMockRuleTest.shouldInjectMocksWhereTypeCompatible":307,"org.easymock.tests.RecordStateInvalidStateChangeTest.activateWithoutReturnValue":63,"org.easymock.tests2.MocksControlTest.testMocksControl_NamedPartialMock_ConstructorCalled":168,"org.easymock.tests2.UsageConstraintsTest.andOverloaded":243,"org.easymock.tests2.UsageConstraintsTest.lessThanOverloaded":281,"org.easymock.tests.MockingTest.testTwoMocks":210,"org.easymock.tests2.MocksControlTest.testInterfaceForbidden_PartialMock":169,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndCount":457,"org.easymock.tests.UsageExpectAndThrowTest.doubleAndMinMax":379,"org.easymock.tests2.UsageTest.summarizeSameObjectArguments":22,"org.easymock.tests2.UsageConstraintsTest.testStartsWith":106,"org.easymock.samples.ExampleTest.removeNonExistingDocument":487,"org.easymock.tests.ReplayStateInvalidUsageTest.replay":405,"org.easymock.tests.UsageStrictMockTest.differentMethods":5,"org.easymock.tests2.EasyMockRuleTest.shouldErrorForUnmatchedQualifierWhenTypeIncompatibleQualifier":313,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToNamedFields":330,"org.easymock.tests.DefaultClassInstantiatorTest.emptyConstructor":221,"org.easymock.tests2.ThreadingTest.testThreadNotSafe":273,"org.easymock.tests2.MockBuilderTest.testCreateMockString":207,"org.easymock.tests.MockClassControlTest.testHashCode_WithOverload":229,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfT":151,"org.easymock.tests.UsageExpectAndThrowTest.floatType":373,"org.easymock.tests2.UsageConstraintsTest.compareWithComparator":16,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockStringClassOfTConstructorArgsMethodArray":147,"org.easymock.tests2.AnswerTest.answerOnVoidMethod":303,"org.easymock.tests.UsageVerifyTest.twoThrows":58,"org.easymock.tests.StacktraceTest.assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock":76,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockBuilder":7,"org.easymock.samples.ExampleTest.voteAgainstRemoval":484,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanReturnValueWithoutMethodCall":429,"org.easymock.tests.RecordStateInvalidReturnValueTest.setReturnValueForVoidMethod":363,"org.easymock.tests2.EasyMockClassExtensionTest.testMock_Partial":192,"org.easymock.tests.LimitationsTest.privateConstructor":216,"org.easymock.tests2.ConstructorArgsTest.testConstructorArgs_NullObject":144,"org.easymock.tests2.UsageConstraintsTest.testNotNull":105,"org.easymock.tests.UsageThrowableTest.throwSubclassOfRuntimeException":454,"org.easymock.tests2.MockedExceptionTest.testNotMockedFillInStackTrace":196,"org.easymock.tests2.UsageTest.defaultResetToNice":284,"org.easymock.samples.ExampleTest.voteAgainstRemovals":482,"org.easymock.tests.UsageExpectAndReturnTest.doubleType":472,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesWithoutMethodCall":430,"org.easymock.tests.UsageVarargTest.differentLength":61,"org.easymock.tests2.EasyMockRuleTest.shouldInjectQualifiedMocksToAllMatchingTestSubjects":308,"org.easymock.tests2.CallbackTest.callback":14,"org.easymock.tests2.UsageConstraintsTest.equals":277,"org.easymock.tests2.EasyMockClassExtensionTest.testCreateMockBuilder":189,"org.easymock.tests.UsageTest.openCallCountByLastCall":260,"org.easymock.tests2.UsageConstraintsTest.lessOrEqual":94,"org.easymock.tests.UsageDefaultReturnValueTest.defaultThrowable":477,"org.easymock.tests.UsageCallCountTest.tooFewCalls":54,"org.easymock.tests2.MocksControlTest.testMocksControl_Class":182,"org.easymock.tests.NiceMockControlTest.defaultReturnValueObject":370,"org.easymock.tests.UsageThrowableTest.throwCheckedException":451,"org.easymock.tests.ArgumentToStringTest.testAppendArgument_Full":142,"org.easymock.tests.MockingTest.testStrictClassMocking":208,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_NoConstructorCalled":27,"org.easymock.tests.UsageOverloadedDefaultValueTest.defaultThrowable":366,"org.easymock.tests2.MocksControlTest.testMocksControl_PartialMock_ConstructorCalled":26,"org.easymock.tests2.EasyMockRuleTest.shouldErrorWhenDuplicateAssignmentPossible":312,"org.easymock.tests.ReplayStateInvalidUsageTest.checkIsUsedInOneThread":410,"org.easymock.tests2.MocksControlTest.testMocksControl_Interface":270,"org.easymock.tests2.AnswerTest.testGenericityFlexibility":305,"org.easymock.tests.ObjectMethodsTest.testHashCode":345,"org.easymock.tests2.NameTest.nameForNiceMock":256,"org.easymock.tests2.ThreadingTest.testRecordingInMultipleThreads":297,"org.easymock.tests2.DependencyTest.testInterfaceMocking":325,"org.easymock.samples.ExampleTest.addDocument":485,"org.easymock.tests2.EasyMockSupportClassTest.testCreateControl":161,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTConstructorArgsMethodArray":166,"org.easymock.tests2.DelegateToTest.testStubDelegate":268,"org.easymock.tests2.AnswerTest.stubAnswer":304,"org.easymock.tests.UsageStrictMockTest.defaultBehavior":66,"org.easymock.tests.UsageVarargTest.varargLongAccepted":419,"org.easymock.tests.UsageStrictMockTest.tooFewCallsFailure":68,"org.easymock.tests.RecordStateMethodCallMissingTest.setFloatReturnValueWithoutMethodCall":427,"org.easymock.tests.UsageExpectAndReturnTest.floatAndCount":475,"org.easymock.tests.UsageExpectAndReturnTest.floatType":459,"org.easymock.tests2.PartialMockingTest.testPartialMock_ProtectedConstructor":170,"org.easymock.samples.ConstructorCalledMockTest.testTax_ZeroRate":11,"org.easymock.tests.UsageThrowableTest.noUpperLimit":449,"org.easymock.tests2.UsageConstraintsTest.equalsWithDelta":104,"org.easymock.tests.StacktraceTest.assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock":77,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorForUnmatchedQualifierWhenUnassignableFinalField":336,"org.easymock.tests2.UsageConstraintsTest.testEndsWith":95,"org.easymock.tests2.ClassExtensionHelperTest.testMockType_Class":178,"org.easymock.tests2.SerializationTest.test":84,"org.easymock.tests2.CaptureTest.testCaptureStrictControl_2133741":288,"org.easymock.tests.DefaultClassInstantiatorTest.protectedWithPrimitiveConstructor":81,"org.easymock.tests.UsageExpectAndReturnTest.doubleAndRange":458,"org.easymock.tests2.UsageConstraintsTest.testSame":98,"org.easymock.samples.SupportTest.addDocument":480,"org.easymock.tests.ReplayStateInvalidUsageTest.setVoidCallable":406,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfT":152,"org.easymock.tests.GenericTest.testPackageScope":225,"org.easymock.tests.RecordStateInvalidRangeTest.setIllegalMinimumCount":440,"org.easymock.tests.RecordStateMethodCallMissingTest.setBooleanDefaultReturnValueWithoutMethodCall":121,"org.easymock.tests2.EasyMockRunnerTest.shouldInjectQualifiedMocksToTestSubjectSuperClass":335,"org.easymock.tests.MockingTest.testStrictInterfaceMocking":356,"org.easymock.tests2.NameTest.nameForMock":254,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndCount":469,"org.easymock.tests2.MockBuilderTest.testWithConstructorParams":177,"org.easymock.tests2.UsageStrictMockTest.differentMethods":2,"org.easymock.tests2.EasyMockClassExtensionTest.testResetTo":190,"org.easymock.tests.UsageExpectAndReturnTest.floatAndMinMax":461,"org.easymock.tests.UsageExpectAndThrowTest.objectAndMinMax":385,"org.easymock.tests.ObjectMethodsTest.equalsBeforeActivation":344,"org.easymock.tests.UsageRangeTest.zeroOrMoreThreeCalls":395,"org.easymock.tests2.MockedExceptionTest.testRealException":306,"org.easymock.tests.MockTypeTest.fromEasyMockSupportClass":75,"org.easymock.tests.RecordStateMethodCallMissingTest.setDoubleDefaultReturnValueWithoutMethodCall":123,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMock":276,"org.easymock.tests.RecordStateMethodCallMissingTest.setAnswerWithoutMethodCall":431,"org.easymock.tests2.UsageStrictMockTest.stubBehavior":37,"org.easymock.tests.ReplayStateInvalidUsageTest.createMock":412,"org.easymock.tests.UsageDefaultReturnValueTest.defaultReturnValue":131,"org.easymock.tests2.NameTest.nameForStrictMock":255,"org.easymock.tests2.MockBuilderTest.testCreateMockIMocksControl":202,"org.easymock.tests2.CallbackAndArgumentsTest.callbackGetsArgumentsEvenIfAMockCallsAnother":299,"org.easymock.tests2.EasyMockClassExtensionTest.testCheckOrder":185,"org.easymock.tests2.ClassExtensionHelperTest.testGetControl_EasyMockClassExtension":179,"org.easymock.tests2.UsageConstraintsTest.notOverloaded":0,"org.easymock.tests.DefaultClassInstantiatorTest.protectedConstructor":222,"org.easymock.tests2.MockBuilderTest.testCreateStrictMock":34,"org.easymock.tests2.UsageStrictMockTest.range":1,"org.easymock.tests2.UsageConstraintsTest.lessThan":107,"org.easymock.tests2.EasyMockRunnerTest.shouldErrorWhenUnsatisfiedQualifier":332,"org.easymock.tests.RecordStateMethodCallMissingTest.setTimesMinMaxWithoutMethodCall":426,"org.easymock.tests2.EasyMockSupportTest.testCreateStrictMock":31,"org.easymock.tests2.EasyMockSupportClassTest.testCreateStrictMockClassOfTMethodArray":156,"org.easymock.tests2.CaptureTest.testCaptureRightOne":247,"org.easymock.tests2.UsageConstraintsTest.testOr":99,"org.easymock.tests.UsageRangeTest.combination":60,"org.easymock.tests2.EasyMockClassExtensionTest.testNormalMock":28,"org.easymock.tests.UsageTest.wrongArguments":48,"org.easymock.tests2.MockBuilderTest.testWithConstructor":172,"org.easymock.tests2.EasyMockSupportClassTest.testCreateMockClassOfTMethodArray":153,"org.easymock.tests.MockClassControlTest.testFinalize_AreIgnored":230,"org.easymock.tests.UsageExpectAndReturnTest.booleanType":462,"org.easymock.tests.UsageExpectAndReturnTest.booleanAndRange":470,"org.easymock.tests.RecordStateMethodCallMissingTest.setAtLeastOnceWithoutMethodCall":422,"org.easymock.tests.UsageVarargTest.varargShortAccepted":418,"org.easymock.tests.DefaultClassInstantiatorTest.primitiveType":82,"org.easymock.tests.UsageCallCountTest.mockWithNoExpectedCallsFailsAtFirstCall":55,"org.easymock.tests2.UsageConstraintsTest.cmpTo":251,"org.easymock.tests2.AnswerTest.nullAnswerNotAllowed":302,"org.easymock.tests.RecordStateMethodCallMissingTest.setThrowableWithoutMethodCall":423,"org.easymock.tests2.UsageTest.openCallCountByLastThrowable":253,"org.easymock.tests2.CaptureTest.testCaptureFromStub":108,"org.easymock.tests.ReplayStateInvalidUsageTest.createMockWithName":402,"org.easymock.tests2.MockBuilderTest.testCreateMockStringIMocksControl":201,"org.easymock.tests.UsageTest.unexpectedCallWithArray":47,"org.easymock.tests.UsageStrictMockTest.unexpectedCallWithArray":65,"org.easymock.tests.UsageCallCountTest.mockWithOneExpectedCallPassesWithOneCall":392,"org.easymock.tests2.MockBuilderTest.testWithArgsTwice":176,"org.easymock.tests.UsageExpectAndReturnTest.objectAndMinMax":471,"org.easymock.tests2.UsageConstraintsTest.constraints":15,"org.easymock.tests.UsageStrictMockTest.tooManyCallsFailure":67,"org.easymock.samples.ExampleTest.addAndChangeDocument":488,"org.easymock.tests.UsageStrictMockTest.testVerify":447,"org.easymock.samples.AnnotatedMockWithRunnerTest.addDocument":479,"org.easymock.tests.UsageStrictMockTest.orderedCallsSucces":446,"org.easymock.tests.NiceMockControlLongCompatibleReturnValueTest.charReturningValue":351,"org.easymock.tests2.CaptureTest.testCaptureNonStrictControl_2133741":289,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnByte":115,"org.easymock.tests2.ReflectionUtilsTest.testFindMethod":195,"org.easymock.tests.UsageExpectAndReturnTest.objectAndCount":463,"org.easymock.tests.LimitationsTest.abstractClass":215,"org.easymock.tests.UsageLongCompatibleReturnValueTest.returnChar":116,"org.easymock.tests.StacktraceTest.assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock":78,"org.easymock.tests.UsageVarargTest.varargBooleanAccepted":413,"org.easymock.tests2.EasyMockSupportTest.testCreateNamedStrictMock":259}}]

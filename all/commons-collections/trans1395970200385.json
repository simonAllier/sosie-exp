[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((int) == int) && (java.lang.Object.equals(K))) {\n    return V;\n} ","position":"org.apache.commons.collections4.map.Flat3Map:152","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<? extends E>.size()","position":"org.apache.commons.collections4.iterators.LoopingIterator:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(((K) == this ? \"(this Map)\" : K))","position":"org.apache.commons.collections4.map.Flat3Map:1227","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:85","type":"CtThrowImpl"},"status":-2},{"failures":[0,1,2],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bag.AbstractMapBag:258","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().add(E)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:96","type":"CtReturnImpl"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13],"variableMapping":{"stack":"stack","currentIterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = this.org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:197","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"tmpMap":"map"},"name":"add","transplant":{"sourceCode":"return java.util.SortedMap<K, V>","position":"org.apache.commons.collections4.map.UnmodifiableSortedMap:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:175","type":"CtSynchronizedImpl"},"status":-2},{"failures":[14],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.util.Map<? extends org.apache.commons.collections4.Predicate<? super I>, ? extends org.apache.commons.collections4.Transformer<? super I, ? extends O>>.size()","position":"org.apache.commons.collections4.functors.SwitchTransformer:103","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Objects of type \" + (E.getClass()))","name":"math","position":"org.apache.commons.collections4.bag.TreeBag:87","type":"mutation","status":-2},{"failures":[],"variableMapping":{"lastUsedIterator":"lastUsedIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:224","type":"CtAssignmentImpl"},"status":0},{"failures":[15,16,17],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.apache.commons.collections4.Predicate<? super E> = org.apache.commons.collections4.Predicate<? super E>","position":"org.apache.commons.collections4.iterators.FilterIterator:163","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:647","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:211","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.Bag<E>","position":"org.apache.commons.collections4.bag.UnmodifiableBag:62","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"switch (int) {\n    case 3 :\n        org.apache.commons.collections4.map.Flat3Map<K, V>.V = V;\n        break;\n    case 2 :\n        org.apache.commons.collections4.map.Flat3Map<K, V>.V = V;\n        break;\n    case 1 :\n        org.apache.commons.collections4.map.Flat3Map<K, V>.V = V;\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Invalid map index: \" + (int)));\n}","position":"org.apache.commons.collections4.map.Flat3Map:689","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.bag.AbstractMapBag:114","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().lastIndexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.AbstractListDecorator:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>>.remove()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:99","type":"CtInvocationImpl"},"status":-2},{"failures":[18],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated()","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(',')","position":"org.apache.commons.collections4.bag.AbstractMapBag:597","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet(this)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2221","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().keySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"startIndex":"endIndex","index":"index"},"name":"add","transplant":{"sourceCode":"this.int = this.int","position":"org.apache.commons.collections4.iterators.ArrayIterator:197","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int < int) || (int > int)) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Invalid index:\" + int) + \", size=\") + org.apache.commons.collections4.list.TreeList<E>.(size())));\n} ","position":"org.apache.commons.collections4.list.TreeList:287","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return K","position":"org.apache.commons.collections4.keyvalue.TiedMapEntry:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Enumeration<? extends E>.hasMoreElements()","position":"org.apache.commons.collections4.iterators.EnumerationIterator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-2},{"failures":[19,20,21,22,23,24],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bag.AbstractMapBag:258","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:67","type":"CtReturnImpl"},"status":-1},{"failures":[25,26,27],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1634","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[]);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:163","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"ListIterator must not be null\")","position":"org.apache.commons.collections4.IteratorUtils:722","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.InstantiateTransformer<T>()","position":"org.apache.commons.collections4.functors.InstantiateTransformer:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.<I,O>nullTransformer()","position":"org.apache.commons.collections4.functors.MapTransformer:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) == java.lang.Object) || (((org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K) != null) && (org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.K.equals(java.lang.Object)))) {\n    return org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.V;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:207","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n    int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n} else {\n    while (int < int) {\n        int <<= 1;\n    }\n    if (int > (org.apache.commons.collections4.map.AbstractHashedMap.int)) {\n        int = org.apache.commons.collections4.map.AbstractHashedMap.int;\n    } \n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:665","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int >= int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies(((int - int) + 1), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:183","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().tailSet(E)","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:149","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:84","type":"CtReturnImpl"},"status":-2},{"failures":[28],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:149","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:133","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\")","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:99","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.iterators.ObjectArrayListIterator<E>.(hasPrevious()) == false) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.ObjectArrayListIterator:109","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:130","type":"CtReturnImpl"},"status":-2},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 1","position":"org.apache.commons.collections4.map.SingletonMap:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().size()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:118","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 1","position":"org.apache.commons.collections4.map.SingletonMap:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"V V = null","position":"org.apache.commons.collections4.map.ListOrderedMap:267","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.ReverseListIterator:79","type":"CtReturnImpl"},"status":-2},{"failures":[20,21],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.bag.AbstractMapBag:114","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:118","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:108","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.lang.Object[]) {\n    return (((java.lang.Object[])(java.lang.Object)).int) == 0;\n} else if (java.lang.Object instanceof java.util.Iterator<?>) {\n    return (((java.util.Iterator<?>)(java.lang.Object)).hasNext()) == false;\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    return (((java.util.Enumeration<?>)(java.lang.Object)).hasMoreElements()) == false;\n} else {\n    try {\n        return java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) == 0;\n    } catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:1389","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.bag.UnmodifiableBag:113","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"No more elements in the iteration\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:222","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.set.CompositeSet.SetMutator<E>.add(this, java.util.List<java.util.Set<E>>, E)","position":"org.apache.commons.collections4.set.CompositeSet:217","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:215","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.TransformedSortedMap:155","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.LazySortedMap:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"key1":"object","key2":"object"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.AbstractMapDecorator:127","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"keyAnalyzer\")","position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:50","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IndexOutOfBoundsException(((((((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") greater than the size of the \") + \"list (\") + (int)) + \").\"))","position":"org.apache.commons.collections4.list.AbstractLinkedList:547","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{"object":"object"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.IdentityPredicate<T>(T)","position":"org.apache.commons.collections4.functors.IdentityPredicate:50","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.EqualPredicate<T>(T)","position":"org.apache.commons.collections4.functors.EqualPredicate:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getValue()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int == 0) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n    } else {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n    }\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:138","type":"CtIfImpl"},"status":-2},{"failures":[75,633,634,635,636,637,638,639,640,641,642,643,644,169,170,171,172,173,174,175,178,231,232,235,236,237,238,239,306,309,312,315,317,318,320,322,324,325,326,327,348,351,354,357,359,360,362,364,366,367,368,369,389,392,395,398,400,401,403,405,407,408,409,410,416,417,418,419,420,421,422,425,426,429,430,431,432,433,434,494,497,502,503,505,509,511,522,523,526,527,528,529,530,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,0,687,1,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,2,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,588,596,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,597,598,599,600,601,602,603,606,614,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,615,616,617,618,619,620,621,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,624,625,626,627,628,629,630,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,27,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 1","position":"org.apache.commons.collections4.map.SingletonMap:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.FilterIterator:175","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<K, V>.put(K, V)","position":"org.apache.commons.collections4.map.ListOrderedMap:465","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(((K)(java.lang.Object)))","position":"org.apache.commons.collections4.map.DefaultedMap:203","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Float.java.lang.Float.valueOf(java.lang.Number.floatValue())","position":"org.apache.commons.collections4.MapUtils:305","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-2},{"failures":[6,8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = ((java.util.Iterator<? extends E>)(E))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:109","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().comparator()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (java.lang.Object == java.lang.Object) || (java.lang.Object == null ? false : java.lang.Object.equals(java.lang.Object))","position":"org.apache.commons.collections4.list.AbstractLinkedList:416","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:88","type":"CtReturnImpl"},"status":-2},{"failures":[1327,1328],"name":"returnValue","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1113","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:438","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(K, int, int)) != org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K, int, org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.lengthInBits(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K)))) {\n    return null;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:198","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"status":-2},{"failures":[1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:126","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.KeySet()","position":"org.apache.commons.collections4.map.StaticBucketMap:351","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator<K, V>.isSetValueChecking()) {\n    return new org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator.EntrySet(java.util.Map<K, V>.entrySet() , this);\n} ","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().remove(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:99","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * The sublist implementation for AbstractLinkedList.\n */\nprotected static class LinkedSubList<E> extends java.util.AbstractList<E> {\n    /** \n     * The main list\n     */\norg.apache.commons.collections4.list.AbstractLinkedList<E> parent;\n\n    /** \n     * Offset from the main list\n     */\nint offset;\n\n    /** \n     * Sublist size\n     */\nint size;\n\n    /** \n     * Sublist modCount\n     */\nint expectedModCount;\n\n    protected LinkedSubList(final org.apache.commons.collections4.list.AbstractLinkedList<E> parent ,final int fromIndex ,final int toIndex) {\n        if (int < 0) {\n            throw new java.lang.IndexOutOfBoundsException((\"fromIndex = \" + int));\n        } \n        if (int > (org.apache.commons.collections4.list.AbstractLinkedList<E>.size())) {\n            throw new java.lang.IndexOutOfBoundsException((\"toIndex = \" + int));\n        } \n        if (int > int) {\n            throw new java.lang.IllegalArgumentException(((((\"fromIndex(\" + int) + \") > toIndex(\") + int) + \")\"));\n        } \n        this.org.apache.commons.collections4.list.AbstractLinkedList<E> = org.apache.commons.collections4.list.AbstractLinkedList<E>;\n        this.int = int;\n        this.int = int - int;\n        this.int = org.apache.commons.collections4.list.AbstractLinkedList<E>.int;\n    }\n\n    @java.lang.Override\n    public int size() {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        return int;\n    }\n\n    @java.lang.Override\n    public E get(final int index) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, int);\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        return org.apache.commons.collections4.list.AbstractLinkedList<E>.get((int + (int)));\n    }\n\n    @java.lang.Override\n    public void add(final int index, final E obj) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, ((int) + 1));\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        org.apache.commons.collections4.list.AbstractLinkedList<E>.add((int + (int)), E);\n        int = org.apache.commons.collections4.list.AbstractLinkedList<E>.int;\n        (int)++;\n        (org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList.this.int)++;\n    }\n\n    @java.lang.Override\n    public E remove(final int index) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, int);\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        final E E = org.apache.commons.collections4.list.AbstractLinkedList<E>.remove((int + (int)));\n        int = org.apache.commons.collections4.list.AbstractLinkedList<E>.int;\n        (int)--;\n        (org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList.this.int)++;\n        return E;\n    }\n\n    @java.lang.Override\n    public boolean addAll(final java.util.Collection<? extends E> coll) {\n        return org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.addAll(int, java.util.Collection<? extends E>);\n    }\n\n    @java.lang.Override\n    public boolean addAll(final int index, final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, ((int) + 1));\n        final int int = java.util.Collection<? extends E>.size();\n        if (int == 0) {\n            return false;\n        } \n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        org.apache.commons.collections4.list.AbstractLinkedList<E>.addAll(((int) + int), java.util.Collection<? extends E>);\n        int = org.apache.commons.collections4.list.AbstractLinkedList<E>.int;\n        int += int;\n        (org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList.this.int)++;\n        return true;\n    }\n\n    @java.lang.Override\n    public E set(final int index, final E obj) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, int);\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        return org.apache.commons.collections4.list.AbstractLinkedList<E>.set((int + (int)), E);\n    }\n\n    @java.lang.Override\n    public void clear() {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.iterator();\n        while (java.util.Iterator<E>.hasNext()) {\n            java.util.Iterator<E>.next();\n            java.util.Iterator<E>.remove();\n        }\n    }\n\n    @java.lang.Override\n    public java.util.Iterator<E> iterator() {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        return org.apache.commons.collections4.list.AbstractLinkedList<E>.createSubListIterator(this);\n    }\n\n    @java.lang.Override\n    public java.util.ListIterator<E> listIterator(final int index) {\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, ((int) + 1));\n        org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount();\n        return org.apache.commons.collections4.list.AbstractLinkedList<E>.createSubListListIterator(this, int);\n    }\n\n    @java.lang.Override\n    public java.util.List<E> subList(final int fromIndexInclusive, final int toIndexExclusive) {\n        return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>(org.apache.commons.collections4.list.AbstractLinkedList<E> , (int + (int)) , (int + (int)));\n    }\n\n    protected void rangeCheck(final int index, final int beyond) {\n        if ((int < 0) || (int >= int)) {\n            throw new java.lang.IndexOutOfBoundsException(((((\"Index \\'\" + int) + \"\\' out of bounds for size \\'\") + (int)) + \"\\'\"));\n        } \n    }\n\n    protected void checkModCount() {\n        if ((org.apache.commons.collections4.list.AbstractLinkedList<E>.int) != (int)) {\n            throw new java.util.ConcurrentModificationException();\n        } \n    }\n}","position":"org.apache.commons.collections4.list.AbstractLinkedList:938","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:133","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.isEmpty()) {\n    return null;\n} ","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:148","type":"CtIfImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12],"variableMapping":{"stack":"stack","currentIterator":"currentIterator"},"name":"replace","transplant":{"sourceCode":"this.org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(this.java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:197","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = java.util.Collection<? extends E>.size()","position":"org.apache.commons.collections4.list.TreeList:88","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Factory<? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.functors.TruePredicate:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.bag.TreeBag<E>.getMap()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    java.util.List<E>.add(java.util.Iterator<? extends E>.next());\n}","position":"org.apache.commons.collections4.IteratorUtils:1025","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.MapTransformer<I, O>(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.functors.MapTransformer:53","type":"CtReturnImpl"},"status":-2},{"failures":[1402,1403],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:220","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Set<E>","position":"org.apache.commons.collections4.list.SetUniqueList:345","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (T == null) {\n    return org.apache.commons.collections4.functors.NullPredicate.org.apache.commons.collections4.functors.NullPredicate.<T>nullPredicate();\n} ","position":"org.apache.commons.collections4.functors.IdentityPredicate:47","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"((int + \" + \") + int)","name":"math","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:855","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:915","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:165","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.BitSet.clear(int)","position":"org.apache.commons.collections4.comparators.ComparatorChain:198","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (E instanceof java.util.Iterator) {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)));\n} else {\n    E = E;\n    boolean = true;\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1862","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Factory must not be null\")","position":"org.apache.commons.collections4.functors.FactoryTransformer:49","type":"CtThrowImpl"},"status":-2},{"failures":[1404],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.bag.AbstractMapBag:114","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:174","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().comparator()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:80","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.iterators.CollatingIterator<E>(java.util.Comparator<? super E> , java.util.Iterator<? extends E> , java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.IteratorUtils:547","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Factory<? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"list1":"coll","list2":"coll"},"name":"replace","transplant":{"sourceCode":"if (((java.util.Collection<?> == null) || (java.util.Collection<?> == null)) || ((java.util.Collection<?>.size()) != (java.util.Collection<?>.size()))) {\n    return false;\n} ","position":"org.apache.commons.collections4.ListUtils:248","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.hasNext()) {\n    final java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>> = java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.next();\n    final org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> = java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>.get();\n    if (org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> == null) {\n        java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.remove();\n    } else {\n        org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>.nodeChanged(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n    }\n}","position":"org.apache.commons.collections4.list.CursorableLinkedList:314","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    final E E = java.util.Iterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterIterator:174","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasNext()) {\n    final E E = java.util.ListIterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:231","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Collections.java.util.Collections.unmodifiableSortedMap(org.apache.commons.collections4.Trie<K, V>.subMap(K, K))","position":"org.apache.commons.collections4.trie.UnmodifiableTrie:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.SplitMapUtils:73","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:131","type":"CtInvocationImpl"},"status":-2},{"failures":[10,13],"variableMapping":{"iterator":"lastUsedIterator"},"name":"replace","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:224","type":"CtAssignmentImpl"},"status":-1},{"failures":[1405,1406,1407,1408,1027,1028,1409,1410],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated()","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeInt(org.apache.commons.collections4.map.Flat3Map<K, V>.size())","position":"org.apache.commons.collections4.map.Flat3Map:1088","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:112","type":"CtInvocationImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11],"binaryOperator":"(java.util.Iterator<? extends E>) != null","name":"negateConditional","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:181","type":"mutation","status":-1},{"failures":[1411,1412,807,1413,808,809,810,811,812,813,814,815,816,1414,817,1415,1416,1417,1418],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() is not supported on CompositeCollection without a CollectionMutator strategy\")","position":"org.apache.commons.collections4.collection.CompositeCollection:220","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedSet<E>)(org.apache.commons.collections4.set.AbstractSetDecorator<E>.decorated()))","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:64","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:67","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":334,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":656,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":335,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":1271,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":210,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":268,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":1106,"org.apache.commons.collections4.map.MultiValueMapTest.testMapEquals":520,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":903,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":1329,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastValues":333,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":771,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastEntrySet":331,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":1083,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesIteratorRemoveChangesMap":378,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":1226,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_removeByIndex":78,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":527,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":649,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":1096,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":1022,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionClear":1319,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":869,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":1013,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesClearChangesMap":1101,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapHashCode":39,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":732,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":884,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":849,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":825,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":922,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":836,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":807,"org.apache.commons.collections4.map.ListOrderedMap2Test.testSerializeDeserializeThenCompare":581,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":767,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testSerializeDeserializeThenCompare":531,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":1028,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":1375,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":1324,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetClearChangesMap":1088,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":1399,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":1024,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":336,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":775,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":970,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":1408,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":192,"org.apache.commons.collections4.MapUtilsTest.testLazyMapTransformer":582,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":747,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":992,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":1406,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiTailMapContains":589,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRetainAll":124,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":211,"org.apache.commons.collections4.map.PredicatedMapTest.testMapHashCode":340,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":1355,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetClearChangesMap":106,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":225,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListSerialization":985,"org.apache.commons.collections4.ListUtilsTest.testLazyList":1326,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":715,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSimpleSerialization":1418,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":1077,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":687,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":1246,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains3":565,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionSize":672,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveAll":363,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains2":564,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains1":563,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":679,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":94,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFirstKey":480,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":1113,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapClear":34,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":235,"org.apache.commons.collections4.map.TransformedMapTest.testValuesClearChangesMap":329,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":431,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorRemoveProtectsInvariants":1229,"org.apache.commons.collections4.map.SingletonMapTest.testFirstKey":415,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetIteratorRemoveChangesMap":279,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":1091,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":368,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":734,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":789,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":1398,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":1110,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":161,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRetainAll":443,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":800,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":718,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":976,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":1301,"org.apache.commons.collections4.map.LazyMapTest.testFailFastKeySet":129,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":281,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueCompatibility":841,"org.apache.commons.collections4.bag.HashBagTest.testCollectionClear":1163,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":832,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionSize":760,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":463,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":1026,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":426,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":547,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":938,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":1197,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":9,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":967,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesClearChangesMap":560,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":36,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListSerialization":1039,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":764,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":1165,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":171,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":367,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":1312,"org.apache.commons.collections4.map.TransformedMapTest.testSerializeDeserializeThenCompare":330,"org.apache.commons.collections4.map.LazySortedMapTest.testMapHashCode":444,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":1343,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMakeMap":496,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":890,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":196,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveAll":310,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":417,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":617,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":662,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":1215,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":1294,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":1330,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":1243,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":954,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":784,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetIteratorRemoveChangesMap":323,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":236,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":56,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":55,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":54,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":1031,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":642,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":629,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":1178,"org.apache.commons.collections4.map.ListOrderedMapTest.testIndexOf":72,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":1290,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":961,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":1011,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveChangesMap":303,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":1321,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastValues":542,"org.apache.commons.collections4.map.FixedSizeMapTest.testFullMapCompatibility":428,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":1170,"org.apache.commons.collections4.map.LazyMapTest.testFullMapCompatibility":155,"org.apache.commons.collections4.map.MultiValueMapTest.testSerializeDeserializeThenCompare":521,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":1150,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":97,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":893,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":1350,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetClearChangesMap":1132,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":1269,"org.apache.commons.collections4.map.SingletonMapTest.testEmptyMapCompatibility":423,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":749,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":613,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":1390,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":722,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":692,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking2":902,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":1253,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":592,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":813,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove1":111,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove3":113,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove2":112,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":1252,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":173,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFirstKey":539,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":925,"org.apache.commons.collections4.MapUtilsTest.testIterableMap":583,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":941,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":1204,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":511,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":904,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":1233,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":1318,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEmptyMapCompatibility":499,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":1249,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRetainAll":158,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":1228,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":232,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":1001,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":1149,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":730,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":228,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":612,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testEmptyMapCompatibility":631,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testSerializeDeserializeThenCompare":413,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionSize":1067,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveAll":277,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":1000,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":776,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":1082,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":1293,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":208,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":197,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":668,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":664,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":1056,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullKey":44,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":219,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToString":1044,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":1185,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":826,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":886,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":1305,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":1057,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":503,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":1367,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":745,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullValue":349,"org.apache.commons.collections4.map.MultiKeyMapTest.testEmptyMapCompatibility":202,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesClearChangesMap":1086,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":1152,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":508,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFullMapCompatibility":399,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":523,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":237,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastEntrySet":540,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":212,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":93,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":213,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking2":1030,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":27,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":214,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":1207,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":1395,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":703,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveAll":574,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":695,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":626,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionClear":663,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":708,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":842,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":682,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastEntrySet":85,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":665,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":1100,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":634,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":837,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":190,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":952,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":1353,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":46,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionSize":863,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":950,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":351,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":1128,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":1036,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":1240,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":720,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveAll":321,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":199,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":1137,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":1210,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSerializeDeserializeThenCompare":513,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":1349,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":1038,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testDecoratedMap":30,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":894,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":835,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":273,"org.apache.commons.collections4.map.DefaultedMapTest.testMapHashCode":254,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":1268,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSize":29,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":1223,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":1079,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":1219,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":1105,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":231,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":1125,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":742,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":1222,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":915,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":488,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":740,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":346,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":872,"org.apache.commons.collections4.map.PredicatedMapTest.testFullMapCompatibility":358,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":929,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullKey":498,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":1166,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":808,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFailDoubleRemove":1259,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":719,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveAll":266,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":645,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":1134,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnmodifiable":1412,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRetainAll":328,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiTailMapContains":607,"org.apache.commons.collections4.map.ListOrderedMapTest.testRemoveByIndex":74,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains3":133,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains2":132,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":1050,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testEmptyListIteratorIsIndeedEmpty":19,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":1373,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testEqualsNull":1415,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":1062,"org.apache.commons.collections4.map.TransformedSortedMapTest.initializationError":127,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains1":131,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueSerialization":874,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapHashCode":381,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":1183,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":699,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetIteratorRemoveChangesMap":121,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":230,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesIteratorRemoveChangesMap":441,"org.apache.commons.collections4.list.GrowthListTest.testCollectionSize":939,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":1396,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastValues":291,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":1025,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutAll":507,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetClearChangesMap":562,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":1232,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveAll":578,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":1299,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":502,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":723,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":856,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":1148,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":1397,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":223,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":419,"org.apache.commons.collections4.map.LazyMapTest.testKeySetIteratorRemoveChangesMap":162,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":786,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":1368,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEmptyMapCompatibility":553,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":1404,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":276,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRetainAll":579,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":1182,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":14,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":624,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":195,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":490,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":244,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":777,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":1340,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":1160,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":1348,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":934,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionSize":1282,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":1393,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":865,"org.apache.commons.collections4.map.LazySortedMapTest.testFullMapCompatibility":462,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":1047,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":151,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":830,"org.apache.commons.collections4.map.TransformedMapTest.testEmptyMapCompatibility":314,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapClear":91,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastValues":247,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":1142,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":287,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":625,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesClearChangesMap":105,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":666,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":1270,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMakeMap":394,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":64,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":918,"org.apache.commons.collections4.list.TransformedListTest.testCollectionSize":968,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":913,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":1309,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":910,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":897,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":1019,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":862,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":164,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":278,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":859,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":1287,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":1144,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":955,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagSize":1195,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapHashCode":96,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionSize":647,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRetainAll":473,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":1403,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":834,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":362,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":1296,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":17,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFailDoubleRemove":1198,"org.apache.commons.collections4.map.PredicatedMapTest.testSerializeDeserializeThenCompare":372,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":602,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":364,"org.apache.commons.collections4.map.ListOrderedMap2Test.testIndexOf":534,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":995,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testReverse":20,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":887,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":623,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":1264,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":958,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":963,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveAll":62,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":1158,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesIteratorRemoveChangesMap":337,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":1122,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":709,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveAll":143,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":912,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetClearChangesMap":1102,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testFullMapCompatibility":177,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":1260,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":655,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":1288,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":820,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":1354,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_getByIndex":76,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":641,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetIteratorRemoveChangesMap":144,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":209,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":810,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":621,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":683,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":619,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":434,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":1046,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastEntrySet":289,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":598,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":1417,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":1041,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetClearChangesMap":50,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":1063,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":322,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":1310,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":1385,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":996,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":1099,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetClearChangesMap":258,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":1387,"org.apache.commons.collections4.map.TransformedMapTest.testMakeMap":311,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":817,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveChangesMap":449,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":627,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastKeySet":541,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesClearChangesMap":371,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":317,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":809,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":705,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":588,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRetainAll":116,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":422,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":471,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":979,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":384,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":383,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":466,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":382,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":711,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":943,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":669,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiSubMapContains":593,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":1389,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":614,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":919,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":1164,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":989,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":828,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionSize":846,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":191,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":1214,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testFullMapCompatibility":632,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":1217,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetHashCode":1413,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":229,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":815,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":691,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":633,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":673,"org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap":584,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListSerialization":965,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":796,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":174,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":928,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":1250,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveAll":467,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEmptyMapCompatibility":176,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":1410,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":949,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveAll":160,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":620,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionClear":822,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":487,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":485,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":974,"org.apache.commons.collections4.map.LazyMapTest.testValuesClearChangesMap":167,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":61,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRetainAll":571,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":883,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":33,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":183,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":207,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":1369,"org.apache.commons.collections4.map.UnmodifiableMapTest.testSerializeDeserializeThenCompare":240,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":694,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":1227,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":1311,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":220,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":407,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":1216,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":186,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":185,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":184,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapGet":95,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetIteratorRemoveChangesMap":580,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":1327,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":1009,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":759,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastKeySet":246,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":806,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":978,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":65,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRetainAll":253,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":226,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":1108,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullValue":45,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove3":568,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionSize":804,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove2":567,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":763,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":528,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":850,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":1218,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetPredicate":16,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":40,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionSize":693,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFirstKey":28,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":200,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":940,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove1":566,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFullMapCompatibility":525,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":1401,"org.apache.commons.collections4.map.ListOrderedMapTest.testFullMapCompatibility":99,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":305,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":741,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyIterator":1378,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":497,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":1191,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":600,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":401,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":1208,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":964,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":1307,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":402,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":677,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":555,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetClearChangesMap":452,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":1236,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":1313,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":853,"org.apache.commons.collections4.map.PredicatedMapTest.testMakeMap":353,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":946,"org.apache.commons.collections4.map.ListOrderedMap2Test.testLastKey":536,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":823,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testComparator":1411,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRetainAll":380,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":1058,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":432,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":757,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":931,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":591,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":689,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":1136,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":794,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":597,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":1073,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":981,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":1230,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":839,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveChangesMap":493,"org.apache.commons.collections4.collection.CompositeCollectionTest.testIterator":1365,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":824,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":684,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":1111,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveChangesMap":442,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":324,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":587,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueSerialization":877,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":1156,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":1060,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":1084,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":1127,"org.apache.commons.collections4.map.DefaultedMapTest.testMapClear":271,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesClearChangesMap":474,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesClearChangesMap":1131,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":1051,"org.apache.commons.collections4.map.FixedSizeMapTest.testSerializeDeserializeThenCompare":435,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":586,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListSerialization":988,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":1029,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":430,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":590,"org.apache.commons.collections4.map.LazySortedMapTest.testSerializeDeserializeThenCompare":475,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListSerialization":936,"org.apache.commons.collections4.map.ListOrderedMapTest.testPreviousKey":83,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":766,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":818,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":43,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":969,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":678,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":1171,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":1351,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullValue":307,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":594,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":873,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":1070,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":700,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":392,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":751,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemove":1376,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":1042,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":1206,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":1308,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":1320,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":25,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":697,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":1391,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":1189,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":1274,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":458,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":529,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":90,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueSerialization":840,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":1180,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveChangesMap":486,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRetainAll":370,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":1181,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":947,"org.apache.commons.collections4.map.FixedSizeMapTest.testEmptyMapCompatibility":427,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemoveAll":1194,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":1370,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapHashCode":551,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":935,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionSize":1247,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":778,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":616,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":761,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetClearChangesMap":1087,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":526,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":997,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":1205,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":67,"org.apache.commons.collections4.map.LazyMapTest.testMapClear":154,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":660,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":389,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":838,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":1104,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":1400,"org.apache.commons.collections4.map.ListOrderedMapTest.testFirstKey":84,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionSize":1314,"org.apache.commons.collections4.map.ListOrderedMap2Test.testNextKey":537,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastValues":87,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullKey":459,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":1273,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":227,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":181,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":558,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":1097,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRetainAll":63,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":522,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":114,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":327,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":753,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":409,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":1344,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_setByIndex":77,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":1059,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":92,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":635,"org.apache.commons.collections4.map.LazyMapTest.testKeySetClearChangesMap":141,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":787,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionSize":658,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":827,"org.apache.commons.collections4.map.PredicatedMapTest.testEmptyMapCompatibility":356,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetIteratorRemoveChangesMap":365,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":1356,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":1409,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedRemove":1363,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":870,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":1258,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetIterator":15,"org.apache.commons.collections4.map.LazySortedMapTest.testLastKey":436,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":32,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":416,"org.apache.commons.collections4.map.LazyMapTest.testValuesIteratorRemoveChangesMap":134,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":726,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":37,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionClear":686,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastKeySet":290,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":0,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":218,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastEntrySet":245,"org.apache.commons.collections4.map.LazySortedMapTest.testMakeMap":457,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":1283,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testSerializeDeserializeThenCompare":179,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":341,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionSize":880,"org.apache.commons.collections4.bag.TransformedBagTest.testBagSize":1256,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":937,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":343,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":342,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEmptyMapCompatibility":41,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":785,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":506,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetByIndex":70,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":306,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":312,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":504,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":675,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetIteratorRemoveChangesMap":261,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":239,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":1098,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullKey":101,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":646,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionClear":795,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":1394,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":366,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":696,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":829,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesIteratorRemoveChangesMap":117,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":201,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetIteratorRemoveChangesMap":469,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":601,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":1224,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":1298,"org.apache.commons.collections4.map.LazyMapTest.testValuesRetainAll":136,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":845,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":891,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":907,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":1176,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":180,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":780,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":971,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":648,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":1302,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":1124,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":1322,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":1277,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":595,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":637,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":779,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":530,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveChangesMap":142,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":1291,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetClearChangesMap":145,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":1202,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionSize":1186,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveChangesMap":259,"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratorTest.testMapIteratorOrder":585,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":987,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveChangesMap":350,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":791,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":610,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":852,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":984,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveAll":58,"org.apache.commons.collections4.map.DefaultedMapTest.testFullMapCompatibility":272,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":1275,"org.apache.commons.collections4.map.MultiValueMapTest.testFullMapCompatibility":519,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveChangesMap":118,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":821,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":770,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":10,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":652,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":881,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":977,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":927,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":238,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testUnmodifiable":477,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":768,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":999,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":1231,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":953,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":75,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetClearChangesMap":107,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullValue":146,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":1380,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesClearChangesMap":412,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionSize":1211,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":242,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":243,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":1175,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":241,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":274,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":878,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":13,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":1045,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveChangesMap":573,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueSerialization":843,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":1336,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":604,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAll":735,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":1346,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetIteratorRemoveChangesMap":576,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":798,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetIteratorRemoveChangesMap":125,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":1008,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":1055,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":1239,"org.apache.commons.collections4.map.ListOrderedMapTest.testSerializeDeserializeThenCompare":126,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":868,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":1366,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveAll":115,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":348,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":1168,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveChangesMap":122,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":1304,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":1347,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":489,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":651,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":1203,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":1187,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":319,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":1092,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":640,"org.apache.commons.collections4.map.TransformedMapTest.testFullMapCompatibility":316,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":1280,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":1388,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":1331,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testFullMapCompatibility":42,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRetainAll":297,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":1129,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":758,"org.apache.commons.collections4.bag.HashBagTest.testCollectionSize":1172,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":510,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":1209,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":867,"org.apache.commons.collections4.map.SingletonMapTest.testSerializeDeserializeThenCompare":424,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":882,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":803,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testPreviousKey":478,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":203,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveChangesMap":135,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains1":51,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains2":52,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains3":53,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray":1371,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemoveAll":1255,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":464,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":569,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":1081,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":1147,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":205,"org.apache.commons.collections4.map.LazySortedMapTest.testFirstKey":437,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":1010,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":1145,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":1169,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":388,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullKey":396,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":265,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":66,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveChangesMap":345,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":603,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":157,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":193,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":1281,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":986,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":599,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":876,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullKey":152,"org.apache.commons.collections4.map.DefaultedMapTest.testSerializeDeserializeThenCompare":285,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":1090,"org.apache.commons.collections4.list.GrowthListTest.testFullListSerialization":932,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":194,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":1184,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":7,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":895,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":983,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":755,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEmptyMapCompatibility":397,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":805,"org.apache.commons.collections4.map.LazySortedMapTest.testEmptyMapCompatibility":460,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":1328,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":1392,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":357,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":917,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":737,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains1":248,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":375,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":1372,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains2":249,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":376,"org.apache.commons.collections4.map.UnmodifiableMapTest.testFullMapCompatibility":234,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains3":250,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":377,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":104,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveChangesMap":386,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRetainAll":465,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":1126,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":702,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":733,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":1076,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":1317,"org.apache.commons.collections4.map.MultiValueMapTest.testRemove_KeyItem":515,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveChangesMap":454,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMakeMap":543,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":1196,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":1295,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":667,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":418,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":676,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":1212,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":217,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullKey":355,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":680,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":216,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":215,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":710,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":914,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":744,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":1284,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetClearChangesMap":561,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":1407,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":544,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":860,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":1015,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":395,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":1002,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":103,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":1014,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":170,"org.apache.commons.collections4.map.ListOrderedMap2Test.testPreviousKey":538,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetClearChangesMap":344,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":429,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":993,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":301,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetClearChangesMap":1118,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":275,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":300,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveAll":119,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":299,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":1138,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":1123,"org.apache.commons.collections4.map.LazyMapTest.testFailFastValues":130,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove3":257,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":175,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove2":256,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":1192,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove1":255,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveChangesMap":391,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":1068,"org.apache.commons.collections4.map.TransformedMapTest.testValuesIteratorRemoveChangesMap":295,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsSelfHashCode":1416,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":222,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":398,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":636,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":783,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_Decorate":288,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":1257,"org.apache.commons.collections4.map.DefaultedMapTest.testMakeMap":267,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":924,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":1179,"org.apache.commons.collections4.map.LazyMapTest.testSerializeDeserializeThenCompare":168,"org.apache.commons.collections4.map.DefaultedMapTest.testEmptyMapCompatibility":270,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":1237,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":505,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":717,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":721,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":326,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":1334,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveChangesMap":147,"org.apache.commons.collections4.map.SingletonMapTest.testLastKey":414,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":1153,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":369,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetByIndex":532,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":165,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetIteratorRemoveChangesMap":406,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionSize":681,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetClearChangesMap":1103,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":1279,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":1332,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":1333,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveAll":393,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":1244,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":657,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":1167,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":1300,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":360,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":1345,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":972,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":1220,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":1286,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":1143,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":630,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":959,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":1261,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":182,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesIteratorRemoveChangesMap":251,"org.apache.commons.collections4.map.LazyMapTest.testEmptyMapCompatibility":153,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":659,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":899,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":1115,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveChangesMap":264,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":951,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":736,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetClearChangesMap":302,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullValue":557,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":1121,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRetainAll":166,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":204,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaIterator":1359,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":1078,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":400,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":833,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":982,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":512,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":1361,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":797,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":1289,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":926,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":1235,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":889,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetClearChangesMap":1117,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionClear":765,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":156,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":159,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":1053,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":948,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":811,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":654,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":930,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFullMapCompatibility":554,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":1089,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetClearChangesMap":644,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":2,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetClearChangesMap":49,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapClear":500,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":1048,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapClear":546,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":713,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesClearChangesMap":1116,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":294,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":293,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":292,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":670,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":788,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":1405,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":1384,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains3":110,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":1248,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFailDoubleRemove":1234,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":762,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking2":1035,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet2":921,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":920,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains2":109,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains1":108,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":609,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":1021,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testLastKey":373,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":957,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastKeySet":86,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":405,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":425,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":470,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nullValues":79,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndexBoundsChecking2":962,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":847,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":1162,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetClearChangesMap":385,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":916,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":1037,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nonNullValues":80,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testNextKey":481,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":1245,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":685,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove1":445,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":819,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove2":446,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":1200,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testFullIterator":24,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove3":447,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":879,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":888,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":973,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":653,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":309,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":221,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesClearChangesMap":48,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSerializeDeserializeThenCompare":69,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":552,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRetainAll":411,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":421,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":1120,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":998,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":26,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":1140,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":1190,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":1357,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":688,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullValue":102,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":724,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":410,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionSize":731,"org.apache.commons.collections4.iterators.IteratorChainTest.testFullIterator":1379,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":1080,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":304,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":1341,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":1381,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetIteratorRemoveChangesMap":451,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionSize":831,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":855,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":1174,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":188,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":1094,"org.apache.commons.collections4.map.LazyMapTest.testMapHashCode":137,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveAll":352,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_decorateTransform":286,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":728,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":347,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":559,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionClear":1177,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":148,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":638,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":89,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":1018,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":956,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":545,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":455,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":387,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":1043,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":1303,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":178,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":1241,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveAll":123,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":716,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":848,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":189,"org.apache.commons.collections4.map.TransformedMapTest.testMapHashCode":298,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":1262,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":482,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":756,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":484,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":483,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFullMapCompatibility":501,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveChangesMap":296,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":752,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetClearChangesMap":262,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRetainAll":283,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":606,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":1074,"org.apache.commons.collections4.iterators.IteratorChainTest.testIterator":1377,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":1316,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":801,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":944,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":1402,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullValue":390,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":1146,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":816,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":1135,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEmptyMapCompatibility":233,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetValueByIndex":71,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToString":1414,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":1242,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveChangesMap":57,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":674,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":1342,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":596,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":1012,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":1085,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionSize":991,"org.apache.commons.collections4.map.ListOrderedMapTest.testNextKey":82,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":706,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":1266,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionClear":698,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":1151,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":639,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":704,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":1114,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":1006,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":1221,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":1005,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove3":140,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorRemoveProtectsInvariants":1193,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":608,"org.apache.commons.collections4.map.MultiValueMapTest.testValues":1360,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveChangesMap":338,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveAll":404,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove1":138,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":1292,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove2":139,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":1265,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":11,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetClearChangesMap":448,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":1093,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":206,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":1032,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":1066,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":494,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":892,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":707,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":738,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":1297,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":1,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionClear":885,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":1004,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":280,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":690,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":898,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":1201,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":1154,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRetainAll":59,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":754,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":851,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetClearChangesMap":1133,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":1023,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":315,"org.apache.commons.collections4.map.MultiValueMapTest.testSize":514,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":1017,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":781,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":1109,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRetainAll":339,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":1386,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullValue":263,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":1173,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveChangesMap":308,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":1072,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRetainAll":120,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":12,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":8,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":650,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionSize":1157,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":1075,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":1263,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":727,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":773,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapGet":550,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveAll":570,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetValueByIndex":533,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":1033,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":1069,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":980,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains1":438,"org.apache.commons.collections4.map.ListOrderedMapTest.testMakeMap":88,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains2":439,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullKey":556,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":18,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":615,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains3":440,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesClearChangesMap":284,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEmptyMapCompatibility":524,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":68,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":433,"org.apache.commons.collections4.map.LazyMapTest.testFailFastEntrySet":128,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":712,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionSize":1272,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMakeMap":31,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":420,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":472,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullValue":453,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":994,"org.apache.commons.collections4.map.ListOrderedMapTest.testLastKey":81,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":6,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":1071,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testWalkForwardAndBack":21,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":1003,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":1337,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":799,"org.apache.commons.collections4.map.MultiValueMapTest.testEmptyMapCompatibility":516,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":1339,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":1141,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":1338,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":923,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":1034,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":793,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":854,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":871,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":671,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":359,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":408,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":1049,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddAllToCollection":1362,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":35,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":701,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":774,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":1027,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":1225,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":100,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":1199,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":1065,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":769,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":1188,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullKey":269,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":1315,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":325,"org.apache.commons.collections4.map.LazySortedMapTest.testMapClear":461,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":622,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":748,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveAll":450,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAdd":22,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":1112,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveChangesMap":252,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":933,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":1306,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastKeySet":332,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":495,"org.apache.commons.collections4.map.ListOrderedMap2Test.testRemoveByIndex":535,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":1213,"org.apache.commons.collections4.map.ListOrderedMapTest.testSetValueByIndex":73,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":1020,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":714,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":224,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveChangesMap":379,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":47,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":942,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":772,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesIteratorRemoveChangesMap":60,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":163,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":802,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListSerialization":905,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":548,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":1276,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":1040,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":1358,"org.apache.commons.collections4.iterators.IteratorChainTest.testFirstIteratorIsEmptyBug":1374,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":866,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":172,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map2":518,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":282,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorRemoveProtectsInvariants":1254,"org.apache.commons.collections4.collection.CompositeCollectionTest.testToCollection":1364,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map1":517,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":1052,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":1285,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":1139,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":844,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":945,"org.apache.commons.collections4.list.PredicatedListTest.testFullListSerialization":900,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":1054,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveAll":149,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":468,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":320,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":3,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":354,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":4,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":5,"org.apache.commons.collections4.list.TransformedListTest.testFullListSerialization":960,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":729,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":746,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":1107,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRetainAll":575,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":901,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":990,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullKey":313,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":782,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":1267,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":549,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullValue":492,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":1155,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":1016,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":1251,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":479,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":643,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":743,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":906,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionSize":908,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":966,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":864,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueCompatibility":875,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":861,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFirstKey":374,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":318,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":361,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":1335,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":628,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":1382,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":618,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":1383,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":476,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":403,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":911,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":260,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":169,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":725,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":1130,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":1119,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":605,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiSubMapContains":611,"org.apache.commons.collections4.map.LazyMapTest.testMakeMap":150,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":187,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":909,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":38,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":1325,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":1352,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":1323,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":1095,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":750,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":198,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":491,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":857,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":661,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":1161,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":790,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testEmptyIterator":23,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":975,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListSerialization":1061,"org.apache.commons.collections4.map.ListOrderedMapTest.testEmptyMapCompatibility":98,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":1238,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":896,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesIteratorRemoveChangesMap":572,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":814,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllCollections427":1007,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":812,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":1159,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":1278,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":739,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":858,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveAll":456,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveChangesMap":577,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":792,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListSerialization":1064,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":509}}]

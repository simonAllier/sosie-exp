[{"failures":[0,1,2,3],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NotNullPredicate.org.apache.commons.collections4.functors.NotNullPredicate.<T>notNullPredicate()","position":"org.apache.commons.collections4.PredicateUtils:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String, java.lang.Class<?>[], java.lang.Object[]))","position":"org.apache.commons.collections4.PredicateUtils:239","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.set.TransformedSortedSet<E>.decorated()","position":"org.apache.commons.collections4.set.TransformedSortedSet:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:146","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.comparators.ComparatorChain:337","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (boolean) || org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())","position":"org.apache.commons.collections4.iterators.FilterIterator:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>","position":"org.apache.commons.collections4.list.CursorableLinkedList:534","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((java.util.Iterator<? extends E>.hasNext()) && ((boolean) == false)) {\n    E E = java.util.Iterator<? extends E>.next();\n    if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n        E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E);\n    } \n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:187","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1164","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:438","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:104","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1113","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<T>.clear()","position":"org.apache.commons.collections4.sequence.ReplacementsFinder:95","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15],"variableMapping":{"nextObjectSet":"previousObjectSet","this":"this"},"name":"replace","transplant":{"sourceCode":"if (!(this.boolean)) {\n    if (!(org.apache.commons.collections4.iterators.FilterListIterator<E>.setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:145","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.CollatingIterator<E>.addIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.CollatingIterator:158","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.queue.CircularFifoQueue.this.remove()","position":"org.apache.commons.collections4.queue.CircularFifoQueue:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-2},{"failures":[16],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft()","position":"org.apache.commons.collections4.list.TreeList:690","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-2},{"failures":[17],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"return this.java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"coll":"coll","this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.SetUniqueList<E>.addAll(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.size(), java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.SetUniqueList:171","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[18,19,20],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasNext()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:97","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Iterator<?> java.util.Iterator<?> = org.apache.commons.collections4.Bag<?>.uniqueSet().iterator()","position":"org.apache.commons.collections4.bag.AbstractMapBag:150","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.EnumerationIterator:93","type":"CtReturnImpl"},"status":-2},{"failures":[21,22],"variableMapping":{"this":"this","key":"key"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().nextKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:76","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AndPredicate.org.apache.commons.collections4.functors.AndPredicate.<T>andPredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:258","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.SynchronizedBag<E>.getBag().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.SynchronizedBag:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.InstantiateTransformer.org.apache.commons.collections4.functors.InstantiateTransformer.<T>instantiateTransformer()","position":"org.apache.commons.collections4.TransformerUtils:349","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends I>.remove()","position":"org.apache.commons.collections4.iterators.TransformIterator:90","type":"CtInvocationImpl"},"status":-2},{"failures":[23,24,25,26],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object instanceof org.apache.commons.collections4.keyvalue.DefaultKeyValue) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:130","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:170","type":"CtReturnImpl"},"status":-1},{"failures":[27],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Map is empty\")","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:313","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>","position":"org.apache.commons.collections4.map.TransformedSortedMap:100","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.makeBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1046","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[28,29,30],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().lastIndexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.AbstractListDecorator:87","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.int = --(this.int)","position":"org.apache.commons.collections4.iterators.ObjectArrayListIterator:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.collections4.map.TransformedSortedMap<K, V> org.apache.commons.collections4.map.TransformedSortedMap<K, V> = new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[31,32,33,34,35],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Map is empty\")","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2075","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:99","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.Flat3Map<?, V>.clear()","position":"org.apache.commons.collections4.map.Flat3Map:1047","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:84","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (int == 0) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n    } else {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n    }\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:138","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsExceptionPredicate.org.apache.commons.collections4.functors.NullIsExceptionPredicate.nullIsExceptionPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:488","type":"CtReturnImpl"},"status":-2},{"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,28,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,29,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,30,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:121","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.NullPointerException()","position":"org.apache.commons.collections4.map.StaticBucketMap:703","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The collection must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:56","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:229","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.iterators.PushbackIterator<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.PushbackIterator:65","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final boolean boolean = org.apache.commons.collections4.bag.AbstractMapBag<E>.remove(java.util.Iterator<?>.next(), 1)","position":"org.apache.commons.collections4.bag.AbstractMapBag:347","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>(null , null , -1)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2403","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.LazyList<E>(java.util.List<E> , org.apache.commons.collections4.Factory<? extends E>)","position":"org.apache.commons.collections4.list.LazyList:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (((java.util.Iterator<?>)(java.lang.Object)).hasNext()) == false","position":"org.apache.commons.collections4.CollectionUtils:1392","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.OrderedMap<K, V>","position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().subList(int, int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:107","type":"CtReturnImpl"},"status":-2},{"failures":[913],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>","position":"org.apache.commons.collections4.PredicateUtils:356","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.LazySortedMap:139","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>)","position":"org.apache.commons.collections4.list.TreeList:897","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.FilterIterator:100","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.map.StaticBucketMap.this.size()","position":"org.apache.commons.collections4.map.StaticBucketMap:561","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-2},{"failures":[914,915,916,917,918,919,17,920],"variableMapping":{"iterator":"iterator","list":"list"},"name":"replace","transplant":{"sourceCode":"this.java.util.ListIterator<E> = this.java.util.List<E>.listIterator(this.java.util.List<E>.size())","position":"org.apache.commons.collections4.iterators.ReverseListIterator:171","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E> = java.util.List<E>.listIterator()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:242","type":"CtAssignmentImpl"},"status":-1},{"failures":[921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977],"binaryOperator":"int > int","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:221","type":"CtInvocationImpl"},"status":-2},{"failures":[706],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-1},{"failures":[913,978],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:422","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.OnePredicate<T>(org.apache.commons.collections4.functors.FunctorUtils.org.apache.commons.collections4.functors.FunctorUtils.copy(org.apache.commons.collections4.Predicate<? super T>[]))","position":"org.apache.commons.collections4.functors.OnePredicate:60","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int < int) {\n    int--;\n} ","position":"org.apache.commons.collections4.map.ListOrderedMap:457","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":-2},{"failures":[755],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.Flat3Map:279","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:73","type":"CtThrowImpl"},"status":-1},{"failures":[979,980],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:86","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:152","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.bag.TreeBag<E>.(comparator()) == null) && (!(E instanceof java.lang.Comparable))) {\n    throw new java.lang.IllegalArgumentException((((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\"));\n} ","position":"org.apache.commons.collections4.bag.TreeBag:86","type":"CtIfImpl"},"status":-2},{"failures":[31,32,33,981,34],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"while (((java.util.Iterator<? extends E>.hasNext()) == false) && (!(boolean))) {\n    final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if (java.util.Iterator<? extends E> != null) {\n        java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n    } else {\n        boolean = true;\n    }\n}","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:94","type":"CtWhileImpl"},"status":-1},{"failures":[921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977],"variableMapping":{"index":"bound","listSize":"bound"},"name":"add","transplant":{"sourceCode":"if (int >= int) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Index \" + int) + \" must be less than size \") + int));\n} ","position":"org.apache.commons.collections4.ListUtils:686","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtIfImpl"},"status":-1},{"failures":[676,677,744,982,767,983,822,984],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<V>.remove()","position":"org.apache.commons.collections4.map.MultiValueMap:521","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:77","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean) {\n    java.lang.StringBuilder.append(\", \");\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1392","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if ((E) == null) {\n    } else {\n        if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n        } else {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n        }\n        E = null;\n    }\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:140","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().last()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((int) == 0) {\n    return org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.<K,V>emptyOrderedMapIterator();\n} ","position":"org.apache.commons.collections4.map.AbstractLinkedMap:340","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterIterator:182","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (int == (-1)) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.CollatingIterator:252","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator<E>(this , int)","position":"org.apache.commons.collections4.list.AbstractLinkedList:127","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final O O : java.lang.Iterable<? extends O>) {\n    final java.lang.Integer java.lang.Integer = java.util.Map<O, java.lang.Integer>.get(O);\n    if (java.lang.Integer == null) {\n        java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.java.lang.Integer.valueOf(1));\n    } else {\n        java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.java.lang.Integer.valueOf(((java.lang.Integer.intValue()) + 1)));\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:440","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated()","position":"org.apache.commons.collections4.map.MultiKeyMap:334","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated()","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!org.apache.commons.collections4.trie.KeyAnalyzer.(org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int))) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)) {\n        final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>(K , V , int);\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, int);\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n        return null;\n    } else if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(int)) {\n        if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n        } else {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n        }\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n    } else if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(int)) {\n        if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n        } \n    } \n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:158","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"value=\").append(org.apache.commons.collections4.trie.AbstractBitwiseTrie.BasicEntry<K, V>.getValue()).append(\", \")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1343","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtIfImpl"},"status":-2},{"failures":[748],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.FixedSizeList:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:143","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Long>>.hasNext()) {\n    final java.util.Map.Entry<java.lang.Object, java.lang.Long> java.util.Map.Entry<java.lang.Object, java.lang.Long> = java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Long>>.next();\n    if (org.apache.commons.collections4.map.PassiveExpiringMap<K, V>.isExpired(long, java.util.Map.Entry<java.lang.Object, java.lang.Long>.getValue())) {\n        org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.remove(java.util.Map.Entry<java.lang.Object, java.lang.Long>.getKey());\n        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Long>>.remove();\n    } \n}","position":"org.apache.commons.collections4.map.PassiveExpiringMap:472","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.functors.FactoryTransformer.org.apache.commons.collections4.functors.FactoryTransformer.factoryTransformer(org.apache.commons.collections4.Factory<? extends V>))","position":"org.apache.commons.collections4.map.DefaultedMap:108","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Comparator must not be null.\")","position":"org.apache.commons.collections4.functors.ComparatorPredicate:124","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if ((E) == null) {\n    } else {\n        if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n        } else {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n        }\n        E = null;\n    }\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:140","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[985],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.bag.TreeBag<E>.(comparator()) == null) && (!(E instanceof java.lang.Comparable))) {\n    throw new java.lang.IllegalArgumentException((((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\"));\n} ","position":"org.apache.commons.collections4.bag.TreeBag:86","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Closure<? super T> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} ","position":"org.apache.commons.collections4.functors.ClosureTransformer:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.LinkedMap.LinkedMapList<K>(this)","position":"org.apache.commons.collections4.map.LinkedMap:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().subList(int, int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator","list":"list"},"name":"add","transplant":{"sourceCode":"this.java.util.ListIterator<E> = this.java.util.List<E>.listIterator()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:242","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E> = java.util.List<E>.listIterator(java.util.List<E>.size())","position":"org.apache.commons.collections4.iterators.ReverseListIterator:171","type":"CtAssignmentImpl"},"status":0},{"failures":[704,705],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (int >= int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies(((int - int) + 1), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:183","type":"CtIfImpl"},"status":-1},{"failures":[986,987],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.apache.commons.collections4.iterators.PermutationIterator<E>.(hasNext())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.PermutationIterator:108","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1164","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure collection must not be null\")","position":"org.apache.commons.collections4.functors.ChainedClosure:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.Flat3Map:1145","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:184","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:108","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Collection<? extends E>.isEmpty()) {\n    return false;\n} ","position":"org.apache.commons.collections4.list.TreeList:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:85","type":"CtReturnImpl"},"status":-2},{"failures":[4,6,7,8,12,13,14,15],"variableMapping":{"lastItemIndex":"nextIndex"},"name":"replace","transplant":{"sourceCode":"this.int = -1","position":"org.apache.commons.collections4.iterators.ArrayListIterator:201","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{"isLocked":"hasNext"},"name":"add","transplant":{"sourceCode":"this.boolean = true","position":"org.apache.commons.collections4.comparators.ComparatorChain:269","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"o1":"object","c":"index","o2":"object"},"name":"add","transplant":{"sourceCode":"return int < 0 ? E : E","position":"org.apache.commons.collections4.ComparatorUtils:220","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.FixedSizeList:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = -1","position":"org.apache.commons.collections4.iterators.CollatingIterator:353","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasNext()) {\n    final E E = java.util.ListIterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:231","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal E[] E[] = ((E[])(java.util.List<E>.toArray()))","position":"org.apache.commons.collections4.list.TransformedList:84","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure must not be null\")","position":"org.apache.commons.collections4.functors.ClosureTransformer:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.TransformerClosure<E>(org.apache.commons.collections4.Transformer<? super E, ?>)","position":"org.apache.commons.collections4.functors.TransformerClosure:52","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super E, ?> == null) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.TransformerClosure:49","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.EntrySet()","position":"org.apache.commons.collections4.map.StaticBucketMap:369","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().uniqueSet()","position":"org.apache.commons.collections4.bag.PredicatedBag:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:257","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.FilterListIterator:131","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.map.AbstractMapDecorator:128","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.EmptyMapIterator.org.apache.commons.collections4.iterators.EmptyMapIterator.<K,V>emptyMapIterator()","position":"org.apache.commons.collections4.map.Flat3Map:614","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedMap<K, V>)(java.util.Map<K, V>))","position":"org.apache.commons.collections4.map.PredicatedSortedMap:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<? super I, ? extends O>.get(I)","position":"org.apache.commons.collections4.functors.MapTransformer:74","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":395,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":123,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":474,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":776,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":253,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":509,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":154,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":388,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":526,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":587,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":671,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionClear":229,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":885,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":662,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesClearChangesMap":531,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":263,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":865,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":902,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFullIterator":35,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":323,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":706,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":888,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":285,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":453,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":249,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":677,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsContract":267,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":234,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetClearChangesMap":514,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":927,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":673,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":270,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":840,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":984,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":4,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":366,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":808,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":983,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListSerialization":801,"org.apache.commons.collections4.ListUtilsTest.testLazyList":911,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":307,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":503,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":928,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":418,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":201,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionSize":377,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueCompatibility":851,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":409,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":481,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectHashCodeEqualsContract":47,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":539,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":598,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorRemoveProtectsInvariants":189,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":948,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":521,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":265,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":614,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":334,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":972,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":478,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":344,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":6,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":310,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":846,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":92,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueCompatibility":894,"org.apache.commons.collections4.bag.HashBagTest.testCollectionClear":208,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":330,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionSize":242,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":675,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":945,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":163,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":594,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":727,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":837,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListSerialization":688,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":246,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":210,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":222,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":613,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":639,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":871,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":631,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":84,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":143,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":401,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":491,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":198,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":819,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":279,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":540,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":680,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":936,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":973,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":563,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":442,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":131,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":80,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":660,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":829,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":962,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":231,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":215,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":48,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":762,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetClearChangesMap":468,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":917,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":121,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":368,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":918,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":976,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":314,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":424,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":105,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking2":775,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":290,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":104,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":641,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":709,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":730,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":171,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":553,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":777,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":187,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":228,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":204,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":183,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":497,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":538,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":650,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":75,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":261,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionSize":754,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":649,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":271,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":83,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":508,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":407,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":403,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":741,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToString":693,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":138,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":324,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":96,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":867,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":974,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":742,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":958,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":549,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":364,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":50,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesClearChangesMap":512,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListCompatibility":750,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":585,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":542,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking2":679,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":155,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":174,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":435,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":427,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":439,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":300,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionClear":402,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":895,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":412,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":404,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":530,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":555,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":890,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":816,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":814,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionSize":879,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":464,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":604,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":195,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":686,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":312,"org.apache.commons.collections4.bag.TreeBagTest.testCollections265":985,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":63,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":177,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":687,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":764,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":887,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemovePrevious":773,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":120,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":151,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":147,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":505,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":473,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":537,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":461,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":150,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":361,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":790,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":359,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":602,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":853,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":715,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":101,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":211,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFailDoubleRemove":110,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":295,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":311,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":384,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":60,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":699,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testEmptyListIteratorIsIndeedEmpty":18,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":748,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueSerialization":855,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":136,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":431,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectHashCodeEqualsContract":236,"org.apache.commons.collections4.list.GrowthListTest.testCollectionSize":728,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":674,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemovePrevious":828,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":186,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRetainAll":541,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":960,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testNextKey":21,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListCompatibility":803,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":90,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":315,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":548,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":909,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":924,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":925,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":74,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEmptyIterator":940,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":355,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":633,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":281,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":17,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectHashCodeEqualsContract":127,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":135,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":16,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":437,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorByIndex":714,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":23,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":545,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":272,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":58,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionSize":43,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":722,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":881,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":696,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":912,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":328,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":68,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":438,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":405,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":122,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":793,"org.apache.commons.collections4.list.TransformedListTest.testCollectionSize":838,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":100,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":788,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":785,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":768,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":668,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":878,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":78,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":875,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":70,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":820,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagSize":161,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionSize":386,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":9,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":886,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":610,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":87,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFailDoubleRemove":164,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":451,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":611,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":811,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testReverse":19,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":868,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":116,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":824,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":831,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":56,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":458,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":301,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetClearChangesMap":532,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":787,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":112,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRetainAll":535,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":79,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":394,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":318,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRemoveAll":536,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":562,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":287,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":495,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":413,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":493,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":601,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":695,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":296,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":447,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":690,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":749,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":577,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":220,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":13,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":529,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":812,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEmptyIterator":967,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":294,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":440,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":286,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":573,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":297,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":498,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":636,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":849,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":303,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":732,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":408,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":518,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":209,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":794,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":805,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":326,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionSize":899,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":142,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":145,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":980,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":454,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":292,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":423,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":554,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":8,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":378,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListSerialization":834,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":340,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":957,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":642,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":713,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":102,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRetainAll":567,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":592,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":982,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":739,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":494,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionClear":320,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":33,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":844,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":864,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":921,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":182,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":221,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":426,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":626,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":144,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":658,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":971,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":241,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":350,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":848,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRetainAll":588,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":476,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionSize":348,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":245,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":496,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":589,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":146,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":903,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionSize":425,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":955,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":975,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":729,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":360,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":547,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":158,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":449,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":923,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":622,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":175,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":98,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":832,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":623,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":382,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":956,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":915,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":191,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":223,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":906,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":735,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":321,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicate":978,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":743,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":239,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":599,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":718,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":421,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":62,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":338,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":446,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":760,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":184,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":796,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":892,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":322,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":414,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":479,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":578,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":54,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueSerialization":858,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":510,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":746,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":463,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesClearChangesMap":467,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":700,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListSerialization":804,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingForward":914,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":678,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":596,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListSerialization":724,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsContract":76,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":248,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":317,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":839,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":216,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":383,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":757,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":854,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":432,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":488,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":951,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":970,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":370,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":618,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":99,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":173,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":230,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":691,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":429,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":156,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":126,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":590,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":933,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueSerialization":893,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":133,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":134,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRetainAll":445,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":737,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemoveAll":160,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":944,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":29,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":981,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionSize":202,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":273,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":490,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":243,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetClearChangesMap":513,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":586,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":172,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":813,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":399,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":617,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":472,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":891,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionSize":224,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":125,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":10,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":527,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":584,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":581,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemovePrevious":720,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":372,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":470,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":628,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":745,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":556,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":282,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionSize":397,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":325,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":744,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":941,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":109,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":850,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":630,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":257,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionClear":416,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":417,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":44,"org.apache.commons.collections4.bag.TransformedBagTest.testBagSize":107,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionSize":861,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":726,"org.apache.commons.collections4.list.GrowthListTest.testFullListCompatibility":723,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":280,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":569,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":571,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":380,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":550,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":528,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":544,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionClear":339,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":385,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":428,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":612,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":327,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":450,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":89,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":152,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":872,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":898,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":782,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":950,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":129,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":597,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":275,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":841,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":93,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":387,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":232,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":460,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":38,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":558,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":274,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":591,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":81,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":169,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionSize":139,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":30,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2":0,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":336,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetRetainAll":646,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":905,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":800,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":36,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":959,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":319,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":252,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":391,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":847,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":862,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":986,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":712,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":543,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":250,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":648,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":964,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":185,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":817,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":582,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionSize":178,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":128,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":859,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":694,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":987,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueSerialization":896,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemoveNext":725,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":963,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAll":353,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":342,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":657,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":194,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":740,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":884,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":603,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":213,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueCompatibility":873,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":95,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":170,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":390,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFail":25,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":140,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":575,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":522,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":561,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":41,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":465,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsContract":181,"org.apache.commons.collections4.bag.HashBagTest.testCollectionSize":217,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":240,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":176,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":883,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":863,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":347,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemoveAll":106,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemoveAll":515,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":507,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":73,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":659,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":7,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":71,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":214,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueCompatibility":889,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":452,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":42,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":802,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":448,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":857,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":520,"org.apache.commons.collections4.list.GrowthListTest.testFullListSerialization":719,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":137,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":765,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":798,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":237,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":349,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":949,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":606,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":792,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":356,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":954,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":462,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":264,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":434,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":227,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":502,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":162,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":86,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemoveNext":835,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":406,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":179,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":381,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":632,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":410,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":302,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":789,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":363,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":45,"org.apache.commons.collections4.list.PredicatedListTest.testFullListCompatibility":778,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":822,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":876,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":664,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":619,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":651,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":663,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":638,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":595,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":809,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetClearChangesMap":486,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":64,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":459,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":159,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":643,"org.apache.commons.collections4.list.TransformedListTest.testFullListCompatibility":833,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":11,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":755,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveAll":566,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":620,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":278,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":557,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":947,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":108,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":708,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":132,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsContract":59,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":192,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":551,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":309,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":313,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":580,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":51,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":615,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemoveAll":534,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionSize":411,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":40,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetClearChangesMap":533,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":199,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":396,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":212,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":91,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":608,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":148,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":842,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":77,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectHashCodeEqualsContract":333,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":69,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":443,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":113,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":826,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":398,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":483,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":771,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":815,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":354,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":457,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetRemoveAll":444,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":504,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":621,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":331,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":934,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":797,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":32,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectHashCodeEqualsContract":284,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":85,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":341,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":711,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":190,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":926,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":870,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectHashCodeEqualsContract":352,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetClearChangesMap":485,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionClear":247,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":702,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsContract":205,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":738,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemoveNext":780,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":288,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":393,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":716,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":519,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":939,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetClearChangesMap":565,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":736,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":953,"org.apache.commons.collections4.set.TransformedSetTest.testObjectHashCodeEqualsContract":255,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":697,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":305,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsContract":374,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesClearChangesMap":484,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":375,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemovePrevious":818,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":283,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":767,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":966,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":203,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFailDoubleRemove":188,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsContract":316,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":244,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking2":684,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet2":705,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":704,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":670,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":823,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":593,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":625,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndexBoundsChecking2":830,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":207,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":900,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":791,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":28,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":200,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":415,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":332,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":930,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":167,"org.apache.commons.collections4.list.UnmodifiableListTest.testListListIteratorByIndex":799,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":860,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":869,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":843,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":31,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":392,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":570,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":26,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":969,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":471,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":932,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":635,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":456,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":487,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":647,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":66,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":157,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":420,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":256,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionSize":262,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":629,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":506,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":568,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionSize":329,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":219,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":908,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":524,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":259,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionClear":130,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":931,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":559,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":667,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":821,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemoveNext":825,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":616,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":968,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":922,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":24,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":692,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":94,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":644,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":685,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":196,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":308,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":901,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":114,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":238,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":916,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":938,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":371,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":500,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":517,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":226,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":5,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":345,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":733,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":72,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":293,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":61,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":197,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemoveNext":770,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":379,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":499,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":511,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":661,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":979,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionSize":807,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":298,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":118,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionClear":430,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":49,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":436,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":560,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetRemoveAll":645,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":482,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":655,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":149,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":654,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":946,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":34,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorRemoveProtectsInvariants":165,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":82,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":117,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":523,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testNextKey":22,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":681,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":753,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":546,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":761,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":299,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":357,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":88,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":419,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionClear":866,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":653,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":422,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemoveNext":717,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":769,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":168,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":52,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemovePrevious":763,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":373,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":904,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetClearChangesMap":469,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":672,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":572,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":666,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":276,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":477,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":218,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":759,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":389,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionSize":55,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":115,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":501,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":258,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":268,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":682,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":756,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":795,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex3":3,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":27,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":489,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex2":2,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate2Ex1":1,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":600,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionSize":124,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":304,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":965,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":12,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":634,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":810,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":758,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testWalkForwardAndBack":20,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":652,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":343,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":67,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRemoveAll":583,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":707,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":683,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":337,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":907,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":852,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":376,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":607,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":627,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":698,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":942,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":269,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":433,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":153,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":676,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":166,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":752,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":141,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":251,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":225,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":579,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":367,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":480,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":97,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":721,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":180,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":669,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":306,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":961,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":731,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":254,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":346,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRetainAll":516,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListSerialization":779,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":37,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":689,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":882,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":640,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":929,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorRemoveProtectsInvariants":111,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":46,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":701,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":65,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":734,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":897,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":703,"org.apache.commons.collections4.list.PredicatedListTest.testFullListSerialization":772,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":576,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":605,"org.apache.commons.collections4.list.TransformedListTest.testFullListSerialization":827,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":260,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":365,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":475,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":774,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":806,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":277,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":119,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":937,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemovePrevious":710,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":53,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":103,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":665,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":362,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":564,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":781,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionSize":783,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":836,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":935,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":15,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":880,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":919,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueCompatibility":856,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":14,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":877,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":943,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":977,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":574,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":609,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":441,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":492,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":624,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicate":913,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":786,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":266,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":637,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":466,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":455,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":784,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":952,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":235,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingNotOverBoundary":920,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":233,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":525,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":369,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":910,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":206,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":400,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":335,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListSerialization":747,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":845,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":193,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":766,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":291,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllCollections427":656,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":289,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":39,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":57,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":358,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":874,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":351,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListSerialization":751,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":552}}]

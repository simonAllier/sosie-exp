[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Comparator must not be null.\")","position":"org.apache.commons.collections4.functors.ComparatorPredicate:124","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:120","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * This is a key set view of the {@link Trie} as returned by {@link Map#keySet()}.\n */\nprivate class KeySet extends java.util.AbstractSet<K> {\n    @java.lang.Override\n    public java.util.Iterator<K> iterator() {\n        return new KeyIterator();\n    }\n\n    @java.lang.Override\n    public int size() {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.size();\n    }\n\n    @java.lang.Override\n    public boolean contains(final java.lang.Object o) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.containsKey(java.lang.Object);\n    }\n\n    @java.lang.Override\n    public boolean remove(final java.lang.Object o) {\n        final int int = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.KeySet.size();\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.remove(java.lang.Object);\n        return int != org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.KeySet.(size());\n    }\n\n    @java.lang.Override\n    public void clear() {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear();\n    }\n\n    /** \n     * An {@link Iterator} that returns Key Objects.\n     */\nprivate class KeyIterator extends org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.TrieIterator<K> {\n        public K next() {\n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.TrieIterator<K>.nextEntry().getKey();\n        }\n    }\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1450","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.hashCode()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:81","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.hashIndex(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int, int)","position":"org.apache.commons.collections4.map.AbstractHashedMap:644","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"remove() method is not supported for an ObjectArrayIterator\")","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:134","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\"))","position":"org.apache.commons.collections4.bag.TreeBag:87","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<E, ? super V>.put(E, V)","position":"org.apache.commons.collections4.set.MapBackedSet:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.IdentityPredicate.org.apache.commons.collections4.functors.IdentityPredicate.<T>identityPredicate(T)","position":"org.apache.commons.collections4.PredicateUtils:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-6561115435802554013L","position":"org.apache.commons.collections4.bag.HashBag:42","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:73","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((int + \" + \") + int) + \" > \") + org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(lengthInBits(K))))","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:855","type":"CtThrowImpl"},"status":0},{"failures":[0,1,2],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } else {\n        final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>(K , V);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.grow();\n        break;\n    }\n} else {\n    if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    } else {\n        final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>(K , V);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.insertValue(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setRight(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.setParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackInsert(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n        org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.grow();\n        break;\n    }\n}","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:505","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasNext()) == false) {\n    return 0;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:112","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().headMap(K)","position":"org.apache.commons.collections4.map.TransformedSortedMap:150","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitDeleteCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.DeleteCommand:53","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.map.FixedSizeMap:110","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Array.((E)(java.lang.reflect.Array.get(this.java.lang.Object, this.int)))","position":"org.apache.commons.collections4.iterators.ArrayListIterator:120","type":"CtReturnImpl"},"status":-2},{"failures":[3,4,5],"variableMapping":{"o1":"object","c":"index","o2":"object"},"name":"replace","transplant":{"sourceCode":"return int < 0 ? E : E","position":"org.apache.commons.collections4.ComparatorUtils:220","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.FixedSizeList:148","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.MultiKeyMap:144","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().comparator()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:100","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Map.Entry<K, V>.getValue()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, K, K))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n        org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().updateEntry(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, V);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}","position":"org.apache.commons.collections4.map.MultiKeyMap:179","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : org.apache.commons.collections4.map.CompositeMap<K, V>.entrySet()) {\n    int += java.util.Map.Entry<K, V>.hashCode();\n}","position":"org.apache.commons.collections4.map.CompositeMap:480","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final O O = org.apache.commons.collections4.Transformer<? super I, ? extends O>.transform(I)","position":"org.apache.commons.collections4.CollectionUtils:1068","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:239","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.SingletonMap.SingletonValues<V>(this)","position":"org.apache.commons.collections4.map.SingletonMap:330","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().values()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<K>.add(int, K)","position":"org.apache.commons.collections4.map.ListOrderedMap:464","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:204","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (this.int) > (this.int)","position":"org.apache.commons.collections4.iterators.ArrayListIterator:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14],"variableMapping":{"iterator":"currentIterator"},"name":"replace","transplant":{"sourceCode":"if (java.util.Iterator<?> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} ","position":"org.apache.commons.collections4.IteratorUtils:956","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) != null) {\n    org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:181","type":"CtIfImpl"},"status":-1},{"failures":[15,16,17,18,19,20,21],"binaryOperator":"java.util.Collection<? extends E> == null","name":"negateConditional","position":"org.apache.commons.collections4.iterators.LoopingIterator:55","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.int) == int) && org.apache.commons.collections4.map.MultiKeyMap<K, V>.(isEqualKey(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue();\n        org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>;\n}","position":"org.apache.commons.collections4.map.MultiKeyMap:480","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-2},{"failures":[22,23],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.keyvalue.DefaultMapEntry<K, V>(this)","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Iterator must not be null\")","position":"org.apache.commons.collections4.iterators.PushbackIterator:58","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.LazySortedMap:153","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeEntrySet.iterator().hasNext())","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2009","type":"CtReturnImpl"},"status":-2},{"failures":[24,25,26,27,28,29],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int))","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:84","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.keyvalue.AbstractKeyValue<K, V>.getValue()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:75","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.PredicatedBag<E>(org.apache.commons.collections4.Bag<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.bag.PredicatedBag:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.Flat3Map<K, V>.convertToMap()","position":"org.apache.commons.collections4.map.Flat3Map:345","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:146","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceMapIterator<K, V>(this)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:307","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>(org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.entrySet())","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:104","type":"CtReturnImpl"},"status":-2},{"failures":[30],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>","position":"org.apache.commons.collections4.PredicateUtils:406","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"-3094696765038308799L","position":"org.apache.commons.collections4.functors.AbstractQuantifierPredicate:32","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:204","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.Flat3Map<K, ?>.remove(java.lang.Object)","position":"org.apache.commons.collections4.map.Flat3Map:984","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:192","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","object":"object"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.SynchronizedCollection:164","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[]);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:163","type":"CtSynchronizedImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1209","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[31],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(\"Start index must not be less than zero\")","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:85","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:133","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[32,33,34,35,36,37,38,39,40],"variableMapping":{"this":"this","index":"index"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().remove(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"sub":"map"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.CompositeMap<K, V>.entrySet().equals(java.util.Map<?, ?>.entrySet())","position":"org.apache.commons.collections4.map.CompositeMap:468","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2002","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E);\n} catch (final java.lang.RuntimeException java.lang.RuntimeException) {\n    throw java.lang.RuntimeException;\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable);\n}","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:59","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.OnePredicate.org.apache.commons.collections4.functors.OnePredicate.onePredicate(java.util.Collection<org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:388","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"curObject":"root","leastObject":"root"},"name":"replace","transplant":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.CollatingIterator:369","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:108","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.TransformedSortedMap:155","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.comparators.FixedOrderComparator<T>.checkLocked()","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:183","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.io.ObjectInputStream.readInt()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1261","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < int) {\n    E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int);\n    if (E == null) {\n        E = org.apache.commons.collections4.Factory<? extends E>.create();\n        org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E);\n        return E;\n    } \n    return E;\n} ","position":"org.apache.commons.collections4.list.LazyList:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.isKeyType(org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength)","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:168","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int >= (int)) {\n    int = 0;\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:327","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.LRUMap<K, V>.doReadObject(java.io.ObjectInputStream)","position":"org.apache.commons.collections4.map.LRUMap:424","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().getCount(java.lang.Object)","position":"org.apache.commons.collections4.bag.PredicatedBag:106","type":"CtReturnImpl"},"status":-2},{"failures":[268,269],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:103","type":"CtAssignmentImpl"},"status":-2},{"failures":[270],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null)","position":"org.apache.commons.collections4.list.LazyList:127","type":"CtInvocationImpl"},"status":-1},{"failures":[7,8,9,10,11,12,13,14],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.util.Iterator<? extends I> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} ","position":"org.apache.commons.collections4.IteratorUtils:672","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) != null) {\n    org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:181","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"RootEntry(\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1337","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"lastUsedIterator":"lastUsedIterator","currentIterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:91","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.HashSet<E>.remove(E)","position":"org.apache.commons.collections4.ListUtils:104","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-2},{"failures":[271,272,273,274,275,276,277,278],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:147","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * Base iterator class.\n */\nstatic class ReferenceBaseIterator<K, V> {\n    /** \n     * The parent map\n     */\nfinal org.apache.commons.collections4.map.AbstractReferenceMap<K, V> parent;\n\n    int index;\n\n    org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> entry;\n\n    org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> previous;\n\n    K currentKey;\n\n    K nextKey;\n\n    V currentValue;\n\n    V nextValue;\n\n    int expectedModCount;\n\n    public ReferenceBaseIterator(final org.apache.commons.collections4.map.AbstractReferenceMap<K, V> parent) {\n        java.lang.Object.super();\n        this.org.apache.commons.collections4.map.AbstractReferenceMap<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap<K, V>;\n        int = (org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.size()) != 0 ? org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int : 0;\n        int = org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.int;\n    }\n\n    public boolean hasNext() {\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.checkMod();\n        while (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.nextNull()) {\n            org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>;\n            int int = int;\n            while ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> == null) && (int > 0)) {\n                int--;\n                org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int]));\n            }\n            org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>;\n            int = int;\n            if (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> == null) {\n                K = null;\n                V = null;\n                return false;\n            } \n            K = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>.getKey();\n            V = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>.getValue();\n            if (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.nextNull()) {\n                org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>.next();\n            } \n        }\n        return true;\n    }\n\n    private void checkMod() {\n        if ((org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.int) != (int)) {\n            throw new java.util.ConcurrentModificationException();\n        } \n    }\n\n    private boolean nextNull() {\n        return ((K) == null) || ((V) == null);\n    }\n\n    protected org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> nextEntry() {\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.checkMod();\n        if (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.(nextNull()) && (!org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.(hasNext()))) {\n            throw new java.util.NoSuchElementException();\n        } \n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>;\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>.next();\n        K = K;\n        V = V;\n        K = null;\n        V = null;\n        return org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>;\n    }\n\n    protected org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> currentEntry() {\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.checkMod();\n        return org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>;\n    }\n\n    public void remove() {\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.checkMod();\n        if ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>) == null) {\n            throw new java.lang.IllegalStateException();\n        } \n        org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.remove(K);\n        org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V> = null;\n        K = null;\n        V = null;\n        int = org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.int;\n    }\n}","position":"org.apache.commons.collections4.map.AbstractReferenceMap:756","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.list.GrowthList:155","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The transformer to call must not be null\")","position":"org.apache.commons.collections4.functors.TransformerPredicate:49","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>(8)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:80","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int","position":"org.apache.commons.collections4.set.CompositeSet:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.GrowthList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.GrowthList:70","type":"CtReturnImpl"},"status":-2},{"failures":[22,23],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:109","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{"startIndex":"count","index":"count"},"name":"add","transplant":{"sourceCode":"return int > int","position":"org.apache.commons.collections4.iterators.ArrayListIterator:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inFromRange(K, false))) && ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inToRange(K, true)))","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1796","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1272","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super E, ?> == null) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.TransformerClosure:49","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap:89","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:141","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractLinkedMap.ValuesIterator<V>(this)","position":"org.apache.commons.collections4.map.AbstractLinkedMap:470","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:116","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated())","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.ForClosure:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[15,16,17,18,19,20,21],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = new org.apache.commons.collections4.iterators.ListIteratorWrapper<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.IteratorIterable:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Collection<? extends E>.iterator()","position":"org.apache.commons.collections4.iterators.LoopingIterator:113","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount()","position":"org.apache.commons.collections4.list.AbstractLinkedList:980","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().retainAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:181","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null)","position":"org.apache.commons.collections4.list.TreeList:347","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionPredicate.org.apache.commons.collections4.functors.ExceptionPredicate.<T>exceptionPredicate()","position":"org.apache.commons.collections4.PredicateUtils:91","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bag.CollectionSortedBag:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().keySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"must call next() or previous() before a call to set()\")","position":"org.apache.commons.collections4.iterators.ArrayListIterator:189","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\"))","position":"org.apache.commons.collections4.bag.TreeBag:87","type":"CtThrowImpl"},"status":-2},{"failures":[6,7,8,279,10,280,281,12,282,283,14,284,285],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The predicate to call must not be null\")","position":"org.apache.commons.collections4.functors.TransformedPredicate:57","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"No more elements in the iteration\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:222","type":"CtThrowImpl"},"status":-1},{"failures":[286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Parameter types must match the arguments\")","position":"org.apache.commons.collections4.functors.InstantiateTransformer:70","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Collection<E> = java.util.Collection<E>","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:90","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.list.AbstractLinkedList:831","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:60","type":"CtReturnImpl"},"status":-2},{"failures":[342,343,344,345,346,347,348,349,350],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof java.util.Map<?, ?>) {\n    return ((java.util.Map<?, ?>)(java.lang.Object)).isEmpty();\n} else if (java.lang.Object instanceof java.lang.Object[]) {\n    return (((java.lang.Object[])(java.lang.Object)).int) == 0;\n} else if (java.lang.Object instanceof java.util.Iterator<?>) {\n    return (((java.util.Iterator<?>)(java.lang.Object)).hasNext()) == false;\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    return (((java.util.Enumeration<?>)(java.lang.Object)).hasMoreElements()) == false;\n} else {\n    try {\n        return java.lang.reflect.Array.(java.lang.reflect.Array.getLength(java.lang.Object)) == 0;\n    } catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:1387","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"modified":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.list.AbstractLinkedList:264","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:252","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.Values()","position":"org.apache.commons.collections4.map.StaticBucketMap:360","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().values()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.apache.commons.collections4.bag.HashBag<E> org.apache.commons.collections4.bag.HashBag<E> = new org.apache.commons.collections4.bag.HashBag<E>(java.util.List<? extends E>)","position":"org.apache.commons.collections4.ListUtils:128","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1960","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.FixedSizeList:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:103","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (int int = 0 ; int < 1000 ; int++) {\n    if (java.util.Collection<? extends E> instanceof org.apache.commons.collections4.BoundedCollection) {\n        break;\n    } \n    if (java.util.Collection<? extends E> instanceof org.apache.commons.collections4.collection.AbstractCollectionDecorator) {\n        java.util.Collection<? extends E> = ((org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>)(java.util.Collection<? extends E>)).decorated();\n    } else if (java.util.Collection<? extends E> instanceof org.apache.commons.collections4.collection.SynchronizedCollection) {\n        java.util.Collection<? extends E> = ((org.apache.commons.collections4.collection.SynchronizedCollection<E>)(java.util.Collection<? extends E>)).decorated();\n    } \n}","position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:86","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":42,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":43,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":58,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":57,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":278,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":99,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":69,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":89,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":170,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":161,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":236,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":186,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":188,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testSerializeDeserializeThenCompare":316,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":37,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":68,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":284,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":93,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":145,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContains":132,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":198,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":250,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking":3,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFullIterator":29,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_next":279,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":133,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":180,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":192,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains1":223,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":233,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains2":224,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":251,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":269,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":24,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":117,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":174,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":238,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":324,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":40,"org.apache.commons.collections4.list.GrowthListTest.testFullListCompatibility":338,"org.apache.commons.collections4.bag.TransformedBagTest.testBagAdd":131,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":312,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":152,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":210,"org.apache.commons.collections4.ListUtilsTest.testLazyList":270,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListSerialization":319,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":195,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSimpleSerialization":287,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":123,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":347,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":32,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":239,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":176,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":194,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":108,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":136,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":258,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":143,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":127,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":116,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":71,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains2":215,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains1":214,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testSimpleSerialization":309,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSimpleSerialization":293,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":65,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":260,"org.apache.commons.collections4.list.GrowthListTest.testSerializeDeserializeThenCompare":340,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":230,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":80,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":84,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":162,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSimpleSerialization":291,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":77,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":39,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContains":178,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":179,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":12,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":199,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":212,"org.apache.commons.collections4.list.UnmodifiableListTest.testSerializeDeserializeThenCompare":322,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":306,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":81,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListSerialization":327,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":13,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":237,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":147,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSerializeDeserializeThenCompare":304,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":113,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":294,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2":41,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":245,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":135,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":33,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":59,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":98,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":348,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":95,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":272,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":60,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":193,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":268,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":288,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":211,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking2":5,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":101,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":203,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":107,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":153,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":157,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":262,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":303,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":67,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":169,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":226,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":235,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":36,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":205,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":325,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":213,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":109,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":146,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":252,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveChangesMap":56,"org.apache.commons.collections4.bag.CollectionBagTest.testSimpleSerialization":297,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testSize":20,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":167,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":187,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":299,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":243,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagAdd":177,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":156,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":298,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":158,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueCompatibility":310,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":35,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":28,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":61,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":182,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":112,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSimpleSerialization":315,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":79,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":273,"org.apache.commons.collections4.set.ListOrderedSetTest.testSimpleSerialization":289,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":137,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":14,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":274,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":105,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":222,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":124,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSerializeDeserializeThenCompare":314,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":74,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":221,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":78,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":204,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":343,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":129,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":181,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":344,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":141,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":267,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":90,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":26,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testReset":19,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":259,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":183,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSimpleSerialization":305,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":164,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":46,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":47,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":149,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":190,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":254,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":285,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":11,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":295,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":220,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":173,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testSerializeDeserializeThenCompare":300,"org.apache.commons.collections4.PredicateUtilsTest.testNeitherPredicate":30,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":155,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":189,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":91,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":92,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":247,"org.apache.commons.collections4.list.GrowthListTest.testFullListSerialization":337,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContains":163,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":10,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":22,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":94,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":76,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":120,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":253,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":23,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":122,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":234,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":261,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":44,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":45,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":232,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":345,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":114,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":96,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":83,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":159,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":191,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":330,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":86,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":9,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":31,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":185,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":75,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":151,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":249,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListCompatibility":332,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveChangesMap":53,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":72,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":200,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":313,"org.apache.commons.collections4.bag.CollectionBagTest.testSerializeDeserializeThenCompare":296,"org.apache.commons.collections4.list.SetUniqueListTest.testSimpleSerialization":329,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveChangesMap":48,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":34,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":241,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":38,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains1":206,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":209,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":242,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":208,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains2":207,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":244,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":197,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":87,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":342,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":227,"org.apache.commons.collections4.list.FixedSizeListTest.testSimpleSerialization":335,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":271,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":165,"org.apache.commons.collections4.list.UnmodifiableListTest.testSimpleSerialization":323,"org.apache.commons.collections4.list.FixedSizeListTest.testSerializeDeserializeThenCompare":334,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":54,"org.apache.commons.collections4.list.GrowthListTest.testSimpleSerialization":341,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":55,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":102,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":256,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingOverBoundary":276,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":21,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":82,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":281,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":263,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":349,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":168,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":100,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":150,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":73,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":255,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":110,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":307,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":346,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":166,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":326,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":121,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":103,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":292,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":196,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":328,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains1":49,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":264,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":140,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains2":50,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":216,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":217,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":142,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":4,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":6,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":7,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":172,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":8,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":148,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListSerialization":321,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":66,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":350,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":126,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":138,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":52,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":160,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListSerialization":339,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":119,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveChangesMap":225,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":51,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":97,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":134,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":228,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":130,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":286,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":104,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":302,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":218,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicate":2,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":219,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":257,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":85,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":275,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testValuesRemoveChangesMap":64,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":115,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":128,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":184,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains2":63,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx4":0,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingBackwards":277,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains1":62,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":175,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":282,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx6":1,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":318,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testSimpleSerialization":317,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":25,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":248,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":111,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":240,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":336,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping0":15,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping1":16,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping2":17,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping3":18,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":290,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testSimpleSerialization":301,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":27,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":118,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":266,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListCompatibility":320,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":125,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":88,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":202,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":106,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":201,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":229,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":283,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":144,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":231,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":70,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":246,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":280,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListSerialization":331,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testSerializeDeserializeThenCompare":308,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":154,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":265,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":171,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":311,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":139,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListSerialization":333}}]

[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"-3190437252665717841L","position":"org.apache.commons.collections4.bag.UnmodifiableSortedBag:45","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.apache.commons.collections4.trie.KeyAnalyzer.EQUAL_BIT_KEY":"index","bitIndex":"index"},"name":"add","transplant":{"sourceCode":"return int == int","position":"org.apache.commons.collections4.trie.KeyAnalyzer:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator<E>.remove()","position":"org.apache.commons.collections4.list.AbstractLinkedList:928","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.WhileClosure:88","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.ensureCapacity(int)","position":"org.apache.commons.collections4.map.AbstractHashedMap:614","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.equals(java.lang.Object)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"key"},"name":"replace","transplant":{"sourceCode":"return java.lang.Object","position":"org.apache.commons.collections4.map.AbstractHashedMap:1092","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int++","position":"org.apache.commons.collections4.CollectionUtils:1349","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:56","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int--","position":"org.apache.commons.collections4.CollectionUtils:1277","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:168","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.higherEntry(K)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1889","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:65","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.UnmodifiableSortedMap:147","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"transformer must not be null\")","position":"org.apache.commons.collections4.map.DefaultedMap:167","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:65","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.bag.TreeBag:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"remove() is not supported\")","position":"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator:101","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.SortedBag<E>)(org.apache.commons.collections4.bag.PredicatedBag<E>.decorated()))","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:156","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"lastUsedIterator":"lastUsedIterator","currentIterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:126","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.LinkedMap.LinkedMapList<K>(this)","position":"org.apache.commons.collections4.map.LinkedMap:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().subList(int, int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:118","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((int) == 0) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if ((java.util.Iterator<? extends E>) == null) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n        boolean = true;\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:231","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append((K == this ? \"(this Map)\" : K)).append('=')","position":"org.apache.commons.collections4.map.AbstractHashedMap:1376","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"End index must not be less than start index.\")","position":"org.apache.commons.collections4.iterators.ArrayIterator:100","type":"CtThrowImpl"},"status":-2},{"failures":[1,2,3,4,5,6,0,7,8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Cannot add value - Predicate rejected it\")","position":"org.apache.commons.collections4.map.PredicatedMap:146","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return -1","position":"org.apache.commons.collections4.list.TreeList:443","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:215","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"K = null","position":"org.apache.commons.collections4.map.Flat3Map:560","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.OnePredicate.org.apache.commons.collections4.functors.OnePredicate.onePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:372","type":"CtReturnImpl"},"status":-2},{"failures":[9],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"if (!(org.apache.commons.collections4.iterators.FilterListIterator<E>.setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:130","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:257","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"coll":"coll","this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)) | boolean","position":"org.apache.commons.collections4.list.GrowthList:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((int + \" + \") + int)","name":"math","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:855","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:223","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.EnumerationIterator<E>.this(null, null)","position":"org.apache.commons.collections4.iterators.EnumerationIterator:46","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.GrowthList:186","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.map.AbstractHashedMap:567","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null)","position":"org.apache.commons.collections4.list.LazyList:127","type":"CtInvocationImpl"},"status":-2},{"failures":[10,11,12,13,14,15,16,17,18,19],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:168","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:144","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.subtree(K, int, int)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2382","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:211","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    if (java.lang.Object == this) {\n        return true;\n    } \n    return (java.lang.Object == this) || (org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().equals(java.lang.Object));\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:194","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The transformer array must not be null\")","position":"org.apache.commons.collections4.functors.FunctorUtils:182","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"status":-2},{"failures":[20,21,22,23,24,25],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"closure":"iClosure"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Closure<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:85","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.CollectionBag:113","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.MapTransformer<I, O>(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.functors.MapTransformer:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.Flat3Map:587","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.list.AbstractLinkedList:1016","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (boolean) || org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())","position":"org.apache.commons.collections4.iterators.FilterIterator:86","type":"CtReturnImpl"},"status":-2},{"failures":[13,16],"variableMapping":{"iterator":"currentIterator"},"name":"replace","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = ((java.util.Iterator<? extends E>)(E))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:109","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map.Entry) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.keyvalue.TiedMapEntry:103","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:67","type":"CtReturnImpl"},"status":-2},{"failures":[26,27,28,29,30],"variableMapping":{"added":"nextObjectSet","changed":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = int <= 0","position":"org.apache.commons.collections4.functors.ComparatorPredicate:183","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") less than zero.\")","name":"math","position":"org.apache.commons.collections4.list.AbstractLinkedList:539","type":"mutation","status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().retainAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:181","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.SwitchTransformer.org.apache.commons.collections4.functors.SwitchTransformer.<I,O>switchTransformer(java.util.Map<org.apache.commons.collections4.Predicate<I>, org.apache.commons.collections4.Transformer<I, O>>)","position":"org.apache.commons.collections4.TransformerUtils:302","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.LoopingListIterator:150","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:231","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2402","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.EntrySetIterator<K, V>(org.apache.commons.collections4.map.Flat3Map<K, V>)","position":"org.apache.commons.collections4.map.Flat3Map:777","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"status":-2},{"failures":[31,32,33,34,35,36,37,38],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().last()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:85","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().first()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:81","type":"CtReturnImpl"},"status":-1},{"failures":[18,39],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map must not be null\")","position":"org.apache.commons.collections4.map.MultiKeyMap:97","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":-1},{"failures":[40,41],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"new org.apache.commons.collections4.functors.NOPTransformer<java.lang.Object>()","position":"org.apache.commons.collections4.functors.NOPTransformer:36","type":"CtNewClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:438","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","key":"key"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:94","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:114","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.LazySortedMap:139","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((int + \" + \") + int) + \" > \")","name":"math","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:855","type":"mutation","status":-2},{"failures":[],"variableMapping":{"element":"input"},"name":"add","transplant":{"sourceCode":"if (null == E) {\n    throw new java.lang.NullPointerException(\"Attempted to add null object to queue\");\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:226","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E);\n} catch (final java.lang.RuntimeException java.lang.RuntimeException) {\n    throw java.lang.RuntimeException;\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable);\n}","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:59","type":"CtTryImpl"},"status":0},{"failures":[42,43],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.list.AbstractLinkedList:814","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super T>.execute(T)","position":"org.apache.commons.collections4.functors.ClosureTransformer:72","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.IteratorIterable:114","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.size()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2050","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.bag.TreeBag:117","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"E = org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.getIterator().next()","position":"org.apache.commons.collections4.set.ListOrderedSet:384","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-2},{"failures":[44,45,46,47,9,48,49,50,51],"variableMapping":{"flag":"nextObjectSet","removed":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.set.CompositeSet<E>.(contains(java.lang.Object)) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.set.CompositeSet:247","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>(8)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:80","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.ArrayList<java.util.Iterator<? extends E>>.set(int, java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.CollatingIterator:193","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:205","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.list.AbstractLinkedList:814","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.util.Map<org.apache.commons.collections4.Predicate<E>, org.apache.commons.collections4.Closure<E>>.size()","position":"org.apache.commons.collections4.functors.SwitchClosure:95","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().clear()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:78","type":"CtInvocationImpl"},"status":-2},{"failures":[44,52,45,46,47,53,9,54,48,49,50,51],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-1},{"failures":[55,56],"variableMapping":{"this":"this","visitor":"visitor"},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitDeleteCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.DeleteCommand:53","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitKeepCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.KeepCommand:55","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E>) == null) {\n    throw new java.lang.UnsupportedOperationException(\"add() is not supported on CompositeCollection without a CollectionMutator strategy\");\n} ","position":"org.apache.commons.collections4.collection.CompositeCollection:219","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>> = java.util.Set<java.util.Map.Entry<K, V>>.iterator()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:92","type":"CtAssignmentImpl"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,31,32,33,34,35,36,37,38,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:236","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) {\n    throw new java.lang.IllegalStateException((\"Can\\'t move header to MRU\" + \" (please report this to dev@commons.apache.org)\"));\n} ","position":"org.apache.commons.collections4.map.LRUMap:208","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.LazyList<E>(java.util.List<E> , org.apache.commons.collections4.Factory<? extends E>)","position":"org.apache.commons.collections4.list.LazyList:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList.FixedSizeListIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int))","position":"org.apache.commons.collections4.list.FixedSizeList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:95","type":"CtReturnImpl"},"status":-2},{"failures":[571],"binaryOperator":"int == 1","name":"removeConditional","position":"org.apache.commons.collections4.functors.ForClosure:55","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedListIterator<E>(this , 0)","position":"org.apache.commons.collections4.list.AbstractLinkedList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:105","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.FalsePredicate.org.apache.commons.collections4.functors.FalsePredicate.<T>falsePredicate()","position":"org.apache.commons.collections4.functors.AnyPredicate:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.LazyList:115","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().getCount(java.lang.Object)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:69","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (int >= 0) {\n    final java.lang.Object java.lang.Object = java.util.ArrayList<E>.get(int);\n    if (((java.lang.Object == null) && (java.lang.Object == null)) || ((java.lang.Object != null) && (java.lang.Object.equals(java.lang.Object)))) {\n        return int;\n    } \n    int--;\n    int++;\n}","position":"org.apache.commons.collections4.ArrayStack:155","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super T>.execute(T)","position":"org.apache.commons.collections4.functors.ClosureTransformer:72","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractLinkedMap.EntrySetIterator<K, V>(this)","position":"org.apache.commons.collections4.map.AbstractLinkedMap:401","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.iterators.UnmodifiableIterator.org.apache.commons.collections4.iterators.UnmodifiableIterator.unmodifiableIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().iterator())","position":"org.apache.commons.collections4.list.FixedSizeList:108","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().subSet(E, E)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:104","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n    if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n        return null;\n    } \n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:706","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.InstantiateTransformer<T>()","position":"org.apache.commons.collections4.functors.InstantiateTransformer:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.<I,O>nullTransformer()","position":"org.apache.commons.collections4.functors.MapTransformer:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The collection must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:56","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{"key":"lock"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.containsKey(java.lang.Object)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1716","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:130","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1642","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:224","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2016","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:115","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":231,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":251,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":9,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":149,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":519,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":173,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":411,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":379,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":164,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":56,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":369,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":227,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":414,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":426,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":496,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":538,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":120,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":549,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":564,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":118,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":539,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":555,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":31,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":82,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":5,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":77,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":201,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":27,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":481,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":91,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":450,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":99,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":44,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":466,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":372,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":221,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":131,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":174,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":392,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":225,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":202,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":280,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":210,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":122,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":187,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":195,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":353,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":554,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":561,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":154,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":522,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":316,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":389,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":95,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":384,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":451,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":226,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":309,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":141,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":290,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":169,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":88,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":400,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":253,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":152,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":64,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":405,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":45,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":94,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":133,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":455,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":308,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":416,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":463,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":498,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":57,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":381,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":482,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":17,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":448,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":566,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":461,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":115,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":75,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":18,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":456,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":546,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":336,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":473,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":282,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":357,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":399,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":78,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":438,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":26,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":191,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":236,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":315,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":345,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":277,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":544,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":39,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":98,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":504,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":390,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":409,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":317,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":62,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":444,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":273,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":289,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":423,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":341,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":339,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":311,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":229,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":262,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":512,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":407,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":22,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":256,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":249,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":145,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":23,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":109,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":70,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":268,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":537,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":547,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":207,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":36,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":67,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":359,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":472,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":302,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":484,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":493,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":263,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":46,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":422,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":520,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":287,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":300,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":340,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":281,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":188,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":388,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":257,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":462,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":303,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":185,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":543,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":86,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":168,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":323,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":14,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":513,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":460,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":163,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":530,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":237,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":424,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":87,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":215,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":324,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":159,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":286,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":119,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":312,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":550,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":420,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":106,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":240,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":222,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":196,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":55,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":127,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":326,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":527,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":105,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":258,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":412,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":391,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":363,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":354,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":266,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":356,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":209,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":179,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":382,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":467,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":125,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":559,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":197,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":238,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":140,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":176,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":403,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":556,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":360,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":437,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":54,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":432,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":144,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":393,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":274,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":500,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":97,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":404,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":135,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":471,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":318,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":269,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":294,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":272,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":421,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":132,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":248,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":378,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":327,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":352,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":161,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":348,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":401,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":148,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":255,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":278,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":387,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":142,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":232,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":338,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":351,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":528,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":102,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":307,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":396,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":349,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":452,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":541,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":8,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":475,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":182,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":242,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":443,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":337,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":134,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":224,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":233,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":156,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":517,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":139,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":160,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":364,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":508,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":4,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":124,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":428,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":61,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":322,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":212,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":553,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":497,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":306,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":34,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":136,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":419,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":476,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":167,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":489,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":129,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":217,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":100,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":321,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":177,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":571,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":73,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":92,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":332,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":479,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionClear":40,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":535,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":506,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":495,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":441,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":367,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":380,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":334,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":562,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":529,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":501,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":123,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":279,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":200,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":260,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":298,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":178,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":545,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":552,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":239,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":250,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":230,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":314,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":371,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":524,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":515,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":533,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":299,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":439,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":2,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":53,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":138,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":397,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":304,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":29,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":296,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":398,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":469,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":204,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":81,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":370,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":551,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":244,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":442,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":445,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":162,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":126,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":526,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":343,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":569,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":171,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":84,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":114,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":408,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":33,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":406,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":194,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":198,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":440,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":193,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":386,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":6,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":505,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":184,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":502,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":429,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":310,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":376,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":361,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":49,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":275,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":175,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":563,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":243,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":21,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":38,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":180,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":157,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":285,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":32,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":52,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":65,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":373,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":301,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":37,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":457,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":276,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":486,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":220,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":241,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":166,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":3,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedHasNext":28,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":335,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":531,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testMapIterator":43,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":246,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":464,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":121,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":216,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":155,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":344,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":346,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":350,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":206,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":245,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":402,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":19,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":47,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":170,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":219,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":431,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":417,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":511,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":305,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":60,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":203,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":474,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":205,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":1,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":516,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":261,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":328,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":491,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":112,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":453,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":151,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":548,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":16,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":208,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":228,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":158,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":41,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":83,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":89,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":7,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":42,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":492,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":433,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":458,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":71,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":68,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":189,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":150,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":0,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":385,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":74,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":128,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":415,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":347,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":565,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":48,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":468,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":13,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":435,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":63,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":297,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":483,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":499,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":58,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":568,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":540,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":218,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":395,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":103,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":368,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":507,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":90,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":214,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":418,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":430,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":186,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":79,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":325,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":284,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":365,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":267,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":377,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":446,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":108,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":153,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":20,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":313,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":478,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":271,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":283,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":567,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":270,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":488,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":130,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":15,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":116,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":30,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":485,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":425,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":69,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":80,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":477,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":293,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":59,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":66,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":183,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":436,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":459,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":558,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":117,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":199,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":536,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":358,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":259,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":295,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":487,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":560,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":510,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":330,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":165,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":427,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":375,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":143,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":10,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":394,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":11,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":12,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":509,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":85,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":107,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":518,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":465,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":96,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":383,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":247,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":76,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":113,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":329,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":449,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":223,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":342,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":494,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":104,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":410,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":521,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":434,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":447,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":542,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":51,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":213,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":24,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":534,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":50,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":111,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":362,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":265,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":288,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":503,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":532,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":211,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":252,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":374,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":181,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":192,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":319,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":366,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":525,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":320,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":490,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":355,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":146,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":137,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":523,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":480,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingNotOverBoundary":25,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":292,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":291,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":172,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":93,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":110,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":190,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":72,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":570,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":235,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":333,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":413,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":264,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":470,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":454,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":234,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":147,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":557,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":514,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":35,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":254,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":331,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":101}}]

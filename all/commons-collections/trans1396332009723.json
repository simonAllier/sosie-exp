[{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.BitSet.get(int)) == false) {\n    org.apache.commons.collections4.iterators.CollatingIterator<E>.set(int);\n} ","position":"org.apache.commons.collections4.iterators.CollatingIterator:356","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:143","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\")","position":"org.apache.commons.collections4.ListUtils:659","type":"CtThrowImpl"},"status":-1},{"failures":[1,2,3,4],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((V)(java.lang.Object))","position":"org.apache.commons.collections4.map.AbstractHashedMap:1092","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>.get(java.lang.Object)","position":"org.apache.commons.collections4.map.DefaultedMap:205","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl"},"status":0},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return -1","position":"org.apache.commons.collections4.map.LinkedMap:172","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-1},{"failures":[811,812],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.NotPredicate<T>(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.functors.NotPredicate:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsExceptionPredicate.org.apache.commons.collections4.functors.NullIsExceptionPredicate.nullIsExceptionPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:488","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.ListIterator<E> java.util.ListIterator<E> = ((java.util.ListIterator<E>)(java.util.ListIterator<? extends E>))","position":"org.apache.commons.collections4.iterators.UnmodifiableListIterator:51","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if ((E) == null) {\n    } else {\n        if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n        } else {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n        }\n        E = null;\n    }\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:140","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"new org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>(8)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:80","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = K == null ? 0 : K.hashCode()","position":"org.apache.commons.collections4.map.Flat3Map:354","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>(java.util.Map<K, V>.entrySet())","position":"org.apache.commons.collections4.map.AbstractIterableMap:34","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.map.LRUMap<K, V>.removeLRU(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) {\n    boolean = true;\n    break;\n} ","position":"org.apache.commons.collections4.map.LRUMap:251","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[813,814,815,816,817,818,819,820],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) != null) {\n    org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:181","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.Comparator<? super E> java.util.Comparator<? super E> = ((java.util.Comparator<? super E>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.bag.TreeBag:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"entry":"entry"},"name":"add","transplant":{"sourceCode":"this.java.util.Map.Entry<K, V> = null","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:100","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:84","type":"CtAssignmentImpl"},"status":0},{"failures":[821],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:149","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1650","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-2},{"failures":[822],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>","position":"org.apache.commons.collections4.PredicateUtils:356","type":"CtReturnImpl"},"status":-1},{"failures":[823],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:60","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:107","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1454","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return -1","position":"org.apache.commons.collections4.map.LinkedMap:172","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().getCount(java.lang.Object)","position":"org.apache.commons.collections4.bag.PredicatedBag:106","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.put(E, new org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger(int))","position":"org.apache.commons.collections4.bag.AbstractMapBag:257","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:67","type":"CtReturnImpl"},"status":-2},{"failures":[824,825],"name":"returnValue","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"mutation","return":"return true","status":-1},{"failures":[826],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (T == null) {\n    return org.apache.commons.collections4.functors.NullPredicate.org.apache.commons.collections4.functors.NullPredicate.<T>nullPredicate();\n} ","position":"org.apache.commons.collections4.functors.IdentityPredicate:47","type":"CtIfImpl"},"status":-1},{"failures":[827,828,324],"variableMapping":{"array":"object"},"name":"replace","transplant":{"sourceCode":"return T[]","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.SynchronizedCollection:164","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.rangeCheck(int, ((int) + 1))","position":"org.apache.commons.collections4.list.AbstractLinkedList:1005","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.map.PassiveExpiringMap:516","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ReverseListIterator:78","type":"CtAssignmentImpl"},"status":-2},{"failures":[829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:224","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if (java.util.Queue<java.util.Iterator<? extends E>>.isEmpty()) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    } else {\n        java.util.Iterator<? extends E> = java.util.Queue<java.util.Iterator<? extends E>>.remove();\n    }\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:212","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Collection<V> == null) || ((java.util.Collection<V>.size()) == 0)) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.MultiValueMap:379","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean == true) {\n    java.util.BitSet.set(((java.util.List<java.util.Comparator<E>>.size()) - 1));\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:153","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.DefaultedMap<K, V>.this(new java.util.HashMap<K, V>(), org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:154","type":"CtInvocationImpl"},"status":-2},{"failures":[829,831,832,836,843,861,869,878,884,893],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.IteratorChain:252","type":"CtAssignmentImpl"},"status":-1},{"failures":[486,487],"binaryOperator":"((int - int) + 1)","name":"math","position":"org.apache.commons.collections4.list.GrowthList:184","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(\"Attempting to compare unknown object \" + java.lang.Object)","name":"math","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:239","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Comparator<E> = org.apache.commons.collections4.ComparatorUtils.java.util.Comparator","position":"org.apache.commons.collections4.ComparatorUtils:154","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:165","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"sub":"map"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:144","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((int) < (int)) && (int < (int))) {\n    java.lang.System.java.lang.System.arraycopy(E[], int, E[], int, ((int) - int));\n} else {\n    while (int != (int)) {\n        if (int >= (int)) {\n            E[][(int - 1)] = E[][0];\n            int = 0;\n        } else {\n            E[][org.apache.commons.collections4.queue.CircularFifoQueue<E>.decrement(int)] = E[][int];\n            int = org.apache.commons.collections4.queue.CircularFifoQueue<E>.increment(int);\n        }\n    }\n}","position":"org.apache.commons.collections4.queue.CircularFifoQueue:387","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().first()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().last()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"V = V","position":"org.apache.commons.collections4.map.Flat3Map:356","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.get(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2062","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[902],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:107","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super K, ? extends K>) == null) {\n    return K;\n} ","position":"org.apache.commons.collections4.map.TransformedMap:167","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<? extends E>.previous()","position":"org.apache.commons.collections4.iterators.FilterListIterator:264","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object instanceof org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.bag.AbstractMapBag:414","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:120","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.util.List<E> == null) {\n    throw new java.lang.NullPointerException(\"List must not be null\");\n} ","position":"org.apache.commons.collections4.IteratorUtils:764","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:86","type":"CtIfImpl"},"status":0},{"failures":[903,904,905],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Byte == null) {\n    return 0;\n} ","position":"org.apache.commons.collections4.MapUtils:607","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.Flat3Map<?, V>.size()","position":"org.apache.commons.collections4.map.Flat3Map:1042","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.SortedMap<K, V>.size()) > 0) {\n    final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>);\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear();\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>);\n} ","position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"break","position":"org.apache.commons.collections4.map.Flat3Map:849","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Already at start of list.\")","position":"org.apache.commons.collections4.list.AbstractLinkedList:842","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:56","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Unknown object behavior must not be null\")","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:165","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:143","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"(ancestor[\" + ((((org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size()) - 1) - int) - 1))","name":"math","position":"org.apache.commons.collections4.MapUtils:1012","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:163","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean boolean = false","position":"org.apache.commons.collections4.CollectionUtils:377","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.util.Collection<? extends E>.size()) > 0","position":"org.apache.commons.collections4.iterators.LoopingIterator:71","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int ^= java.lang.Object.hashCode()","position":"org.apache.commons.collections4.map.MultiKeyMap:507","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String))","position":"org.apache.commons.collections4.PredicateUtils:213","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(org.apache.commons.collections4.MapIterator<K, V>.next())","position":"org.apache.commons.collections4.map.AbstractHashedMap:1233","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.ConcurrentModificationException()","position":"org.apache.commons.collections4.list.TreeList:1040","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n    boolean = true;\n} ","position":"org.apache.commons.collections4.list.GrowthList:153","type":"CtIfImpl"},"status":-2},{"failures":[906,907,908,909],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.map.DefaultedMap:193","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().last()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ArrayList<E>.get((int - 1))","position":"org.apache.commons.collections4.ArrayStack:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.org.apache.commons.collections4.map.ListOrderedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.ListOrderedMap:641","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.FixedSizeList:56","type":"CtReturnImpl"},"status":-2},{"failures":[910,815,816,911,821,817,818,912,819,913,820,914,915,916],"variableMapping":{"transformer":"transformer"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super T, ? extends T> == null) {\n    throw new java.lang.IllegalArgumentException(\"The transformer to call must not be null\");\n} ","position":"org.apache.commons.collections4.functors.TransformedPredicate:53","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if ((E) == null) {\n    } else {\n        if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n        } else {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n        }\n        E = null;\n    }\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:140","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount()","position":"org.apache.commons.collections4.list.AbstractLinkedList:980","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:140","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.Iterator<? extends E>.hasNext()) == false) {\n    org.apache.commons.collections4.iterators.LoopingIterator<E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","lock":"lock"},"name":"add","transplant":{"sourceCode":"synchronized(this.java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:175","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<? extends E> java.util.Iterator<? extends E> : java.util.ArrayList<java.util.Iterator<? extends E>>) {\n    if (java.util.Iterator<? extends E>.hasNext()) {\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.CollatingIterator:396","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{"key":"object"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.containsValue(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2066","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object == this) || (org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().equals(java.lang.Object))","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:225","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if (java.util.Iterator<? extends E> instanceof org.apache.commons.collections4.iterators.PushbackIterator<?>) {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final org.apache.commons.collections4.iterators.PushbackIterator<E> org.apache.commons.collections4.iterators.PushbackIterator<E> = ((org.apache.commons.collections4.iterators.PushbackIterator<E>)(java.util.Iterator<? extends E>));\n    return org.apache.commons.collections4.iterators.PushbackIterator<E>;\n} ","position":"org.apache.commons.collections4.iterators.PushbackIterator:60","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.iterators.PushbackIterator<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.PushbackIterator:65","type":"CtReturnImpl"},"status":-2},{"failures":[267,268,270,271,272,273,274,275,276,277,280,917,281,282,284,285,286,287,288,289,290,291,294,417,418,419,420,421,424,425,918,435,436,438,439,440,441,442,443,444,445,448],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.subtree(K, int, int)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2382","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.filter(java.lang.Iterable<T>, (org.apache.commons.collections4.Predicate<? super T> == null ? null : org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.notPredicate(org.apache.commons.collections4.Predicate<? super T>)))","position":"org.apache.commons.collections4.CollectionUtils:775","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.iterators.FilterListIterator:134","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Unsupported object type: null\")","position":"org.apache.commons.collections4.CollectionUtils:1286","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((T)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.functors.PrototypeFactory:182","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String))","position":"org.apache.commons.collections4.PredicateUtils:213","type":"CtReturnImpl"},"status":-2},{"failures":[903,919,905,920,921,922],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasNext()) == false) {\n    org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:90","type":"CtIfImpl"},"status":-1},{"failures":[923],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ArrayIterator<E>.this(java.lang.Object, int, java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object))","position":"org.apache.commons.collections4.iterators.ArrayIterator:74","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.iterators.ArrayIterator<E>.(hasNext()) == false) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.lengthInBits(K)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:384","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.LazySortedMap:139","type":"CtReturnImpl"},"status":-2},{"failures":[480],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"ListIterator must not be null\")","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:44","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.AbstractHashedMap:1085","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E> == null) {\n    java.util.Iterator<java.lang.ref.WeakReference<org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>>>.remove();\n} else {\n    org.apache.commons.collections4.list.CursorableLinkedList.Cursor<E>.nodeInserted(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n}","position":"org.apache.commons.collections4.list.CursorableLinkedList:355","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.queue.UnmodifiableQueue:140","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.collections4.map.TransformedSortedMap<K, V> org.apache.commons.collections4.map.TransformedSortedMap<K, V> = new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator();\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:144","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * An {@link Iterator} that returns Key Objects.\n */\nprivate class KeyIterator extends org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.TrieIterator<K> {\n    public K next() {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.TrieIterator<K>.nextEntry().getKey();\n    }\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1482","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:325","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = int","position":"org.apache.commons.collections4.map.AbstractReferenceMap:792","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.Comparator<? super E> java.util.Comparator<? super E> = ((java.util.Comparator<? super E>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.bag.TreeBag:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.util.ListIterator<?>.next()","position":"org.apache.commons.collections4.list.AbstractLinkedList:365","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.isInstance(java.lang.Object)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"input":"input","this":"this"},"name":"add","transplant":{"sourceCode":"try {\n    org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E);\n} catch (final java.lang.RuntimeException java.lang.RuntimeException) {\n    throw java.lang.RuntimeException;\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable);\n}","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:59","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:60","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.util.ConcurrentModificationException()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1164","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().headSet(E)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:109","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.TransformedSortedSet<E>.getSortedSet().subSet(E, E)","position":"org.apache.commons.collections4.set.TransformedSortedSet:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[924],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator();\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:144","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.TransformedSortedMap:141","type":"CtReturnImpl"},"status":-2},{"failures":[918,435,436,438,439,440,441,442,443,444,445,448],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().last()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().first()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:92","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.Values<V>(this)","position":"org.apache.commons.collections4.map.Flat3Map:1026","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().values()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","lock":"lock"},"name":"add","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:130","type":"CtSynchronizedImpl"},"status":-2},{"failures":[486,487,925,926,497],"variableMapping":{"value":"element"},"name":"replace","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.AbstractLinkedList:832","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.GrowthList:186","type":"CtReturnImpl"},"status":-1},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":228,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":411,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":635,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":528,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":872,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":80,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":712,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":323,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":198,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":671,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":733,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":569,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionClear":304,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":62,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":560,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testValuesClearChangesMap":676,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":123,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":19,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":42,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":184,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":488,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":29,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":127,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":76,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":575,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":831,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":309,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetClearChangesMap":717,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":855,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":571,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":102,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":622,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":170,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":461,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":898,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListSerialization":454,"org.apache.commons.collections4.ListUtilsTest.testLazyList":632,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":148,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":706,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":221,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":445,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionSize":205,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":212,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":642,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":798,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":807,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorRemoveProtectsInvariants":431,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":666,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":125,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":794,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":83,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":854,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":639,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":92,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":151,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":628,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":340,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueCompatibility":34,"org.apache.commons.collections4.bag.HashBagTest.testCollectionClear":351,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":191,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionSize":69,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":573,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":261,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":504,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":804,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":619,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":818,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListSerialization":586,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":73,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":353,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":297,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":759,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":793,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":886,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndexBoundsChecking2":926,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":25,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":738,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":234,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":312,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":330,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":650,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":873,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":442,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":606,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":111,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":799,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":578,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":727,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":699,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":284,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":326,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":558,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":613,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":306,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":358,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":415,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":518,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":893,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetClearChangesMap":692,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":904,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":409,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":172,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":905,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":846,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":155,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":243,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":400,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking2":527,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":132,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":399,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":761,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":491,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":507,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":271,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":529,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":771,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":303,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":429,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":448,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":434,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":797,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":548,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":378,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":121,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionSize":479,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":547,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":103,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":329,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":711,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":240,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":236,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":468,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToString":591,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":291,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":185,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":21,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":344,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":469,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":768,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":863,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":168,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":417,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testValuesClearChangesMap":715,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":731,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":800,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndexBoundsChecking":925,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking2":577,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":324,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":274,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":851,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":254,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":246,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":696,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":35,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":141,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionClear":235,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":215,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":237,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":675,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":30,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":719,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":604,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":896,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionSize":56,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":602,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingOverBoundary":921,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":688,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":785,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":439,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":583,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":153,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":277,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":366,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":892,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":585,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":519,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":28,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":408,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":320,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":316,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":708,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":634,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":796,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":685,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":165,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":319,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":540,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":163,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":7,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":495,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":354,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":137,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFailDoubleRemove":396,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":152,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":194,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":363,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":597,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":829,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":474,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueSerialization":9,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":289,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":250,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenRemove":923,"org.apache.commons.collections4.list.GrowthListTest.testCollectionSize":505,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":852,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":572,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":428,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":338,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":49,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":156,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":767,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":911,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":377,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":853,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":159,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":740,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":113,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":864,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":288,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":694,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":902,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":4,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":104,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":883,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":425,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":891,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionSize":386,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":500,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":849,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":58,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":594,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":914,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":63,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":189,"org.apache.commons.collections4.ListUtilsTest.testPartition":0,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":371,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":695,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":238,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":410,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":543,"org.apache.commons.collections4.list.TransformedListTest.testCollectionSize":620,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":348,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":538,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":535,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":522,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":566,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":55,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":52,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":333,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":373,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":607,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagSize":259,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionSize":196,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":27,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":790,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":335,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFailDoubleRemove":262,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":660,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":464,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":791,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":22,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":404,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":610,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":615,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":423,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":682,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":142,"org.apache.commons.collections4.bag.TreeBagTest.testOrdering":917,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":537,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetClearChangesMap":677,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":398,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicate":811,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":227,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":334,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":179,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":897,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":726,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":129,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":654,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":216,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":652,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":810,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":593,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":656,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":588,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":475,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":751,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":295,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":841,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":465,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":674,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":843,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":136,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":697,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":128,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":748,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":138,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":701,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":631,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":743,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":144,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":509,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":241,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":845,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":663,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":352,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":544,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":458,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":187,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionSize":39,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":311,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":314,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":134,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":242,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":718,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":206,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListSerialization":617,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":88,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":762,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":494,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":390,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":516,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":653,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionClear":181,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":626,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":18,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":865,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":245,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":296,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":433,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":780,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":313,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":824,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":556,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":68,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":98,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":630,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":637,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionSize":96,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":72,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":734,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":43,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":315,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionSize":244,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":506,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":857,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":164,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyIterator":834,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":766,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":265,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":658,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":777,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":275,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":346,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":616,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":210,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":903,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":298,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":435,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":46,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":512,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":182,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":470,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":66,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":497,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":808,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":224,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":365,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":86,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":655,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":485,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":426,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":450,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":32,"org.apache.commons.collections4.collection.CompositeCollectionTest.testIterator":861,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":183,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":217,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":640,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":752,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueSerialization":12,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":421,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":472,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":713,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":687,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesClearChangesMap":691,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":598,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListSerialization":457,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":576,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":806,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListSerialization":502,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":75,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":178,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":621,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":211,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":359,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":894,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":8,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":482,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":251,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":174,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":773,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemove":832,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":273,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":305,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":347,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":589,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":827,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":248,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":847,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":256,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":414,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":735,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueSerialization":33,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":286,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":287,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":514,"org.apache.commons.collections4.functors.CatchAndRethrowClosureTest.testThrowingClosure":823,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemoveAll":258,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":866,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":501,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":924,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionSize":446,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":105,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":649,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":70,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetClearChangesMap":716,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":732,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":272,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":466,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":232,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":772,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":31,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":633,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":856,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionSize":299,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":413,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":672,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":730,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":755,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":176,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":782,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":887,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":471,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":720,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":114,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionSize":230,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":186,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":899,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedRemove":859,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":5,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":395,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":737,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":117,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionClear":219,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":220,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":387,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionSize":15,"org.apache.commons.collections4.bag.TransformedBagTest.testBagSize":393,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":503,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":112,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":744,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":746,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":208,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":673,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":802,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionClear":87,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":195,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":850,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":247,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":792,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":188,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":659,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":918,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":321,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":337,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":26,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":38,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":532,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":282,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":107,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":623,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":197,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":341,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":307,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":684,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":381,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":722,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":106,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":736,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":327,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":269,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionSize":292,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":456,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":84,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":45,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":453,"org.apache.commons.collections4.map.DefaultedMapTest.testFullMapCompatibility":907,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":379,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":180,"org.apache.commons.collections4.map.DefaultedMapTest.testSimpleSerialization":908,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":79,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":16,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":201,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":629,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":819,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":493,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":801,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":77,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":546,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":427,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":605,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":756,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":836,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionSize":278,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":2,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":3,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":281,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":1,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":13,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":592,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":916,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueSerialization":36,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":879,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAll":157,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":889,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":90,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":555,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":438,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":467,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":61,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":862,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":784,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":356,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":343,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":890,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":200,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":270,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":293,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicateEx1":812,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":667,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":725,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":384,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":844,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":874,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":689,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":67,"org.apache.commons.collections4.bag.HashBagTest.testCollectionSize":360,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":276,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":60,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":17,"org.apache.commons.collections4.PredicateUtilsTest.testIdentityPredicate":826,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":95,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray":867,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemoveAll":392,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":710,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":376,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":557,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":357,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":374,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":661,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":385,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":455,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":657,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":11,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":665,"org.apache.commons.collections4.map.DefaultedMapTest.testSerializeDeserializeThenCompare":909,"org.apache.commons.collections4.list.GrowthListTest.testFullListSerialization":498,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":290,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":520,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":816,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":452,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":64,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":97,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":825,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":848,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":542,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":787,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":160,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":868,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":686,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":124,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":253,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":302,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":705,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":260,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":332,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":239,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":209,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":279,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":739,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":213,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":143,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":539,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":167,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":388,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":53,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":562,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":774,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":549,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":561,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":758,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":462,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":805,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetClearChangesMap":647,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":367,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":683,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":266,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":763,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":480,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":775,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":110,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":721,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":394,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":490,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":285,"org.apache.commons.collections4.map.DefaultedMapTest.testEmptyMapCompatibility":906,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":436,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":769,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":150,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":154,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":754,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":877,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":418,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":795,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionSize":214,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":383,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetClearChangesMap":678,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":875,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":876,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":443,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":229,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":355,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":339,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":789,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":888,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":317,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":624,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":325,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":372,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":700,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":401,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":611,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":231,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":524,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":644,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":603,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":158,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":681,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaIterator":869,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":707,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":776,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":912,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":192,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":451,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":871,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":89,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":331,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":492,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":432,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":24,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetClearChangesMap":646,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionClear":74,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":600,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":515,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":130,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":226,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":496,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":664,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetClearChangesMap":729,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":513,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":595,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":146,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesClearChangesMap":645,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":203,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":115,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":840,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":447,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFailDoubleRemove":430,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":71,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking2":582,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet2":487,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":486,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":568,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":609,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":779,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":803,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndexBoundsChecking2":614,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":40,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":350,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":541,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":584,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_next":910,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":444,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":218,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":193,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":267,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":14,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":23,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":625,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":202,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":745,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":742,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":680,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":545,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":257,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":369,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":828,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":900,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":223,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":116,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionSize":122,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":783,"org.apache.commons.collections4.iterators.IteratorChainTest.testFullIterator":835,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":709,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":884,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":837,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionSize":190,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":48,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":362,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":669,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":119,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionClear":283,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":723,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":565,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":608,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":590,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":342,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":764,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":440,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":41,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":149,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":402,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":65,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":919,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":175,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":662,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":703,"org.apache.commons.collections4.iterators.IteratorChainTest.testIterator":833,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":301,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":93,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":510,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":375,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":135,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":364,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":441,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":207,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":885,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":559,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":702,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":714,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionSize":460,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":139,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":406,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionClear":249,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":416,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":255,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":724,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":643,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":553,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":318,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":552,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorRemoveProtectsInvariants":263,"org.apache.commons.collections4.map.MultiValueMapTest.testValues":870,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":328,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":405,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":820,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":668,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":579,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":478,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":517,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":765,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":140,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":161,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":336,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":222,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionClear":20,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":551,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":225,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":523,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":268,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":419,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":177,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":44,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetClearChangesMap":693,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":570,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":564,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":747,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":108,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":638,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":842,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":361,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":484,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":915,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":199,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":817,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionSize":422,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":403,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":704,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":100,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":118,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":481,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":580,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":449,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":648,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":809,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":145,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionSize":412,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":741,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":463,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":483,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":815,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":550,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":880,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":91,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":882,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":370,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":881,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":489,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":581,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":47,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":85,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":6,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":204,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":788,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":781,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":596,"org.apache.commons.collections4.collection.CompositeCollectionTest.testAddAllToCollection":858,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":101,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":252,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":322,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":574,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":264,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":477,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":78,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":294,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":300,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":753,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":171,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":641,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":345,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":499,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":280,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":567,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":147,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":821,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":508,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":81,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":94,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListSerialization":530,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":380,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":587,"org.apache.commons.collections4.iterators.IteratorChainTest.testFirstIteratorIsEmptyBug":830,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":901,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":59,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":760,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorRemoveProtectsInvariants":397,"org.apache.commons.collections4.collection.CompositeCollectionTest.testToCollection":860,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":389,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":599,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":368,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":37,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":511,"org.apache.commons.collections4.list.PredicatedListTest.testFullListSerialization":525,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":601,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":750,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":786,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":813,"org.apache.commons.collections4.list.TransformedListTest.testFullListSerialization":612,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":814,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":120,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":169,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":636,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":526,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":459,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":109,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":407,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":420,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":391,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":563,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":166,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":531,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":728,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionSize":533,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":618,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":57,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":920,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueCompatibility":10,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":54,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":749,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":878,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":698,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":838,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":651,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":839,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":778,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicate":822,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":536,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":126,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":757,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":690,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":679,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":534,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":310,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingNotOverBoundary":922,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":895,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":308,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":670,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":173,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":50,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":913,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":233,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":349,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":82,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListSerialization":473,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":627,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":437,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":521,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":133,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllCollections427":554,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":131,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":382,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":424,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":51,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":162,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":99,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListSerialization":476,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":770}}]

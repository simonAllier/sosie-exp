[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (int) == 0","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2306","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().subMap(K, K)","position":"org.apache.commons.collections4.map.TransformedSortedMap:145","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\")","position":"org.apache.commons.collections4.comparators.ComparatorChain:240","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map must not be null\")","position":"org.apache.commons.collections4.map.AbstractMapDecorator:62","type":"CtThrowImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.list.UnmodifiableList:98","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:91","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().nextKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"must have a from or to!\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1868","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.ArrayIterator:148","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.floorEntry(K);\n} else {\n    java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lowerEntry(K);\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1905","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.InstanceofPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:49","type":"CtReturnImpl"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19],"variableMapping":{"trueFirst":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"return this.boolean","position":"org.apache.commons.collections4.comparators.BooleanComparator:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:233","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.iterators.ObjectArrayIterator<E>(E[] , int , int)","position":"org.apache.commons.collections4.IteratorUtils:317","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = org.apache.commons.collections4.map.AbstractLinkedMap<K, V>.int","position":"org.apache.commons.collections4.map.AbstractLinkedMap:588","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.TransformerClosure<E>(org.apache.commons.collections4.Transformer<? super E, ?>)","position":"org.apache.commons.collections4.functors.TransformerClosure:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.lang.Object == java.lang.Object","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:206","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:109","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.hashIndex(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int, int)","position":"org.apache.commons.collections4.map.AbstractHashedMap:644","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Collection must not be null\")","position":"org.apache.commons.collections4.IteratorUtils:875","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(null)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:1005","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.map.DefaultedMap:180","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (boolean == true) {\n    java.util.BitSet.set(int);\n} else {\n    java.util.BitSet.clear(int);\n}","position":"org.apache.commons.collections4.comparators.ComparatorChain:183","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return -1","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:57","type":"CtReturnImpl"},"status":-2},{"failures":[20],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:103","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.<K,V>emptyOrderedMapIterator()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:425","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    final E E = java.util.Iterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterIterator:174","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntrySetIterator<K, V>(this)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:482","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"~(int << 15)","position":"org.apache.commons.collections4.map.StaticBucketMap:158","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Transformer<T, T>)(org.apache.commons.collections4.functors.CloneTransformer.org.apache.commons.collections4.Transformer))","position":"org.apache.commons.collections4.functors.CloneTransformer:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:140","type":"CtIfImpl"},"status":-2},{"failures":[21,22],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.functors.CloneTransformer:67","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[]);\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: InstantiationException\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor must be public\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor threw an exception\" , java.lang.reflect.InvocationTargetException);\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:125","type":"CtTryImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> == null) {\n    throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String);\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:926","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getValue()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:63","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().setValue(V)","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:70","type":"CtReturnImpl"},"status":0},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"variableMapping":{"this":"this","index":"index"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().remove(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtReturnImpl"},"status":-1},{"failures":[0,1,3,4,5],"binaryOperator":"java.util.Iterator<? extends E> != null","name":"negateConditional","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:96","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Comparator<E> java.util.Comparator<E> : java.util.Comparator<E>[]) {\n    if (java.util.Comparator<E> == null) {\n        throw new java.lang.NullPointerException(\"Comparator cannot be null\");\n    } \n    org.apache.commons.collections4.comparators.ComparatorChain<E>.addComparator(java.util.Comparator<E>);\n}","position":"org.apache.commons.collections4.ComparatorUtils:81","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Closure<E>)(org.apache.commons.collections4.Closure<? super E> == null ? org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure() : org.apache.commons.collections4.Closure<? super E>))","position":"org.apache.commons.collections4.functors.SwitchClosure:97","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.BitSet.clear(int)","position":"org.apache.commons.collections4.iterators.CollatingIterator:321","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.org.apache.commons.collections4.bidimap.TreeBidiMap.compare(K, org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey())","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:500","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:124","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.set.CompositeSet<E>.getMutator().resolveCollision(this, java.util.Set<E>, java.util.Set<E>, java.util.Collection<E>)","position":"org.apache.commons.collections4.set.CompositeSet:351","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1668","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[103],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < int) {\n    E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int);\n    if (E == null) {\n        E = org.apache.commons.collections4.Factory<? extends E>.create();\n        org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E);\n        return E;\n    } \n    return E;\n} ","position":"org.apache.commons.collections4.list.LazyList:113","type":"CtIfImpl"},"status":-1},{"failures":[104,105],"variableMapping":{"isLocked":"validForUpdate"},"name":"add","transplant":{"sourceCode":"if ((this.boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:239","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-1},{"failures":[106],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsFalsePredicate.org.apache.commons.collections4.functors.NullIsFalsePredicate.nullIsFalsePredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:503","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsExceptionPredicate.org.apache.commons.collections4.functors.NullIsExceptionPredicate.nullIsExceptionPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:488","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:85","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"entry":"entry"},"name":"replace","transplant":{"sourceCode":"if (java.util.Map.Entry<K, V> == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getValue()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.list.AbstractLinkedList<E>.isEqualValue(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.getValue(), java.lang.Object)) {\n    org.apache.commons.collections4.list.AbstractLinkedList<E>.removeNode(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>);\n    return true;\n} ","position":"org.apache.commons.collections4.list.AbstractLinkedList:238","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"newCapacity":"bound","proposedCapacity":"bound"},"name":"replace","transplant":{"sourceCode":"while (int < int) {\n    int <<= 1;\n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:668","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.MultiValueMap:339","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"status":-2},{"failures":[9],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:225","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.ref.Reference<?> java.lang.ref.Reference<?> = java.lang.ref.ReferenceQueue<java.lang.Object>.poll()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:379","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:209","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.SortedSet<E>","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.set.PredicatedSortedSet<E>(java.util.SortedSet<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Map<K, V>","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:60","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Map<K, V>)(java.util.Map<? extends K, ? extends V>))","position":"org.apache.commons.collections4.map.TransformedMap:199","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.list.UnmodifiableList:124","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure()","position":"org.apache.commons.collections4.functors.TransformerClosure:50","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return V","position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:177","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\")","position":"org.apache.commons.collections4.iterators.EntrySetMapIterator:110","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:141","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.Predicate<? super T>[].int) == 0) {\n    return org.apache.commons.collections4.functors.FalsePredicate.org.apache.commons.collections4.functors.FalsePredicate.<T>falsePredicate();\n} ","position":"org.apache.commons.collections4.functors.AnyPredicate:54","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<? extends E>) == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:260","type":"CtIfImpl"},"status":-2},{"failures":[107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,25,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211],"variableMapping":{"obj":"key"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object instanceof org.apache.commons.collections4.functors.ConstantTransformer) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.functors.ConstantTransformer:111","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:82","type":"CtReturnImpl"},"status":-1},{"failures":[212,213,214,215,216,217,218,219,220,221,222],"variableMapping":{"nextObjectSet":"hasNext"},"name":"add","transplant":{"sourceCode":"if (this.boolean) {\n    throw new java.lang.IllegalStateException(\"remove() cannot be called\");\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((!(boolean)) && (!(org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.isEmpty()))) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop();\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:195","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1027","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:156","type":"CtReturnImpl"},"status":-2},{"failures":[223,224,225],"binaryOperator":"(java.util.Iterator<? extends E>.hasNext()) == false","name":"removeConditional","position":"org.apache.commons.collections4.iterators.LoopingIterator:87","type":"mutation","status":-1},{"failures":[226],"variableMapping":{"validForUpdate":"validForUpdate"},"name":"add","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ReverseListIterator:78","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:128","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this","position":"org.apache.commons.collections4.list.TreeList:668","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:145","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Collection<? super E>) != null) {\n    if ((E) != null) {\n        java.util.Collection<? super E>.remove(E);\n    } else {\n        throw new java.lang.IllegalStateException(\"next() must have been called for remove() to function\");\n    }\n} else {\n    throw new java.lang.UnsupportedOperationException(\"No Collection associated with this Iterator\");\n}","position":"org.apache.commons.collections4.iterators.EnumerationIterator:107","type":"CtIfImpl"},"status":0},{"failures":[227,228],"name":"returnValue","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"mutation","return":"return true","status":-1},{"failures":[229,230],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"must call next() or previous() before a call to set()\")","position":"org.apache.commons.collections4.iterators.ArrayListIterator:189","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.DefaultedMap:181","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.size()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2050","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>(org.apache.commons.collections4.list.AbstractLinkedList<E> , (int + (int)) , (int + (int)))","position":"org.apache.commons.collections4.list.AbstractLinkedList:1051","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.LazyList:115","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][int]","position":"org.apache.commons.collections4.map.MultiKeyMap:605","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Couldn\\'t get the node: \" + \"index (\") + int)","name":"math","position":"org.apache.commons.collections4.list.AbstractLinkedList:547","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:231","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{"entryKey":"object","entryValue":"object"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object == null) || (java.lang.Object == null)) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:675","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.equals(java.lang.Object)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:76","type":"CtReturnImpl"},"status":0},{"failures":[15],"name":"returnValue","position":"org.apache.commons.collections4.iterators.FilterListIterator:271","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:89","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map<?, ?>) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:409","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[231],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:422","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.AllPredicate<T>(org.apache.commons.collections4.functors.FunctorUtils.org.apache.commons.collections4.functors.FunctorUtils.copy(org.apache.commons.collections4.Predicate<? super T>[]))","position":"org.apache.commons.collections4.functors.AllPredicate:64","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:138","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (int int = 0 ; int < int ; int++) {\n    final K K = ((K)(java.io.ObjectInputStream.readObject()));\n    final V V = ((V)(java.io.ObjectInputStream.readObject()));\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.put(K, V);\n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:1266","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String))","position":"org.apache.commons.collections4.PredicateUtils:213","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int ^= java.lang.Object.hashCode()","position":"org.apache.commons.collections4.map.MultiKeyMap:513","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>.get(java.lang.Object)","position":"org.apache.commons.collections4.map.DefaultedMap:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:89","type":"CtInvocationImpl"},"status":-2},{"failures":[232],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"End index must not be less than start index.\")","position":"org.apache.commons.collections4.iterators.ArrayIterator:100","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(\"ExceptionFactory invoked\")","position":"org.apache.commons.collections4.functors.ExceptionFactory:65","type":"CtThrowImpl"},"status":-1},{"failures":[233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257],"variableMapping":{"coll":"coll","this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:176","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n    org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n    org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n} ","position":"org.apache.commons.collections4.list.TreeList:853","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.ForClosure<E>(int , org.apache.commons.collections4.Closure<? super E>)","position":"org.apache.commons.collections4.functors.ForClosure:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:41","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getValue()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n    org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(int , E , null , null);\n} else {\n    org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E);\n}","position":"org.apache.commons.collections4.list.TreeList:203","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"status":-2},{"failures":[258,259,260,115,116,117,261,262,118,263,264,265,266,267,119,268,269,270,271,272,120,273,274,275,121,276,122,123,124,277,125,126,127,278,128,129,130,279,131,132,133,280,134,135,136,281,137,138,139,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,140,306,307,141,308,309,310,142,143,311,144,312,313,314,315,316,145,317,318,150,151,152,153,319,320,321,322,323,324,325,326,327,328,329,330,154,331,332,333,334,335,336,337,155,338,339,340,341,342,343,344,345,346,347,348,349,350,156,351,352,353,354,355,157,356,357,358,359,360,361,362,363,364,365,366,367,368,158,369,370,371,372,373,374,375,159,376,377,378,379,380,381,382,383,384,385,386,387,388,389,160,390,391,392,393,394,395,396,397,398,399,400,401,402,161,162,403,404,405,406,407,408,409,410,163,164,411,165,166,167,412,413,168,414,169,415,416,170,171,417,418,419,420,421,422,423,424,172,425,426,427,428,429,430,431,432,433,434,435,436,173,437,438,439,440,441,442,174,443,444,445,446,447,175,448,449,450,451,452,453,454,455,456,457,458,459,460,176,177,461,178,179,180,462,463,181,464,182,465,466,183,184,467,468,469,470,471,472,473,474,185,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,186,499,500,501,502,503,504,505,187,506,507,508,509,510,511,512,513,514,515,516,517,518,519,188,520,521,522,523,524,525,526,527,528,529,190,530,531,532,533,534,535,191,536,537,538,539,540,541,542,543,544,545,546,547,192,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,193,571,572,573,574,575,576,577,194,578,579,580,581,582,583,584,585,586,587,588,589,590,591,195,592,593,594,595,596,597,196,598,599,600,601,602,603,604,605,606,607,608,609,610,611,197,612,613,614,615,616,617,198,618,619,620,621,622,623,624,625,626,627,628,629,199,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,200,653,654,655,656,657,658,659,201,660,661,662,663,664,665,666,667,668,669,670,671,672,202,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,206,695,696,697,698,699,700,701,207,702,703,704,705,706,707,708,709,710,711,712,713,714,208,715,716,717,718,719,720,209,721,722,723,724,210,725,726],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.comparators.ComparatorChain:292","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().size()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:118","type":"CtReturnImpl"},"status":-1},{"failures":[727,728,729,730,731,732,733,734,735],"variableMapping":{"isLocked":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"if ((this.boolean) == false) {\n    this.boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<? extends E>.previous()","position":"org.apache.commons.collections4.iterators.FilterListIterator:264","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:84","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(\"End index must not be greater than the array length\")","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:88","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map must not be null\")","position":"org.apache.commons.collections4.map.AbstractMapDecorator:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap:96","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-2},{"failures":[736,737,738,739],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:322","type":"CtReturnImpl"},"status":-1},{"failures":[740],"binaryOperator":"(int <= 0)","name":"conditionalBoundary","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"mutation","status":-1},{"failures":[741,227],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:77","type":"CtReturnImpl"},"status":-1},{"failures":[261,262,118,263,264,742,265,266,267,119,268,269,743,270,271,272,120,273,274,744,275,139,282,284,285,286,745,287,746,140,141,142,143,144,315,145,747,748,749,750,147,751,752,753,754,148,755,756,757,155,340,342,344,345,347,349,156,351,352,230,159,378,380,382,383,385,387,389,160,390,391,758,163,164,411,165,166,167,412,168,169,170,171,759,173,437,439,440,441,760,442,761,174,443,445,446,447,762,175,448,763,176,177,461,178,179,180,462,181,182,183,184,764,187,508,510,512,513,515,517,519,188,520,521,765,527,528,529,190,530,531,532,534,191,538,539,766,194,580,582,584,585,587,589,591,195,592,593,767,609,610,611,197,612,613,614,616,198,620,621,768,201,662,664,666,667,669,671,202,673,674,769,770,771,772,773,774,775,776,777,778,779,682,207,704,706,708,709,711,713,208,715,716,780,719,720,209,721,722,781,723,210,782],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:130","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.map.DefaultedMap:193","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":490,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":491,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":623,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":340,"org.apache.commons.collections4.map.MultiValueMapTest.testMapEquals":779,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastValues":489,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastEntrySet":487,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesIteratorRemoveChangesMap":565,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":244,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_removeByIndex":402,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":440,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":36,"org.apache.commons.collections4.list.UnmodifiableListTest.testListListIterator":92,"org.apache.commons.collections4.map.MultiValueMapTest.testPutWithList":677,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapHashCode":533,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFullIterator":7,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":59,"org.apache.commons.collections4.map.ListOrderedMap2Test.testSerializeDeserializeThenCompare":764,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":41,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testSerializeDeserializeThenCompare":761,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":492,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":608,"org.apache.commons.collections4.MapUtilsTest.testLazyMapTransformer":258,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":8,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":98,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiTailMapContains":124,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRetainAll":435,"org.apache.commons.collections4.map.PredicatedMapTest.testMapHashCode":496,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":624,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetClearChangesMap":418,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":637,"org.apache.commons.collections4.ListUtilsTest.testLazyList":103,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains3":472,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains2":471,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveAll":516,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains1":470,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":109,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":167,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFirstKey":292,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":284,"org.apache.commons.collections4.map.TransformedMapTest.testValuesClearChangesMap":393,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapClear":529,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":447,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetIteratorRemoveChangesMap":350,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":520,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRetainAll":649,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":713,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":10,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":351,"org.apache.commons.collections4.map.LazyMapTest.testFailFastKeySet":684,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":666,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":39,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":78,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":178,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":443,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":218,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesClearChangesMap":467,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":530,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":188,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":209,"org.apache.commons.collections4.map.TransformedMapTest.testSerializeDeserializeThenCompare":758,"org.apache.commons.collections4.map.LazySortedMapTest.testMapHashCode":650,"org.apache.commons.collections4.map.TransformedSortedMapTest.testSerializeDeserializeThenCompare":757,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMakeMap":307,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":197,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveAll":376,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":771,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":120,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":234,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetIteratorRemoveChangesMap":388,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":285,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":192,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":547,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":546,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":755,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":742,"org.apache.commons.collections4.map.ListOrderedMapTest.testIndexOf":396,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":250,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveChangesMap":370,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastValues":459,"org.apache.commons.collections4.map.FixedSizeMapTest.testFullMapCompatibility":444,"org.apache.commons.collections4.map.MultiValueMapTest.testSerializeDeserializeThenCompare":682,"org.apache.commons.collections4.map.LazyMapTest.testFullMapCompatibility":707,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":168,"org.apache.commons.collections4.TransformerUtilsTest.testCloneTransformer":22,"org.apache.commons.collections4.map.MultiValueMapTest.testKeyedIterator":203,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":137,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":126,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove1":423,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove3":172,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove2":424,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":722,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFirstKey":453,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":62,"org.apache.commons.collections4.MapUtilsTest.testIterableMap":259,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":80,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":145,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRetainAll":710,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":282,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":281,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":640,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testSerializeDeserializeThenCompare":767,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveAll":348,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":27,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":621,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":612,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullKey":536,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":631,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":143,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullValue":504,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":314,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":437,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFullMapCompatibility":583,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":286,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastEntrySet":457,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":625,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":166,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":626,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":245,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":627,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveAll":480,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":118,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastEntrySet":407,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":749,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":606,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":538,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":187,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":45,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveAll":386,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":614,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSerializeDeserializeThenCompare":747,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testDecoratedMap":525,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":344,"org.apache.commons.collections4.map.DefaultedMapTest.testMapHashCode":328,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":241,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSize":524,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":237,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator_Key":204,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":139,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":240,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":300,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":501,"org.apache.commons.collections4.map.PredicatedMapTest.testFullMapCompatibility":511,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":68,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullKey":308,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveAll":338,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiTailMapContains":133,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRetainAll":392,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicate":739,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiHeadMapContains":130,"org.apache.commons.collections4.map.ListOrderedMapTest.testRemoveByIndex":397,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains3":688,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":55,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains2":687,"org.apache.commons.collections4.map.TransformedSortedMapTest.initializationError":318,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains1":686,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapHashCode":568,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenRemove":226,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping2":223,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping3":224,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetIteratorRemoveChangesMap":432,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesIteratorRemoveChangesMap":647,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":768,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":38,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastValues":359,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutAll":313,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetClearChangesMap":469,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveAll":484,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaKeyedIterator":205,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":142,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":635,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":773,"org.apache.commons.collections4.map.LazyMapTest.testKeySetIteratorRemoveChangesMap":714,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":347,"org.apache.commons.collections4.PredicateUtilsTest.testAllPredicate":231,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRetainAll":485,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":261,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":740,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorByIndex":66,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":611,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":302,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":153,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":74,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":52,"org.apache.commons.collections4.map.LazySortedMapTest.testFullMapCompatibility":665,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":196,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":704,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapClear":411,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastValues":321,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":157,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":262,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesClearChangesMap":417,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMakeMap":579,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":555,"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratorTest.testFullMapIterator":211,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":34,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":715,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":349,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiHeadMapContains":115,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapHashCode":413,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":13,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRetainAll":675,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":515,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":728,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":743,"org.apache.commons.collections4.map.PredicatedMapTest.testSerializeDeserializeThenCompare":765,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":101,"org.apache.commons.collections4.map.ListOrderedMap2Test.testIndexOf":451,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":517,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":117,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveAll":553,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesIteratorRemoveChangesMap":493,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveAll":697,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testFullMapCompatibility":724,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicate":106,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_getByIndex":400,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":148,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":622,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetIteratorRemoveChangesMap":698,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":275,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":274,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":448,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":51,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastEntrySet":357,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":267,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":48,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetClearChangesMap":542,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":387,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":17,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetClearChangesMap":331,"org.apache.commons.collections4.FactoryUtilsTest.testExceptionFactory":232,"org.apache.commons.collections4.map.TransformedMapTest.testMakeMap":377,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveChangesMap":654,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":263,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastKeySet":458,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesClearChangesMap":523,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":382,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":123,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRetainAll":427,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":673,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":776,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":193,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":570,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":669,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":569,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":82,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiSubMapContains":127,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":138,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":96,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":607,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":235,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testFullMapCompatibility":725,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":641,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":6,"org.apache.commons.collections4.map.TransformedSortedMapTest.testTransformedMap":146,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":748,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":12,"org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap":260,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":781,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":65,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveAll":670,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":87,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveAll":712,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":744,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":3,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":299,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":297,"org.apache.commons.collections4.map.LazyMapTest.testValuesClearChangesMap":718,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRetainAll":477,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":552,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":528,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":599,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":620,"org.apache.commons.collections4.map.UnmodifiableMapTest.testSerializeDeserializeThenCompare":746,"org.apache.commons.collections4.list.GrowthListTest.testListListIterator":67,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":632,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":591,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":602,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":601,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":600,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapGet":412,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":227,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetIteratorRemoveChangesMap":486,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":29,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastKeySet":320,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testSet":104,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":556,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRetainAll":327,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":638,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove3":185,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullValue":537,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove2":474,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":252,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":441,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":236,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":534,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":615,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":79,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove1":473,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFullMapCompatibility":438,"org.apache.commons.collections4.map.ListOrderedMapTest.testFullMapCompatibility":414,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":372,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":141,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":268,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":585,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":586,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":182,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetClearChangesMap":657,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":84,"org.apache.commons.collections4.map.PredicatedMapTest.testMakeMap":507,"org.apache.commons.collections4.map.ListOrderedMap2Test.testLastKey":454,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRetainAll":567,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":71,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":762,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":113,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":125,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":266,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":89,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveChangesMap":305,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":110,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveChangesMap":648,"org.apache.commons.collections4.FactoryUtilsTest.testPrototypeFactoryPublicCopyConstructor":21,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testContainsKey":189,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":389,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":122,"org.apache.commons.collections4.map.DefaultedMapTest.testMapClear":342,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesClearChangesMap":676,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":56,"org.apache.commons.collections4.map.FixedSizeMapTest.testSerializeDeserializeThenCompare":763,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":276,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":731,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":42,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":446,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":277,"org.apache.commons.collections4.map.LazySortedMapTest.testSerializeDeserializeThenCompare":769,"org.apache.commons.collections4.map.ListOrderedMapTest.testPreviousKey":406,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":191,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":278,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullValue":374,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":254,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":194,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":49,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":247,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":662,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":760,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":164,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveChangesMap":298,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRetainAll":522,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":86,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapHashCode":463,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":75,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":4,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":272,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":439,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":102,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":558,"org.apache.commons.collections4.map.LazyMapTest.testMapClear":706,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":575,"org.apache.commons.collections4.map.ListOrderedMapTest.testFirstKey":403,"org.apache.commons.collections4.MapUtilsTest.testPopulateMultiMap":107,"org.apache.commons.collections4.map.ListOrderedMap2Test.testNextKey":455,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastValues":409,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullKey":663,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":639,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":14,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":596,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":183,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":173,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRetainAll":554,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemovePrevious":72,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":391,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":425,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":592,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_setByIndex":401,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":165,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":750,"org.apache.commons.collections4.map.LazyMapTest.testKeySetClearChangesMap":695,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetIteratorRemoveChangesMap":518,"org.apache.commons.collections4.map.LazySortedMapTest.testLastKey":642,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":527,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":770,"org.apache.commons.collections4.map.LazyMapTest.testValuesIteratorRemoveChangesMap":689,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":531,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastKeySet":358,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":111,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":630,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastEntrySet":319,"org.apache.commons.collections4.map.LazySortedMapTest.testMakeMap":661,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":497,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testSerializeDeserializeThenCompare":782,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":77,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":186,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":498,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":312,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetByIndex":394,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":373,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":378,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":311,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetIteratorRemoveChangesMap":334,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":287,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullKey":415,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":253,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":519,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":269,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesIteratorRemoveChangesMap":428,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":616,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetIteratorRemoveChangesMap":672,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":242,"org.apache.commons.collections4.map.LazyMapTest.testValuesRetainAll":691,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":604,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":128,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":751,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":442,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveChangesMap":696,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetClearChangesMap":699,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveChangesMap":332,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":95,"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratorTest.testMapIteratorOrder":726,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveChangesMap":505,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":135,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":93,"org.apache.commons.collections4.map.DefaultedMapTest.testFullMapCompatibility":343,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveAll":549,"org.apache.commons.collections4.map.DefaultedMapTest.testSimpleSerialization":229,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveChangesMap":429,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":219,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":64,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":745,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testUnmodifiable":289,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":729,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":20,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":399,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetClearChangesMap":419,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullValue":700,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesClearChangesMap":595,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":151,"org.apache.commons.collections4.map.MultiValueMapTest.testPutWithSet":679,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":152,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":150,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":345,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":50,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":222,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveChangesMap":479,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemoveNext":76,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":279,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetIteratorRemoveChangesMap":482,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetIteratorRemoveChangesMap":436,"org.apache.commons.collections4.map.ListOrderedMapTest.testSerializeDeserializeThenCompare":759,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveAll":426,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":503,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveChangesMap":433,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":301,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":384,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":754,"org.apache.commons.collections4.map.TransformedMapTest.testFullMapCompatibility":381,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRetainAll":365,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testFullMapCompatibility":535,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":316,"org.apache.commons.collections4.map.SingletonMapTest.testSerializeDeserializeThenCompare":777,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testPreviousKey":290,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":617,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveChangesMap":690,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains1":543,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains2":544,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains3":545,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":734,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":667,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":475,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":618,"org.apache.commons.collections4.map.LazySortedMapTest.testFirstKey":643,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":30,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":11,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":574,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullKey":581,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":155,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveChangesMap":500,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":557,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":270,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":609,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":709,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":94,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":119,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullKey":705,"org.apache.commons.collections4.map.DefaultedMapTest.testSerializeDeserializeThenCompare":230,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":610,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":216,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":90,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":228,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":510,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":24,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains1":322,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":562,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains2":323,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":563,"org.apache.commons.collections4.map.UnmodifiableMapTest.testFullMapCompatibility":283,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains3":324,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":564,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":171,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveChangesMap":572,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRetainAll":668,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":735,"org.apache.commons.collections4.map.MultiValueMapTest.testRemove_KeyItem":778,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveChangesMap":659,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMakeMap":460,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":772,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":199,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullKey":509,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":629,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":628,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetClearChangesMap":468,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":176,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":233,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":580,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":28,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":170,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":720,"org.apache.commons.collections4.map.ListOrderedMap2Test.testPreviousKey":456,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":99,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":445,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetClearChangesMap":499,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":158,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":346,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":368,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":367,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveAll":430,"org.apache.commons.collections4.map.LazyMapTest.testFailFastValues":685,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiHeadMapContains":121,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove3":154,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove2":330,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":723,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove1":329,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":15,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveChangesMap":577,"org.apache.commons.collections4.map.TransformedMapTest.testValuesIteratorRemoveChangesMap":363,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":634,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":582,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":147,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_Decorate":356,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":61,"org.apache.commons.collections4.map.DefaultedMapTest.testMakeMap":339,"org.apache.commons.collections4.map.LazyMapTest.testSerializeDeserializeThenCompare":780,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":144,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":248,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":390,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveChangesMap":701,"org.apache.commons.collections4.map.ListOrderedMapTest.testPutAllWithIndexBug441":25,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testRemoveThenSet":105,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetByIndex":449,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":521,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":716,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetIteratorRemoveChangesMap":590,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveAll":578,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":513,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":238,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":251,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":265,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove3":149,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":598,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesIteratorRemoveChangesMap":325,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveChangesMap":337,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetClearChangesMap":369,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullValue":466,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRetainAll":717,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":198,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":584,"org.apache.commons.collections4.collection.IndexedCollectionTest.testEnsureDuplicateObjectsCauseException":108,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":1,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":317,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":708,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":711,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":246,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":69,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFullMapCompatibility":464,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":85,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetClearChangesMap":541,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapClear":309,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":53,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapClear":461,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":362,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":361,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":360,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains3":422,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":58,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains2":421,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":134,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains1":420,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":35,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testLastKey":560,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":174,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastKeySet":408,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":589,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":202,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nullValues":161,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetClearChangesMap":571,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":46,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nonNullValues":162,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testNextKey":293,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove1":651,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove2":652,"org.apache.commons.collections4.list.UnmodifiableListTest.testListListIteratorByIndex":91,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove3":200,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":0,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":159,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":255,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":633,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesClearChangesMap":540,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":181,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSerializeDeserializeThenCompare":766,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRetainAll":594,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":775,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":26,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullValue":416,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":593,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":256,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":371,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":249,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetIteratorRemoveChangesMap":656,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":597,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveAll":506,"org.apache.commons.collections4.map.LazyMapTest.testMapHashCode":692,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_decorateTransform":355,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":502,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":184,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":207,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":752,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":163,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":177,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":201,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":573,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":210,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveAll":434,"org.apache.commons.collections4.map.TransformedMapTest.testMapHashCode":366,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":605,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":294,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":296,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":295,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFullMapCompatibility":310,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveChangesMap":364,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":132,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetClearChangesMap":335,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRetainAll":353,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":9,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullValue":576,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetValueByIndex":395,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveChangesMap":548,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":31,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":129,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":2,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":23,"org.apache.commons.collections4.map.ListOrderedMapTest.testNextKey":405,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testMapIterator":741,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":753,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":239,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":5,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove3":206,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":280,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveChangesMap":494,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveAll":588,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove1":693,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove2":694,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":220,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetClearChangesMap":653,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":619,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":43,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":140,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":112,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":733,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":114,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":156,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemoveNext":70,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRetainAll":550,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":37,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testReset":225,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":33,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":380,"org.apache.commons.collections4.map.MultiValueMapTest.testSize":678,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRetainAll":495,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullValue":336,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveChangesMap":375,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRetainAll":431,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":221,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":217,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapGet":462,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveAll":476,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetValueByIndex":450,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":88,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains1":644,"org.apache.commons.collections4.map.ListOrderedMapTest.testMakeMap":410,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains2":645,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullKey":465,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":271,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains3":646,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesClearChangesMap":354,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":175,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":559,"org.apache.commons.collections4.map.LazyMapTest.testFailFastEntrySet":683,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":16,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMakeMap":526,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":774,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":674,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":100,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullValue":658,"org.apache.commons.collections4.map.ListOrderedMapTest.testLastKey":404,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":215,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":60,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":44,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":512,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":195,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":54,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":190,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":40,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":243,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":169,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullKey":341,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":160,"org.apache.commons.collections4.map.LazySortedMapTest.testMapClear":664,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":116,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveAll":655,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":732,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveChangesMap":326,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":73,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":306,"org.apache.commons.collections4.map.ListOrderedMap2Test.testRemoveByIndex":452,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastKeySet":488,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":257,"org.apache.commons.collections4.map.ListOrderedMapTest.testSetValueByIndex":398,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveChangesMap":566,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":636,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":539,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":81,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":730,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":208,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesIteratorRemoveChangesMap":551,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":179,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":47,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":727,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":721,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map2":681,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":352,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map1":680,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":83,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":57,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveAll":702,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":671,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":385,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":212,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":508,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":213,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":214,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRetainAll":481,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":97,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullKey":379,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":180,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemovePrevious":63,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullValue":304,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":32,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":291,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":756,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":19,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":18,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx2":737,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx1":736,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx3":738,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFirstKey":561,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":383,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":514,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":264,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":273,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":288,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":587,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":333,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":719,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":131,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiSubMapContains":136,"org.apache.commons.collections4.map.LazyMapTest.testMakeMap":703,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":603,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":532,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":303,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":613,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesIteratorRemoveChangesMap":478,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveChangesMap":483,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveAll":660,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":315}}]

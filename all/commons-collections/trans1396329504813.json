[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((int) < 0) {\n    (int)++;\n} ","position":"org.apache.commons.collections4.list.TreeList:645","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<E>.hasNext()) {\n    E = java.util.ListIterator<E>.next();\n}","position":"org.apache.commons.collections4.iterators.LoopingListIterator:146","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1262","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1634","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:109","type":"CtThrowImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.ref.Reference<?> java.lang.ref.Reference<?> = java.lang.ref.ReferenceQueue<java.lang.Object>.poll()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:379","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:104","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:143","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:85","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.UnmodifiableListIterator.org.apache.commons.collections4.iterators.UnmodifiableListIterator.umodifiableListIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator())","position":"org.apache.commons.collections4.list.UnmodifiableList:114","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return 1","position":"org.apache.commons.collections4.map.SingletonMap:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.AbstractListDecorator:83","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.map.StaticBucketMap.this.size()","position":"org.apache.commons.collections4.map.StaticBucketMap:561","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-2},{"failures":[9],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceKeySetIterator<K>(this)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:492","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:81","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (T) == T","position":"org.apache.commons.collections4.functors.IdentityPredicate:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.lengthInBits(K)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:134","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:55","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.apache.commons.collections4.map.Flat3Map:1246","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:152","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:80","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:239","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.apache.commons.collections4.Transformer<? super T, ? extends T> org.apache.commons.collections4.Transformer<? super T, ? extends T> : org.apache.commons.collections4.Transformer<? super T, ? extends T>[]) {\n    T = org.apache.commons.collections4.Transformer<? super T, ? extends T>.transform(T);\n}","position":"org.apache.commons.collections4.functors.ChainedTransformer:111","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.iterators.FilterListIterator:134","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.IteratorChain:254","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.apache.commons.collections4.ArrayStack<E>.isEmpty()) ? org.apache.commons.collections4.ArrayStack<E>.pop() : java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.PushbackIterator:96","type":"CtReturnImpl"},"status":-2},{"failures":[10,11],"variableMapping":{"start":"callCounter","maxElements":"callCounter"},"name":"add","transplant":{"sourceCode":"if ((this.int) >= (this.int)) {\n    this.int = 0;\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:310","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int) == 0) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if ((java.util.Iterator<? extends E>) == null) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n        boolean = true;\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:83","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.Closure<?>[][int]) == null) {\n    throw new java.lang.IllegalArgumentException(((\"The closure array must not contain a null closure, index \" + int) + \" was null\"));\n} ","position":"org.apache.commons.collections4.functors.FunctorUtils:139","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String))","position":"org.apache.commons.collections4.PredicateUtils:213","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator()","position":"org.apache.commons.collections4.set.CompositeSet:148","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:220","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (boolean) || org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())","position":"org.apache.commons.collections4.iterators.FilterListIterator:125","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:312","type":"mutation","status":-2},{"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.AbstractHashedMap:1085","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:60","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"array":"object"},"name":"add","transplant":{"sourceCode":"return T[]","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:161","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[]);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:163","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if (java.util.Iterator<?> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} ","position":"org.apache.commons.collections4.IteratorUtils:956","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int","position":"org.apache.commons.collections4.SetUtils:151","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:244","type":"CtAssignmentImpl"},"status":-2},{"failures":[217,218,219,220,221,222,223,224,225,226,227],"binaryOperator":"((boolean) == false)","name":"negateConditional","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:187","type":"mutation","status":-1},{"failures":[],"binaryOperator":"((((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K) + \" value=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:325","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.EntrySet()","position":"org.apache.commons.collections4.map.StaticBucketMap:369","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"transformer must not be null\")","position":"org.apache.commons.collections4.map.DefaultedMap:167","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((int) < 0) {\n    (int)++;\n} ","position":"org.apache.commons.collections4.list.TreeList:596","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:221","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullPredicate.org.apache.commons.collections4.functors.NullPredicate.<T>nullPredicate()","position":"org.apache.commons.collections4.functors.IdentityPredicate:48","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return (int) < (int)","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (this.int) < (this.int)","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:111","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"removed":"nextObjectSet","beforeFirst":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"return (this.boolean) && (!(this.boolean))","position":"org.apache.commons.collections4.iterators.SingletonIterator:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:176","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.DefaultedMap<K, V>.this(org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.constantTransformer(V))","position":"org.apache.commons.collections4.map.DefaultedMap:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * A node used to store the data.\n */\nstatic class Node<K extends java.lang.Comparable<K>, V extends java.lang.Comparable<V>> implements java.util.Map.Entry<K, V> , org.apache.commons.collections4.KeyValue<K, V> {\n    private final K key;\n\n    private final V value;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] leftNode;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] rightNode;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] parentNode;\n\n    private final boolean[] blackColor;\n\n    private int hashcodeValue;\n\n    private boolean calculatedHashCode;\n\n    /** \n     * Make a new cell with given key and value, and with null\n     * links, and black (true) colors.\n     * \n     * @param key\n     * @param value\n     */\n@java.lang.SuppressWarnings(value = \"unchecked\")\n    Node(final K key ,final V value) {\n        java.lang.Object.super();\n        this.K = K;\n        this.V = V;\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        boolean[] = new boolean[]{ true , true };\n        boolean = false;\n    }\n\n    private java.lang.Object getData(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        switch (org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) {\n            case KEY :\n                return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey();\n            case VALUE :\n                return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue();\n            default :\n                throw new java.lang.IllegalArgumentException();\n        }\n    }\n\n    private void setLeft(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getLeft(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    private void setRight(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getRight(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Set this node's parent node.\n     * \n     * @param node  the new parent node\n     * @param index  the KEY or VALUE int\n     */\nprivate void setParent(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    /** \n     * Get the parent node.\n     * \n     * @param index  the KEY or VALUE int\n     * @return the parent node, may be null\n     */\nprivate org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getParent(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Exchange colors with another node.\n     * \n     * @param node  the node to swap with\n     * @param index  the KEY or VALUE int\n     */\nprivate void swapColors(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Is this node black?\n     * \n     * @param index  the KEY or VALUE int\n     * @return true if black (which is represented as a true boolean)\n     */\nprivate boolean isBlack(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Is this node red?\n     * \n     * @param index  the KEY or VALUE int\n     * @return true if non-black\n     */\nprivate boolean isRed(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return !(boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]);\n    }\n\n    /** \n     * Make this node black.\n     * \n     * @param index  the KEY or VALUE int\n     */\nprivate void setBlack(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = true;\n    }\n\n    /** \n     * Make this node red.\n     * \n     * @param index  the KEY or VALUE int\n     */\nprivate void setRed(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = false;\n    }\n\n    /** \n     * Make this node the same color as another\n     * \n     * @param node  the node whose color we're adopting\n     * @param index  the KEY or VALUE int\n     */\nprivate void copyColor(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    private boolean isLeftChild(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) != null) && ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()].org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) == this);\n    }\n\n    private boolean isRightChild(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) != null) && ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()].org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) == this);\n    }\n\n    /** \n     * Gets the key.\n     * \n     * @return the key corresponding to this entry.\n     */\npublic K getKey() {\n        return K;\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value corresponding to this entry.\n     */\npublic V getValue() {\n        return V;\n    }\n\n    /** \n     * Optional operation that is not permitted in this implementation\n     * \n     * @param ignored\n     * @return does not return\n     * @throws UnsupportedOperationException always\n     */\npublic V setValue(final V ignored) throws java.lang.UnsupportedOperationException {\n        throw new java.lang.UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n    }\n\n    /** \n     * Compares the specified object with this entry for equality.\n     * Returns true if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     * \n     * @param obj  the object to be compared for equality with this entry.\n     * @return true if the specified object is equal to this entry.\n     */\n@java.lang.Override\n    public boolean equals(final java.lang.Object obj) {\n        if (java.lang.Object == this) {\n            return true;\n        } \n        if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n            return false;\n        } \n        final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(java.lang.Object));\n        return (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().equals(java.util.Map.Entry<?, ?>.getKey())) && (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue().equals(java.util.Map.Entry<?, ?>.getValue()));\n    }\n\n    /** \n     * @return the hash code value for this map entry.\n     */\n@java.lang.Override\n    public int hashCode() {\n        if (!(boolean)) {\n            int = (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().hashCode()) ^ (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue().hashCode());\n            boolean = true;\n        } \n        return int;\n    }\n}","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1825","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[])","position":"org.apache.commons.collections4.functors.InstantiateFactory:126","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Character.java.lang.Character.valueOf(java.lang.CharSequence.charAt(int))","position":"org.apache.commons.collections4.ListUtils:622","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().lastIndexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.FixedSizeList:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int += int","position":"org.apache.commons.collections4.list.AbstractLinkedList:1014","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Factory<T>)(new org.apache.commons.collections4.functors.PrototypeFactory.PrototypeSerializationFactory<java.io.Serializable>(((java.io.Serializable)(T)))))","position":"org.apache.commons.collections4.functors.PrototypeFactory:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.PrototypeFactory.org.apache.commons.collections4.functors.PrototypeFactory.<T>prototypeFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:106","type":"CtReturnImpl"},"status":-2},{"failures":[228,229,230,231,232,233,234,235,236,237,238],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:130","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:136","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.LazySortedMap:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"status":-2},{"failures":[0,1,239,2,240,241,3,242,4,243,244,245,5,246,247,248,249,250,251,252,253,6,254,255,256,257,258,259,260,261,262,263,264],"variableMapping":{"lastReturned":"index"},"name":"replace","transplant":{"sourceCode":"if (int == (-1)) {\n    throw new java.lang.IllegalStateException(\"No value can be removed at present\");\n} ","position":"org.apache.commons.collections4.iterators.CollatingIterator:269","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = 0","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:265","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.TransformedSortedSet<E>.getSortedSet().comparator()","position":"org.apache.commons.collections4.set.TransformedSortedSet:125","type":"CtReturnImpl"},"status":-2},{"failures":[265,266,267,268,269,270],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The predicate and closure arrays must be the same size\")","position":"org.apache.commons.collections4.functors.SwitchClosure:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.ArrayIterator:148","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>[][0]","position":"org.apache.commons.collections4.functors.AllPredicate:85","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NonePredicate.org.apache.commons.collections4.functors.NonePredicate.nonePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:422","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasNext()) == false) {\n    return 0;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:112","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:961","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.Comparator<? super E> java.util.Comparator<? super E> = ((java.util.Comparator<? super E>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.bag.TreeBag:128","type":"CtLocalVariableImpl"},"status":-2},{"failures":[12,13,14,15,16,271,17,57,58,59,60,61,272,62,66,67,68,69,70,273,71,124,125,126,127,128,274,129,275,276,277,278,279,280,281,282,283,284,285,286,287,131,132,288,133,134,135,289,136,137,138,139,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,156,157,311,158,159,161,162,312,163,164,165,313,169,170,171,172,173,314,174,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,183,184,342,185,186,188,189,343,190,191,192,344,195,196,197,198,199,345,200,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,207,208,370,209,210,212,213,371,214,215,216,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object instanceof org.apache.commons.collections4.keyvalue.DefaultKeyValue) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:130","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:130","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (org.apache.commons.collections4.Predicate<? super V>) != null","position":"org.apache.commons.collections4.map.PredicatedMap:174","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:107","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.set.UnmodifiableSet<E>(java.util.Set<? extends E>)","position":"org.apache.commons.collections4.set.UnmodifiableSet:58","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Map<K, V>.size()","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:139","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.EnumerationIterator:93","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.purge(java.lang.ref.Reference<?>)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:149","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.UnmodifiableEntrySet.org.apache.commons.collections4.map.UnmodifiableEntrySet.unmodifiableEntrySet(java.util.Set<java.util.Map.Entry<K, V>>)","position":"org.apache.commons.collections4.map.UnmodifiableMap:144","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) - 1","position":"org.apache.commons.collections4.iterators.FilterListIterator:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[])","position":"org.apache.commons.collections4.functors.InstantiateFactory:126","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this.E[][(this.int)++]","position":"org.apache.commons.collections4.iterators.ObjectArrayListIterator:128","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:87","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.apache.commons.collections4.trie.KeyAnalyzer.(org.apache.commons.collections4.trie.KeyAnalyzer.isOutOfBoundsIndex(int))) {\n    if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isValidBitIndex(int)) {\n        final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = new org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>(K , V , int);\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, int);\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n        return null;\n    } else if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isNullBitKey(int)) {\n        if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize();\n        } else {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n        }\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n    } else if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(int)) {\n        if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)) {\n            org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementModCount();\n            return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.setKeyValue(K, V);\n        } \n    } \n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:158","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:77","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"status":-2},{"failures":[402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-1},{"failures":[426,427,428],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NotPredicate.org.apache.commons.collections4.functors.NotPredicate.notPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:452","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.io.ObjectInputStream.readInt()","position":"org.apache.commons.collections4.bag.AbstractMapBag:523","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().poll()","position":"org.apache.commons.collections4.queue.PredicatedQueue:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.DefaultedMap:181","type":"CtInvocationImpl"},"status":-2},{"failures":[429],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:65","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Size must be greater than 0\")","position":"org.apache.commons.collections4.ListUtils:659","type":"CtThrowImpl"},"status":-1},{"failures":[430,431],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:145","type":"CtInvocationImpl"},"status":-1},{"failures":[432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:176","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.comparators.ComparatorChain<E>.checkLocked()","position":"org.apache.commons.collections4.comparators.ComparatorChain:150","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>(org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.entrySet())","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:104","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:255","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.DefaultedMap<K, V>.this(new java.util.HashMap<K, V>(), org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"predicate1":"predicate2","predicate2":"predicate2","this":"this"},"name":"add","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.<T>nonePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:405","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"status":-2},{"failures":[457,453],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:130","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().retainAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:181","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ","position":"org.apache.commons.collections4.iterators.PeekingIterator:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.FilterListIterator:137","type":"CtReturnImpl"},"status":-2},{"failures":[458,459,460,461,462,463,464,465,466],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\")","position":"org.apache.commons.collections4.comparators.ComparatorChain:252","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractHashedMap.KeySetIterator<K>(this)","position":"org.apache.commons.collections4.map.AbstractHashedMap:920","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:116","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:665","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:212","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>","position":"org.apache.commons.collections4.list.CursorableLinkedList:481","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:127","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"return java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.LoopingIterator:90","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.apache.commons.collections4.ArrayStack<E>.isEmpty()) ? org.apache.commons.collections4.ArrayStack<E>.pop() : java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.PushbackIterator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Inner class View.\n */\nprotected abstract static class View<K, V, E> extends org.apache.commons.collections4.collection.AbstractCollectionDecorator<E> {\n    /** \n     * Generated serial version ID.\n     */\nprivate static final long serialVersionUID = 4621510560119690639L;\n\n    /** \n     * The parent map\n     */\nprotected final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> parent;\n\n    /** \n     * Constructs a new view of the BidiMap.\n     * \n     * @param coll  the collection view being decorated\n     * @param parent  the parent BidiMap\n     */\nprotected View(final java.util.Collection<E> coll ,final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> parent) {\n        org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.super(java.util.Collection<E>);\n        this.org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> = org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>;\n    }\n\n    @java.lang.Override\n    public boolean removeAll(final java.util.Collection<?> coll) {\n        if ((org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.isEmpty()) || (java.util.Collection<?>.isEmpty())) {\n            return false;\n        } \n        boolean boolean = false;\n        final java.util.Iterator<?> java.util.Iterator<?> = java.util.Collection<?>.iterator();\n        while (java.util.Iterator<?>.hasNext()) {\n            boolean |= org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.remove(java.util.Iterator<?>.next());\n        }\n        return boolean;\n    }\n\n    /** \n     * {@inheritDoc}\n     * <p>\n     * This implementation iterates over the elements of this bidi map, checking each element in\n     * turn to see if it's contained in <code>coll<\/code>. If it's not contained, it's removed\n     * from this bidi map. As a consequence, it is advised to use a collection type for\n     * <code>coll<\/code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     */\n@java.lang.Override\n    public boolean retainAll(final java.util.Collection<?> coll) {\n        if (org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.isEmpty()) {\n            return false;\n        } \n        if (java.util.Collection<?>.isEmpty()) {\n            org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.clear();\n            return true;\n        } \n        boolean boolean = false;\n        final java.util.Iterator<E> java.util.Iterator<E> = org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.iterator();\n        while (java.util.Iterator<E>.hasNext()) {\n            if ((java.util.Collection<?>.contains(java.util.Iterator<E>.next())) == false) {\n                java.util.Iterator<E>.remove();\n                boolean = true;\n            } \n        }\n        return boolean;\n    }\n\n    @java.lang.Override\n    public void clear() {\n        org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.clear();\n    }\n}","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:326","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.constantTransformer(V))","position":"org.apache.commons.collections4.map.DefaultedMap:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.SynchronizedCollection:73","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:108","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[467,468,469,470,471,472,473,474,475],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:99","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][int]","position":"org.apache.commons.collections4.map.MultiKeyMap:478","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:86","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.queue.CircularFifoQueue.this.remove()","position":"org.apache.commons.collections4.queue.CircularFifoQueue:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterIterator:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.list.AbstractLinkedList:342","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"start":"iCount","maxElements":"iCount"},"name":"add","transplant":{"sourceCode":"if ((this.int) >= (this.int)) {\n    this.int = 0;\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:310","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final E E = java.util.ListIterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.FilterListIterator:232","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.ListIterator<?> java.util.ListIterator<?> = ((java.util.ListIterator<?>)(java.util.Iterator<? extends E>))","position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:125","type":"CtLocalVariableImpl"},"status":-2},{"failures":[476,477],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:109","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.sequence.EditScript<E>.visit(org.apache.commons.collections4.ListUtils.LcsVisitor<E>)","position":"org.apache.commons.collections4.ListUtils:558","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure must not be null\")","position":"org.apache.commons.collections4.functors.ClosureTransformer:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Number == null) {\n    java.lang.Number = java.lang.Number;\n} ","position":"org.apache.commons.collections4.MapUtils:428","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":201,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":202,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":233,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":42,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":348,"org.apache.commons.collections4.map.MultiValueMapTest.testMapEquals":328,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":109,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":285,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":169,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testFailFastEntrySet":79,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":165,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":251,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":36,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":86,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":191,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":443,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":172,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":248,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":361,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":288,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":330,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":385,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":335,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":462,"org.apache.commons.collections4.map.ListOrderedMap2Test.testSerializeDeserializeThenCompare":287,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testSerializeDeserializeThenCompare":315,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testDecorateFactory":418,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":203,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testSerializeDeserializeThenCompare":310,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":204,"org.apache.commons.collections4.PredicateUtilsTest.testNotPredicate":426,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":228,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":157,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":110,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":129,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":452,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":371,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":70,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":380,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":363,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":441,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":47,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":126,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapClear":332,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":397,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":26,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":105,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":215,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains3":115,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains2":114,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains1":113,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":45,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":322,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":134,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":230,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":174,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":355,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":294,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":250,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":279,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":394,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":99,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":223,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":334,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":224,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":214,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":304,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":274,"org.apache.commons.collections4.map.TransformedMapTest.testSerializeDeserializeThenCompare":313,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":1,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":469,"org.apache.commons.collections4.map.TransformedSortedMapTest.testSerializeDeserializeThenCompare":290,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":376,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":386,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":59,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":433,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":351,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":227,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":257,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":127,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":138,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":271,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":242,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":449,"org.apache.commons.collections4.map.ListOrderedMapTest.testSerializeDeserializeThenCompare":369,"org.apache.commons.collections4.map.MultiValueMapTest.testSerializeDeserializeThenCompare":329,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":365,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":160,"org.apache.commons.collections4.BagUtilsTest.testTransformedSortedBag":425,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":136,"org.apache.commons.collections4.list.UnmodifiableListTest.testDecorateFactory":406,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":30,"org.apache.commons.collections4.CollectionUtilsTest.filterInverse":428,"org.apache.commons.collections4.map.SingletonMapTest.testSerializeDeserializeThenCompare":392,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":75,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":474,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":306,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testDecorateFactory":408,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemoveAll":95,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":295,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove1":34,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove2":35,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection":414,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableBag":421,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableSortedBag":423,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":200,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":231,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":182,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":56,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":347,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":71,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":125,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":320,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":373,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":239,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":7,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":68,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":104,"org.apache.commons.collections4.map.DefaultedMapTest.testSerializeDeserializeThenCompare":357,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":374,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testSerializeDeserializeThenCompare":344,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":221,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":477,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":85,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":370,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":383,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":377,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":270,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":175,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":176,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":177,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":368,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":475,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":81,"org.apache.commons.collections4.map.MultiValueMapTest.testRemove_KeyItem":327,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":198,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":387,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetIteratorRemoveChangesMap":148,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":170,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":276,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":128,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":432,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":184,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":362,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":444,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":2,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains1":89,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":243,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":367,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":303,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains3":91,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains2":90,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":14,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":395,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":153,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":152,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":25,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":112,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":132,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":308,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":234,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testDecorateFactory":409,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":339,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":29,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":207,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveAll":146,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove1":52,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove2":53,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":6,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":342,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":133,"org.apache.commons.collections4.map.LazyMapTest.testSerializeDeserializeThenCompare":326,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":379,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testSerializeDeserializeThenCompare":346,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":199,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":447,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":350,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":164,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":32,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":33,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testRemoveThenSet":431,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":440,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":83,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":216,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":437,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemoveAll":119,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":41,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":325,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":124,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":27,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":439,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":210,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":167,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":438,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains3":168,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":205,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":166,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":450,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":459,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":17,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove3":145,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove1":143,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove2":144,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":49,"org.apache.commons.collections4.CollectionUtilsTest.testUnmodifiableCollection":416,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":24,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":381,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetIteratorRemoveChangesMap":121,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiModifyEntrySet":78,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":82,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":185,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":262,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":465,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":11,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":457,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":267,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":384,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":249,"org.apache.commons.collections4.set.ListOrderedSetTest.testDecorator":410,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":319,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":321,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":445,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":197,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":101,"org.apache.commons.collections4.BagUtilsTest.testTransformedBag":420,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":265,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":266,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testDecorateFactory":417,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":269,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":260,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":388,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":38,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapClear":278,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":151,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":150,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":352,"org.apache.commons.collections4.SetUtilsTest.testpredicatedSet":402,"org.apache.commons.collections4.QueueUtilsTest.testPredicatedQueue":404,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":12,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":375,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":8,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":259,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":247,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove1":92,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiModifyEntrySet":102,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove2":93,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":189,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":393,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove3":94,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":298,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":254,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":317,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove3":118,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove2":117,"org.apache.commons.collections4.ListUtilsTest.testPartition":429,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove1":116,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapClear":360,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":13,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":149,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains1":18,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains3":20,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains2":19,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":10,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":156,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":454,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":246,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":324,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":37,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":283,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSerializeDeserializeThenCompare":341,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":353,"org.apache.commons.collections4.set.UnmodifiableSetTest.testDecorateFactory":412,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":463,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":390,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":23,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":212,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":40,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":468,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":273,"org.apache.commons.collections4.map.PredicatedMapTest.testSerializeDeserializeThenCompare":372,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":0,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":54,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":213,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":192,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":84,"org.apache.commons.collections4.BagUtilsTest.testPredicatedBag":422,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":154,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":455,"org.apache.commons.collections4.QueueUtilsTest.testUnmodifiableQueue":403,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":448,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":107,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRetainAll":120,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":206,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":286,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":137,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":22,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":135,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":316,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":358,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":5,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":62,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":277,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":291,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":61,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":181,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":400,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":460,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":258,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":67,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":255,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":162,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":253,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":309,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":236,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":111,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":193,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":194,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":15,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":77,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":98,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":158,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":229,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":74,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":299,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":391,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":180,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":179,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":296,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":178,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":4,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":76,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":88,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":466,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":100,"org.apache.commons.collections4.QueueUtilsTest.testTransformedQueue":405,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":289,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":48,"org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection":415,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":435,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":434,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":3,"org.apache.commons.collections4.map.TransformedSortedMapTest.testTransformedMap":130,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":131,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":225,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":232,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":106,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":51,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":195,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":50,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":307,"org.apache.commons.collections4.BagUtilsTest.testPredicatedSortedBag":424,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":473,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":241,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":354,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRetainAll":147,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":464,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":272,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":245,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":311,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":44,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":122,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":123,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":331,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":226,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":382,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":222,"org.apache.commons.collections4.map.UnmodifiableMapTest.testSerializeDeserializeThenCompare":275,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":80,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":343,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":97,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":458,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapGet":282,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapGet":364,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":476,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testSet":430,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":57,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":43,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":399,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":461,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testDecorateFactory":411,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":451,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":173,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":436,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":235,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":389,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":300,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":337,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":220,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":240,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":252,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":209,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":155,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":190,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":261,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":333,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":196,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":442,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":366,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":65,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":64,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":63,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":69,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":186,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":163,"org.apache.commons.collections4.map.LazySortedMapTest.testMapClear":293,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testDecorate":407,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":187,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":472,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":284,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":46,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":456,"org.apache.commons.collections4.ListUtilsTest.testPredicatedList":413,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":9,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":340,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":470,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":398,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":323,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":66,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRetainAll":96,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":280,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":467,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testFailFastEntrySet":103,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":305,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":356,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains1":140,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains3":142,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":312,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains2":141,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":264,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":87,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":297,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":161,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":28,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":208,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":217,"org.apache.commons.collections4.map.DefaultedMapTest.testMapClear":349,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":218,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":219,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":263,"org.apache.commons.collections4.map.FixedSizeMapTest.testSerializeDeserializeThenCompare":401,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":471,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":396,"org.apache.commons.collections4.map.LazySortedMapTest.testSerializeDeserializeThenCompare":301,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":281,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":338,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":244,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":139,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":72,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":238,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":55,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":73,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":453,"org.apache.commons.collections4.PredicateUtilsTest.testNotPredicateEx":427,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":183,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":237,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":256,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":446,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testDecorateFactory":419,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":292,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":159,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":211,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":314,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":16,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":359,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":60,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":188,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":302,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":31,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":21,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":268,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":336,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":108,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":58,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":378,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":171,"org.apache.commons.collections4.map.LazyMapTest.testMapClear":318,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":39,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":345}}]

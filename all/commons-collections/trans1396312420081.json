[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TransformedBag.org.apache.commons.collections4.bag.TransformedBag.transformingBag(org.apache.commons.collections4.Bag<E>, org.apache.commons.collections4.Transformer<? super E, ? extends E>)","position":"org.apache.commons.collections4.BagUtils:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E);\n} catch (final java.lang.RuntimeException java.lang.RuntimeException) {\n    throw java.lang.RuntimeException;\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable);\n}","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:59","type":"CtTryImpl"},"status":-2},{"failures":[0],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Attempted to add null object to queue\")","position":"org.apache.commons.collections4.queue.CircularFifoQueue:227","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Iterator<? extends E>) instanceof java.util.ListIterator) {\n    final java.util.ListIterator<?> java.util.ListIterator<?> = ((java.util.ListIterator<?>)(java.util.Iterator<? extends E>));\n    return java.util.ListIterator<?>.hasPrevious();\n} ","position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.list.AbstractLinkedList:356","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:152","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.bag.AbstractMapBag.BagIterator<E>(this)","position":"org.apache.commons.collections4.bag.AbstractMapBag:168","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.iterators.UnmodifiableIterator.org.apache.commons.collections4.iterators.UnmodifiableIterator.unmodifiableIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().iterator())","position":"org.apache.commons.collections4.list.FixedSizeList:108","type":"CtReturnImpl"},"status":-2},{"failures":[43,44,45],"variableMapping":{"items":"items"},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.ArrayStack<E>.pop()","position":"org.apache.commons.collections4.iterators.PushbackIterator:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<E>.push(E)","position":"org.apache.commons.collections4.iterators.PushbackIterator:88","type":"CtInvocationImpl"},"status":-1},{"failures":[46,47,48,49],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:41","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"remove() method is not supported\")","position":"org.apache.commons.collections4.iterators.ArrayIterator:159","type":"CtThrowImpl"},"status":-1},{"failures":[50,51,52,53,54,55,56,57],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.hashCode()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:81","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new java.util.ArrayList<E>(this)","position":"org.apache.commons.collections4.collection.CompositeCollection:391","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().values()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:122","type":"CtReturnImpl"},"status":-2},{"failures":[58],"variableMapping":{"object":"key"},"name":"replace","transplant":{"sourceCode":"return (((java.util.Iterator<?>)(java.lang.Object)).hasNext()) == false","position":"org.apache.commons.collections4.CollectionUtils:1392","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:64","type":"CtReturnImpl"},"status":-1},{"failures":[59],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return (java.util.List<E>.size()) - 1","position":"org.apache.commons.collections4.iterators.LoopingListIterator:172","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (java.util.List<E>.size()) ; int++) {\n    final E E = java.util.List<E>.get(int);\n    if (org.apache.commons.collections4.Predicate<E>.evaluate(E)) {\n        return int;\n    } \n}","position":"org.apache.commons.collections4.ListUtils:510","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<K, V> = ((java.util.Map<K, V>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.map.UnmodifiableSortedMap:105","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.SwitchTransformer.org.apache.commons.collections4.functors.SwitchTransformer.<I,O>switchTransformer(org.apache.commons.collections4.Predicate<? super I>[], org.apache.commons.collections4.Transformer<? super I, ? extends O>[], org.apache.commons.collections4.Transformer<? super I, ? extends O>)","position":"org.apache.commons.collections4.TransformerUtils:276","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.util.NoSuchElementException(\"No more elements in the iteration\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"CtIfImpl"},"status":-2},{"failures":[60],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(E)","position":"org.apache.commons.collections4.list.LazyList:131","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, java.lang.Object>.remove(java.lang.Object)","position":"org.apache.commons.collections4.map.MultiValueMap:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-2},{"failures":[61,62,63,64,65,66,67,68,69,70,71],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Iterator<?>)(java.lang.Object))","position":"org.apache.commons.collections4.CollectionUtils:1341","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterIterator:179","type":"CtReturnImpl"},"status":-1},{"failures":[72,73,74],"variableMapping":{"array":"object"},"name":"replace","transplant":{"sourceCode":"return T[]","position":"org.apache.commons.collections4.list.AbstractLinkedList:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.SynchronizedCollection:164","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:239","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String.startsWith(java.lang.String)","position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:134","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:97","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.Flat3Map.FlatMapIterator<K, V>.getKey()","position":"org.apache.commons.collections4.map.Flat3Map:642","type":"CtReturnImpl"},"status":-2},{"failures":[75],"variableMapping":{"decorated":"decorated"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.CompositeMap:298","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"o1":"object","c":"index","o2":"object"},"name":"add","transplant":{"sourceCode":"return int < 0 ? E : E","position":"org.apache.commons.collections4.ComparatorUtils:220","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap<V, K>.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap<K, V> = this","position":"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    if ((E) == null) {\n    } else {\n        if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n        } else {\n            org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n        }\n        E = null;\n    }\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:140","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionPredicate.org.apache.commons.collections4.functors.ExceptionPredicate.<T>exceptionPredicate()","position":"org.apache.commons.collections4.PredicateUtils:91","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (T == null) {\n    return org.apache.commons.collections4.functors.NullPredicate.org.apache.commons.collections4.functors.NullPredicate.<T>nullPredicate();\n} ","position":"org.apache.commons.collections4.functors.IdentityPredicate:47","type":"CtIfImpl"},"status":-2},{"failures":[76,77],"variableMapping":{"lastUsedIterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"Iterator[]\"","position":"org.apache.commons.collections4.map.AbstractHashedMap:1203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().toString()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:140","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"K = org.apache.commons.collections4.map.TransformedMap<K, V>.transformKey(K)","position":"org.apache.commons.collections4.map.TransformedMap:235","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"iClosure":"closure"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.Closure<? super E>","position":"org.apache.commons.collections4.functors.ClosureTransformer:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.Closure<E>)(org.apache.commons.collections4.Closure<? super E>))","position":"org.apache.commons.collections4.functors.ForClosure:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.set.UnmodifiableSet:101","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:168","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(lookupValue(java.lang.Object)) != null","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1513","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:86","type":"CtInvocationImpl"},"status":-2},{"failures":[61,62,63,64,65,66,67,68,78,69,70,71],"variableMapping":{"foundCurrentElement":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"if (boolean) {\n    continue;\n} else {\n    return false;\n}","position":"org.apache.commons.collections4.CollectionUtils:387","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:176","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((((java.lang.Class<?>[] == null) && (java.lang.Object[] != null)) || ((java.lang.Class<?>[] != null) && (java.lang.Object[] == null))) || (((java.lang.Class<?>[] != null) && (java.lang.Object[] != null)) && ((java.lang.Class<?>[].int) != (java.lang.Object[].int)))) {\n    throw new java.lang.IllegalArgumentException(\"Parameter types must match the arguments\");\n} ","position":"org.apache.commons.collections4.functors.InstantiateTransformer:67","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Set<java.util.Map.Entry<K, V>> = org.apache.commons.collections4.map.ListOrderedMap<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.map.ListOrderedMap:601","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ReverseListIterator:78","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"status":-2},{"failures":[79,80,81,82],"binaryOperator":"(java.util.Map<K, V>.containsKey(java.lang.Object)) == false","name":"removeConditional","position":"org.apache.commons.collections4.map.DefaultedMap:202","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:164","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:147","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"The list must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:59","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-2},{"failures":[83,84],"variableMapping":{"added":"validForUpdate","changed":"validForUpdate"},"name":"replace","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ReverseListIterator:161","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:210","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.keyvalue.DefaultMapEntry<K, V>(this)","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.java.util.Map<V, K>.remove(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:642","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"set":"sub"},"name":"add","transplant":{"sourceCode":"return java.util.SortedSet<E>","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.set.PredicatedSortedSet<E>(java.util.SortedSet<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2125","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:252","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.int = int","position":"org.apache.commons.collections4.list.NodeCachingLinkedList:114","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"curObject":"last","leastObject":"last"},"name":"add","transplant":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.CollatingIterator:369","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.Enumeration<? extends E>.nextElement()","position":"org.apache.commons.collections4.iterators.EnumerationIterator:92","type":"CtAssignmentImpl"},"status":0},{"failures":[85,86,87,88,89,90,91,92,93,94,95,96],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:212","type":"CtAssignmentImpl"},"status":-1},{"failures":[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,73,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,21,22,23,24,25,26,27,28,29,30,31,147,148,149,150,151,152,153,154,155,156,157,32,33,34,35,36,37,38,39,40,41,42,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.CollatingIterator:398","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.apache.commons.collections4.Transformer<? super T, ? extends T> org.apache.commons.collections4.Transformer<? super T, ? extends T> : org.apache.commons.collections4.Transformer<? super T, ? extends T>[]) {\n    T = org.apache.commons.collections4.Transformer<? super T, ? extends T>.transform(T);\n}","position":"org.apache.commons.collections4.functors.ChainedTransformer:111","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:158","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.Values<V>(this)","position":"org.apache.commons.collections4.map.Flat3Map:1026","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<E>","position":"org.apache.commons.collections4.collection.SynchronizedCollection:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean boolean = false","position":"org.apache.commons.collections4.bag.CollectionSortedBag:126","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>.entrySet()","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.lang.Iterable<? super O>) {\n    if (java.lang.Object == null) {\n        int++;\n    } \n}","position":"org.apache.commons.collections4.CollectionUtils:615","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (boolean) {\n    final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.next();\n    final java.lang.Object java.lang.Object = org.apache.commons.collections4.MapIterator<?, ?>.getValue();\n    java.lang.StringBuilder.append((java.lang.Object == this ? \"(this Map)\" : java.lang.Object)).append('=').append((java.lang.Object == this ? \"(this Map)\" : java.lang.Object));\n    boolean = org.apache.commons.collections4.MapIterator<?, ?>.hasNext();\n    if (boolean) {\n        java.lang.StringBuilder.append(\", \");\n    } \n}","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1384","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.FilterListIterator:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.Flat3Map<K, V>","position":"org.apache.commons.collections4.map.Flat3Map:1125","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitInsertCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.InsertCommand:54","type":"CtInvocationImpl"},"status":-2},{"failures":[85,86,87,88,89,90,91,92,93,94,95,96],"variableMapping":{"canRemove":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"this.boolean = true","position":"org.apache.commons.collections4.iterators.EntrySetMapIterator:76","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:212","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{"cSize":"count"},"name":"add","transplant":{"sourceCode":"if (int == 0) {\n    return false;\n} ","position":"org.apache.commons.collections4.list.AbstractLinkedList:1007","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:77","type":"CtReturnImpl"},"status":0},{"failures":[98,99,101,578,104,105,106,107,109,579,115,116,117,118,120,580,2,3,5,581,582,583,584,9,10,11,12,14,585,586,587,588,589,125,126,127,128,130,590,591,592,593,594,595,136,137,138,139,141,596,21,22,23,24,26,597,147,151,153,155,598,157,599,600,601,602,603,32,33,34,35,37,604,158,162,164,166,605,168,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,228,229,230,233,629,244,246,248,630,250,253,256,631,632,264,266,268,633,270,634,635,276,278,280,636,282,637,638,284,285,286,289,639,640,300,302,304,641,306,309,312,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,387,392,394,396,669,398,402,670,405,410,415,417,419,671,421,426,428,430,672,432,436,673,439,454,674,457,675,676,462,464,466,677,468,479,678,482,679,680,516,518,520,681,522,537,539,541,682,543,553,683,556,684,571,573,575,685,577],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map<?, ?>) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:409","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:108","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated())","position":"org.apache.commons.collections4.bag.UnmodifiableBag:88","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"case 2 :\n    if ((K) == null) {\n        final V V = V;\n        int = 0;\n        K = null;\n        V = null;\n        int = 1;\n        return V;\n    } \n    if ((K) == null) {\n        final V V = V;\n        int = int;\n        K = K;\n        V = V;\n        int = 0;\n        K = null;\n        V = null;\n        int = 1;\n        return V;\n    } \n    return null;","position":"org.apache.commons.collections4.map.Flat3Map:478","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:87","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet(this)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2221","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractSortedBagDecorator<E>.decorated().comparator()","position":"org.apache.commons.collections4.bag.AbstractSortedBagDecorator:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<? extends E> != (java.util.Iterator<? extends E>)) {\n    if ((java.util.Iterator<? extends E>) != null) {\n        org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:179","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.Predicate<? super T>[].int) == 1) {\n    return org.apache.commons.collections4.functors.FunctorUtils.org.apache.commons.collections4.functors.FunctorUtils.coerce(org.apache.commons.collections4.Predicate<? super T>[][0]);\n} ","position":"org.apache.commons.collections4.functors.AllPredicate:60","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().hashCode()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:117","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.System.(java.lang.System.identityHashCode(java.lang.Object)) ^ java.lang.System.(java.lang.System.identityHashCode(java.lang.Object))","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:189","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (E instanceof java.util.Iterator) {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)));\n} else {\n    E = E;\n    boolean = true;\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<I>.remove()","position":"org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:153","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.iterators.PushbackIterator:105","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.LazySortedMap:139","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>nonePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:405","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.queue.AbstractQueueDecorator<E>.decorated()","position":"org.apache.commons.collections4.queue.AbstractQueueDecorator:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"factory":"factory"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:118","type":"CtAssignmentImpl"},"status":0},{"failures":[],"binaryOperator":"(\"Attempting to compare unknown object \" + java.lang.Object)","name":"math","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:239","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null) {\n    org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n} ","position":"org.apache.commons.collections4.list.TreeList:186","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.RuntimeException java.lang.RuntimeException","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[686,687,688,689,690],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The predicate and closure arrays must be the same size\")","position":"org.apache.commons.collections4.functors.SwitchClosure:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((int) == 0) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if ((java.util.Iterator<? extends E>) == null) {\n        java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n        boolean = true;\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:83","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:89","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    final int int = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.hashIndex(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[].int);\n    final org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[] org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[] = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[];\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int];\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = null;\n    while ((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) && (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != null)) {\n        org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n        org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n    }\n    if (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> == null) {\n        throw new java.lang.IllegalStateException((((((((((((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n    } \n    (int)++;\n    org.apache.commons.collections4.map.AbstractLinkedMap<K, V>.removeEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.reuseEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int, int, K, V);\n    org.apache.commons.collections4.map.AbstractLinkedMap<K, V>.addEntry(org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>, int);\n} catch (final java.lang.NullPointerException java.lang.NullPointerException) {\n    throw new java.lang.IllegalStateException((((((((((((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int)) + \" Please check that your keys are immutable, and that you have used synchronization properly.\") + \" If so, then please report this to dev@commons.apache.org as a bug.\"));\n}","position":"org.apache.commons.collections4.map.LRUMap:301","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.iterators.ArrayIterator<E>.(hasNext()) == false) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:147","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Set<java.util.Map.Entry<K, V>> java.util.Set<java.util.Map.Entry<K, V>> = java.util.Map<K, V>.entrySet()","position":"org.apache.commons.collections4.map.FixedSizeMap:145","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getValue()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:271","type":"CtReturnImpl"},"status":-2},{"failures":[691],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"status":-1},{"failures":[692,693,694,695,696,697,686,698,699,700,688,701,689,702,703,704,690],"binaryOperator":"(boolean) == false","name":"negateConditional","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:99","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max()","position":"org.apache.commons.collections4.list.TreeList:552","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.GrowthList:186","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int == (org.apache.commons.collections4.trie.KeyAnalyzer.int)","position":"org.apache.commons.collections4.trie.KeyAnalyzer:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return T[]","position":"org.apache.commons.collections4.list.AbstractLinkedList:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[]);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:163","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.LazySortedMap:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.LazySortedMap:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"flag":"chainExhausted","removed":"chainExhausted"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:87","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:204","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K) + \" value=\") + V) + \" size=\")","name":"removeConditional","position":"org.apache.commons.collections4.map.LRUMap:325","type":"mutation","status":-2},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":458,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":643,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":145,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":644,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":91,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":213,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":565,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":207,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":636,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":362,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":355,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":641,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":188,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":345,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":580,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":365,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":454,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":472,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":487,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":405,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":630,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":234,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":642,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":416,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":392,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":232,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":406,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":595,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetIterator":66,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":383,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":251,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":308,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":279,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":446,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":61,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":605,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":578,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":46,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":533,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":241,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":515,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":249,"org.apache.commons.collections4.bag.TransformedBagTest.testBagAdd":593,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":85,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":552,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":348,"org.apache.commons.collections4.ListUtilsTest.testLazyList":60,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":437,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":608,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":265,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":208,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":361,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":452,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":447,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":18,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":426,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":236,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":8,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":225,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":440,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":124,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":389,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":421,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":218,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":568,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":22,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":358,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":245,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":335,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":516,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":130,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":453,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":166,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":195,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":203,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":314,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":322,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":97,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":637,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains2":623,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains1":622,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":216,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":290,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":371,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":87,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":244,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":267,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":520,"org.apache.commons.collections4.TransformerUtilsTest.testFactoryTransformer":691,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":129,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":367,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":629,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":549,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":489,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":283,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":332,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":534,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":603,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":394,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":513,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":620,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":700,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":547,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":229,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":277,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":413,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":521,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":674,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":701,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":107,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":525,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":158,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":321,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":326,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":280,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":503,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":671,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":65,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":80,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":81,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":21,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":116,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":171,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":463,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":15,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":79,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":411,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":248,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":495,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":690,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":359,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":375,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":23,"org.apache.commons.collections4.iterators.PushbackIteratorTest.testDelayedPushback":44,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":288,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":509,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveChangesMap":650,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":11,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":165,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":469,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":670,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":112,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":110,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":132,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":34,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":456,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":665,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":558,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":597,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":55,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":373,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":100,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":143,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":199,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":303,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":272,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":40,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":404,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":633,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":414,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":423,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":256,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":613,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":293,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":63,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":328,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":524,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":156,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":536,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":484,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":35,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":88,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":382,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":566,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":111,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":154,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":163,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":584,"org.apache.commons.collections4.ListUtilsTest.testIndexOf":59,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":19,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":226,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":357,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":628,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":101,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":548,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":157,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":223,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":410,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":312,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":684,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":202,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":29,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContains":583,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":559,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":697,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":546,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":634,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":587,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":639,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":187,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":589,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":576,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":677,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":651,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":464,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":470,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":652,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":64,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":30,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":313,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":431,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":162,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":183,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":233,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":133,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":417,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":380,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":300,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":467,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":438,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":604,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":441,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":261,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":1,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":573,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":299,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":102,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":363,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenSet":84,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":360,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":339,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":73,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":38,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains1":615,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":325,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":672,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":425,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains2":616,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":177,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":333,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":553,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":259,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":387,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":442,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":465,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":194,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":210,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":369,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":384,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":329,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":502,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":92,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":648,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":478,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":649,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":679,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":198,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":315,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveAll":56,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":12,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":491,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":247,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":370,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":269,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":523,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":24,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":41,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":148,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":10,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":381,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":588,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":266,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":668,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":142,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":354,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":2,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":617,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":123,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":618,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":119,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":185,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":323,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":212,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":99,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":16,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":356,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":196,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":459,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":109,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":122,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":574,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":128,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":296,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":318,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":120,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":517,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":659,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":50,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":408,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":586,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveChangesMap":611,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":658,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":527,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":180,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":136,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":508,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":108,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":268,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":451,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":460,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":220,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":563,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_remove":687,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":680,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":640,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":193,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":184,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains2":646,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":340,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":499,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains1":645,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":688,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":238,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":474,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":28,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":287,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":428,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenRemove":83,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":420,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":488,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":682,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":127,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":254,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":270,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":379,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":669,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":675,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":528,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":201,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":686,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":598,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":541,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":263,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":654,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":653,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":433,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":250,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":27,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":175,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":585,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":275,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":82,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":242,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":7,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":531,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":402,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":497,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":703,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":486,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":506,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":331,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":343,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":105,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":390,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":575,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContains":594,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":492,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_next":695,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":237,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":17,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":445,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":32,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":152,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":176,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":412,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":419,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":466,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains1":609,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":144,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains2":610,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":685,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":457,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":135,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":347,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":570,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":47,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":561,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":400,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":153,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":504,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":90,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":667,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":192,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":319,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":125,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":69,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":72,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":150,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":320,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":555,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":600,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":449,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":307,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":346,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":418,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":138,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":507,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":510,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":186,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":581,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":54,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":260,"org.apache.commons.collections4.bag.TreeBagTest.testOrdering":20,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":572,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":114,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":397,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":205,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":310,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":676,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":228,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":374,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":582,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":253,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":372,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":174,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":443,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":505,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContains":602,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":52,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":173,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":337,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":496,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":222,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":493,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":475,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":131,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":352,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":330,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":13,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":94,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":209,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":391,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2":666,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":683,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":137,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":663,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":635,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":258,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":664,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":178,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":181,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":619,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":161,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":86,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":252,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":291,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":349,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":632,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":612,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":155,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":257,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":522,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":14,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":538,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":436,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":468,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":190,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":614,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedHasNext":68,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":621,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":106,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":577,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":140,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":550,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testSize":76,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":235,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":432,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":219,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagAdd":601,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":115,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":117,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":121,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":631,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":139,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":422,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":368,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":89,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":702,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":204,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":435,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":477,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":377,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":557,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":625,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":126,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":286,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":448,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":624,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":526,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":450,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":591,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRetainAll":57,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":562,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":33,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":3,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":543,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":306,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":518,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":215,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":655,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":656,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":579,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":415,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":678,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":704,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":424,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":455,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":699,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":182,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":239,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":309,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":483,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":479,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":544,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":273,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":75,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":169,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":294,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":681,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":214,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":336,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":276,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":262,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":366,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":118,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":393,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":93,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":554,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetPredicate":78,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":49,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":481,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":696,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":289,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":151,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":535,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":490,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveChangesMap":660,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":284,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":396,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":407,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":434,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":317,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":297,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":344,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":48,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":498,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveChangesMap":657,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":240,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":430,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":378,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":476,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":607,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":224,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":606,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":31,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":281,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":160,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":341,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":39,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":353,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":511,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":302,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":53,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":62,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":673,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":217,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":134,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":530,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":9,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":159,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":395,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":42,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":540,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":264,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":77,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":230,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":698,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":70,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":537,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":471,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":271,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":282,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":529,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":147,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":285,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":221,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":292,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":482,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":545,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":386,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":67,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":231,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":444,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":403,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":327,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":103,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":149,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains1":661,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":388,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":539,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains2":662,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":501,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":5,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":189,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":473,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":351,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":197,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":316,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":692,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":693,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":500,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":694,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":301,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":311,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":564,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":551,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":71,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":246,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testTransformedMap":58,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":334,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":141,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":278,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":227,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":4,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":514,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":113,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":439,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":485,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":592,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":298,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":376,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":567,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":409,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":480,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":512,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":96,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":626,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":429,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":627,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":401,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testValuesRemoveChangesMap":647,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":95,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":305,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":338,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":37,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":164,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":494,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":590,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":74,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":399,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":427,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":599,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":146,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":51,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":350,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":179,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":25,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":172,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":342,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":571,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":26,"org.apache.commons.collections4.functors.CatchAndRethrowClosureTest.testThrowingClosure":0,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":542,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":324,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":200,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":191,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":569,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":532,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":168,"org.apache.commons.collections4.iterators.PushbackIteratorTest.testMultiplePushback":43,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":167,"org.apache.commons.collections4.iterators.PushbackIteratorTest.testImmediatePushback":45,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":206,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":243,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":170,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":304,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":274,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":398,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":689,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":104,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":364,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":462,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":638,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":36,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":556,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":519,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":461,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":211,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":385,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":560,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":255,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":6,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":98,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":295,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":596}}]

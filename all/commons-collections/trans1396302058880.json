[{"failures":[0,1,2],"variableMapping":{"currentIndex":"index"},"name":"replace","transplant":{"sourceCode":"if (int == (-1)) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.list.TreeList:1093","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.list.TreeList:421","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<I>.remove()","position":"org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator:62","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return 0;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:154","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int >= (int)) {\n    int = 0;\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:327","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.AbstractLinkedList:832","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < int) {\n    E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int);\n    if (E == null) {\n        E = org.apache.commons.collections4.Factory<? extends E>.create();\n        org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E);\n        return E;\n    } \n    return E;\n} ","position":"org.apache.commons.collections4.list.LazyList:113","type":"CtIfImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:77","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"try {\n    return ((T)(java.lang.reflect.Method.invoke(T, ((java.lang.Object[])(null)))));\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new org.apache.commons.collections4.FunctorException(\"PrototypeCloneFactory: Clone method must be public\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new org.apache.commons.collections4.FunctorException(\"PrototypeCloneFactory: Clone method threw an exception\" , java.lang.reflect.InvocationTargetException);\n}","position":"org.apache.commons.collections4.functors.PrototypeFactory:136","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map.Entry<?, ?>) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:466","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.util.NoSuchElementException(\"No more elements in the iteration\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.List<K>.toArray(T[])","position":"org.apache.commons.collections4.map.AbstractReferenceMap:553","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.BitSet.clear(int)","position":"org.apache.commons.collections4.comparators.ComparatorChain:186","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.ForClosure<E>(int , org.apache.commons.collections4.Closure<? super E>)","position":"org.apache.commons.collections4.functors.ForClosure:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.getValue()","position":"org.apache.commons.collections4.map.MultiKeyMap:455","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:87","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.DefaultedMap:181","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.UniquePredicate.org.apache.commons.collections4.functors.UniquePredicate.<T>uniquePredicate()","position":"org.apache.commons.collections4.PredicateUtils:191","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{"c":"coll"},"name":"replace","transplant":{"sourceCode":"if (java.util.Collection<? extends E>.isEmpty()) {\n    return false;\n} ","position":"org.apache.commons.collections4.list.TreeList:224","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal E[] E[] = ((E[])(org.apache.commons.collections4.Bag<E>.toArray()))","position":"org.apache.commons.collections4.bag.TransformedBag:80","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Array.((E)(java.lang.reflect.Array.get(java.lang.Object, (int)++)))","position":"org.apache.commons.collections4.iterators.ArrayIterator:150","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"binaryOperator":"(org.apache.commons.collections4.keyvalue.TiedMapEntry<K, V>.(getKey()) == null ? 0 : org.apache.commons.collections4.keyvalue.TiedMapEntry<K, V>.getKey().hashCode()) ^ (java.lang.Object == null ? 0 : java.lang.Object.hashCode())","name":"removeConditional","position":"org.apache.commons.collections4.keyvalue.TiedMapEntry:123","type":"mutation","status":-2},{"failures":[14,15,16,17,18,19,20,21,22],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.iterators.FilterListIterator:134","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.comparators.ComparatorChain:269","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return V","position":"org.apache.commons.collections4.map.Flat3Map:520","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:68","type":"CtReturnImpl"},"status":-2},{"failures":[14,15,16,17,23,18,24,19,20,21,22],"variableMapping":{"value":"nextObject"},"name":"replace","transplant":{"sourceCode":"this.E = E","position":"org.apache.commons.collections4.list.AbstractLinkedList:694","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.PrototypeFactory.org.apache.commons.collections4.functors.PrototypeFactory.<T>prototypeFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (T == null) {\n    return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.<T>constantFactory(null);\n} ","position":"org.apache.commons.collections4.functors.PrototypeFactory:59","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Couldn\\'t get the node: \" + \"index (\")","name":"math","position":"org.apache.commons.collections4.list.AbstractLinkedList:539","type":"mutation","status":-2},{"failures":[25],"name":"returnValue","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Collection<? extends E> = org.apache.commons.collections4.collection.TransformedCollection<E>.transform(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.TransformedList:143","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"sortedMap":"map"},"name":"add","transplant":{"sourceCode":"if (java.util.SortedMap<K, V> == null) {\n    throw new java.lang.IllegalArgumentException(\"Map must not be null\");\n} ","position":"org.apache.commons.collections4.MapUtils:1773","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.SortedMap<K, V>.size()) > 0) {\n    final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>);\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear();\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>);\n} ","position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.addEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>, int)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1029","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"int ^= int >>> 6","position":"org.apache.commons.collections4.map.StaticBucketMap:161","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = this.int","position":"org.apache.commons.collections4.iterators.ArrayIterator:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Helper class for set-related operations, e.g. union, subtract, intersection.\n * @param <O>  the element type\n */\nprivate static class SetOperationCardinalityHelper<O> extends org.apache.commons.collections4.CollectionUtils.CardinalityHelper<O> implements java.lang.Iterable<O> {\n    /** \n     * Contains the unique elements of the two collections.\n     */\nprivate final java.util.Set<O> elements;\n\n    /** \n     * Output collection.\n     */\nprivate final java.util.List<O> newList;\n\n    /** \n     * Create a new set operation helper from the two collections.\n     * @param a  the first collection\n     * @param b  the second collection\n     */\npublic SetOperationCardinalityHelper(final java.lang.Iterable<? extends O> a ,final java.lang.Iterable<? extends O> b) {\n        org.apache.commons.collections4.CollectionUtils.CardinalityHelper<O>.super(java.lang.Iterable<? extends O>, java.lang.Iterable<? extends O>);\n        java.util.Set<O> = new java.util.HashSet<O>();\n        org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.addAll(java.util.Set<O>, java.lang.Iterable<? extends O>);\n        org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.addAll(java.util.Set<O>, java.lang.Iterable<? extends O>);\n        java.util.List<O> = new java.util.ArrayList<O>(java.util.Set<O>.size());\n    }\n\n    public java.util.Iterator<O> iterator() {\n        return java.util.Set<O>.iterator();\n    }\n\n    /** \n     * Add the object {@code count} times to the result collection.\n     * @param obj  the object to add\n     * @param count  the count\n     */\npublic void setCardinality(final O obj, final int count) {\n        for (int int = 0 ; int < int ; int++) {\n            java.util.List<O>.add(O);\n        }\n    }\n\n    /** \n     * Returns the resulting collection.\n     * @return the result\n     */\npublic java.util.Collection<O> list() {\n        return java.util.List<O>;\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:124","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().setValue(V)","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:70","type":"CtReturnImpl"},"status":-2},{"failures":[26],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:204","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.set.UnmodifiableSet:96","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.set.PredicatedSet<E>(java.util.Set<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.set.PredicatedSet:60","type":"CtReturnImpl"},"status":-2},{"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,26],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:107","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:118","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object instanceof org.apache.commons.collections4.CollectionUtils.EquatorWrapper)) {\n    return false;\n} ","position":"org.apache.commons.collections4.CollectionUtils:584","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>()","position":"org.apache.commons.collections4.ListUtils:90","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedSet<E>)(org.apache.commons.collections4.set.PredicatedSet<E>.decorated()))","position":"org.apache.commons.collections4.set.PredicatedSortedSet:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.UnmodifiableIterator.org.apache.commons.collections4.iterators.UnmodifiableIterator.unmodifiableIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().iterator())","position":"org.apache.commons.collections4.list.FixedSizeList:108","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.TreeList<E>.listIterator(0)","position":"org.apache.commons.collections4.list.TreeList:123","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.SwitchClosure:152","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<? super I, ? extends O>.get(I)","position":"org.apache.commons.collections4.functors.MapTransformer:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Set<E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Set must not be null\");\n} ","position":"org.apache.commons.collections4.set.ListOrderedSet:77","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:141","type":"CtThrowImpl"},"status":-2},{"failures":[44,45,46,47,48,49,50,51,52],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.E = E","position":"org.apache.commons.collections4.list.AbstractLinkedList:694","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:149","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.map.LRUMap:423","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException((\"Invalid map index: \" + (int)))","position":"org.apache.commons.collections4.map.Flat3Map:408","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength = org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.resolve(java.io.ObjectInputStream.readInt())","position":"org.apache.commons.collections4.map.AbstractReferenceMap:1032","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:151","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:248","type":"CtInvocationImpl"},"status":-2},{"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"variableMapping":{"key":"key"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:282","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:94","type":"CtReturnImpl"},"status":-1},{"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"bound":"len","type":"type"},"name":"add","transplant":{"sourceCode":"if (int < 0) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":0},{"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,69,70,71,72,73,75,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().size()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:118","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.KeyIterator()","position":"org.apache.commons.collections4.map.StaticBucketMap:622","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().nextKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.util.Map<? super K, ?>.get(K)","position":"org.apache.commons.collections4.MapUtils:152","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:112","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<K, V> = null","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:100","type":"CtAssignmentImpl"},"status":0},{"failures":[330],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:231","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (int < int) {\n    int <<= 1;\n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:668","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Class<?>.isInstance(java.lang.Object)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"status":-2},{"failures":[449,179,450,451,452,232],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"list":"collection"},"name":"add","transplant":{"sourceCode":"if (java.util.Collection<?> == null) {\n    return 0;\n} ","position":"org.apache.commons.collections4.ListUtils:282","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<? extends E>.size()","position":"org.apache.commons.collections4.iterators.LoopingIterator:122","type":"CtReturnImpl"},"status":0},{"failures":[453,454,455,456,457,458,459],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"ListIterator does not support set\")","position":"org.apache.commons.collections4.list.SetUniqueList:419","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.FilterIterator:100","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.queue.CircularFifoQueue<E>.(size()) == 0","position":"org.apache.commons.collections4.queue.CircularFifoQueue:177","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.TransformerClosure<E>(org.apache.commons.collections4.Transformer<? super E, ?>)","position":"org.apache.commons.collections4.functors.TransformerClosure:52","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.AbstractLinkedList:832","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.FixedSizeList:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\")","name":"removeConditional","position":"org.apache.commons.collections4.bag.TreeBag:87","type":"mutation","status":-2},{"failures":[50],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\")","position":"org.apache.commons.collections4.comparators.ComparatorChain:240","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:65","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:112","type":"CtInvocationImpl"},"status":-2},{"failures":[45,460],"variableMapping":{"iterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"if (java.util.Iterator<? extends E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Iterator must not be null\");\n} ","position":"org.apache.commons.collections4.iterators.PeekingIterator:59","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.V = V","position":"org.apache.commons.collections4.map.StaticBucketMap:303","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = ((java.lang.Object[])(java.lang.Object)).int","position":"org.apache.commons.collections4.CollectionUtils:1339","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().setValue(V)","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"key":"object"},"name":"replace","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    return 0;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:154","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.FixedSizeList:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.lang.Object java.lang.Object : java.util.Collection<?>) {\n    boolean |= org.apache.commons.collections4.list.SetUniqueList<E>.remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.list.SetUniqueList:248","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:111","type":"CtAssignmentImpl"},"status":-2},{"failures":[461,462,463,464,465,466,467,468],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((int) > 0) {\n    (int)--;\n} ","position":"org.apache.commons.collections4.list.TreeList:608","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.collection.SynchronizedCollection<T>(java.util.Collection<T>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"V = null","position":"org.apache.commons.collections4.map.AbstractReferenceMap:795","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (V != null) {\n    return V;\n} ","position":"org.apache.commons.collections4.MapUtils:367","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.setValue(V)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:152","type":"CtReturnImpl"},"status":-2},{"failures":[469,470],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-1},{"failures":[471,472,473,474,475,476],"variableMapping":{"endIndex":"count","index":"count"},"name":"replace","transplant":{"sourceCode":"return int < int","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:96","type":"CtLocalVariableImpl"},"status":-2},{"failures":[477],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:191","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:89","type":"CtReturnImpl"},"status":-2},{"failures":[478,475,476,479,480,481,482,483,484,485,486,487],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().first()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:92","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().last()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:96","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.CollectionUtils:1125","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.collection.SynchronizedCollection<T>(java.util.Collection<T>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:61","type":"CtReturnImpl"},"status":-2},{"failures":[488],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The collection is not a bounded collection\")","position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:98","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:84","type":"CtInvocationImpl"},"status":-1},{"failureDictionary":{"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":18,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":166,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":244,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":67,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":122,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":192,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":79,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":191,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":149,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":181,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_removeByIndex":78,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":195,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_setByIndex":77,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":318,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":82,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":333,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":444,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":9,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":442,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":0,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":392,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":416,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":49,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":410,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":13,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testDecorateFactory":104,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":268,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":356,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":8,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":306,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":364,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":14,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":288,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":5,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":184,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":430,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":123,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":226,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArray":40,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":486,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":91,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":446,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":162,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":478,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":84,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":171,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":247,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":223,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":209,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":307,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":360,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":130,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":118,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":234,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":422,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":169,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":450,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":215,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":374,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":15,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":312,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":359,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":432,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":197,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":285,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":335,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":366,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":61,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":206,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":269,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":304,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":466,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":283,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":439,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":408,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":313,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":467,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":260,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":200,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":233,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":90,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":411,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":455,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":294,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":154,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":483,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":341,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":363,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":224,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":219,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":372,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":471,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":300,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":315,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":479,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":86,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFail":36,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":237,"org.apache.commons.collections4.BagUtilsTest.testTransformedSortedBag":98,"org.apache.commons.collections4.list.UnmodifiableListTest.testDecorateFactory":102,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":217,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping0":470,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":134,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":388,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":403,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":398,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":377,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":459,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":202,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testDecorateFactory":109,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":259,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":58,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection":105,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableBag":93,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableSortedBag":96,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":271,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":330,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":16,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":75,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":245,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagHashCode":352,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":487,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":163,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":222,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":32,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":284,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":160,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":420,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":117,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":238,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":464,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":282,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":148,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":256,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagHashCode":26,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":316,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":89,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":421,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":144,"org.apache.commons.collections4.set.TransformedSetTest.testSetHashCode":402,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":443,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":72,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":385,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorRemoveProtectsInvariants":39,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":426,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":253,"org.apache.commons.collections4.set.PredicatedSetTest.testSetHashCode":354,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":384,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":193,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":7,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":59,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":225,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":175,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":83,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagAdd":28,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":88,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":199,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":138,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":207,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":289,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":423,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":129,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":125,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":213,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":203,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":293,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":24,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testDecorateFactory":108,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":324,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":133,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":227,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":337,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":480,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":214,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":362,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":434,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":258,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":476,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":73,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":431,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":190,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":146,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":235,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":165,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":221,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":484,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":131,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":254,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":381,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":230,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":308,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsHashBag":43,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":52,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":262,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":141,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":299,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":433,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":173,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":242,"org.apache.commons.collections4.CollectionUtilsTest.testUnmodifiableCollection":107,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":128,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":145,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":176,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":346,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":44,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":448,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":320,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":371,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":34,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testFirstKey":488,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":334,"org.apache.commons.collections4.set.ListOrderedSetTest.testDecorator":113,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":42,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":396,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":71,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":435,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":263,"org.apache.commons.collections4.BagUtilsTest.testTransformedBag":95,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":116,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetHashCode":424,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":277,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testDecorateFactory":92,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":344,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":428,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemovePrevious":6,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":365,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":4,"org.apache.commons.collections4.SetUtilsTest.testpredicatedSet":111,"org.apache.commons.collections4.QueueUtilsTest.testPredicatedQueue":100,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":136,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":477,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":29,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":406,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":357,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":266,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":343,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":332,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":297,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":179,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":205,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking2":2,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":255,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":338,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":25,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":447,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":380,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":485,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":137,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":309,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagHashCode":351,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":252,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":183,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":249,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":240,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":65,"org.apache.commons.collections4.set.UnmodifiableSetTest.testDecorateFactory":115,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":451,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":295,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":23,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":46,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":127,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":231,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":472,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":454,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":54,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":41,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":232,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":291,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":414,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":182,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":298,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":301,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":147,"org.apache.commons.collections4.BagUtilsTest.testPredicatedBag":94,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":425,"org.apache.commons.collections4.QueueUtilsTest.testUnmodifiableQueue":99,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":251,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContains":31,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":120,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":418,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":438,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":68,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":218,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":216,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":395,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":80,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":157,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":296,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":60,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":156,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":211,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":48,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":33,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":342,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":159,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":339,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":321,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":188,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":204,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":20,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":481,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":124,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetHashCode":437,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":400,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":139,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":142,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":185,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":274,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":375,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":394,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":314,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":399,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":482,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":273,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":151,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":45,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":257,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":286,"org.apache.commons.collections4.QueueUtilsTest.testTransformedQueue":101,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":445,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":172,"org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection":106,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetHashCode":393,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetHashCode":415,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":460,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":212,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":17,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":468,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":119,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":323,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagHashCode":350,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":69,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":236,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":473,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":370,"org.apache.commons.collections4.BagUtilsTest.testPredicatedSortedBag":97,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":261,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":458,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":47,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":241,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemovePrevious":3,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":10,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":279,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":391,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":11,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":310,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":168,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":452,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":465,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":143,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":353,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":417,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAdd":27,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":51,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapGet":64,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapGet":85,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":329,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":325,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":280,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":404,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":152,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":378,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking":1,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":167,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":50,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":210,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testDecorateFactory":114,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":407,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":196,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":427,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":19,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":290,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailNoMore":37,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":327,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":463,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":373,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":30,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":270,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":336,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":368,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":229,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":180,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":382,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":345,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":355,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":12,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":70,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":87,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":322,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":161,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":412,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":177,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testDecorate":110,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":189,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":302,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":387,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":457,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":66,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":170,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":265,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":475,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":276,"org.apache.commons.collections4.map.ListOrderedMapTest.testSetValueByIndex":76,"org.apache.commons.collections4.ListUtilsTest.testPredicatedList":112,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":429,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":440,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":272,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":456,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":317,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":57,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":264,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":401,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":413,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":369,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":158,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":376,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":328,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":281,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":474,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":62,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":441,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":453,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":201,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":275,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":55,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":348,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":150,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":319,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":449,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":187,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":132,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":228,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":461,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":347,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":462,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":386,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":419,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":243,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":287,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingForward":469,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":361,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":208,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetHashCode":367,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":63,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":409,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":436,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":305,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailDoubleRemove":38,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":331,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":220,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":246,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":383,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":303,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":326,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":22,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":21,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":174,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":390,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":340,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":53,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testDecorateFactory":103,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":186,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":81,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":140,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":155,"org.apache.commons.collections4.bag.TransformedBagTest.testBagHashCode":349,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":178,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":250,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":278,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":198,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIterator":35,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":135,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":126,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":248,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":267,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":56,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":121,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":358,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":153,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":389,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":405,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":194,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":292,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":311,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":164,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":239,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":397,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":379,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":74}}]

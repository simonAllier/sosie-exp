[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Set<java.lang.Object>.size()) == (java.util.Set<E>.size())) {\n    return false;\n} ","position":"org.apache.commons.collections4.list.SetUniqueList:262","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AndPredicate.org.apache.commons.collections4.functors.AndPredicate.<T>andPredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:258","type":"CtReturnImpl"},"status":-2},{"failures":[0,1,2,3,4],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.InstanceofPredicate.org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.PredicateUtils:175","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Map is fixed size\")","position":"org.apache.commons.collections4.map.FixedSizeSortedMap:140","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[5],"variableMapping":{"object":"this"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.collection.SynchronizedCollection:195","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (this == java.lang.Object) || ((null != java.lang.Object) && (java.lang.Object.getClass().equals(java.lang.Object.getClass())))","position":"org.apache.commons.collections4.comparators.ComparableComparator:124","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.Object instanceof org.apache.commons.collections4.Bag) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.bag.AbstractMapBag:542","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:125","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"coll":"collection"},"name":"add","transplant":{"sourceCode":"if (java.util.Collection<? extends E> == null) {\n    throw new java.lang.NullPointerException(\"Collection must not be null\");\n} ","position":"org.apache.commons.collections4.IteratorUtils:745","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl"},"status":0},{"failures":[6,7],"variableMapping":{"isLocked":"validForUpdate"},"name":"add","transplant":{"sourceCode":"if ((this.boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:239","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!(java.lang.Object instanceof org.apache.commons.collections4.CollectionUtils.EquatorWrapper)) {\n    return false;\n} ","position":"org.apache.commons.collections4.CollectionUtils:584","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().keySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.TransformedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedMap:105","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:271","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Map.Entry<K, V>.setValue(V)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:239","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.queue.TransformedQueue<E>.getQueue().offer(org.apache.commons.collections4.collection.TransformedCollection<E>.transform(E))","position":"org.apache.commons.collections4.queue.TransformedQueue:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.FixedSizeList:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceBaseIterator<K, V>.checkMod()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:818","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.RuntimeException","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:62","type":"CtThrowImpl"},"status":-2},{"failures":[8],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"List must not be null\")","position":"org.apache.commons.collections4.set.ListOrderedSet:121","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"abstract static class EntryIterator<K, V> {\n    private final org.apache.commons.collections4.map.Flat3Map<K, V> parent;\n\n    private int nextIndex = 0;\n\n    private org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V> currentEntry = null;\n\n    /** \n     * Create a new Flat3Map.EntryIterator.\n     */\npublic EntryIterator(final org.apache.commons.collections4.map.Flat3Map<K, V> parent) {\n        this.org.apache.commons.collections4.map.Flat3Map<K, V> = org.apache.commons.collections4.map.Flat3Map<K, V>;\n    }\n\n    public boolean hasNext() {\n        return (int) < (org.apache.commons.collections4.map.Flat3Map<K, V>.int);\n    }\n\n    public java.util.Map.Entry<K, V> nextEntry() {\n        if (!org.apache.commons.collections4.map.Flat3Map.EntryIterator<K, V>.(hasNext())) {\n            throw new java.util.NoSuchElementException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String);\n        } \n        org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V> = new org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V>(org.apache.commons.collections4.map.Flat3Map<K, V> , ++(int));\n        return org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V>;\n    }\n\n    public void remove() {\n        if ((org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V>) == null) {\n            throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String);\n        } \n        org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V>.setRemoved(true);\n        org.apache.commons.collections4.map.Flat3Map<K, V>.remove(org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V>.getKey());\n        (int)--;\n        org.apache.commons.collections4.map.Flat3Map.FlatMapEntry<K, V> = null;\n    }\n}","position":"org.apache.commons.collections4.map.Flat3Map:892","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:77","type":"CtReturnImpl"},"status":-2},{"failures":[9],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:48","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:133","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,4],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:60","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"nextIterator"},"name":"add","transplant":{"sourceCode":"java.util.Iterator<? extends E> = new org.apache.commons.collections4.iterators.ListIteratorWrapper<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.IteratorIterable:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:97","type":"CtAssignmentImpl"},"status":-2},{"failures":[10,11],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.AbstractHashedMap:1085","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:101","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.CollectionUtils:850","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:149","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.map.MultiKeyMap:774","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasNext()) == false) {\n    org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:90","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.StaticBucketMap:406","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().size()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String)","position":"org.apache.commons.collections4.map.AbstractHashedMap:794","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:253","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>","position":"org.apache.commons.collections4.map.MultiKeyMap:162","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Queue<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.queue.AbstractQueueDecorator:62","type":"CtReturnImpl"},"status":-2},{"failures":[12],"binaryOperator":"int < (int)","name":"negateConditional","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((java.util.Set<E>)(org.apache.commons.collections4.collection.PredicatedCollection<E>.decorated()))","position":"org.apache.commons.collections4.set.PredicatedSet:86","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:271","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int += T.hashCode()","position":"org.apache.commons.collections4.SetUtils:148","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:123","type":"CtReturnImpl"},"status":-2},{"failures":[13,14,15,16],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"valueTransformer cannot be null\")","position":"org.apache.commons.collections4.splitmap.TransformedSplitMap:118","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:114","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.AbstractHashedMap:858","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Set<T>.add(T)","position":"org.apache.commons.collections4.functors.UniquePredicate:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n    return 0;\n} ","position":"org.apache.commons.collections4.list.TreeList:700","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>> = java.util.Set<java.util.Map.Entry<K, V>>.iterator()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:92","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength) == (org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength) ? java.lang.Object : ((java.lang.ref.Reference<K>)(java.lang.Object)).get()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:456","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:144","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:209","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-2},{"failures":[10,11],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:97","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:101","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.LinkedMap.LinkedMapList<K>(this)","position":"org.apache.commons.collections4.map.LinkedMap:203","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().subList(int, int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.IteratorEnumeration:83","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.TransformedSortedMap:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map Entry must not be null\")","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:43","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap()","position":"org.apache.commons.collections4.map.TransformedSortedMap:133","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"V = V","position":"org.apache.commons.collections4.map.Flat3Map:300","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.List<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.list.AbstractListDecorator:65","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.AbstractHashedMap:262","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"prototype":"constantToReturn"},"name":"replace","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Factory<T>)(new org.apache.commons.collections4.functors.PrototypeFactory.PrototypeSerializationFactory<java.io.Serializable>(((java.io.Serializable)(T)))))","position":"org.apache.commons.collections4.functors.PrototypeFactory:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((T)(java.lang.reflect.Method.invoke(T, ((java.lang.Object[])(null)))))","position":"org.apache.commons.collections4.functors.PrototypeFactory:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.org.apache.commons.collections4.Predicate<? super E> = org.apache.commons.collections4.Predicate<? super E>","position":"org.apache.commons.collections4.iterators.FilterIterator:163","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Map<K, V>","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:60","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>","position":"org.apache.commons.collections4.bag.AbstractMapBag:80","type":"CtReturnImpl"},"status":0},{"failures":[17,18],"binaryOperator":"org.apache.commons.collections4.Closure<? super E> == null","name":"negateConditional","position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"mutation","status":-1},{"failures":[19,20],"name":"returnValue","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:45","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case BEFORE :\n    return java.lang.Integer == null ? java.lang.Integer == null ? 0 : -1 : 1;","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:233","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:175","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.Trie<K, V>.firstKey()","position":"org.apache.commons.collections4.trie.UnmodifiableTrie:130","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>>.remove()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:99","type":"CtInvocationImpl"},"status":-2},{"failures":[21],"variableMapping":{"object":"object"},"name":"replace","transplant":{"sourceCode":"return T == null","position":"org.apache.commons.collections4.functors.NullPredicate:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (T) == T","position":"org.apache.commons.collections4.functors.IdentityPredicate:72","type":"CtReturnImpl"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:204","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.list.TreeList:609","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:98","type":"CtReturnImpl"},"status":-2},{"failures":[9],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\")","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:99","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:133","type":"CtThrowImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:182","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","key":"key"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().nextKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.entrySet()) {\n    java.io.ObjectOutputStream.writeObject(java.util.Map.Entry<K, V>.getKey());\n    java.io.ObjectOutputStream.writeObject(java.util.Map.Entry<K, V>.getValue());\n}","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1433","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Queue<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.queue.AbstractQueueDecorator:62","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.setCardinality(O, org.apache.commons.collections4.CollectionUtils.SetOperationCardinalityHelper<O>.min(O))","position":"org.apache.commons.collections4.CollectionUtils:254","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:212","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().subSet(E, E)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:104","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.util.Map.Entry<K, V> == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getValue()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(this.java.util.Map<K, V>[], 0, java.util.Map<K, V>[], 0, this.java.util.Map<K, V>[].int)","position":"org.apache.commons.collections4.map.CompositeMap:144","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null)","position":"org.apache.commons.collections4.list.LazyList:127","type":"CtInvocationImpl"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,11,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.map.Flat3Map:874","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().size()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:118","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.CompositeMap:287","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterListIterator:211","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int ^= java.util.BitSet.hashCode()","position":"org.apache.commons.collections4.comparators.ComparatorChain:310","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>","position":"org.apache.commons.collections4.PredicateUtils:406","type":"CtReturnImpl"},"status":-2},{"failures":[613],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.NullIsExceptionPredicate<T>(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:50","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsExceptionPredicate.org.apache.commons.collections4.functors.NullIsExceptionPredicate.nullIsExceptionPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:488","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Iterator<K>.hasNext()) {\n    return java.util.Iterator<K>.next();\n} ","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:157","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.ForClosure<E>(int , org.apache.commons.collections4.Closure<? super E>)","position":"org.apache.commons.collections4.functors.ForClosure:58","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"null nonNullComparator\")","position":"org.apache.commons.collections4.comparators.NullComparator:117","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lowerEntry(K)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2176","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.LazySortedMap:153","type":"CtLocalVariableImpl"},"status":-2},{"failures":[614,615],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"List must not be null\")","position":"org.apache.commons.collections4.IteratorUtils:765","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:87","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (boolean) == false","position":"org.apache.commons.collections4.map.SingletonMap:427","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:220","type":"CtIfImpl"},"status":-2},{"failures":[616],"binaryOperator":"(((java.lang.Class<?>[] == null) && (java.lang.Object[] != null)) || ((java.lang.Class<?>[] != null) && (java.lang.Object[] == null)))","name":"removeConditional","position":"org.apache.commons.collections4.functors.InstantiateTransformer:67","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsValue(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[12],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().clear()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:78","type":"CtInvocationImpl"},"status":-2},{"failures":[617,618],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Map.Entry<K, V> = ((java.util.ListIterator<java.util.Map.Entry<K, V>>)(java.util.Iterator<java.util.Map.Entry<K, V>>)).previous()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:159","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:84","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().put(K, V)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.map.SingletonMap<K, V>.isEqualKey(java.lang.Object)) {\n    return V;\n} ","position":"org.apache.commons.collections4.map.SingletonMap:190","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingIterator:106","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<K> = org.apache.commons.collections4.map.ListOrderedMap<K, V>.java.util.List<K>.listIterator()","position":"org.apache.commons.collections4.map.ListOrderedMap:774","type":"CtAssignmentImpl"},"status":0},{"failures":[619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,62,63,64,65,66,67,637,638,639,68,69,70,71,72,73,640,641,77,81,85,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,89,90,91,92,93,94,681,682,683,98,102,106,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,108,109,111,112,113,114,116,121,122,128,129,133,134,138,141,145,146,147,148,150,153,154,155,360,361,372,375,379,380,382,388,391,392,393,398,399,400,403,404,408,411,415,416,417,418,420,423,424,425,431,432,438,439,443,444,448,451,455,456,457,458,460,463,464,465,727,728,468,469,471,472,473,474],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.AbstractHashedMap:1085","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:60","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:196","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator<K, V>.isSetValueChecking()) {\n    return new org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator.EntrySet(java.util.Map<K, V>.entrySet() , this);\n} ","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:99","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.UnmodifiableSet.org.apache.commons.collections4.set.UnmodifiableSet.unmodifiableSet(java.util.Map<K, V>.entrySet())","position":"org.apache.commons.collections4.map.FixedSizeSortedMap:145","type":"CtReturnImpl"},"status":-2},{"failures":[729],"binaryOperator":"((java.lang.Object == null) && (java.lang.Object == null)) || ((java.lang.Object != null) && (java.lang.Object.equals(java.lang.Object)))","name":"removeConditional","position":"org.apache.commons.collections4.ArrayStack:157","type":"mutation","status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:158","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:157","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return K","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1897","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractMapBag<E>.add(E)","position":"org.apache.commons.collections4.bag.TreeBag:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final boolean boolean = org.apache.commons.collections4.collection.AbstractCollectionDecorator<C>.add(C)","position":"org.apache.commons.collections4.collection.IndexedCollection:118","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map<K, V> = ((java.util.Map<K, V>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.map.DefaultedMap:194","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.UniquePredicate.org.apache.commons.collections4.functors.UniquePredicate.<T>uniquePredicate()","position":"org.apache.commons.collections4.PredicateUtils:191","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return (java.lang.Object == java.lang.Object) || (java.lang.Object.equals(java.lang.Object))","position":"org.apache.commons.collections4.map.AbstractHashedMap:413","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:170","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"object":"object"},"name":"add","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((\"The predicate collection must not contain a null predicate, index \" + int) + \" was null\"))","position":"org.apache.commons.collections4.functors.FunctorUtils:107","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:196","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","index":"index"},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList.FixedSizeListIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int))","position":"org.apache.commons.collections4.list.FixedSizeList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException","position":"org.apache.commons.collections4.IteratorUtils:1096","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:125","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.KeySet.KeyIterator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1454","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<I>","position":"org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"NodeList must not be null\")","position":"org.apache.commons.collections4.IteratorUtils:783","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:109","type":"CtThrowImpl"},"status":0},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":431,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":432,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":167,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":188,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":541,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":622,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":590,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":650,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastValues":430,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":108,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRetainAll":296,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":155,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveChangesMap":251,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testFailFastEntrySet":686,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastEntrySet":428,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":678,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":693,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":424,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesIteratorRemoveChangesMap":394,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":55,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_removeByIndex":215,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":112,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_setByIndex":214,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":230,"org.apache.commons.collections4.map.LazyMapTest.testKeySetClearChangesMap":488,"org.apache.commons.collections4.map.MultiValueMapTest.testPutWithList":348,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetIteratorRemoveChangesMap":461,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapHashCode":273,"org.apache.commons.collections4.map.LazySortedMapTest.testLastKey":310,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":266,"org.apache.commons.collections4.map.LazyMapTest.testValuesIteratorRemoveChangesMap":481,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":271,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastKeySet":119,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":196,"org.apache.commons.collections4.map.LazySortedMapTest.testMakeMap":331,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastEntrySet":518,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":438,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":433,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":440,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":439,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":171,"org.apache.commons.collections4.MapUtilsTest.testLazyMapTransformer":58,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":383,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiTailMapContains":99,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetByIndex":208,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":135,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":189,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRetainAll":261,"org.apache.commons.collections4.map.PredicatedMapTest.testMapHashCode":437,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":203,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetClearChangesMap":243,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":141,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":381,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetIteratorRemoveChangesMap":534,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":474,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":651,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullKey":238,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":30,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":462,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains3":597,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveAll":459,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains2":596,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetContains1":595,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":72,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":180,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesIteratorRemoveChangesMap":254,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetIteratorRemoveChangesMap":342,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":53,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":232,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFirstKey":358,"org.apache.commons.collections4.map.LazyMapTest.testValuesRetainAll":483,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":627,"org.apache.commons.collections4.map.TransformedMapTest.testValuesClearChangesMap":157,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":165,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapClear":268,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":471,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":562,"org.apache.commons.collections4.TransformerUtilsTest.testInstantiateTransformerNull":616,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":668,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetIteratorRemoveChangesMap":551,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":646,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":464,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains3":656,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains2":655,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains1":654,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":625,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRetainAll":317,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":507,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMap":105,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":709,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":114,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveChangesMap":489,"org.apache.commons.collections4.map.LazyMapTest.testFailFastKeySet":476,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":553,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetClearChangesMap":492,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveChangesMap":532,"org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratorTest.testMapIteratorOrder":57,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":336,"org.apache.commons.collections4.comparators.ComparableComparatorTest.testEqualsNull":5,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveChangesMap":447,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":558,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":580,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":81,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveAll":291,"org.apache.commons.collections4.map.DefaultedMapTest.testFullMapCompatibility":544,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesClearChangesMap":592,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":270,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveChangesMap":255,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":304,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":463,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testUnmodifiable":355,"org.apache.commons.collections4.map.LazySortedMapTest.testMapHashCode":318,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMakeMap":374,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":212,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetClearChangesMap":244,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullValue":493,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesClearChangesMap":427,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveAll":139,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":175,"org.apache.commons.collections4.map.MultiValueMapTest.testPutWithSet":350,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":515,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":516,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":45,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":64,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":514,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":546,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":4,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveChangesMap":605,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetIteratorRemoveChangesMap":151,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":472,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":289,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByHeadMap":75,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":288,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":287,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":713,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetIteratorRemoveChangesMap":608,"org.apache.commons.collections4.map.ListOrderedMapTest.testIndexOf":217,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetIteratorRemoveChangesMap":262,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":26,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveChangesMap":132,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastValues":575,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRemoveAll":252,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":445,"org.apache.commons.collections4.map.FixedSizeMapTest.testFullMapCompatibility":559,"org.apache.commons.collections4.map.MultiValueMapTest.testSerializeDeserializeThenCompare":353,"org.apache.commons.collections4.map.LazyMapTest.testFullMapCompatibility":501,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveChangesMap":259,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":235,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":367,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":147,"org.apache.commons.collections4.PredicateUtilsTest.testNullIsExceptionPredicateEx1":613,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":711,"org.apache.commons.collections4.map.TransformedMapTest.testFullMapCompatibility":144,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping0":615,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRetainAll":126,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testFullMapCompatibility":275,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":672,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMap":84,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":387,"org.apache.commons.collections4.PredicateUtilsTest.testIdentityPredicate":21,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":102,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove1":248,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testPreviousKey":356,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove3":250,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":181,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemove2":249,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveChangesMap":482,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains1":284,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains2":285,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains3":286,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":306,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFirstKey":569,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemoveAll":702,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":337,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove1":676,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveChangesMap":601,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove2":677,"org.apache.commons.collections4.MapUtilsTest.testIterableMap":59,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":183,"org.apache.commons.collections4.map.LazySortedMapTest.testFirstKey":311,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":388,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":404,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":636,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullKey":412,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRetainAll":504,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":538,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":299,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRemoveChangesMap":442,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":73,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":469,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":172,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":503,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":70,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearBySubMap":83,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":206,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullKey":499,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":645,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":173,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveAll":549,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":692,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":186,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":453,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":176,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":391,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains1":521,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":392,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains2":522,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":393,"org.apache.commons.collections4.map.UnmodifiableMapTest.testFullMapCompatibility":470,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains3":523,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":241,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullKey":277,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveChangesMap":402,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":197,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRetainAll":338,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":688,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveChangesMap":328,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMakeMap":576,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":380,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullValue":446,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":195,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutNullKey":452,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetIteratorRemoveChangesMap":723,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorRemoveProtectsInvariants":41,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":194,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":193,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":385,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetClearChangesMap":593,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":109,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFullMapCompatibility":414,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":577,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":43,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":473,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastEntrySet":573,"org.apache.commons.collections4.ArrayStackTest.testSearch":729,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":190,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":411,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":191,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":231,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":56,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":192,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":240,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains1":696,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":303,"org.apache.commons.collections4.map.ListOrderedMap2Test.testPreviousKey":572,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRemoveAll":606,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains3":698,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains2":697,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":91,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetClearChangesMap":441,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":560,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":130,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":129,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":547,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":128,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRemoveAll":256,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastEntrySet":223,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":667,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":653,"org.apache.commons.collections4.map.LazyMapTest.testFailFastValues":477,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":707,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiHeadMapContains":95,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove3":530,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":307,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove2":529,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove1":528,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":169,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveChangesMap":407,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":279,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":448,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":671,"org.apache.commons.collections4.map.TransformedMapTest.testValuesIteratorRemoveChangesMap":124,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemoveAll":721,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove1":632,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":200,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove2":633,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":413,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":708,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_Decorate":117,"org.apache.commons.collections4.map.DefaultedMapTest.testMakeMap":540,"org.apache.commons.collections4.map.TransformedMapTest.testValuesRemoveAll":149,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":178,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testDecoratedMap":263,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":382,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":24,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":545,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":154,"org.apache.commons.collections4.map.DefaultedMapTest.testMapHashCode":527,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveChangesMap":494,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":674,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testRemoveThenSet":7,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":52,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSize":264,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":675,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":48,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":465,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetByIndex":565,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":690,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemoveAll":660,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":511,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":621,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetIteratorRemoveChangesMap":421,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRemoveAll":409,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":468,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":669,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":51,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":366,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":456,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":49,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":725,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":443,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains3":726,"org.apache.commons.collections4.map.PredicatedMapTest.testFullMapCompatibility":454,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":20,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":27,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":724,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":94,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullKey":376,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove3":720,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":159,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove1":718,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesIteratorRemoveChangesMap":524,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRemove2":719,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveAll":539,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":18,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_remove":1,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiTailMapContains":78,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRetainAll":156,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":629,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveChangesMap":537,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetClearChangesMap":131,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiHeadMapContains":74,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullValue":589,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":666,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRetainAll":512,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":182,"org.apache.commons.collections4.map.ListOrderedMapTest.testRemoveByIndex":218,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetIteratorRemoveChangesMap":662,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiModifyEntrySet":684,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":689,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains3":480,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":415,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains2":479,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":2,"org.apache.commons.collections4.map.TransformedSortedMapTest.initializationError":107,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains1":478,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapHashCode":397,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":389,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":38,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetIteratorRemoveChangesMap":258,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesIteratorRemoveChangesMap":315,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastValues":120,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutAll":384,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":42,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetClearChangesMap":594,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveAll":610,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":502,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":505,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":22,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":379,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFullMapCompatibility":586,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":643,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":0,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetClearChangesMap":282,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapClear":377,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":201,"org.apache.commons.collections4.map.LazyMapTest.testKeySetIteratorRemoveChangesMap":508,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":680,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapClear":579,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":123,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":122,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":121,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":17,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":548,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRetainAll":611,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":12,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":89,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains3":247,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":174,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":368,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":517,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains2":246,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMap":80,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetContains1":245,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionClear":29,"org.apache.commons.collections4.map.LazySortedMapTest.testFullMapCompatibility":335,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testLastKey":11,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiModifyEntrySet":642,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove1":699,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastKeySet":224,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":420,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":557,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove2":700,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":343,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRemove3":701,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyPut":158,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nullValues":216,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetClearChangesMap":401,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":498,"org.apache.commons.collections4.map.ListOrderedMapTest.testCOLLECTIONS_474_nonNullValues":210,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testNextKey":359,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove3":659,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove2":658,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapClear":229,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRemove1":657,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove1":319,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastValues":520,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove2":320,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":90,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":116,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove3":321,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesClearChangesMap":242,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains1":681,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMakeMap":410,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains3":683,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":297,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains2":682,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":138,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":33,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":199,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":510,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesClearChangesMap":281,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":550,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":585,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":679,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiHeadMapContains":86,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testKeySetRetainAll":426,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapHashCode":234,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRetainAll":346,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":458,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":665,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":619,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":634,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":460,"org.apache.commons.collections4.map.ListOrderedMap2Test.testIndexOf":567,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutNullValue":239,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":425,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiSubMapContains":88,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveAll":295,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":691,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesIteratorRemoveChangesMap":434,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":34,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":133,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveAll":490,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":25,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testFullMapCompatibility":308,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetIteratorRemoveChangesMap":325,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":166,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":648,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRemoveAll":449,"org.apache.commons.collections4.map.LazyMapTest.testMapHashCode":484,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetRetainAll":661,"org.apache.commons.collections4.map.TransformedMapTest.testFactory_decorateTransform":115,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":444,"org.apache.commons.collections4.map.ListOrderedMapTest.testValueList_getByIndex":213,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":591,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":712,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":187,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetIteratorRemoveChangesMap":491,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":495,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":663,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":710,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":227,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":67,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":578,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":329,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":66,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":403,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":564,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":16,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":37,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastEntrySet":118,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":69,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetClearChangesMap":283,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":150,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":309,"org.apache.commons.collections4.map.ListOrderedMapTest.testEntrySetRemoveAll":260,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":652,"org.apache.commons.collections4.map.TransformedMapTest.testMapHashCode":127,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":168,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetClearChangesMap":531,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":360,"org.apache.commons.collections4.map.TransformedMapTest.testMakeMap":140,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":362,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveChangesMap":323,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":361,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testFullMapCompatibility":378,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveChangesMap":125,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":92,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":77,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetClearChangesMap":535,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRetainAll":555,"org.apache.commons.collections4.map.ListOrderedMap2Test.testFailFastKeySet":574,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":685,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesClearChangesMap":467,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":145,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":98,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutNullValue":406,"org.apache.commons.collections4.map.ListOrderedMapTest.testValuesRetainAll":253,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":344,"org.apache.commons.collections4.map.ListOrderedMapTest.testGetValueByIndex":209,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":400,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":339,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":399,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":398,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveChangesMap":290,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiSubMapContains":103,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":106,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":695,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":85,"org.apache.commons.collections4.map.ListOrderedMapTest.testNextKey":221,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testMapIterator":618,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":628,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":44,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":170,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":46,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.testFullMapCompatibility":61,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":50,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove3":487,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiClearByTailMap":79,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":207,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveChangesMap":435,"org.apache.commons.collections4.map.TransformedSortedMapTest.testTransformedMap":705,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRemoveAll":419,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove1":485,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove2":486,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":706,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetClearChangesMap":322,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":647,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":184,"org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap":60,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":372,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":631,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":630,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":552,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveAll":340,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetRetainAll":722,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRetainAll":292,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveAll":506,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":365,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":363,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":143,"org.apache.commons.collections4.map.MultiValueMapTest.testSize":349,"org.apache.commons.collections4.map.LazyMapTest.testValuesClearChangesMap":513,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":624,"org.apache.commons.collections4.map.PredicatedMapTest.testValuesRetainAll":436,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":294,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRetainAll":603,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":727,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":728,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullValue":536,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":15,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":267,"org.apache.commons.collections4.map.TransformedMapTest.testKeySetRemoveChangesMap":137,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":160,"org.apache.commons.collections4.map.ListOrderedMapTest.testKeySetRetainAll":257,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":185,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":687,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":198,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":422,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":163,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetIteratorRemoveChangesMap":704,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAdd":32,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":162,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":19,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":161,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapGet":583,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapGet":233,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesRemoveAll":602,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetIteratorRemoveChangesMap":612,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":617,"org.apache.commons.collections4.map.ListOrderedMap2Test.testGetValueByIndex":566,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains1":312,"org.apache.commons.collections4.map.ListOrderedMapTest.testMakeMap":226,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains2":313,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastKeySet":519,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutNullKey":588,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testSet":6,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":62,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains3":314,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":298,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRetainAll":526,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":204,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesClearChangesMap":556,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":623,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullValue":278,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":301,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":563,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove3":600,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove2":599,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":28,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":113,"org.apache.commons.collections4.map.LazyMapTest.testFailFastEntrySet":475,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":14,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":47,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMakeMap":265,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":345,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullValue":327,"org.apache.commons.collections4.map.ListOrderedMapTest.testLastKey":220,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":274,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":9,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":179,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":36,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemove1":598,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFullMapCompatibility":110,"org.apache.commons.collections4.map.ListOrderedMapTest.testFullMapCompatibility":236,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":455,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":134,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":423,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":269,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":54,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":375,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":237,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":639,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":638,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":71,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":637,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullKey":542,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":416,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":153,"org.apache.commons.collections4.map.LazySortedMapTest.testMapClear":334,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testBidiTailMapContains":87,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveAll":324,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":417,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":587,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":626,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveChangesMap":525,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetClearChangesMap":326,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":373,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastKeySet":429,"org.apache.commons.collections4.map.ListOrderedMap2Test.testRemoveByIndex":568,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":35,"org.apache.commons.collections4.map.PredicatedMapTest.testMakeMap":450,"org.apache.commons.collections4.map.ListOrderedMapTest.testSetValueByIndex":211,"org.apache.commons.collections4.map.ListOrderedMap2Test.testLastKey":570,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":202,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveChangesMap":395,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":8,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":280,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testValuesRetainAll":396,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMap":101,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesIteratorRemoveChangesMap":293,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":509,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":68,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetRetainAll":703,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":581,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testSortOrder":10,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveChangesMap":371,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testFailFastEntrySet":644,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":305,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map2":352,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveChangesMap":316,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":554,"org.apache.commons.collections4.map.MultiValueMapTest.testPutAll_Map1":351,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains1":715,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":152,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains3":717,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains2":716,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMap":97,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveAll":496,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":341,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":694,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":148,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":670,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesClearChangesMap":347,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":451,"org.apache.commons.collections4.map.DefaultedMapTest.testMapClear":543,"org.apache.commons.collections4.map.ListOrderedMap2Test.testKeySetRetainAll":607,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByHeadMap":96,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingForward":614,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullKey":142,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":561,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearByTailMap":100,"org.apache.commons.collections4.map.ListOrderedMapTest.testPreviousKey":222,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":582,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapPutNullValue":370,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":276,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailDoubleRemove":40,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiClearBySubMap":104,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutNullValue":136,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":357,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":714,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":640,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":635,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":641,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":13,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":31,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":408,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":23,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testFirstKey":390,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":332,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":146,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":457,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":93,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":228,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":65,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":354,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveChangesMap":364,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":418,"org.apache.commons.collections4.map.PredicatedMapTest.testKeySetRetainAll":466,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":533,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":302,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIterator":39,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":673,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":664,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMap":76,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiSubMapContains":82,"org.apache.commons.collections4.map.LazyMapTest.testMakeMap":497,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapHashCode":584,"org.apache.commons.collections4.map.MultiKeyMapTest.testLRUMultiKeyMap":164,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":272,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":649,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":63,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":177,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":369,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":3,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":111,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":300,"org.apache.commons.collections4.map.LazyMapTest.testMapClear":500,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":405,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":620,"org.apache.commons.collections4.map.ListOrderedMap2Test.testValuesIteratorRemoveChangesMap":604,"org.apache.commons.collections4.map.ListOrderedMapTest.testFirstKey":219,"org.apache.commons.collections4.map.ListOrderedMap2Test.testNextKey":571,"org.apache.commons.collections4.map.ListOrderedMapTest.testFailFastValues":225,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveAll":330,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullKey":333,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEntrySetRemoveChangesMap":609,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":205,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":386}}]

[{"failures":[0,1],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Attempted to add null object to queue\")","position":"org.apache.commons.collections4.queue.CircularFifoQueue:227","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:56","type":"CtThrowImpl"},"status":-1},{"failures":[2],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"object":"object"},"name":"add","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.AbstractMapDecorator:127","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:130","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"curObject":"item","leastObject":"item"},"name":"add","transplant":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.CollatingIterator:369","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<E>.push(E)","position":"org.apache.commons.collections4.iterators.PushbackIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[3],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)) | boolean","position":"org.apache.commons.collections4.list.GrowthList:157","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.org.apache.commons.collections4.Transformer<? super I, ? extends O> = org.apache.commons.collections4.Transformer<? super I, ? extends O>","position":"org.apache.commons.collections4.iterators.TransformIterator:130","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"flag":"nextObjectSet","removed":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{"closure":"closure"},"name":"add","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Closure<T>)(org.apache.commons.collections4.Closure<? super T>))","position":"org.apache.commons.collections4.functors.FunctorUtils:158","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.WhileClosure<E>(org.apache.commons.collections4.Predicate<? super E> , org.apache.commons.collections4.Closure<? super E> , boolean)","position":"org.apache.commons.collections4.functors.WhileClosure:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"queue is empty\")","position":"org.apache.commons.collections4.queue.CircularFifoQueue:289","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:59","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:271","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map.Entry<K, V> = new org.apache.commons.collections4.bidimap.AbstractDualBidiMap.MapEntry<K, V>(org.apache.commons.collections4.iterators.AbstractIteratorDecorator<java.util.Map.Entry<K, V>>.next() , org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>)","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:629","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.FixedSizeList:148","type":"CtReturnImpl"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-1},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"binaryOperator":"int > int","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return -1","position":"org.apache.commons.collections4.list.AbstractLinkedList:151","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[72],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{"added":"nextObjectSet","changed":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:165","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionPredicate.org.apache.commons.collections4.functors.ExceptionPredicate.<T>exceptionPredicate()","position":"org.apache.commons.collections4.PredicateUtils:91","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int -= 2","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1033","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int >= int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies(((int - int) + 1), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:183","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((int) >= 0) {\n    (int)++;\n} ","position":"org.apache.commons.collections4.list.TreeList:509","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:101","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:97","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitKeepCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.KeepCommand:55","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[73],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException((\"Entry.before is null.\" + (\" Please check that your keys are immutable, and that you have used synchronization properly.\" + \" If so, then please report this to dev@commons.apache.org as a bug.\")))","position":"org.apache.commons.collections4.map.LRUMap:197","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>","position":"org.apache.commons.collections4.map.TransformedSortedMap:100","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.System.java.lang.System.arraycopy(this.java.util.Map<K, V>[], (int + 1), java.util.Map<K, V>[], int, ((int - int) - 1))","position":"org.apache.commons.collections4.map.CompositeMap:162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().tailSet(E)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:114","type":"CtLocalVariableImpl"},"status":-2},{"failures":[4,5,6,7,9,11,12,13,14],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = 2","position":"org.apache.commons.collections4.map.Flat3Map:474","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The list must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:59","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.remove(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.map.FixedSizeMap:96","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)) | boolean","position":"org.apache.commons.collections4.list.GrowthList:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"coll2":"coll","coll1":"coll"},"name":"replace","transplant":{"sourceCode":"if ((java.util.Collection<?>.size()) < (java.util.Collection<?>.size())) {\n    for (final java.lang.Object java.lang.Object : java.util.Collection<?>) {\n        if (java.util.Collection<?>.contains(java.lang.Object)) {\n            return true;\n        } \n    }\n} else {\n    for (final java.lang.Object java.lang.Object : java.util.Collection<?>) {\n        if (java.util.Collection<?>.contains(java.lang.Object)) {\n            return true;\n        } \n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:410","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.collection.SynchronizedCollection<T>(java.util.Collection<T>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:61","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Map<O, java.lang.Integer>.put(O, java.lang.Integer.java.lang.Integer.valueOf(((java.lang.Integer.intValue()) + 1)))","position":"org.apache.commons.collections4.CollectionUtils:445","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>.get(java.lang.Object)","position":"org.apache.commons.collections4.map.DefaultedMap:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[]);\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: InstantiationException\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor must be public\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor threw an exception\" , java.lang.reflect.InvocationTargetException);\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:125","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bag.CollectionSortedBag:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:927","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:257","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.ref.Reference<?> = java.lang.ref.ReferenceQueue<java.lang.Object>.poll()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:382","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[74,75,76],"variableMapping":{"isLocked":"validForUpdate"},"name":"replace","transplant":{"sourceCode":"if ((this.boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:239","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:128","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.InstanceofPredicate.org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.PredicateUtils:175","type":"CtReturnImpl"},"status":-2},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\")","position":"org.apache.commons.collections4.map.FixedSizeMap:118","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:132","type":"CtReturnImpl"},"status":-1},{"failures":[15,44,70,71],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"No Collection associated with this Iterator\")","position":"org.apache.commons.collections4.iterators.EnumerationIterator:114","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"End index must not be less than start index.\")","position":"org.apache.commons.collections4.iterators.ArrayIterator:100","type":"CtThrowImpl"},"status":-1},{"failures":[],"binaryOperator":"((((\"Cannot add Object \\'\" + E) + \"\\' - Predicate \\'\") + (org.apache.commons.collections4.Predicate<? super E>)) + \"\\' rejected it\")","name":"math","position":"org.apache.commons.collections4.collection.PredicatedCollection:101","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Collection<?> instanceof org.apache.commons.collections4.BoundedCollection) {\n    return ((org.apache.commons.collections4.BoundedCollection<?>)(java.util.Collection<?>)).isFull();\n} ","position":"org.apache.commons.collections4.CollectionUtils:1470","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:138","type":"CtReturnImpl"},"status":-2},{"failures":[72],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (((int) == (-1)) || ((int) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int))) {\n    int = 0;\n    for (final java.util.Iterator<?> java.util.Iterator<?> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeEntrySet.iterator() ; java.util.Iterator<?>.hasNext() ; java.util.Iterator<?>.next()) {\n        ++(int);\n    }\n    int = org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1995","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.LazyList:112","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.printIndent(java.io.PrintStream, org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size())","position":"org.apache.commons.collections4.MapUtils:985","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException((((\"Objects of type \" + (E.getClass())) + \" cannot be added to \") + \"a naturally ordered TreeBag as it does not implement Comparable\"))","position":"org.apache.commons.collections4.bag.TreeBag:87","type":"CtThrowImpl"},"status":-2},{"failures":[112,113,114,115],"variableMapping":{"size":"index","index":"index"},"name":"replace","transplant":{"sourceCode":"if (int > int) {\n    throw new java.lang.IndexOutOfBoundsException(((((((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") greater than the size of the \") + \"list (\") + int) + \").\"));\n} ","position":"org.apache.commons.collections4.list.AbstractLinkedList:546","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.GrowthList:126","type":"CtInvocationImpl"},"status":-1},{"failures":[116,117,118,119,120,121,122,123,124,125,84,126,127,128,129,130],"variableMapping":{"this":"this","index":"index"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().remove(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.FixedSizeList:98","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != null) {\n    while ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) != null) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getRight(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement);\n    }\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:700","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.ReverseListIterator:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractLinkedList<E>.set((int + (int)), E)","position":"org.apache.commons.collections4.list.AbstractLinkedList:1023","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.getNearestEntryForKey(K, int)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1063","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super V, ? extends V>) == null) {\n    return V;\n} ","position":"org.apache.commons.collections4.map.TransformedMap:182","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"status":-2},{"failures":[131,132],"binaryOperator":"(((org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.size()) == 5) && ((java.lang.Object == (org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(0))) || ((java.lang.Object != null) && (java.lang.Object.equals(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>.getKey(0))))))","name":"removeConditional","position":"org.apache.commons.collections4.map.MultiKeyMap:696","type":"mutation","status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().headMap(K)","position":"org.apache.commons.collections4.map.TransformedSortedMap:150","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"type":"type"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.InstanceofPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.InstanceofPredicate.org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.PredicateUtils:175","type":"CtReturnImpl"},"status":-2},{"failures":[133,134,135,136,137],"variableMapping":{"prototype":"constantToReturn"},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.InstantiateFactory<T>(((java.lang.Class<T>)(T.getClass())) , new java.lang.Class<?>[]{ T.getClass() } , new java.lang.Object[]{ T })","position":"org.apache.commons.collections4.functors.PrototypeFactory:69","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(java.lang.Object))","position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:200","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:226","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger = java.util.Map.Entry<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>.getValue()","position":"org.apache.commons.collections4.bag.AbstractMapBag:571","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:126","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.remove(java.util.Map.Entry<K, V>.getKey())","position":"org.apache.commons.collections4.map.StaticBucketMap:528","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterIterator:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[138],"variableMapping":{"iterator":"iterator","list":"list"},"name":"replace","transplant":{"sourceCode":"this.java.util.ListIterator<E> = this.java.util.List<E>.listIterator()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:242","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E> = java.util.List<E>.listIterator(java.util.List<E>.size())","position":"org.apache.commons.collections4.iterators.ReverseListIterator:171","type":"CtAssignmentImpl"},"status":-1},{"failures":[139,140],"name":"returnValue","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"mutation","return":"return true","status":-1},{"failures":[141,142],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:86","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> != null) {\n    if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n        final V V = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue();\n        org.apache.commons.collections4.map.AbstractHashedMap<K, V>.removeMapping(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>, int, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>);\n        return V;\n    } \n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n    org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:343","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().retainAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:182","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.comparators.ComparatorChain:337","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:137","type":"CtReturnImpl"},"status":-2},{"failures":[4,143,5,6,7,144,8,9,10,11,12,13,14],"binaryOperator":"(java.util.ListIterator<? extends E>) == null","name":"negateConditional","position":"org.apache.commons.collections4.iterators.FilterListIterator:260","type":"mutation","status":-1},{"failures":[],"binaryOperator":"((((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failures":[],"binaryOperator":"((((\"reuse=null, header.after=\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\")","name":"removeConditional","position":"org.apache.commons.collections4.map.LRUMap:271","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.UnmodifiableCollection.org.apache.commons.collections4.collection.UnmodifiableCollection.unmodifiableCollection(java.util.Collection<V>)","position":"org.apache.commons.collections4.map.UnmodifiableMap:156","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.FixedSizeList:98","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.FixedSizeList:98","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Array.((E)(java.lang.reflect.Array.get(java.lang.Object, (int)++)))","position":"org.apache.commons.collections4.iterators.ArrayIterator:150","type":"CtReturnImpl"},"status":-2},{"failures":[145,146,147,148,149,150],"variableMapping":{"this":"this","mapToCopy":"mapToCopy"},"name":"replace","transplant":{"sourceCode":"for (final K K : java.util.Map<? extends K, ? extends V>.keySet()) {\n    if (!(org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.containsKey(K))) {\n        throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n    } \n}","position":"org.apache.commons.collections4.map.FixedSizeMap:125","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.TransformedSortedSet<E>.getSortedSet().comparator()","position":"org.apache.commons.collections4.set.TransformedSortedSet:125","type":"CtReturnImpl"},"status":-2},{"failures":[151,152,153,154],"binaryOperator":"java.lang.Object == this","name":"negateConditional","position":"org.apache.commons.collections4.collection.SynchronizedCollection:195","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().clear()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:78","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getKey()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1665","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * A range view of the {@link Trie}.\n */\nprivate abstract class RangeMap extends java.util.AbstractMap<K, V> implements java.util.SortedMap<K, V> {\n    /** \n     * The {@link #entrySet()} view.\n     */\nprivate transient volatile java.util.Set<java.util.Map.Entry<K, V>> entrySet;\n\n    /** \n     * Creates and returns an {@link #entrySet()} view of the {@link RangeMap}.\n     */\nprotected abstract java.util.Set<java.util.Map.Entry<K, V>> createEntrySet();\n\n    /** \n     * Returns the FROM Key.\n     */\nprotected abstract K getFromKey();\n\n    /** \n     * Whether or not the {@link #getFromKey()} is in the range.\n     */\nprotected abstract boolean isFromInclusive();\n\n    /** \n     * Returns the TO Key.\n     */\nprotected abstract K getToKey();\n\n    /** \n     * Whether or not the {@link #getToKey()} is in the range.\n     */\nprotected abstract boolean isToInclusive();\n\n    public java.util.Comparator<? super K> comparator() {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator();\n    }\n\n    @java.lang.Override\n    public boolean containsKey(final java.lang.Object key) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.castKey(java.lang.Object)))) {\n            return false;\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.containsKey(java.lang.Object);\n    }\n\n    @java.lang.Override\n    public V remove(final java.lang.Object key) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.castKey(java.lang.Object)))) {\n            return null;\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.remove(java.lang.Object);\n    }\n\n    @java.lang.Override\n    public V get(final java.lang.Object key) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.castKey(java.lang.Object)))) {\n            return null;\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.get(java.lang.Object);\n    }\n\n    @java.lang.Override\n    public V put(final K key, final V value) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange(K))) {\n            throw new java.lang.IllegalArgumentException((\"Key is out of range: \" + K));\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.put(K, V);\n    }\n\n    @java.lang.Override\n    public java.util.Set<java.util.Map.Entry<K, V>> entrySet() {\n        if ((java.util.Set<java.util.Map.Entry<K, V>>) == null) {\n            java.util.Set<java.util.Map.Entry<K, V>> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.createEntrySet();\n        } \n        return java.util.Set<java.util.Map.Entry<K, V>>;\n    }\n\n    public java.util.SortedMap<K, V> subMap(final K fromKey, final K toKey) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange2(K))) {\n            throw new java.lang.IllegalArgumentException((\"FromKey is out of range: \" + K));\n        } \n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange2(K))) {\n            throw new java.lang.IllegalArgumentException((\"ToKey is out of range: \" + K));\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.createRangeMap(K, org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isFromInclusive(), K, org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isToInclusive());\n    }\n\n    public java.util.SortedMap<K, V> headMap(final K toKey) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange2(K))) {\n            throw new java.lang.IllegalArgumentException((\"ToKey is out of range: \" + K));\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.createRangeMap(org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getFromKey(), org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isFromInclusive(), K, org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isToInclusive());\n    }\n\n    public java.util.SortedMap<K, V> tailMap(final K fromKey) {\n        if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange2(K))) {\n            throw new java.lang.IllegalArgumentException((\"FromKey is out of range: \" + K));\n        } \n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.createRangeMap(K, org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isFromInclusive(), org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getToKey(), org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isToInclusive());\n    }\n\n    /** \n     * Returns true if the provided key is greater than TO and less than FROM.\n     */\nprotected boolean inRange(final K key) {\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getFromKey();\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getToKey();\n        return ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inFromRange(K, false))) && ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inToRange(K, false)));\n    }\n\n    /** \n     * This form allows the high endpoint (as well as all legit keys).\n     */\nprotected boolean inRange2(final K key) {\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getFromKey();\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getToKey();\n        return ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inFromRange(K, false))) && ((K == null) || org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inToRange(K, true)));\n    }\n\n    /** \n     * Returns true if the provided key is in the FROM range of the {@link RangeMap}.\n     */\nprotected boolean inFromRange(final K key, final boolean forceInclusive) {\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getFromKey();\n        final boolean boolean = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isFromInclusive();\n        final int int = org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().compare(K, K);\n        if (boolean || boolean) {\n            return int >= 0;\n        } else {\n            return int > 0;\n        }\n    }\n\n    /** \n     * Returns true if the provided key is in the TO range of the {@link RangeMap}.\n     */\nprotected boolean inToRange(final K key, final boolean forceInclusive) {\n        final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getToKey();\n        final boolean boolean = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.isToInclusive();\n        final int int = org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().compare(K, K);\n        if (boolean || boolean) {\n            return int <= 0;\n        } else {\n            return int < 0;\n        }\n    }\n\n    /** \n     * Creates and returns a sub-range view of the current {@link RangeMap}.\n     */\nprotected abstract java.util.SortedMap<K, V> createRangeMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive);\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1675","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedMap<K, V>)(org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated()))","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:75","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry<K, V>)(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>))","position":"org.apache.commons.collections4.map.AbstractReferenceMap:748","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:138","type":"CtReturnImpl"},"status":-2},{"failures":[15,44,70,71],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:120","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeInt(org.apache.commons.collections4.queue.CircularFifoQueue<E>.size())","position":"org.apache.commons.collections4.queue.CircularFifoQueue:119","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated()","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final K K = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.getFromKey()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1783","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:220","type":"CtIfImpl"},"status":-2},{"failures":[155,156,157,158],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:144","type":"CtIfImpl"},"status":-1},{"failures":[4,143,5,6,7,8,9,10,11,12,13,14],"variableMapping":{"isLocked":"previousObjectSet"},"name":"replace","transplant":{"sourceCode":"this.boolean = true","position":"org.apache.commons.collections4.comparators.ComparatorChain:269","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:244","type":"CtAssignmentImpl"},"status":-1},{"failures":[159,160,161,162,163],"variableMapping":{"nextObjectSet":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"if (this.boolean) {\n    throw new java.lang.IllegalStateException(\"remove() cannot be called\");\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((K) + \"=\") + (V)","position":"org.apache.commons.collections4.trie.AbstractBitwiseTrie:210","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-2},{"failures":[2],"variableMapping":{"iterator":"iterator","obj":"obj"},"name":"add","transplant":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:145","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"status":-2},{"failures":[164],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() method is not supported\")","position":"org.apache.commons.collections4.iterators.ArrayListIterator:166","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure must not be null\")","position":"org.apache.commons.collections4.functors.ClosureTransformer:49","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int = 1","position":"org.apache.commons.collections4.map.Flat3Map:562","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:187","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitKeepCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.KeepCommand:55","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>>.remove()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:99","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.list.TreeList<E>.listIterator(0)","position":"org.apache.commons.collections4.list.TreeList:134","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:84","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.map.DefaultedMap:180","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final E E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:130","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final V V = org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(K)","position":"org.apache.commons.collections4.map.LazyMap:165","type":"CtLocalVariableImpl"},"status":-2},{"failures":[155,156,157,165,166,167,158,168,169,170,171,172,173],"variableMapping":{"hasNext":"hasNext"},"name":"add","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:169","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.util.NoSuchElementException(\"No more elements in the iteration\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"CtIfImpl"},"status":-1},{"failureDictionary":{"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":173,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":149,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":9,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":132,"org.apache.commons.collections4.FactoryUtilsTest.testConstantFactoryConstant":137,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArrayPopulate":97,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testEqualsNull":151,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":0,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":45,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":72,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":139,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":166,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":50,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":127,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":42,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":109,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":140,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":121,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":18,"org.apache.commons.collections4.map.TransformedSortedMapTest.testFactory_decorateTransform":73,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":107,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking":113,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":117,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":172,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":110,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":146,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":119,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking2":114,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":34,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":44,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testReset":138,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":11,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":53,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":144,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_next":165,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":22,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":112,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":19,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":64,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":129,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":54,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":78,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testRemove":76,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":88,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":161,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":3,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":61,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":91,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":98,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":48,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":106,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":79,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":86,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":148,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":35,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":4,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":99,"org.apache.commons.collections4.bag.TransformedBagTest.testBagToArrayPopulate":94,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":66,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":125,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":57,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":96,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":8,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":62,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":89,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":159,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":20,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":150,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":77,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":100,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":43,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":80,"org.apache.commons.collections4.map.LazySortedMapTest.initializationError":134,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":103,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":10,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":41,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":126,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":158,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":25,"org.apache.commons.collections4.bag.SynchronizedBagTest.testEqualsNull":154,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":160,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":118,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":51,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":40,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":93,"org.apache.commons.collections4.map.LazyMapTest.initializationError":135,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":147,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":5,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":130,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":131,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":92,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":65,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":38,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":63,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":81,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":83,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagToArrayPopulate":104,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":168,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":47,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":71,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":23,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testRemoveThenSet":75,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":115,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":124,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":122,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":145,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":12,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":155,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":156,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":157,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":28,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEmptyIterator":46,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":31,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":90,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":163,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":82,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":143,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":108,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsHashBag":153,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":30,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":27,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":29,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":52,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":141,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":1,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":69,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":128,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":14,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":15,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":26,"org.apache.commons.collections4.FactoryUtilsTest.testConstantFactoryNull":136,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":116,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagToArrayPopulate":102,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":49,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":13,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":85,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":39,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":142,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":36,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":56,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":169,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":95,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":68,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":111,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":67,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":123,"org.apache.commons.collections4.MapUtilsTest.testLazyMapFactory":133,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":7,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":171,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":55,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":84,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenRemove":74,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":60,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":87,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":21,"org.apache.commons.collections4.TransformerUtilsTest.testExecutorTransformer":164,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":37,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":152,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":16,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":24,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":162,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":120,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":170,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":58,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":59,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":167,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":32,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":2,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":6,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEmptyIterator":33,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":101,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":17,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":105,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":70}}]

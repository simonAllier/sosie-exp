[{"failures":[],"variableMapping":{"val":"object"},"name":"add","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.CollatingIterator:258","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ","position":"org.apache.commons.collections4.map.SingletonMap:268","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.SortedMap<K, V>.size()) > 0) {\n    final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>);\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear();\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>);\n} ","position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"switch (int) {\n    default :\n        org.apache.commons.collections4.map.Flat3Map<K, V>.convertToMap();\n        org.apache.commons.collections4.map.AbstractHashedMap<K, V>.put(K, V);\n        return null;\n    case 2 :\n        int = K == null ? 0 : K.hashCode();\n        K = K;\n        V = V;\n        break;\n    case 1 :\n        int = K == null ? 0 : K.hashCode();\n        K = K;\n        V = V;\n        break;\n    case 0 :\n        int = K == null ? 0 : K.hashCode();\n        K = K;\n        V = V;\n        break;\n}","position":"org.apache.commons.collections4.map.Flat3Map:343","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:154","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doEquals(java.lang.Object, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:452","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Constructor<T> = java.lang.Class<T>.getConstructor(java.lang.Class<?>[])","position":"org.apache.commons.collections4.functors.InstantiateFactory:108","type":"CtAssignmentImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8],"variableMapping":{"exhausted":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"if (this.boolean) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.PeekingIterator:129","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.PassiveExpiringMap<K, V>.put(java.util.Map.Entry<? extends K, ? extends V>.getKey(), java.util.Map.Entry<? extends K, ? extends V>.getValue())","position":"org.apache.commons.collections4.map.PassiveExpiringMap:448","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:200","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:133","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:89","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.set.PredicatedSortedSet<E>(java.util.SortedSet<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:90","type":"CtReturnImpl"},"status":-2},{"failures":[9],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.NotPredicate<T>(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.functors.NotPredicate:49","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.TransformedPredicate.org.apache.commons.collections4.functors.TransformedPredicate.<T>transformedPredicate(org.apache.commons.collections4.Transformer<? super T, ? extends T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:537","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.io.ObjectOutputStream.writeObject(T)","position":"org.apache.commons.collections4.functors.PrototypeFactory:178","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsTruePredicate.org.apache.commons.collections4.functors.NullIsTruePredicate.nullIsTruePredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:518","type":"CtReturnImpl"},"status":-2},{"failures":[10,11,12,13],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:124","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.bag.SynchronizedBag<E>.getBag().remove(java.lang.Object, int);\n}","position":"org.apache.commons.collections4.bag.SynchronizedBag:94","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.Predicate<E>.evaluate(E)) {\n    return int;\n} ","position":"org.apache.commons.collections4.ListUtils:512","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.WhileClosure<E>(org.apache.commons.collections4.Predicate<? super E> , org.apache.commons.collections4.Closure<? super E> , boolean)","position":"org.apache.commons.collections4.functors.WhileClosure:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.LRUMap<K, V>.moveToMRU(((org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>)))","position":"org.apache.commons.collections4.map.LRUMap:225","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.LazyList<E>(java.util.List<E> , org.apache.commons.collections4.Factory<? extends E>)","position":"org.apache.commons.collections4.list.LazyList:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.AbstractHashedMap:1338","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionFactory.org.apache.commons.collections4.functors.ExceptionFactory.<T>exceptionFactory()","position":"org.apache.commons.collections4.FactoryUtils:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Double java.lang.Double = org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.getDouble(java.util.Map<? super K, ?>, K)","position":"org.apache.commons.collections4.MapUtils:547","type":"CtLocalVariableImpl"},"status":-2},{"failures":[14],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.functors.WhileClosure:120","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.PrintStream.println(\"null\")","position":"org.apache.commons.collections4.MapUtils:977","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:143","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.util.Set<java.util.Map.Entry<K, V>> java.util.Set<java.util.Map.Entry<K, V>> = java.util.Collections.java.util.Collections.emptySet()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2283","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:176","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((boolean) == true) {\n    throw new java.lang.UnsupportedOperationException(\"Comparator ordering cannot be changed after the first comparison is performed\");\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:239","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:128","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.CollatingIterator<E>.addIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.CollatingIterator:137","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = ((java.util.Iterator<? extends E>)(E))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:109","type":"CtAssignmentImpl"},"status":-2},{"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"binaryOperator":"java.lang.Object == this","name":"negateConditional","position":"org.apache.commons.collections4.map.AbstractMapDecorator:127","type":"mutation","status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:119","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = int[][int]","position":"org.apache.commons.collections4.iterators.PermutationIterator:132","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.iterators.ArrayIterator<E>.(hasNext()) == false) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:147","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[55,56,57,58,59,13],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Collection<?> != null) {\n    boolean boolean = false;\n    final java.util.Iterator<?> java.util.Iterator<?> = java.util.Collection<?>.iterator();\n    while (java.util.Iterator<?>.hasNext()) {\n        final java.lang.Object java.lang.Object = java.util.Iterator<?>.next();\n        final boolean boolean = org.apache.commons.collections4.bag.AbstractBagDecorator<E>.remove(java.lang.Object, org.apache.commons.collections4.bag.AbstractBagDecorator<E>.getCount(java.lang.Object));\n        boolean = boolean || boolean;\n    }\n    return boolean;\n} else {\n    return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().removeAll(null);\n}","position":"org.apache.commons.collections4.bag.CollectionBag:125","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.greatestNode(org.apache.commons.collections4.bidimap.TreeBidiMap.this.org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()], org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).getValue()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2084","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"new org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>(8)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:80","type":"CtNewClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":0},{"failures":[60],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < int) {\n    E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int);\n    if (E == null) {\n        E = org.apache.commons.collections4.Factory<? extends E>.create();\n        org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E);\n        return E;\n    } \n    return E;\n} ","position":"org.apache.commons.collections4.list.LazyList:113","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((boolean) || (boolean)) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.iterators.SingletonIterator:106","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:142","type":"CtIfImpl"},"status":-2},{"failures":[61,62,63,64,65,66],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.FilterIterator:100","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.StringBuilder.toString()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1389","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsFalsePredicate.org.apache.commons.collections4.functors.NullIsFalsePredicate.nullIsFalsePredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:503","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (!(java.lang.Object.getClass().equals(java.lang.Object.getClass()))) {\n    return false;\n} ","position":"org.apache.commons.collections4.comparators.NullComparator:172","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:64","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.NodeCachingLinkedList<E>.addNodeToCache(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)","position":"org.apache.commons.collections4.list.NodeCachingLinkedList:203","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    java.lang.reflect.Constructor<T> = java.lang.Class<T>.getConstructor(java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n    throw new java.lang.IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:107","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:632","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.FactoryTransformer<I, O>(org.apache.commons.collections4.Factory<? extends O>)","position":"org.apache.commons.collections4.functors.FactoryTransformer:51","type":"CtReturnImpl"},"status":-2},{"failures":[67],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"FilterListIterator.remove() is not supported.\")","position":"org.apache.commons.collections4.iterators.FilterListIterator:162","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The list must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingListIterator:59","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.UnmodifiableCollection.org.apache.commons.collections4.collection.UnmodifiableCollection.unmodifiableCollection(org.apache.commons.collections4.Get<K, V>.values())","position":"org.apache.commons.collections4.SplitMapUtils:113","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator.EntrySet(java.util.Map<K, V>.entrySet() , this)","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.map.AbstractHashedMap<K, V>) != null) {\n    return org.apache.commons.collections4.map.AbstractHashedMap<K, V>.hashCode();\n} ","position":"org.apache.commons.collections4.map.Flat3Map:1191","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<E>.push(E)","position":"org.apache.commons.collections4.iterators.PushbackIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:253","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"added":"validForUpdate","changed":"validForUpdate"},"name":"add","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ReverseListIterator:161","type":"CtAssignmentImpl"},"status":0},{"failures":[0,68,1,2,3,69,4,70,5,6,7,8],"variableMapping":{"removed":"nextObjectSet","nextCalled":"nextObjectSet"},"name":"replace","transplant":{"sourceCode":"if ((!(this.boolean)) || (this.boolean)) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.iterators.SingletonListIterator:133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.list.TreeList:622","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.V = null","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:89","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:165","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().tailSet(E)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:114","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedSet<E> java.util.SortedSet<E> = org.apache.commons.collections4.set.TransformedSortedSet<E>.getSortedSet().subSet(E, E)","position":"org.apache.commons.collections4.set.TransformedSortedSet:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[71,72,73,74,75,76,77,78,79,80],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:170","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map must not be null\")","position":"org.apache.commons.collections4.map.AbstractMapDecorator:62","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.isEmpty()) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:762","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return T","position":"org.apache.commons.collections4.map.AbstractReferenceMap:710","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.iterators.PushbackIterator:105","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<? extends E> != (java.util.Iterator<? extends E>)) {\n    if ((java.util.Iterator<? extends E>) != null) {\n        org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:179","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = this.java.lang.Object","position":"org.apache.commons.collections4.map.AbstractHashedMap:1097","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:105","type":"CtReturnImpl"},"status":-2},{"failures":[81,82,83,84,85,86,87],"variableMapping":{"isLocked":"chainExhausted"},"name":"replace","transplant":{"sourceCode":"if ((this.boolean) == false) {\n    this.boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.IteratorChain:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:82","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (java.util.ListIterator<E>.hasNext()) {\n        E = java.util.ListIterator<E>.next();\n    }\n    java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"status":-2},{"failures":[88,89],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().peek()","position":"org.apache.commons.collections4.queue.PredicatedQueue:107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().poll()","position":"org.apache.commons.collections4.queue.PredicatedQueue:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((int) == (-1)) {\n    throw new java.lang.IllegalStateException(\"No value has been returned yet\");\n} ","position":"org.apache.commons.collections4.iterators.CollatingIterator:282","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (((java.util.Iterator<? extends E>.hasNext()) == false) && (!(boolean))) {\n    final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if (java.util.Iterator<? extends E> != null) {\n        java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n    } else {\n        boolean = true;\n    }\n}","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:94","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.keyvalue.DefaultMapEntry<K, V>(this)","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-2},{"failures":[90],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.apache.commons.collections4.functors.PrototypeFactory:73","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:154","type":"CtInvocationImpl"},"status":-1},{"failures":[91],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:140","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((java.util.Set<E>.size()) > 0) || ((java.util.List<E>.size()) > 0)) {\n    throw new java.lang.IllegalArgumentException(\"Set and List must be empty\");\n} ","position":"org.apache.commons.collections4.set.ListOrderedSet:83","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-2},{"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,88,142,143,144,89,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,60,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,91,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,90,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,17,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,19,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,21,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,31,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,35,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,42,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,44,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,50,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,52,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,55,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,56,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,57,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,58,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,59,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,12,13,1348,1349,1350,1351,1352,1353],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.map.LinkedMap:259","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<E>","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:79","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.size()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1429","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"closure":"closure"},"name":"replace","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Closure<T>)(org.apache.commons.collections4.Closure<? super T>))","position":"org.apache.commons.collections4.functors.FunctorUtils:158","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.WhileClosure<E>(org.apache.commons.collections4.Predicate<? super E> , org.apache.commons.collections4.Closure<? super E> , boolean)","position":"org.apache.commons.collections4.functors.WhileClosure:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.MapUtils:626","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"it2":"iterator","it1":"iterator"},"name":"replace","transplant":{"sourceCode":"return !((java.util.ListIterator<?>.hasNext()) || (java.util.ListIterator<?>.hasNext()))","position":"org.apache.commons.collections4.list.AbstractLinkedList:371","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<? extends E>) == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:260","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Unknown unknownObjectBehavior: \" + (org.apache.commons.collections4.comparators.FixedOrderComparator.UnknownObjectBehavior))","name":"removeConditional","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:242","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.map.MultiKeyMap:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"case 2 :\n    if ((K) == null) {\n        final V V = V;\n        V = V;\n        return V;\n    } ","position":"org.apache.commons.collections4.map.Flat3Map:303","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) < (int)","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"CtReturnImpl"},"status":-2},{"failures":[81,82,84,85,86],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"while (((java.util.Iterator<? extends E>.hasNext()) == false) && (!(boolean))) {\n    final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if (java.util.Iterator<? extends E> != null) {\n        java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n    } else {\n        boolean = true;\n    }\n}","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:94","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.iterators.NodeListIterator(org.w3c.dom.NodeList)","position":"org.apache.commons.collections4.IteratorUtils:785","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((!(boolean)) && (!(org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.isEmpty()))) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.pop();\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:195","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:89","type":"CtInvocationImpl"},"status":-2},{"failures":[0,1,2,3,1354,4,5,6,7,8],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Cannot add key - Predicate rejected it\")","position":"org.apache.commons.collections4.map.PredicatedMap:143","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.collections4.iterators.FilterListIterator:141","type":"CtReturnImpl"},"status":-1},{"failures":[0,1,2,3,69,4,70,5,6,7,8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterIterator:143","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-1},{"failures":[1355,62,64,1356,1357],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = K == null ? 0 : K.hashCode()","position":"org.apache.commons.collections4.map.Flat3Map:354","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.System.(java.lang.System.identityHashCode(java.lang.Object)) ^ java.lang.System.(java.lang.System.identityHashCode(java.lang.Object))","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.apache.commons.collections4.ArrayStack<E>.isEmpty()) ? org.apache.commons.collections4.ArrayStack<E>.pop() : java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.PushbackIterator:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.collection.SynchronizedCollection:195","type":"CtIfImpl"},"status":0},{"failures":[1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403],"binaryOperator":"((((int % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0) || ((int % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0)) || ((int % (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)) != 0))","name":"removeConditional","position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:61","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.purgeBeforeRead()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:200","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:60","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"key"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.get(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2062","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[1404,1405],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<java.util.Map.Entry<K, V>> = new org.apache.commons.collections4.iterators.ListIteratorWrapper<java.util.Map.Entry<K, V>>(this.java.util.Iterator<java.util.Map.Entry<K, V>>)","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:145","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>> = java.util.Set<java.util.Map.Entry<K, V>>.iterator()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:92","type":"CtAssignmentImpl"},"status":-1},{"failures":[1406,1407,1408],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(\"Transformer must return an instanceof Boolean, it was a null object\")","position":"org.apache.commons.collections4.functors.TransformerPredicate:75","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.SynchronizedCollection:73","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getKey()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1112","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.FilterListIterator:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"for (final E E : this) {\n    java.io.ObjectOutputStream.writeObject(E);\n}","position":"org.apache.commons.collections4.list.AbstractLinkedList:604","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.bag.TreeBag:117","type":"CtInvocationImpl"},"status":-2},{"failures":[1409],"variableMapping":{"element":"input"},"name":"replace","transplant":{"sourceCode":"if (null == E) {\n    throw new java.lang.NullPointerException(\"Attempted to add null object to queue\");\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:226","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:86","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this.E[][this.int]","position":"org.apache.commons.collections4.iterators.ObjectArrayListIterator:113","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.RuntimeException java.lang.RuntimeException","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:61","type":"CtLocalVariableImpl"},"status":-2},{"failures":[1404,1405],"binaryOperator":"(java.util.Map.Entry<K, V>) == null","name":"negateConditional","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>)","position":"org.apache.commons.collections4.list.TreeList:628","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.SortedBidiMap<K, V>)(org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated()))","position":"org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator:59","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Map<K, V>.get(java.lang.Object)","position":"org.apache.commons.collections4.map.LazyMap:169","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Cannot add Object \\'\" + E) + \"\\' - Predicate \\'\") + (org.apache.commons.collections4.Predicate<? super E>))","name":"math","position":"org.apache.commons.collections4.collection.PredicatedCollection:101","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.int) == int) && org.apache.commons.collections4.map.AbstractHashedMap<K, V>.(isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.java.lang.Object))) {\n    return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>;\n} ","position":"org.apache.commons.collections4.map.AbstractHashedMap:458","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().last()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:100","type":"CtReturnImpl"},"status":-2},{"failures":[1410,1411],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Parameter types must match the arguments\")","position":"org.apache.commons.collections4.functors.InstantiateFactory:64","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:85","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.keyvalue.DefaultMapEntry<K, V>(this)","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:112","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:111","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.UniquePredicate.org.apache.commons.collections4.functors.UniquePredicate.<T>uniquePredicate()","position":"org.apache.commons.collections4.PredicateUtils:191","type":"CtReturnImpl"},"status":0},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":172,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":912,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":913,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":1247,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testObjectHashCodeEqualsSelfHashCode":234,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":798,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":732,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastEntrySet":1024,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":375,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking":514,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastEntrySet":911,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToString":220,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":1350,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":21,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":255,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":501,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.initializationError":1403,"org.apache.commons.collections4.list.FixedSizeListTest.testObjectHashCodeEqualsSelfHashCode":625,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionClear":1076,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":107,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testSerializeDeserializeThenCompare":243,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":492,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEqualsNull":32,"org.apache.commons.collections4.list.UnmodifiableListTest.testListListIterator":634,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":296,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":157,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":129,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":274,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetIteratorRemoveChangesMap":1012,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":546,"org.apache.commons.collections4.map.UnmodifiableMapTest.testDecorateFactory":78,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":114,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testEqualsNull":285,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":460,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":865,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":371,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":509,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":1357,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsContract":303,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":1082,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFalsePredicate":1354,"org.apache.commons.collections4.set.CompositeSetTest.testObjectEqualsSelf":404,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":504,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndexBoundsChecking":723,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":914,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":440,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":668,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":692,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRetainAll":863,"org.apache.commons.collections4.bag.TransformedBagTest.testBagAdd":1220,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":1390,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":0,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":345,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":646,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":718,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToString":645,"org.apache.commons.collections4.map.CompositeMapTest.testObjectEqualsSelf":1062,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking":662,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testEqualsNull":260,"org.apache.commons.collections4.ListUtilsTest.testLazyList":60,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListSerialization":637,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":837,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":317,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSimpleSerialization":476,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEqualsNull":1117,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":204,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":1329,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionSize":237,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testDecorateFactory":74,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueCompatibility":143,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToString":577,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":194,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":48,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":805,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectHashCodeEqualsContract":1102,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":902,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":1010,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorRemoveProtectsInvariants":1313,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":299,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":930,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":411,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIterator":403,"org.apache.commons.collections4.CollectionUtilsTest.emptyIfNull":169,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":802,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":422,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":1,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":320,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":698,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":1148,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueCompatibility":120,"org.apache.commons.collections4.bag.HashBagTest.testCollectionClear":1165,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":281,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionSize":363,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesClearChangesMap":1402,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRemoveAll":782,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":506,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":575,"org.apache.commons.collections4.list.GrowthListTest.testObjectHashCodeEqualsContract":592,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":1007,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":1268,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesIteratorRemoveChangesMap":1377,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":688,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagToArrayPopulate":1315,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListSerialization":523,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":368,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemove":1262,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":1167,"org.apache.commons.collections4.list.UnmodifiableListTest.testEqualsNull":653,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":929,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":1069,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking":511,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEqualsNull":20,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testGetSet":265,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRetainAll":1001,"org.apache.commons.collections4.map.CompositeMapTest.testMapSize":1046,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndexBoundsChecking2":548,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":163,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking2":606,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectEqualsSelf":210,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":1018,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":179,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":830,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastKeySet":1025,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailDoubleRemove":1136,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsSelf":1261,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":1341,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":1326,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":663,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToString":1292,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":450,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":31,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToString":442,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":513,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testIllegalAdd":263,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":1204,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemoveAll":1128,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":490,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":679,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":1078,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapGet":1393,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":58,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetIteratorRemoveChangesMap":864,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":1104,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRetainAll":889,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":710,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetIteratorRemoveChangesMap":1055,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetClearChangesMap":774,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToString":690,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToString":1333,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":1400,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":1246,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":347,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIsEmpty":395,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":324,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSerializeDeserializeThenCompare":105,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":218,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveAll":859,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking2":731,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":1219,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":466,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":1218,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":46,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMakeMap":1386,"org.apache.commons.collections4.bag.TransformedBagTest.testSerializeDeserializeThenCompare":1252,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testDecorateFactory":76,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":551,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndexBoundsChecking2":568,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":579,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":1282,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":733,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":995,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSimpleSerialization":1196,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagHashCode":1318,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":1075,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":1309,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSerializeDeserializeThenCompare":1334,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":825,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":1332,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":1300,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":845,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":901,"org.apache.commons.collections4.list.SetUniqueListTest.testAdd":480,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRetainAll":786,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":1194,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":294,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionSize":613,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveAll":905,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":1125,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":479,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToString":238,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionSize":441,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveChangesMap":1031,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":1133,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":185,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":181,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":595,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToString":528,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRetainAll":895,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionSize":390,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesIteratorRemoveChangesMap":819,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":1211,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRetainAll":1016,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectHashCodeEqualsContract":213,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":275,"org.apache.commons.collections4.set.TransformedSetTest.testSetHashCode":360,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":57,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":159,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndexBoundsChecking":673,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":597,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":50,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsSelfHashCode":329,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":343,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetIteratorRemoveChangesMap":898,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":1141,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":1106,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":1225,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListCompatibility":609,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":993,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":881,"org.apache.commons.collections4.map.FixedSizeMapTest.testEqualsNull":53,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRetainAll":842,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":904,"org.apache.commons.collections4.bag.CollectionBagTest.testSerializeDeserializeThenCompare":1081,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndexBoundsChecking":545,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking2":512,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":1351,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":1285,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemove":400,"org.apache.commons.collections4.bag.TransformedBagTest.testBagToArrayPopulate":1234,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":230,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":222,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":121,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionClear":180,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":308,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":198,"org.apache.commons.collections4.list.FixedSizeListTest.testSimpleSerialization":623,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveAll":885,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":182,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":116,"org.apache.commons.collections4.map.ListOrderedMapTest.testEqualsNull":49,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEqualsNull":108,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":659,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRetainAll":1384,"org.apache.commons.collections4.map.CompositeMapTest.testMapRemove":1058,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionSize":99,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":657,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalAdd":1121,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":770,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":921,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove1":814,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove2":815,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":520,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemove3":816,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":1323,"org.apache.commons.collections4.queue.TransformedQueueTest.testObjectHashCodeEqualsSelfHashCode":140,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":322,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsSelfHashCode":1159,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectHashCodeEqualsSelfHashCode":457,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetIteratorRemoveChangesMap":867,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testQueueElement":93,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":1180,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":1288,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testDecorateFactory":75,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutAll":1054,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":522,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":1129,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":713,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":113,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToString":1072,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemovePrevious":727,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":1245,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsSelfHashCode":1198,"org.apache.commons.collections4.list.TransformedListTest.testObjectHashCodeEqualsContract":704,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRetainAll":909,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":13,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":1345,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiKeySetValuesOrder":757,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":797,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndexBoundsChecking2":674,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":899,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":767,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":12,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":339,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":747,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":337,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndexBoundsChecking2":724,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":89,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":918,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":559,"org.apache.commons.collections4.queue.TransformedQueueTest.testObjectHashCodeEqualsContract":139,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetIteratorRemoveChangesMap":787,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectHashCodeEqualsContract":1160,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":1168,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRetainAll":1376,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":472,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFailDoubleRemove":1231,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":321,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesIteratorRemoveChangesMap":840,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":250,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":1177,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnmodifiable":458,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveAll":838,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":534,"org.apache.commons.collections4.collection.IndexedCollectionTest.testDecoratedCollectionIsIndexedOnCreation":190,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsSelfHashCode":1295,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.initializationError":868,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testEqualsNull":473,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapClear":1389,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":607,"org.apache.commons.collections4.list.GrowthListTest.testEqualsNull":590,"org.apache.commons.collections4.map.TransformedSortedMapTest.initializationError":890,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueSerialization":146,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":1156,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":1209,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":226,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsHashBag":1317,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":1339,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping0":1410,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastValues":1365,"org.apache.commons.collections4.queue.TransformedQueueTest.testEqualsNull":138,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectHashCodeEqualsContract":1086,"org.apache.commons.collections4.set.CompositeSetTest.testSerializeDeserializeThenCompare":401,"org.apache.commons.collections4.list.GrowthListTest.testCollectionSize":576,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":505,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemovePrevious":677,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRetainAll":903,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":1308,"org.apache.commons.collections4.list.UnmodifiableListTest.testFullListCompatibility":640,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToString":1114,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":1146,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testObjectHashCodeEqualsSelfHashCode":262,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":136,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":325,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":989,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":1401,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetHashCode":309,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":1193,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testLastKey":1359,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRemoveAll":862,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray":402,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":332,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":1020,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":452,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectHashCodeEqualsContract":1255,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testFailFastEntrySet":759,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":1208,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testEqualsNull":246,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":14,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectHashCodeEqualsContract":248,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorByIndex":556,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":10,"org.apache.commons.collections4.set.CompositeSetTest.testSimpleSerialization":408,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":984,"org.apache.commons.collections4.list.GrowthListTest.testObjectHashCodeEqualsSelfHashCode":593,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":443,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemoveAll":1039,"org.apache.commons.collections4.map.CompositeMapTest.testMapIsEmpty":1052,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":1115,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRetainAll":398,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":569,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionSize":1095,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":102,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":531,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFailNoMore":1135,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContains":1224,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":1066,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":279,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":336,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":1186,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":932,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":183,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEqualsNull":47,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":59,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectHashCodeEqualsSelfHashCode":214,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":751,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagHashCode":1277,"org.apache.commons.collections4.list.TransformedListTest.testCollectionSize":689,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":745,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":1155,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":742,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":719,"org.apache.commons.collections4.list.SetUniqueListTest.testSetCollections444":498,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":98,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetIteratorRemoveChangesMap":886,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueCompatibility":95,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":1123,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":1188,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRetainAll":821,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":664,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagSize":1266,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastKeySet":1364,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionSize":252,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":69,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":112,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":926,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":1143,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":62,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFailDoubleRemove":1271,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":853,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEqualsNull":51,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":649,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":927,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectHashCodeEqualsSelfHashCode":1087,"org.apache.commons.collections4.bag.TransformedBagTest.testBagToArray":1233,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":160,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":1241,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":670,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":682,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":1112,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":764,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":310,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":744,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnmodifiable":626,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":1235,"org.apache.commons.collections4.list.GrowthListTest.testSerializeDeserializeThenCompare":587,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":171,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesIteratorRemoveChangesMap":861,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":1124,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":269,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndexBoundsChecking2":604,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsValue":1059,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapHashCode":1394,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRemoveAll":897,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":1301,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":463,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiModifyEntrySet":756,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":833,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":199,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContains":1264,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":17,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":1015,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToString":614,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":530,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastEntrySet":933,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":475,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":850,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":525,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":608,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":949,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":1067,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":6,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToArray2":389,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2":168,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":651,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionIteratorRemove":392,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":471,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testNextKey":1360,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":462,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":946,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":305,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":702,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":1023,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAllCollections426":330,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndexBoundsChecking":726,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":960,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":959,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":312,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":958,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":581,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":186,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContains":394,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":752,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":1166,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":642,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":277,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagToArrayPopulate":1274,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionSize":125,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":1340,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":1343,"org.apache.commons.collections4.set.CompositeSetTest.testEqualsNull":406,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetHashCode":461,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetHashCode":289,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":87,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsSelfHashCode":1118,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":866,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":468,"org.apache.commons.collections4.MapUtilsTest.testLazyMapFactory":72,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":217,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":3,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":239,"org.apache.commons.collections4.BagUtilsTest.testSynchronizedSortedBag":1408,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutNullValue":1399,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListSerialization":685,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":812,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains3":813,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":418,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":811,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":555,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testObjectHashCodeEqualsContract":261,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":1216,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":1003,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains3":893,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":601,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":589,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":832,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionClear":271,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":84,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRetainAll":982,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":696,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesIteratorRemoveChangesMap":981,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":891,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":892,"org.apache.commons.collections4.list.PredicatedListTest.testObjectHashCodeEqualsContract":754,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":156,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArray":1138,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":221,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":1068,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":1299,"org.apache.commons.collections4.list.GrowthListTest.testListListIterator":558,"org.apache.commons.collections4.list.TransformedListTest.testEqualsNull":703,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":971,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":1342,"org.apache.commons.collections4.CollectionUtilsTest.testSynchronizedCollection":1406,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetIteratorRemoveChangesMap":878,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveChangesMap":1374,"org.apache.commons.collections4.list.TransformedListTest.testSerializeDeserializeThenCompare":700,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFailNoMore":1230,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesIteratorRemoveChangesMap":784,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":1405,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveAll":841,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":488,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":362,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiKeySetValuesOrder":792,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":428,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":701,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking":547,"org.apache.commons.collections4.collection.TransformedCollectionTest.testObjectHashCodeEqualsContract":188,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testKeySetRemoveAll":785,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRetainAll":883,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":800,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectHashCodeEqualsSelfHashCode":286,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionSize":426,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndexBoundsChecking2":635,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":367,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":1387,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndexBoundsChecking2":730,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":844,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":884,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":130,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":1344,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAdd":707,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToString":175,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionSize":219,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":578,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetIteratorRemoveChangesMap":1381,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRemoveAll":1379,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsSelfHashCode":410,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":338,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":941,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testPut":954,"org.apache.commons.collections4.list.PredicatedListTest.testObjectHashCodeEqualsSelfHashCode":755,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":988,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":836,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":835,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":1258,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":834,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":852,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEqualsNull":1294,"org.apache.commons.collections4.bag.CollectionBagTest.testEqualsNull":1084,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFullMapCompatibility":1396,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":44,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":1286,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testDecorate":1298,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToString":313,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":683,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionSize":1153,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":968,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":244,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":1070,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":1319,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":133,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveAll":1053,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":584,"org.apache.commons.collections4.list.GrowthListTest.testSimpleSerialization":591,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":1391,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetIteratorRemoveChangesMap":843,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":272,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testComparator":459,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":1182,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":598,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":359,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":562,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":1013,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray":208,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndexBoundsChecking2":680,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesIteratorRemoveChangesMap":1000,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":1179,"org.apache.commons.collections4.queue.PredicatedQueueTest.testObjectHashCodeEqualsContract":166,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":416,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":849,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove3":1373,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":621,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove2":1372,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":629,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemoveAll":1304,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemove1":1371,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":118,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":273,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":200,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":803,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndexBoundsChecking":717,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testFailFastEntrySet":794,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":950,"org.apache.commons.collections4.queue.PredicatedQueueTest.testFullQueueSerialization":149,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":1110,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":603,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":769,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesClearChangesMap":773,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":535,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFirstKey":870,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListSerialization":641,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToString":298,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":510,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":52,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetHashCode":414,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListSerialization":572,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsContract":1197,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":370,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRemove":1303,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":267,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":691,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":245,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":1172,"org.apache.commons.collections4.map.CompositeMapTest.testMapGet":1056,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectHashCodeEqualsSelfHashCode":111,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToString":1098,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":145,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":617,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testComparator":266,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":855,"org.apache.commons.collections4.map.PredicatedMapTest.testPut":910,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":227,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRetainAll":824,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":856,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains3":857,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":349,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":964,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":526,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":1077,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":1154,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":1284,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":848,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":224,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionClear":396,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRemoveAll":1006,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":1256,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorFail":1229,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":1250,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":887,"org.apache.commons.collections4.queue.TransformedQueueTest.testEmptyQueueSerialization":119,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFail":1310,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":1206,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testSimpleSerialization":247,"org.apache.commons.collections4.bag.TransformedBagTest.testBagHashCode":1237,"org.apache.commons.collections4.list.FixedSizeListTest.testObjectHashCodeEqualsContract":624,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":1207,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":586,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRemoveAll":1263,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndexBoundsChecking":557,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testSimpleSerialization":1120,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":570,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":85,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetIteratorRemoveChangesMap":822,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionSize":1330,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":444,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":829,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":365,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":882,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":652,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":1283,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRetainAll":875,"org.apache.commons.collections4.set.ListOrderedSet2Test.testEqualsNull":326,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":177,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testSerializeDeserializeThenCompare":1099,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":963,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":117,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":793,"org.apache.commons.collections4.set.CompositeSetTest.testObjectHashCodeEqualsContract":409,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionSize":1071,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":1249,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":4,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEqualsNull":22,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":879,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemovePrevious":566,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":953,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":351,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemoveAll":788,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":973,"org.apache.commons.collections4.map.CompositeMapTest.testMapClear":1048,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":602,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFirstKey":1362,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":453,"org.apache.commons.collections4.map.MultiKeyMapTest.testEqualsNull":26,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionSize":174,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":276,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":599,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsContract":1063,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToString":740,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":142,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":1228,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":1017,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":290,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":23,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionClear":202,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":203,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullValue":1042,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":1096,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionSize":152,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testFailFastValues":761,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":915,"org.apache.commons.collections4.bag.TransformedBagTest.testBagSize":1226,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":574,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":917,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":916,"org.apache.commons.collections4.list.GrowthListTest.testFullListCompatibility":571,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":451,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveAll":992,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.initializationError":847,"org.apache.commons.collections4.list.SetUniqueListTest.testObjectHashCodeEqualsSelfHashCode":542,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":942,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":944,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":241,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":990,"org.apache.commons.collections4.collection.IndexedCollectionTest.testSimpleSerialization":212,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":908,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":251,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionClear":417,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAdd":399,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking":503,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectHashCodeEqualsSelfHashCode":1101,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":223,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":928,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":1306,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":278,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":19,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":1297,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":1145,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":1348,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":124,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":164,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":738,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":1202,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":1009,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":446,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":693,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testConstructors":77,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":254,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":1149,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagToArray":1314,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":766,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":1079,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":1090,"org.apache.commons.collections4.map.LazySortedMapTest.testTransformerDecorate":79,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testSimpleSerialization":1103,"org.apache.commons.collections4.map.TransformedMapTest.testEqualsNull":43,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSimpleSerialization":327,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEqualsNull":18,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.initializationError":975,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":445,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":888,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagSize":1131,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToString":340,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":1280,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionSize":1212,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":639,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":413,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":132,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":636,"org.apache.commons.collections4.list.UnmodifiableListTest.testSerializeDeserializeThenCompare":650,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndexBoundsChecking":600,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":1088,"org.apache.commons.collections4.bag.HashBagTest.testBagRetainAll":1162,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":270,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":374,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":154,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":258,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":699,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testSerializeDeserializeThenCompare":1192,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":554,"org.apache.commons.collections4.list.SetUniqueListTest.testObjectHashCodeEqualsContract":541,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":907,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToString":253,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":63,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":372,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":478,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveAll":1375,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagSize":1307,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":660,"org.apache.commons.collections4.map.ListOrderedMapTest.testPut_intObjectObject":976,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":1356,"org.apache.commons.collections4.collection.IndexedCollectionTest.testEqualsNull":211,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalFullCollectionExists":405,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionSize":1289,"org.apache.commons.collections4.map.CompositeMapTest.testValuesClearChangesMap":1061,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":1201,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":33,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":150,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":529,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueSerialization":122,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorNextRemoveNext":573,"org.apache.commons.collections4.map.CompositeMapTest.testMapHashCode":1033,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAll":91,"org.apache.commons.collections4.map.CompositeMapTest.testMapEquals":1050,"org.apache.commons.collections4.list.PredicatedListTest.testEqualsNull":753,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":420,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveChangesMap":1002,"org.apache.commons.collections4.bag.CollectionBagTest.testSimpleSerialization":1085,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAll":487,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":594,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":1322,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":106,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":920,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":1170,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueCompatibility":92,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":1151,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRetainAll":1051,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":257,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":983,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":1281,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":1213,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testSimpleSerialization":109,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":947,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveAll":1383,"org.apache.commons.collections4.set.ListOrderedSetTest.testSimpleSerialization":354,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":1093,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionRemoveAll":393,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetIteratorRemoveChangesMap":846,"org.apache.commons.collections4.map.CompositeMapTest.testFailFastValues":1026,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":771,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsContract":1296,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":361,"org.apache.commons.collections4.bag.HashBagTest.testCollectionSize":1173,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":1287,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":104,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":155,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRetainAll":1060,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":425,"org.apache.commons.collections4.set.CompositeSetTest.testCanonicalEmptyCollectionExists":407,"org.apache.commons.collections4.queue.PredicatedQueueTest.testGet":141,"org.apache.commons.collections4.set.CompositeSetTest.testAddCompositedCollision":383,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":66,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemoveAll":1223,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":40,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectHashCodeEqualsContract":110,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRemoveChangesMap":1038,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove1":779,"org.apache.commons.collections4.list.UnmodifiableListTest.testObjectHashCodeEqualsContract":655,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove2":780,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEqualsNull":30,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRemove3":781,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetClearChangesMap":1367,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAddAll":436,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":1191,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":1397,"org.apache.commons.collections4.set.TransformedSetTest.testObjectHashCodeEqualsSelfHashCode":379,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":489,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":2,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":1171,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":1189,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":962,"org.apache.commons.collections4.set.TransformedSortedSetTest.testEqualsNull":431,"org.apache.commons.collections4.queue.TransformedQueueTest.testFullQueueCompatibility":115,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEqualsNull":24,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":1130,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":854,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":37,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":858,"org.apache.commons.collections4.collection.TransformedCollectionTest.testEqualsNull":187,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":1094,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagToArrayPopulate":1139,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":638,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":1338,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":851,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":148,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":706,"org.apache.commons.collections4.list.GrowthListTest.testFullListSerialization":565,"org.apache.commons.collections4.set.CompositeSetTest.testFailedCollisionResolution":385,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":1210,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContains":1305,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":714,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRetainAll":1380,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":631,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":357,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":427,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionAddAll":397,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":749,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":923,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":333,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":955,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":956,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":957,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":768,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":229,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":297,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":1074,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testSerializeDeserializeThenCompare":1293,"org.apache.commons.collections4.map.DefaultedMapTest.testEqualsNull":34,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":1267,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEqualsNull":16,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemoveNext":686,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":1140,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testFailFastKeySet":795,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":184,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToString":429,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":242,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":1019,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFail":1269,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":1290,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":195,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":1388,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":311,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":746,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":342,"org.apache.commons.collections4.set.PredicatedSetTest.testSetHashCode":438,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":1097,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":666,"org.apache.commons.collections4.list.PredicatedListTest.testFullListCompatibility":734,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testFullQueueSerialization":96,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEqualsNull":1100,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":494,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":965,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":481,"org.apache.commons.collections4.map.LazySortedMapTest.testEqualsNull":41,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":493,"org.apache.commons.collections4.map.SingletonMapTest.testEqualsNull":54,"org.apache.commons.collections4.list.TransformedListTest.testObjectHashCodeEqualsSelfHashCode":705,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testIllegalAddAll":216,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":647,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRemoveAll":817,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":1008,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFailNoMore":1311,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetClearChangesMap":810,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":939,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveChangesMap":1043,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testValuesRetainAll":783,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":938,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":937,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionSize":1181,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectHashCodeEqualsSelfHashCode":1254,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":765,"org.apache.commons.collections4.list.TransformedListTest.testFullListCompatibility":684,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":1259,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains3":999,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":70,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":997,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":615,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":998,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsSelfHashCode":474,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":966,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":449,"org.apache.commons.collections4.collection.IndexedCollectionTest.testSerializeDeserializeThenCompare":207,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToString":1215,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":1227,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":550,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":1205,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsContract":1119,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesIteratorRemoveChangesMap":894,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRemoveAll":880,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":1320,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":991,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":319,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":323,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToString":126,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":952,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains3":1029,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutNullKey":1398,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":1107,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":776,"org.apache.commons.collections4.map.ListOrderedMapTest.testPutAllWithIndexBug441":977,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":777,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains3":778,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":931,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionSize":196,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":1092,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains1":1027,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetContains2":1028,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":1327,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":173,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":1169,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":1147,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":35,"org.apache.commons.collections4.map.CompositeMapTest.testMapToString":1049,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":694,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":872,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":1346,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectHashCodeEqualsContract":287,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains3":873,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":1122,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":871,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":1187,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":672,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":1238,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":1409,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":176,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":722,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":807,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetRemoveAll":820,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":658,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":331,"org.apache.commons.collections4.collection.TransformedCollectionTest.testObjectHashCodeEqualsSelfHashCode":189,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetClearChangesMap":1041,"org.apache.commons.collections4.bag.TransformedBagTest.testEqualsNull":1253,"org.apache.commons.collections4.MapUtilsTest.testPredicatedMap":71,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":763,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEqualsNull":1335,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testDecorateFactory":73,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":967,"org.apache.commons.collections4.list.UnmodifiableListTest.testObjectHashCodeEqualsSelfHashCode":656,"org.apache.commons.collections4.collection.IndexedCollectionTest.testEnsureDuplicateObjectsCauseException":191,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":282,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testEqualsNull":232,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":630,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":82,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":996,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectHashCodeEqualsContract":456,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":419,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorRemoveProtectsInvariants":1137,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testPreviousKey":1361,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":553,"org.apache.commons.collections4.bag.PredicatedBagTest.testSerializeDeserializeThenCompare":1157,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":1316,"org.apache.commons.collections4.set.PredicatedSetTest.testEqualsNull":455,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":162,"org.apache.commons.collections4.set.UnmodifiableSetTest.testEqualsNull":301,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectHashCodeEqualsContract":433,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testKeySetClearChangesMap":809,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionClear":369,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetIteratorRemoveChangesMap":1385,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEqualsNull":45,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":537,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":588,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsContract":1337,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnmodifiableIterator":627,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectHashCodeEqualsSelfHashCode":432,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemoveNext":736,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":464,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":170,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":560,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":585,"org.apache.commons.collections4.map.CompositeMapTest.testValuesRetainAll":1032,"org.apache.commons.collections4.set.TransformedSetTest.testObjectHashCodeEqualsContract":378,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":532,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testLastKey":869,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetIteratorRemoveChangesMap":790,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":315,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsContract":355,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesClearChangesMap":808,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToString":1251,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":936,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":935,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":934,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsSelf":1221,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":235,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemovePrevious":661,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":454,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":716,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionContainsAll":388,"org.apache.commons.collections4.QueueUtilsTest.testEmptyQueue":1353,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":1331,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIteratorFailDoubleRemove":1312,"org.apache.commons.collections4.set.TransformedSetTest.testEqualsNull":377,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsContract":328,"org.apache.commons.collections4.bag.TreeBagTest.testBagContainsAll":1199,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":366,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndexBoundsChecking2":518,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet2":544,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":543,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveComposited":381,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndexBoundsChecking":712,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":500,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":669,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":970,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":1005,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndexBoundsChecking2":549,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndexBoundsChecking2":681,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":127,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":1164,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":748,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":521,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndexBoundsChecking":596,"org.apache.commons.collections4.queue.PredicatedQueueTest.testRemove":88,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":1328,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":201,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":284,"org.apache.commons.collections4.set.PredicatedSetTest.testGetSet":435,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":1278,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":151,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":161,"org.apache.commons.collections4.list.UnmodifiableListTest.testListListIteratorByIndex":632,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":695,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToString":153,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":81,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":259,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetIteratorRemoveChangesMap":906,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":943,"org.apache.commons.collections4.trie.PatriciaTrieTest.initializationError":1358,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetRetainAll":789,"org.apache.commons.collections4.set.CompositeSetTest.testRemoveUnderlying":380,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":1022,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":762,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsHashBag":1276,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiModifyEntrySet":791,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":477,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetRemoveAll":823,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndexBoundsChecking2":728,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEqualsNull":1195,"org.apache.commons.collections4.map.CompositeMapTest.testObjectHashCodeEqualsSelfHashCode":1064,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":1184,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":1257,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":206,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":288,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionSize":295,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":974,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testIllegalAddAll":264,"org.apache.commons.collections4.PredicateUtilsTest.testTransformedPredicate":9,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRetainAll":860,"org.apache.commons.collections4.map.ListOrderedMap2Test.testEqualsNull":28,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":940,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetIteratorRemoveChangesMap":1040,"org.apache.commons.collections4.list.PredicatedListTest.testSerializeDeserializeThenCompare":750,"org.apache.commons.collections4.set.CompositeSetTest.testAddComposited":384,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionSize":280,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":135,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":1175,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToString":1176,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":292,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":919,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionClear":1203,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSimpleSerialization":304,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":29,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":497,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":665,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemoveNext":671,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":961,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":11,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":527,"org.apache.commons.collections4.bag.HashBagTest.testBagContainsAll":1161,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":1150,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndexBoundsChecking2":519,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testObjectHashCodeEqualsContract":233,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":1324,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":128,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":318,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":1239,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":978,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetHashCode":268,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":358,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":980,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":979,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":350,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetIteratorRemoveChangesMap":1004,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":55,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":68,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":423,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":582,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIteratorFail":1134,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsSelfHashCode":302,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEqualsNull":165,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":1190,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsHashBag":1236,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":469,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":1178,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToString":470,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":1325,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemoveNext":721,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":240,"org.apache.commons.collections4.map.CompositeMapTest.testMapContainsKey":1044,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListDoubleInsert":491,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":83,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiKeySetValuesOrder":827,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionSize":644,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedHasNext":1355,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":306,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":1243,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testMapIterator":1404,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAddAll":708,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionClear":225,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":1105,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":231,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":806,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagAdd":1260,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":485,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":1347,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":484,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":86,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorRemoveProtectsInvariants":1272,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToString":364,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":1132,"org.apache.commons.collections4.collection.IndexedCollectionTest.testAddedObjectsCanBeRetrievedByKey":192,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":1242,"org.apache.commons.collections4.bag.PredicatedBagTest.testEqualsNull":1158,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":515,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":612,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagHashCode":1142,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":709,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":986,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":307,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":334,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.initializationError":826,"org.apache.commons.collections4.bag.TreeBagTest.testBagRetainAll":1200,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":1144,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":205,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":65,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionClear":158,"org.apache.commons.collections4.list.SetUniqueListTest.testListIterator":483,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":209,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":1395,"org.apache.commons.collections4.set.CompositeSetTest.testContains":382,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemoveNext":561,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":720,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveAll":1011,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":1279,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsSelfHashCode":356,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndexBoundsChecking":667,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemovePrevious":711,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":1108,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":352,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":131,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIteratorFailNoMore":1270,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetClearChangesMap":775,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":502,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectHashCodeEqualsSelfHashCode":249,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":496,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":945,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":447,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":801,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":1265,"org.apache.commons.collections4.set.CompositeSetTest.testCollectionToString":391,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":1174,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":620,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":256,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionSize":1111,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testSerializeDeserializeThenCompare":1116,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":1240,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":1352,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":291,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":437,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetClearChangesMap":1037,"org.apache.commons.collections4.map.CompositeMapTest.testKeySetRemoveAll":1045,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":516,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":616,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":628,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":828,"org.apache.commons.collections4.list.FixedSizeListTest.testEqualsNull":622,"org.apache.commons.collections4.BagUtilsTest.testSynchronizedBag":1407,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRetainAll":839,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":1392,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":1014,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToString":197,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":314,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionSize":1248,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRemove":1222,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":5,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":1021,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":648,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsSelfHashCode":1336,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":618,"org.apache.commons.collections4.map.PredicatedMapTest.testEqualsNull":36,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":482,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove1":1034,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":421,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove3":1036,"org.apache.commons.collections4.map.CompositeMapTest.testEntrySetRemove2":1035,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":1185,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":90,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRemoveAll":877,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":517,"org.apache.commons.collections4.map.MultiValueMapTest.testEqualsNull":39,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveChangesMap":876,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":134,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":415,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":144,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesIteratorRemoveChangesMap":874,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":236,"org.apache.commons.collections4.list.SetUniqueListTest.testSimpleSerialization":540,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":924,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testFailFastKeySet":760,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":972,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":533,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveChangesMap":896,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":228,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":439,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":507,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":1349,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":1275,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAdd":434,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":611,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":373,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":1214,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":1073,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetClearChangesMap":1366,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":951,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":346,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsSelf":1126,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":804,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":567,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":1152,"org.apache.commons.collections4.map.CompositeMapTest.testMapPutNullKey":1047,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetRemoveChangesMap":1382,"org.apache.commons.collections4.list.FixedSizeListTest.testSerializeDeserializeThenCompare":619,"org.apache.commons.collections4.list.UnmodifiableListTest.testSimpleSerialization":654,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":987,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndexBoundsChecking2":564,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":1291,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":499,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":316,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":1411,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsSelf":1302,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":64,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":580,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":376,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFailFastEntrySet":1363,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":424,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagToArray":1273,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListSerialization":735,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testConstructorEx":67,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":1089,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains1":1368,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":61,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testIllegalAdd":215,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":524,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains2":1369,"org.apache.commons.collections4.map.CompositeMapTest.testSerializeDeserializeThenCompare":1065,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testEntrySetContains3":1370,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":103,"org.apache.commons.collections4.set.ListOrderedSetTest.testEqualsNull":353,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToString":100,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIteratorRemoveProtectsInvariants":1232,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":56,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":536,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":1183,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":123,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":583,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":538,"org.apache.commons.collections4.list.PredicatedListTest.testFullListSerialization":725,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":948,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndexBoundsChecking":633,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":922,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testKeySetRemoveChangesMap":1378,"org.apache.commons.collections4.list.TransformedListTest.testFullListSerialization":675,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":293,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":344,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":799,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":729,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":643,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":448,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":1244,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testValuesRetainAll":818,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndexBoundsChecking":563,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndexBoundsChecking2":678,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":27,"org.apache.commons.collections4.list.GrowthListTest.testListListIteratorPreviousRemovePrevious":552,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":1109,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":495,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":1217,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":341,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":737,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":687,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionSize":739,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":8,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRemoveAll":900,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":101,"org.apache.commons.collections4.queue.PredicatedQueueTest.testEmptyQueueCompatibility":147,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":7,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToString":283,"org.apache.commons.collections4.map.LazyMapTest.testEqualsNull":38,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":97,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":42,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndexBoundsChecking":508,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":925,"org.apache.commons.collections4.map.CompositeMapTest.testValuesIteratorRemoveChangesMap":1030,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":15,"org.apache.commons.collections4.set.CompositeSetTest.testSetEquals":386,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":831,"org.apache.commons.collections4.set.CompositeSetTest.testSetHashCode":387,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testDecorateFactory":80,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":969,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":743,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":300,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRemove":1127,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":772,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":758,"org.apache.commons.collections4.queue.PredicatedQueueTest.testObjectHashCodeEqualsSelfHashCode":167,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":741,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":1083,"org.apache.commons.collections4.map.CompositeMapTest.testMapPut":1057,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":1080,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":348,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":25,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":985,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":137,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":178,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":1163,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":412,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListSerialization":605,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":697,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndexBoundsChecking":676,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":1321,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":715,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testFailFastValues":796,"org.apache.commons.collections4.collection.IndexedCollectionTest.testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately":193,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":467,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllCollections427":486,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":465,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":1091,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":1113,"org.apache.commons.collections4.list.SetUniqueListTest.testEqualsNull":539,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testEmptyQueueSerialization":94,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":335,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":430,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListSerialization":610,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":994}}]

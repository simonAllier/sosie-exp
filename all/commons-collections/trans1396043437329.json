[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    ((org.apache.commons.collections4.list.CursorableLinkedList<E>)(org.apache.commons.collections4.list.AbstractLinkedList<E>)).unregisterCursor(this);\n    boolean = false;\n} ","position":"org.apache.commons.collections4.list.CursorableLinkedList:561","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:144","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(E)","position":"org.apache.commons.collections4.list.LazyList:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(java.lang.Object));\n    while (java.util.Enumeration<?>.hasMoreElements()) {\n        int++;\n        java.util.Enumeration<?>.nextElement();\n    }\n} else {\n    try {\n        int = java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object);\n    } catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:1346","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) == null) {\n    throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String);\n} ","position":"org.apache.commons.collections4.map.AbstractHashedMap:1187","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.Closure<E>)(org.apache.commons.collections4.Closure<? super E>))","position":"org.apache.commons.collections4.functors.ForClosure:56","type":"CtReturnImpl"},"status":-2},{"failures":[0],"variableMapping":{"expectedModifications":"size","modifications":"index"},"name":"add","transplant":{"sourceCode":"if (int != int) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1644","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n    boolean = true;\n} ","position":"org.apache.commons.collections4.list.GrowthList:153","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.bag.SynchronizedBag<E>.getBag().remove(java.lang.Object, int);\n}","position":"org.apache.commons.collections4.bag.SynchronizedBag:94","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n    boolean = true;\n} ","position":"org.apache.commons.collections4.list.GrowthList:153","type":"CtIfImpl"},"status":-2},{"failures":[1,2,3,4,5,6,7,8],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().first()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:81","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().last()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:85","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:215","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.PassiveExpiringMap<K, V>.removeAllExpired(org.apache.commons.collections4.map.PassiveExpiringMap<K, V>.now())","position":"org.apache.commons.collections4.map.PassiveExpiringMap:388","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:41","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:76","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final K K : java.util.Map<? extends K, ? extends V>.keySet()) {\n    if (!org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.(containsKey(K))) {\n        throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n    } \n}","position":"org.apache.commons.collections4.map.FixedSizeMap:125","type":"CtForEachImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.InstantiateFactory.org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class<T>, null, null)","position":"org.apache.commons.collections4.FactoryUtils:121","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[9,10,11,12],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitKeepCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.KeepCommand:55","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.purge()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:358","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:174","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = new org.apache.commons.collections4.iterators.ListIteratorWrapper<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.IteratorIterable:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = ((java.util.Iterator<? extends E>)(E))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:109","type":"CtAssignmentImpl"},"status":-2},{"failures":[13,14,15,16,17,18,19,20],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:152","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:145","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:682","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.LoopingIterator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:149","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:97","type":"CtReturnImpl"},"status":-2},{"failures":[21,22,23],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.list.AbstractLinkedList<E>.int) != (int)) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.list.AbstractLinkedList:1061","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitKeepCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.KeepCommand:55","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ReverseListIterator:161","type":"CtAssignmentImpl"},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"name":"returnValue","position":"org.apache.commons.collections4.map.AbstractMapDecorator:128","type":"mutation","return":"return true","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingIterator:88","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.List<E>.clear()","position":"org.apache.commons.collections4.set.ListOrderedSet:184","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (!(java.lang.Object == null ? java.lang.Object == null : java.lang.Object.equals(java.lang.Object))) {\n    return false;\n} ","position":"org.apache.commons.collections4.list.AbstractLinkedList:367","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:106","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.((org.apache.commons.collections4.SortedBag<E>)(decorated()))","position":"org.apache.commons.collections4.bag.TransformedSortedBag:111","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return \"\"","position":"org.apache.commons.collections4.map.Flat3Map:887","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:211","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.util.Iterator<? extends E> instanceof org.apache.commons.collections4.Unmodifiable) {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.Iterator<E> java.util.Iterator<E> = ((java.util.Iterator<E>)(java.util.Iterator<? extends E>));\n    return java.util.Iterator<E>;\n} ","position":"org.apache.commons.collections4.iterators.UnmodifiableIterator:51","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (boolean) || org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())","position":"org.apache.commons.collections4.iterators.FilterIterator:86","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.GrowthList:186","type":"CtReturnImpl"},"status":-2},{"failures":[45,46,47],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"ListIterator must not be null\")","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:44","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The collection must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:56","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.map.StaticBucketMap.this.size()","position":"org.apache.commons.collections4.map.StaticBucketMap:561","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.hashCode()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:81","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = java.util.Map<E, ? super V>.size()","position":"org.apache.commons.collections4.set.MapBackedSet:131","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"status":0},{"failures":[],"binaryOperator":"org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getRightChild(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)) && org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.(org.apache.commons.collections4.bidimap.TreeBidiMap.isBlack(org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.getLeftChild(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement), org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement))","name":"removeConditional","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1062","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.PrintStream.print(' ')","position":"org.apache.commons.collections4.MapUtils:1018","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.FixedSizeList:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1575","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int int = 0","position":"org.apache.commons.collections4.CollectionUtils:824","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ArrayIterator<E>.this(java.lang.Object, 0)","position":"org.apache.commons.collections4.iterators.ArrayIterator:60","type":"CtInvocationImpl"},"status":-2},{"failures":[48,49,50,51,52,53],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.Iterator<I>.remove()","position":"org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator:62","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.List<E>.add(java.util.Iterator<? extends E>.next())","position":"org.apache.commons.collections4.IteratorUtils:1026","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return int","position":"org.apache.commons.collections4.list.AbstractLinkedList:104","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-2},{"failures":[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"binaryOperator":"int > int","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"mutation","status":-1},{"failures":[],"binaryOperator":"(((((((((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:312","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.GrowthList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.GrowthList:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Factory must not be null\")","position":"org.apache.commons.collections4.functors.FactoryTransformer:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap()","position":"org.apache.commons.collections4.map.LazySortedMap:131","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Set<E> java.util.Set<E> = org.apache.commons.collections4.list.SetUniqueList<E>.createSetBasedOnList(java.util.Set<E>, java.util.List<E>)","position":"org.apache.commons.collections4.list.SetUniqueList:317","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return T","position":"org.apache.commons.collections4.sequence.EditCommand:69","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.util.ListIterator<E>.hasNext()) {\n    E = java.util.ListIterator<E>.next();\n}","position":"org.apache.commons.collections4.iterators.LoopingListIterator:146","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:147","type":"CtAssignmentImpl"},"status":0},{"failures":[111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,3,6,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Factory must not be null\")","position":"org.apache.commons.collections4.functors.FactoryTransformer:49","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().contains(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:108","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.Object[] = java.lang.reflect.Array.((java.lang.Object[])(java.lang.reflect.Array.newInstance(T[].getClass().getComponentType(), 0)))","position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:126","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.AbstractLinkedList:684","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Transformer<? super I, ? extends O>.transform(I)","position":"org.apache.commons.collections4.iterators.TransformIterator:142","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.list.TreeList:1106","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionPredicate.org.apache.commons.collections4.functors.ExceptionPredicate.<T>exceptionPredicate()","position":"org.apache.commons.collections4.PredicateUtils:91","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = 0","position":"org.apache.commons.collections4.map.Flat3Map:481","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) - 1","position":"org.apache.commons.collections4.iterators.FilterListIterator:157","type":"CtReturnImpl"},"status":-2},{"failures":[384,385,386,387,388],"variableMapping":{"nextObjectSet":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    throw new java.lang.IllegalStateException(\"remove() cannot be called\");\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:119","type":"CtIfImpl"},"status":-1},{"failures":[389,390,391,392],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.asPredicate(org.apache.commons.collections4.functors.InvokerTransformer.org.apache.commons.collections4.functors.InvokerTransformer.<java.lang.Object,java.lang.Boolean>invokerTransformer(java.lang.String))","position":"org.apache.commons.collections4.PredicateUtils:213","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.AbstractHashedMap:1104","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.RuntimeException","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:62","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Collection<E>.size()) > 0) {\n    if ((this.org.apache.commons.collections4.set.CompositeSet.SetMutator<E>) == null) {\n        throw new java.lang.UnsupportedOperationException(\"Collision adding composited set with no SetMutator set\");\n    } \n    org.apache.commons.collections4.set.CompositeSet<E>.getMutator().resolveCollision(this, java.util.Set<E>, java.util.Set<E>, java.util.Collection<E>);\n    if ((org.apache.commons.collections4.CollectionUtils.org.apache.commons.collections4.CollectionUtils.intersection(java.util.Set<E>, java.util.Set<E>).size()) > 0) {\n        throw new java.lang.IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\");\n    } \n} ","position":"org.apache.commons.collections4.set.CompositeSet:346","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:182","type":"CtLocalVariableImpl"},"status":-2},{"failures":[393],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\")","position":"org.apache.commons.collections4.collection.IndexedCollection:244","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:133","type":"CtThrowImpl"},"status":-1},{"failures":[394],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:253","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"modified":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:355","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasNext()) {\n    final E E = java.util.ListIterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:231","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.constantTransformer(O)","position":"org.apache.commons.collections4.TransformerUtils:136","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.WhileClosure<E>(org.apache.commons.collections4.Predicate<? super E> , org.apache.commons.collections4.Closure<? super E> , boolean)","position":"org.apache.commons.collections4.functors.WhileClosure:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"delegate\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1967","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.ArrayIterator:148","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean boolean = false","position":"org.apache.commons.collections4.bag.CollectionSortedBag:109","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:107","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.FalsePredicate.org.apache.commons.collections4.functors.FalsePredicate.<T>falsePredicate()","position":"org.apache.commons.collections4.functors.AnyPredicate:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:123","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \")","name":"math","position":"org.apache.commons.collections4.iterators.ArrayIterator:115","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Iterator<?>","position":"org.apache.commons.collections4.IteratorUtils:1087","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:132","type":"CtReturnImpl"},"status":-2},{"failures":[395,396,397,398,399,400],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"binaryOperator":"(((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\") + K)","name":"math","position":"org.apache.commons.collections4.map.LRUMap:325","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:836","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.bag.TreeBag<E>.getMap()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.collection.SynchronizedCollection:196","type":"CtReturnImpl"},"status":-2},{"failures":[54,55,56,58,70,72,87,100],"binaryOperator":"int < int","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.ArrayIterator:99","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:158","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:157","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = 0","position":"org.apache.commons.collections4.list.AbstractLinkedList:521","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.bag.AbstractMapBag<E>.doReadObject(new java.util.TreeMap<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>(java.util.Comparator<? super E>), java.io.ObjectInputStream)","position":"org.apache.commons.collections4.bag.TreeBag:129","type":"CtInvocationImpl"},"status":-2},{"failures":[401,402,403,404,405,406,407,408,395,409,410,411,412,413,414,415,396,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,397,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,398,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,399,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,400,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().hashCode()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:135","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.bag.TreeBag:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.set.AbstractSetDecorator<E>.decorated()","position":"org.apache.commons.collections4.set.ListOrderedSet:212","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"status":-2},{"failures":[13,563,14,15,16,564,394,565,17,18,19,20],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:233","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.OrderedMap<? extends K, ? extends V> instanceof org.apache.commons.collections4.Unmodifiable) {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final org.apache.commons.collections4.OrderedMap<K, V> org.apache.commons.collections4.OrderedMap<K, V> = ((org.apache.commons.collections4.OrderedMap<K, V>)(org.apache.commons.collections4.OrderedMap<? extends K, ? extends V>));\n    return org.apache.commons.collections4.OrderedMap<K, V>;\n} ","position":"org.apache.commons.collections4.map.UnmodifiableOrderedMap:61","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>>.remove()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:99","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"key"},"name":"add","transplant":{"sourceCode":"return java.lang.Object","position":"org.apache.commons.collections4.map.AbstractHashedMap:1092","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map<K, V>.containsKey(java.lang.Object)) == false) {\n    return org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(((K)(java.lang.Object)));\n} ","position":"org.apache.commons.collections4.map.DefaultedMap:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Boolean java.lang.Boolean = org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.getBoolean(java.util.Map<? super K, ?>, K)","position":"org.apache.commons.collections4.MapUtils:723","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure()","position":"org.apache.commons.collections4.functors.ForClosure:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    return (java.util.List<E>.size()) - 1;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:171","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (final org.apache.commons.collections4.keyvalue.MultiKey<? extends K> org.apache.commons.collections4.keyvalue.MultiKey<? extends K> : java.util.Map<? extends org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, ? extends V>.keySet()) {\n    org.apache.commons.collections4.map.MultiKeyMap<K, V>.checkKey(org.apache.commons.collections4.keyvalue.MultiKey<? extends K>);\n}","position":"org.apache.commons.collections4.map.MultiKeyMap:862","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>.hasNext()) == false) {\n    org.apache.commons.collections4.iterators.LoopingIterator<E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:87","type":"CtIfImpl"},"status":-2},{"failures":[566,567,568,569,570],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"must have come from somewhere!\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1197","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String = java.lang.String","position":"org.apache.commons.collections4.MapUtils:389","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.InstanceofPredicate.org.apache.commons.collections4.functors.InstanceofPredicate.instanceOfPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.PredicateUtils:175","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.Get<K, V> instanceof org.apache.commons.collections4.IterableMap ? ((org.apache.commons.collections4.IterableMap<K, V>)(org.apache.commons.collections4.Get<K, V>)) : org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.iterableMap(((java.util.Map<K, V>)(org.apache.commons.collections4.Get<K, V>)))","position":"org.apache.commons.collections4.SplitMapUtils:215","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:221","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"add","transplant":{"sourceCode":"if (!(java.lang.Object instanceof org.apache.commons.collections4.CollectionUtils.EquatorWrapper)) {\n    return false;\n} ","position":"org.apache.commons.collections4.CollectionUtils:584","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object == this) || (org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().equals(java.lang.Object))","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) != null) && (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>))) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1208","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>> = java.util.Set<java.util.Map.Entry<K, V>>.iterator()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:92","type":"CtAssignmentImpl"},"status":-2},{"failures":[571,572,573,574,575,576,577,578],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (java.util.ListIterator<E>.hasNext()) {\n        E = java.util.ListIterator<E>.next();\n    }\n    java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"status":-1},{"failures":[401,402,403,404,405,407,408,395,409,411,412,413,414,415,396,416,417,418,419,420,421,422,423,425,426,427,428,430,431,432,433,434,435,437,438,439,440,441,397,442,443,444,446,447,448,449,450,451,452,453,454,455,456,458,459,460,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,478,479,481,482,483,484,485,398,486,487,488,490,491,492,493,494,495,497,498,499,500,501,399,502,503,504,579,505,506,507,508,509,511,512,513,514,516,517,518,519,520,521,522,524,525,526,527,528,529,530,531,532,534,535,536,537,538,400,539,540,541,542,543,544,545,546,548,549,550,551,552,553,555,556,557,558,559,560,562],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:596","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:98","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(org.apache.commons.collections4.bag.TreeBag<E>.comparator())","position":"org.apache.commons.collections4.bag.TreeBag:118","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    if (java.lang.Object == this) {\n        return true;\n    } \n    return (java.lang.Object == this) || (org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().equals(java.lang.Object));\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:194","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:175","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:880","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:154","type":"CtReturnImpl"},"status":-2},{"failures":[580,581],"binaryOperator":"org.apache.commons.collections4.Closure<? super E> == null","name":"negateConditional","position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"mutation","status":-1},{"failures":[582,583],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() can only be called once after next()\")","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:552","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies(((int - int) + 1), null))","position":"org.apache.commons.collections4.list.GrowthList:184","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:725","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":289,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":290,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":394,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":498,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapHashCode":561,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":460,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray":310,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":490,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":532,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":329,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testShadok":12,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":443,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":222,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":114,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":493,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":464,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":135,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray":345,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":314,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapHashCode":510,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":88,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":140,"org.apache.commons.collections4.bag.TransformedBagTest.testBagIterator":186,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":505,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":1,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":509,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":388,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray":265,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray":259,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":102,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":291,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":163,"org.apache.commons.collections4.bag.TransformedBagTest.testBagAdd":184,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":13,"org.apache.commons.collections4.map.PredicatedMapTest.testMapHashCode":480,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":525,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":375,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testIsEmpty":579,"org.apache.commons.collections4.map.PredicatedMapTest.testObjectEqualsSelf":34,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":451,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":103,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":128,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":337,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":407,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":560,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":466,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":151,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":97,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":224,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":448,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":164,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":520,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":246,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":95,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":264,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":487,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet":315,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains3":371,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains2":370,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testEntrySetContains1":369,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":63,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":396,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":422,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":14,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":166,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":342,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapHashCode":489,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":495,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":503,"org.apache.commons.collections4.map.MultiValueMapTest.testObjectEqualsSelf":36,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray":338,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":536,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":92,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagIterator":208,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":454,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":517,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":141,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByTailMapEntrySet":367,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":78,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":508,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":334,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray":115,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":252,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":260,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":474,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":486,"org.apache.commons.collections4.map.LazySortedMapTest.testMapHashCode":533,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":69,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":309,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray":150,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":387,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":403,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":217,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":223,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":544,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":500,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":344,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":570,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":449,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":82,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":64,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":83,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":427,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testObjectEqualsSelf":28,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testIllegalAdd":331,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":225,"org.apache.commons.collections4.map.FixedSizeMapTest.testValuesRemoveChangesMap":299,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":81,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":199,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray":134,"org.apache.commons.collections4.map.SingletonMapTest.testObjectEqualsSelf":32,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":254,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapHashCode":547,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":468,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":211,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testValuesRemoveChangesMap":277,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray":229,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":425,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":573,"org.apache.commons.collections4.map.MultiValueMapTest.testKeyedIterator":52,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":574,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":67,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":214,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":352,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":146,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":6,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByTailMapEntrySet":361,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapHashCode":477,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":476,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":537,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapHashCode":445,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAddAll":340,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":152,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":212,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":15,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":435,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagIterator":196,"org.apache.commons.collections4.map.DefaultedMapTest.testObjectEqualsSelf":37,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":497,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":447,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":562,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":383,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":401,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":414,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":258,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":236,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":558,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":145,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":313,"org.apache.commons.collections4.list.PredicatedListTest.testLegalAddAll":173,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":402,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContains":195,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":228,"org.apache.commons.collections4.CollectionUtilsTest.testCollate":53,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet_decorateTransform":304,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagAdd":239,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray":322,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":96,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagIterator":241,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":409,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":404,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":73,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray":123,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":278,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":121,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":279,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":280,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":471,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":386,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":262,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":336,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":148,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":247,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicate":392,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":65,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":77,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":433,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":326,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray":215,"org.apache.commons.collections4.sequence.SequencesComparatorTest.testExecution":11,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":178,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":325,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":491,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":452,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":450,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":438,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":465,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains1":363,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":470,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray":131,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":473,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains3":365,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapHashCode":424,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":127,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testEntrySetContains2":364,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":551,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testIllegalAddAll":126,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":170,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":518,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":138,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":420,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":478,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains3":298,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx1":389,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx2":390,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":296,"org.apache.commons.collections4.PredicateUtilsTest.testInvokerPredicateEx3":391,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":565,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":297,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":513,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList_decorateTransform":161,"org.apache.commons.collections4.bag.PredicatedBagTest.testIllegalAdd":237,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingOverBoundary":576,"org.apache.commons.collections4.map.LazySortedMapTest.testObjectEqualsSelf":41,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":481,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":200,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":94,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":421,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":226,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":198,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContains":240,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":434,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":350,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue_decorateTransform":137,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":499,"org.apache.commons.collections4.map.DefaultedMapTest.testMapHashCode":496,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":531,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":267,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains1":357,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":221,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains2":358,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testEntrySetContains3":359,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":488,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":418,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":257,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":446,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":253,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":245,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapHashCode":429,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":484,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapHashCode":554,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":220,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":293,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":238,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains3":294,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveChangesMap":379,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":292,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":555,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":187,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":351,"org.apache.commons.collections4.IteratorUtilsTest.testToList":49,"org.apache.commons.collections4.ClosureUtilsTest.testDoWhileClosure":581,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicate":47,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_remove":567,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":162,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":324,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":408,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains2":286,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains3":287,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":439,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingBackwards":577,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testEntrySetContains1":285,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":568,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":109,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapHashCode":436,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":129,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testObjectEqualsSelf":43,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":101,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":79,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":413,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":415,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray":156,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":244,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":4,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection":117,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray":143,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":353,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":432,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":99,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":100,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":566,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":86,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray":235,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":155,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEmptyIterator":87,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapHashCode":515,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":72,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":348,"org.apache.commons.collections4.map.TransformedSortedMapTest.testObjectEqualsSelf":26,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":302,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":301,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":300,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":578,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":580,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":346,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":501,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":57,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":549,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray":203,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":306,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet2":583,"org.apache.commons.collections4.list.GrowthListTest.testGrowthSet1":582,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":133,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":397,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":516,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":539,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":250,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":179,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContains":185,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":412,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":202,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":105,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":209,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":149,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":550,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":122,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains1":376,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":192,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains3":378,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray":180,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testEntrySetContains2":377,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":116,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":176,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":524,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":60,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":417,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":399,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":458,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":233,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":107,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapHashCode":467,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":564,"org.apache.commons.collections4.EnumerationUtilsTest.testToListWithHashtable":48,"org.apache.commons.collections4.queue.TransformedQueueTest.testTransformedQueue":136,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":485,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":242,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":384,"org.apache.commons.collections4.map.UnmodifiableMapTest.testObjectEqualsSelf":29,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":205,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":231,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":398,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":444,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":189,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testIllegalAddAll":332,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testObjectEqualsSelf":42,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray":270,"org.apache.commons.collections4.map.LazyMapTest.testMapHashCode":410,"org.apache.commons.collections4.collection.TransformedCollectionTest.testTransformedCollection_decorateTransform":118,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":333,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":461,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":426,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":106,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagAdd":194,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":3,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":411,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":423,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":462,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":548,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContains":207,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":453,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":534,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":59,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":546,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":522,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":55,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":557,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":529,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":479,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":18,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":139,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray":171,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2":303,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":188,"org.apache.commons.collections4.map.TransformedMapTest.testMapHashCode":523,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEmptyIterator":58,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":274,"org.apache.commons.collections4.IteratorUtilsTest.testToArray2":51,"org.apache.commons.collections4.set.TransformedSetTest.testTransformedSet":305,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":572,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":8,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":85,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":276,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":275,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":552,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveByHeadMapEntrySet":366,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":261,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":2,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":526,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":563,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":347,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveByHeadMapEntrySet":360,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":234,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":7,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":168,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":540,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":201,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":538,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":111,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":124,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiRemoveBySubMapEntrySet":362,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiRemoveBySubMapEntrySet":368,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":181,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":251,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAddAll":175,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testObjectEqualsSelf":33,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":132,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagAdd":206,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections307":169,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":216,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":218,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":93,"org.apache.commons.collections4.map.TransformedMapTest.testObjectEqualsSelf":40,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":323,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":190,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":419,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":16,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains2":355,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":430,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains3":356,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":243,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":319,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testEntrySetContains1":354,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":76,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":502,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag":182,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":210,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":268,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains3":283,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":157,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":330,"org.apache.commons.collections4.map.LazyMapTest.testObjectEqualsSelf":25,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":165,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":281,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":282,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray":255,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":147,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":54,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":506,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray":159,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":395,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":312,"org.apache.commons.collections4.map.ListOrderedMap2Test.testObjectEqualsSelf":30,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":62,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":158,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray":167,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":542,"org.apache.commons.collections4.map.ListOrderedMapTest.testObjectEqualsSelf":31,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":521,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":307,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":494,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":56,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":219,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":17,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":541,"org.apache.commons.collections4.list.PredicatedListTest.testIllegalAdd":174,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":74,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":511,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":393,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":66,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":406,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":320,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":232,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAddAll":0,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testValuesRemoveChangesMap":295,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":142,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":317,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":483,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":442,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":89,"org.apache.commons.collections4.map.UnmodifiableMapTest.testValuesRemoveChangesMap":284,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":130,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":507,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":431,"org.apache.commons.collections4.map.MultiKeyMapTest.testObjectEqualsSelf":24,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":469,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":374,"org.apache.commons.collections4.set.PredicatedSetTest.testIllegalAdd":339,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":373,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":372,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":559,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":98,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":440,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":530,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":327,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray":112,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":75,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":459,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":571,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":197,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testObjectEqualsSelf":44,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":349,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":335,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":514,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":80,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":153,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":311,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":416,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":230,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":318,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":321,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":556,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":160,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":455,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testIllegalAdd":125,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":475,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":104,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":504,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains1":271,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":154,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains3":273,"org.apache.commons.collections4.map.TransformedSortedMapTest.testEntrySetContains2":272,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testObjectEqualsSelf":35,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":269,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":400,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":528,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":21,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":482,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":22,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":23,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":343,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":385,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":519,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":191,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":456,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":84,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":308,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":512,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":113,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testObjectEqualsSelf":27,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":183,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":428,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":110,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":20,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":380,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":381,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":70,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":575,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":61,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testValuesRemoveChangesMap":288,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains3":382,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":19,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":437,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":213,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray":248,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":263,"org.apache.commons.collections4.IteratorUtilsTest.testToArray":50,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":90,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequenceWithString":10,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx4":45,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":68,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag":204,"org.apache.commons.collections4.PredicateUtilsTest.testAnyPredicateEx6":46,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":535,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":108,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":527,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":463,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":553,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":545,"org.apache.commons.collections4.ListUtilsTest.testLongestCommonSubsequence":9,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":441,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":177,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":227,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":472,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":91,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapHashCode":457,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":71,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":266,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":341,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":328,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":543,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":405,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testObjectEqualsSelf":38,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":144,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":569,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":120,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":249,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":492,"org.apache.commons.collections4.set.TransformedSortedSetTest.testTransformedSet_decorateTransform":316,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":172,"org.apache.commons.collections4.map.FixedSizeMapTest.testObjectEqualsSelf":39,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":119,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":5,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":256,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray":193}}]

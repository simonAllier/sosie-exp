[{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"int = org.apache.commons.collections4.map.AbstractHashedMap.int","position":"org.apache.commons.collections4.map.AbstractHashedMap:666","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Trie must not be null\")","position":"org.apache.commons.collections4.trie.UnmodifiableTrie:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasPrevious()) {\n    final E E = java.util.ListIterator<? extends E>.previous();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:263","type":"CtWhileImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:112","type":"CtSynchronizedImpl"},"status":-2},{"failures":[42],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw java.lang.RuntimeException","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:62","type":"CtThrowImpl"},"status":-1},{"failures":[43,44,45,46,47,48,49,50,51,52,53,54],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.util.ListIterator<? extends E>) == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:228","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasPrevious()) {\n    final E E = java.util.ListIterator<? extends E>.previous();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:263","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"E E = null","position":"org.apache.commons.collections4.iterators.CollatingIterator:354","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.LazyList:115","type":"CtLocalVariableImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object.equals(V)) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.Flat3Map:266","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.PredicatedSortedBag<E>(org.apache.commons.collections4.SortedBag<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = new org.apache.commons.collections4.iterators.ListIteratorWrapper<E>(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.IteratorIterable:112","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:91","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedSortedBag<E>.decorated().comparator()","position":"org.apache.commons.collections4.bag.PredicatedSortedBag:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"coll":"coll"},"name":"add","transplant":{"sourceCode":"if (java.util.Collection<?> instanceof org.apache.commons.collections4.BoundedCollection) {\n    return ((org.apache.commons.collections4.BoundedCollection<?>)(java.util.Collection<?>)).isFull();\n} ","position":"org.apache.commons.collections4.CollectionUtils:1470","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:131","type":"CtReturnImpl"},"status":0},{"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"variableMapping":{"modCount":"bound","expectedModCount":"len"},"name":"replace","transplant":{"sourceCode":"if (int != int) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1565","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:151","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"canRemove":"hasNext"},"name":"replace","transplant":{"sourceCode":"this.boolean = true","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:712","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[108,109,110,111,112,113,114,115,116,117,118],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(\"Input Object must not be null\")","position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:74","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:41","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null) {\n    final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null ? org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey() : null;\n} else {\n    return null;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:814","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.InstanceofPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:49","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int |= org.apache.commons.collections4.functors.ConstantTransformer<I, O>.getConstant().hashCode()","position":"org.apache.commons.collections4.functors.ConstantTransformer:125","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.FilterListIterator:232","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:145","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Inner class KeySetIterator.\n */\nprotected static class KeySetIterator<K> extends org.apache.commons.collections4.iterators.AbstractIteratorDecorator<K> {\n    /** \n     * The parent map\n     */\nprotected final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?> parent;\n\n    /** \n     * The last returned key\n     */\nprotected K lastKey = null;\n\n    /** \n     * Whether remove is allowed at present\n     */\nprotected boolean canRemove = false;\n\n    /** \n     * Constructor.\n     * @param iterator  the iterator to decorate\n     * @param parent  the parent map\n     */\nprotected KeySetIterator(final java.util.Iterator<K> iterator ,final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?> parent) {\n        org.apache.commons.collections4.iterators.AbstractIteratorDecorator<K>.super(java.util.Iterator<K>);\n        this.org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?> = org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?>;\n    }\n\n    @java.lang.Override\n    public K next() {\n        K = org.apache.commons.collections4.iterators.AbstractIteratorDecorator<K>.next();\n        boolean = true;\n        return K;\n    }\n\n    @java.lang.Override\n    public void remove() {\n        if ((boolean) == false) {\n            throw new java.lang.IllegalStateException(\"Iterator remove() can only be called once after next()\");\n        } \n        final java.lang.Object java.lang.Object = org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?>.java.util.Map<K, ?>.get(K);\n        org.apache.commons.collections4.iterators.AbstractIteratorDecorator<K>.remove();\n        org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, ?>.java.util.Map<?, K>.remove(java.lang.Object);\n        K = null;\n        boolean = false;\n    }\n}","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:436","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:151","type":"CtReturnImpl"},"status":-2},{"failures":[119,120,121,122,123,124],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:110","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.queue.CircularFifoQueue.this.remove()","position":"org.apache.commons.collections4.queue.CircularFifoQueue:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterIterator:143","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:312","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Provides a partition view on a {@link List}.\n * @since 4.0\n */\nprivate static class Partition<T> extends java.util.AbstractList<java.util.List<T>> {\n    private final java.util.List<T> list;\n\n    private final int size;\n\n    private Partition(final java.util.List<T> list ,final int size) {\n        this.java.util.List<T> = java.util.List<T>;\n        this.int = int;\n    }\n\n    @java.lang.Override\n    public java.util.List<T> get(final int index) {\n        final int int = org.apache.commons.collections4.ListUtils.Partition<T>.size();\n        if (int < 0) {\n            throw new java.lang.IllegalArgumentException((\"negative size: \" + int));\n        } \n        if (int < 0) {\n            throw new java.lang.IndexOutOfBoundsException(((\"Index \" + int) + \" must not be negative\"));\n        } \n        if (int >= int) {\n            throw new java.lang.IndexOutOfBoundsException((((\"Index \" + int) + \" must be less than size \") + int));\n        } \n        final int int = int * (int);\n        final int int = java.lang.Math.java.lang.Math.min((int + (int)), java.util.List<T>.size());\n        return java.util.List<T>.subList(int, int);\n    }\n\n    @java.lang.Override\n    public int size() {\n        return (((java.util.List<T>.size()) + (int)) - 1) / (int);\n    }\n\n    @java.lang.Override\n    public boolean isEmpty() {\n        return java.util.List<T>.isEmpty();\n    }\n}","position":"org.apache.commons.collections4.ListUtils:668","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.iterators.ObjectArrayIterator<E>(E[])","position":"org.apache.commons.collections4.IteratorUtils:245","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.list.GrowthList:155","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Iterator must not be null\")","position":"org.apache.commons.collections4.iterators.UnmodifiableIterator:49","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Set<T>.add(T)","position":"org.apache.commons.collections4.functors.UniquePredicate:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionTransformer.org.apache.commons.collections4.functors.ExceptionTransformer.<I,O>exceptionTransformer()","position":"org.apache.commons.collections4.TransformerUtils:79","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.TransformerPredicate.org.apache.commons.collections4.functors.TransformerPredicate.transformerPredicate(org.apache.commons.collections4.Transformer<? super T, java.lang.Boolean>)","position":"org.apache.commons.collections4.PredicateUtils:470","type":"CtReturnImpl"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    if (java.lang.Object == this) {\n        return true;\n    } \n    return (java.lang.Object == this) || (org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().equals(java.lang.Object));\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:194","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:106","type":"CtSynchronizedImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (int != (-1)) {\n    return int;\n} ","position":"org.apache.commons.collections4.list.TreeList:433","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"parent=\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1348","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.List<E> != null) && (org.apache.commons.collections4.Predicate<E> != null)) {\n    for (int int = 0 ; int < (java.util.List<E>.size()) ; int++) {\n        final E E = java.util.List<E>.get(int);\n        if (org.apache.commons.collections4.Predicate<E>.evaluate(E)) {\n            return int;\n        } \n    }\n} ","position":"org.apache.commons.collections4.ListUtils:509","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:147","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException()","position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:80","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:115","type":"CtReturnImpl"},"status":-2},{"failures":[143],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E> = java.util.List<E>.listIterator(java.util.List<E>.size())","position":"org.apache.commons.collections4.iterators.ReverseListIterator:171","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.SetUtils:121","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (T) == T","position":"org.apache.commons.collections4.functors.IdentityPredicate:72","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.OnePredicate.org.apache.commons.collections4.functors.OnePredicate.onePredicate(java.util.Collection<org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:388","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AllPredicate.org.apache.commons.collections4.functors.AllPredicate.allPredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:274","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"status":-2},{"failures":[144,145,146,147,148,149,150,151,152,153,154],"variableMapping":{"next":"value","this":"this"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:192","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)))","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:165","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"closure":"iClosure"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Closure<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.WhileClosure:88","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : java.util.Map<? extends K, ? extends V>.entrySet()) {\n    org.apache.commons.collections4.map.PredicatedMap<K, V>.validate(java.util.Map.Entry<? extends K, ? extends V>.getKey(), java.util.Map.Entry<? extends K, ? extends V>.getValue());\n}","position":"org.apache.commons.collections4.map.PredicatedMap:186","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.Closure<E>)(org.apache.commons.collections4.Closure<? super E>))","position":"org.apache.commons.collections4.functors.ForClosure:56","type":"CtReturnImpl"},"status":-2},{"failures":[155],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:587","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:84","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this","object":"object"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.SynchronizedCollection:164","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toArray(T[]);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:163","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.LazySortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.LazySortedMap:144","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final int int = org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.bitIndex(K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1026","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().last()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.util.Map.Entry<?, ?>.getValue()","position":"org.apache.commons.collections4.MapUtils:992","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:112","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.Transformer<? super V, ? extends V>.transform(V)","position":"org.apache.commons.collections4.map.TransformedMap:218","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:105","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList<E>.removeNode(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)","position":"org.apache.commons.collections4.list.AbstractLinkedList:335","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>.reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:91","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return (java.lang.Object == java.lang.Object) || (java.lang.Object.equals(java.lang.Object))","position":"org.apache.commons.collections4.map.AbstractHashedMap:413","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object == this) || (org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().equals(java.lang.Object))","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"closure":"iClosure"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Closure<? super T> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} ","position":"org.apache.commons.collections4.functors.ClosureTransformer:48","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super E>.execute(E)","position":"org.apache.commons.collections4.functors.WhileClosure:86","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.AllPredicate<T>(org.apache.commons.collections4.Predicate<T>[])","position":"org.apache.commons.collections4.functors.AllPredicate:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:322","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList.FixedSizeListIterator(org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int))","position":"org.apache.commons.collections4.list.FixedSizeList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().listIterator(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:95","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size singleton\")","position":"org.apache.commons.collections4.map.SingletonMap:251","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:120","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"coll":"coll"},"name":"add","transplant":{"sourceCode":"if (java.util.Collection<?> instanceof org.apache.commons.collections4.BoundedCollection) {\n    return ((org.apache.commons.collections4.BoundedCollection<?>)(java.util.Collection<?>)).isFull();\n} ","position":"org.apache.commons.collections4.CollectionUtils:1470","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().retainAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:144","type":"CtReturnImpl"},"status":0},{"failures":[156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:120","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object == this) || (org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().equals(java.lang.Object))","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:149","type":"CtReturnImpl"},"status":-1},{"failures":[145,146,147,148,149,150,151,152],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.IteratorChain:252","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int ^= java.lang.Object.hashCode()","position":"org.apache.commons.collections4.map.MultiKeyMap:513","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.bag.TreeBag:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.KeySet<K>(this)","position":"org.apache.commons.collections4.map.Flat3Map:952","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(((((\"fromIndex(\" + int) + \") > toIndex(\") + int) + \")\"))","position":"org.apache.commons.collections4.list.AbstractLinkedList:956","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<E>.hasNext()) {\n    E = java.util.ListIterator<E>.next();\n}","position":"org.apache.commons.collections4.iterators.LoopingListIterator:146","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"added":"nextObjectSet","changed":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:103","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:118","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((int) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int)) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1565","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.GrowthList:126","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return V","position":"org.apache.commons.collections4.map.MultiKeyMap:315","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.map.StaticBucketMap.this.size()","position":"org.apache.commons.collections4.map.StaticBucketMap:561","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.util.List<E>.size()) - 1","position":"org.apache.commons.collections4.iterators.LoopingListIterator:172","type":"CtReturnImpl"},"status":-2},{"failures":[43,44,45,46,47,48,49,50,51,52,53,54],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:165","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.Values.ValueIterator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1496","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedMap<K, V>)(java.util.Map<K, V>))","position":"org.apache.commons.collections4.map.LazySortedMap:126","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (boolean) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.PeekingIterator:129","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<E>)(org.apache.commons.collections4.collection.PredicatedCollection<E>.decorated()))","position":"org.apache.commons.collections4.set.PredicatedSet:86","type":"CtReturnImpl"},"status":-2},{"failures":[390,391,392,393,394,395,396,397,398,399],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E> = java.util.List<E>.listIterator()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:242","type":"CtAssignmentImpl"},"status":-1},{"failures":[145,146,147,148,149,150,151,152,153],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:198","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * Inner class MapEntry.\n */\nprotected static class MapEntry<K, V> extends org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator<K, V> {\n    /** \n     * The parent map\n     */\nprotected final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> parent;\n\n    /** \n     * Constructor.\n     * @param entry  the entry to decorate\n     * @param parent  the parent map\n     */\nprotected MapEntry(final java.util.Map.Entry<K, V> entry ,final org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> parent) {\n        org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator<K, V>.super(java.util.Map.Entry<K, V>);\n        this.org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V> = org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>;\n    }\n\n    @java.lang.Override\n    public V setValue(final V value) {\n        final K K = org.apache.commons.collections4.bidimap.AbstractDualBidiMap.MapEntry.this.getKey();\n        if ((org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.java.util.Map<V, K>.containsKey(V)) && ((org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.java.util.Map<V, K>.get(V)) != K)) {\n            throw new java.lang.IllegalArgumentException(\"Cannot use setValue() when the object being set is already in the map\");\n        } \n        org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.put(K, V);\n        return org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator<K, V>.setValue(V);\n    }\n}","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:651","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitDeleteCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.DeleteCommand:53","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.getValue()","position":"org.apache.commons.collections4.map.AbstractHashedMap:740","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return (this.int) > (this.int)","position":"org.apache.commons.collections4.iterators.ArrayListIterator:105","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:73","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.LazyList:115","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.MultiKeyMap<K, V>.decorated().org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>[][int]","position":"org.apache.commons.collections4.map.MultiKeyMap:605","type":"CtLocalVariableImpl"},"status":-2},{"failures":[43,45,46,47,49,51,52,53,54],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (boolean) {\n    throw new java.lang.IllegalStateException(\"remove() cannot be called\");\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:119","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:129","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator.<K,V>emptyOrderedMapIterator()","position":"org.apache.commons.collections4.IteratorUtils:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.equals(java.lang.Object)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return (java.util.Collection<? extends E>.size()) > 0","position":"org.apache.commons.collections4.iterators.LoopingIterator:71","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-1},{"failures":[390,393,394],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:587","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-1},{"failures":[425],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"E[][(int - 1)] = E[][0]","position":"org.apache.commons.collections4.queue.CircularFifoQueue:394","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.map.Flat3Map:222","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.set.AbstractSortedSetDecorator<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.AbstractSortedSetDecorator:89","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.TransformedSortedMap:141","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"exhausted":"chainExhausted"},"name":"add","transplant":{"sourceCode":"if (this.boolean) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.PeekingIterator:129","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":0},{"failures":[426,427,428,429],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"null keys not allowed\")","position":"org.apache.commons.collections4.map.AbstractReferenceMap:264","type":"CtThrowImpl"},"status":-1},{"failures":[430],"variableMapping":{"o1":"iValue","o2":"object"},"name":"replace","transplant":{"sourceCode":"return (T == T) || ((T != null) && (T.equals(T)))","position":"org.apache.commons.collections4.functors.DefaultEquator:66","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (T) == T","position":"org.apache.commons.collections4.functors.IdentityPredicate:72","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().equals(java.util.Map.Entry<?, ?>.getKey())) && (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue().equals(java.util.Map.Entry<?, ?>.getValue()))","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2020","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.map.DefaultedMap:180","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:152","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:136","type":"CtInvocationImpl"},"status":0},{"failures":[431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448],"binaryOperator":"((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) >= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) <= (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int))","name":"removeConditional","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:198","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.ListOrderedMap.KeySetView<K>(this)","position":"org.apache.commons.collections4.map.ListOrderedMap:292","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().uniqueSet()","position":"org.apache.commons.collections4.bag.PredicatedBag:102","type":"CtReturnImpl"},"status":-2},{"failures":[449,450,451,452,154],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Attempt to add illegal entry unresolved by SetMutator.resolveCollision()\")","position":"org.apache.commons.collections4.set.CompositeSet:353","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\")","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:246","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.String java.lang.String = org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.getString(java.util.Map<? super K, ?>, K)","position":"org.apache.commons.collections4.MapUtils:387","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:85","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.ArrayList<E>.add(E)","position":"org.apache.commons.collections4.ListUtils:131","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.getIterator().next()","position":"org.apache.commons.collections4.iterators.AbstractIteratorDecorator:44","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (E == null) {\n    E = org.apache.commons.collections4.Factory<? extends E>.create();\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E);\n    return E;\n} ","position":"org.apache.commons.collections4.list.LazyList:116","type":"CtIfImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":49,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":281,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":423,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":195,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testFirstKey":434,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":237,"org.apache.commons.collections4.trie.UnmodifiableTrieTest.initializationError":448,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":86,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testEqualsNull":369,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":359,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":111,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testBagEqualsSelf":330,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":99,"org.apache.commons.collections4.collection.TransformedCollectionTest.testObjectEqualsSelf":161,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":177,"org.apache.commons.collections4.list.SetUniqueListTest.testEmptyListCompatibility":238,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testObjectEqualsSelf":162,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":222,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsKey":437,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":43,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":265,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":100,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArray":138,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEqualsNull":340,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectEqualsSelf":317,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":407,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":10,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":0,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":421,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":95,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":284,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":25,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":223,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetRemoveAll":380,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":93,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":63,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":120,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":45,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":228,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectEqualsSelf":377,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":262,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":240,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":90,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":354,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":178,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesIteratorRemoveChangesMap":447,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":150,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":220,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":260,"org.apache.commons.collections4.list.UnmodifiableListTest.testSerializeDeserializeThenCompare":269,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testEmptyBagCompatibility":331,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":77,"org.apache.commons.collections4.set.TransformedSetTest.testSerializeDeserializeThenCompare":349,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":151,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":229,"org.apache.commons.collections4.map.ReferenceMapTest.testMapPutNullKey":429,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":169,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":117,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":69,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":209,"org.apache.commons.collections4.collection.IndexedCollectionTest.testObjectEqualsSelf":159,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":24,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsSelf":311,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":413,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":7,"org.apache.commons.collections4.list.TransformedListTest.testEmptyListCompatibility":210,"org.apache.commons.collections4.map.ReferenceMapTest.testNullHandling":428,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":154,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":246,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":81,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":64,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":82,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":26,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":216,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":80,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":404,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":3,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":191,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapGet":440,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testEmptyBagCompatibility":338,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRetainAll":346,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":14,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFail":134,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":273,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":393,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPutAll":444,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testObjectHashCodeEqualsContract":318,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":394,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":20,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":67,"org.apache.commons.collections4.PredicateUtilsTest.testIdentityPredicate":430,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":118,"org.apache.commons.collections4.bag.TransformedBagTest.testFullBagCompatibility":301,"org.apache.commons.collections4.bag.TransformedBagTest.testEmptyBagCompatibility":300,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":167,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapPut":443,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":180,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":234,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":15,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":46,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":282,"org.apache.commons.collections4.set.TransformedSortedSetTest.testEqualsNull":356,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":11,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testFullBagCompatibility":307,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":130,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":261,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":32,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":148,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":275,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":259,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":94,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":293,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":72,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":108,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagHashCode":142,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":192,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":33,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":65,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":76,"org.apache.commons.collections4.list.FixedSizeListTest.testEmptyListCompatibility":193,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEquals":325,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapSize":436,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorRemoveProtectsInvariants":137,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsHashBag":326,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":35,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":290,"org.apache.commons.collections4.bag.TransformedBagTest.testObjectEqualsSelf":302,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRetainAll":385,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":412,"org.apache.commons.collections4.set.PredicatedSetTest.testObjectEqualsSelf":374,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":424,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":18,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagAdd":126,"org.apache.commons.collections4.queue.TransformedQueueTest.testObjectEqualsSelf":164,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectEqualsSelf":341,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":266,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":375,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testFullBagCompatibility":315,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":208,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":50,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":201,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingOverBoundary":396,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testObjectEqualsSelf":160,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":4,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":242,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":92,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":166,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":27,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testBagEqualsSelf":337,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":21,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testObjectHashCodeEqualsContract":342,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":2,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRemoveAll":345,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":402,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectEqualsSelf":366,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":376,"org.apache.commons.collections4.list.PredicatedListTest.testEmptyListCompatibility":274,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":36,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":420,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":416,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":8,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":419,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":291,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":224,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":417,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsHashBag":141,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectHashCodeEqualsContract":371,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":113,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":405,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":171,"org.apache.commons.collections4.list.SetUniqueListTest.testObjectEqualsSelf":255,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":215,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectEqualsSelf":353,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":360,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEmptyBagCompatibility":319,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":279,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null_remove":450,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveAll":382,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEqualsNull":308,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":251,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingBackwards":397,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNull":451,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":116,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":106,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testEqualsNull":361,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":197,"org.apache.commons.collections4.list.UnmodifiableListTest.testEmptyListCompatibility":258,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testKeySetRemoveAll":343,"org.apache.commons.collections4.list.GrowthListTest.testObjectEqualsSelf":190,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":31,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testPreviousKey":433,"org.apache.commons.collections4.list.GrowthListTest.testEmptyListCompatibility":168,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":132,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsHashBag":305,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":98,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEquals":304,"org.apache.commons.collections4.bag.CollectionBagTest.testObjectEqualsSelf":336,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":239,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectHashCodeEqualsContract":358,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":140,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":78,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectHashCodeEqualsContract":310,"org.apache.commons.collections4.list.FixedSizeListTest.testObjectEqualsSelf":207,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":400,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":172,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testObjectEqualsSelf":333,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapRemove":445,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":97,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":449,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":85,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":186,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":249,"org.apache.commons.collections4.set.PredicatedSetTest.testSerializeDeserializeThenCompare":373,"org.apache.commons.collections4.list.PredicatedListTest.testObjectEqualsSelf":296,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsSelf":297,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":398,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testNullHandling":426,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":30,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testEqualsNull":157,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":58,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":425,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectHashCodeEqualsContract":158,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":127,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":41,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":175,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":248,"org.apache.commons.collections4.list.UnmodifiableListTest.testObjectEqualsSelf":271,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":236,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":213,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":121,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":292,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":243,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":9,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":102,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSerializeDeserializeThenCompare":368,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":12,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":225,"org.apache.commons.collections4.set.TransformedSetTest.testObjectEqualsSelf":350,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":289,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":286,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":60,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":277,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":409,"org.apache.commons.collections4.trie.PatriciaTrieTest.initializationError":431,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":123,"org.apache.commons.collections4.bag.PredicatedBagTest.testEmptyBagCompatibility":327,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testObjectEqualsSelf":156,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":211,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":104,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":48,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEqualsHashBag":313,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapPutNullKey":427,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testEqualsNull":322,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":122,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":139,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":268,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetRetainAll":379,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":351,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":214,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":217,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":410,"org.apache.commons.collections4.bag.TreeBagTest.testOrdering":23,"org.apache.commons.collections4.list.PredicatedListTest.testSerializeDeserializeThenCompare":294,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":288,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":403,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEquals":298,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testKeySetRemoveAll":388,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContains":129,"org.apache.commons.collections4.list.GrowthListTest.testSerializeDeserializeThenCompare":188,"org.apache.commons.collections4.bag.PredicatedBagTest.testFullBagCompatibility":328,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapHashCode":441,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":103,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectEqualsSelf":362,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":212,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":59,"org.apache.commons.collections4.list.TransformedListTest.testObjectEqualsSelf":232,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":56,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":109,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":131,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRetainAll":387,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":247,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":363,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":244,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":198,"org.apache.commons.collections4.bag.CollectionBagTest.testEmptyBagCompatibility":334,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":5,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":52,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":392,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":84,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":365,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testNextKey":432,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":44,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":183,"org.apache.commons.collections4.bag.PredicatedBagTest.testObjectEqualsSelf":329,"org.apache.commons.collections4.bag.TransformedBagTest.testBagEqualsHashBag":299,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":231,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility":320,"org.apache.commons.collections4.set.TransformedSortedSetTest.testObjectEqualsSelf":357,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":6,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":182,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testObjectEqualsSelf":370,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":114,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":295,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":263,"org.apache.commons.collections4.CollectionUtilsTest.emptyCollection":347,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testFullBagCompatibility":339,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":414,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":418,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":91,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":115,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testKeySetRetainAll":381,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":47,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":152,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":200,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":272,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":75,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":170,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapToString":442,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":278,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":13,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":37,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":189,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":226,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":55,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":153,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":119,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":149,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testEmptyBagCompatibility":306,"org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility":335,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":372,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAdd":125,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":112,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testValuesRemoveChangesMap":446,"org.apache.commons.collections4.list.TransformedListTest.testSerializeDeserializeThenCompare":230,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectEqualsSelf":321,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":155,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveAll":384,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":233,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":62,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":202,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":256,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRetainAll":383,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapEquals":439,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":110,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":406,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapIsEmpty":435,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":57,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testReset":143,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":415,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":51,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":267,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailNoMore":135,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":73,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":147,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":204,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":66,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":128,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":179,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":241,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testKeySetRetainAll":344,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":87,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":250,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":422,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagEquals":312,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":199,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEmptyBagCompatibility":314,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testEqualsNull":316,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":34,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":96,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testValuesRemoveAll":386,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":19,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":218,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":74,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagEqualsSelf":324,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":391,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":174,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":1,"org.apache.commons.collections4.list.FixedSizeListTest.testSerializeDeserializeThenCompare":205,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":22,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":411,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":185,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testMapContainsValue":438,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagEqualsSelf":303,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":79,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":181,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":194,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":173,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":348,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":206,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":257,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testFullBagCompatibility":332,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testObjectEqualsSelf":309,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":101,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":253,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":184,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":254,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":39,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":124,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":196,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testObjectEqualsSelf":163,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":144,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":145,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":146,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":252,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":280,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":264,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingForward":390,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testObjectHashCodeEqualsContract":323,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":83,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":367,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":38,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":221,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailDoubleRemove":136,"org.apache.commons.collections4.queue.PredicatedQueueTest.testObjectEqualsSelf":165,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":235,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":283,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":107,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":203,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":219,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":54,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":70,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":395,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":408,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":61,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":53,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":17,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":245,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":401,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":88,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":68,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":105,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":28,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":287,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":29,"org.apache.commons.collections4.functors.CatchAndRethrowClosureTest.testThrowingClosure":42,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":187,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":352,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIterator":133,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":89,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":285,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":71,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":176,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingNotOverBoundary":399,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testKeySetRetainAll":389,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructor_null1":452,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testKeySetRemoveAll":378,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":16,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":270,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":227,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":276,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":40,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":364,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSerializeDeserializeThenCompare":355}}]

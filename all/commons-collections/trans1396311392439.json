[{"failures":[0,1,2,3,4,5,6,7],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"return this.java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-1},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:266","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.util.SortedSet<E> instanceof org.apache.commons.collections4.Unmodifiable) {\n    return java.util.SortedSet<E>;\n} ","position":"org.apache.commons.collections4.set.UnmodifiableSortedSet:56","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.set.PredicatedSortedSet<E>(java.util.SortedSet<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.set.PredicatedSortedSet:105","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"constantToReturn":"constantToReturn"},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.ConstantFactory<T>(T)","position":"org.apache.commons.collections4.functors.ConstantFactory:57","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.util.Collection<V> == null) || ((java.util.Collection<V>.size()) == 0)) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.MultiValueMap:379","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:124","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"coll":"coll","this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)) | boolean","position":"org.apache.commons.collections4.list.GrowthList:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if (java.util.Iterator<? extends E> == null) {\n    throw new java.lang.NullPointerException(\"Iterator must not be null\");\n} ","position":"org.apache.commons.collections4.iterators.CollatingIterator:173","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>.hasNext()) == false) {\n    org.apache.commons.collections4.iterators.LoopingIterator<E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:87","type":"CtIfImpl"},"status":0},{"failures":[20],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.Object instanceof java.util.Iterator<?>) {\n    final java.util.Iterator<?> java.util.Iterator<?> = ((java.util.Iterator<?>)(java.lang.Object));\n    while (java.util.Iterator<?>.hasNext()) {\n        int++;\n        java.util.Iterator<?>.next();\n    }\n} else if (java.lang.Object instanceof java.util.Enumeration<?>) {\n    final java.util.Enumeration<?> java.util.Enumeration<?> = ((java.util.Enumeration<?>)(java.lang.Object));\n    while (java.util.Enumeration<?>.hasMoreElements()) {\n        int++;\n        java.util.Enumeration<?>.nextElement();\n    }\n} else {\n    try {\n        int = java.lang.reflect.Array.java.lang.reflect.Array.getLength(java.lang.Object);\n    } catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n        throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n    }\n}","position":"org.apache.commons.collections4.CollectionUtils:1340","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<? extends I>.hasNext()","position":"org.apache.commons.collections4.iterators.TransformIterator:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (org.apache.commons.collections4.Predicate<? super T>.evaluate(T)) || (org.apache.commons.collections4.Predicate<? super T>.evaluate(T))","position":"org.apache.commons.collections4.functors.OrPredicate:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Factory<? extends O>.create()","position":"org.apache.commons.collections4.functors.FactoryTransformer:73","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final E E = java.util.ListIterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.FilterListIterator:232","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = boolean ? E : java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.PeekingIterator:139","type":"CtLocalVariableImpl"},"status":-2},{"failures":[21],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\");\n} ","position":"org.apache.commons.collections4.iterators.ReverseListIterator:128","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Attempted to add null object to queue\")","position":"org.apache.commons.collections4.queue.CircularFifoQueue:227","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.comparators.ComparatorChain:337","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(java.util.List<E>.isEmpty())","position":"org.apache.commons.collections4.iterators.LoopingListIterator:74","type":"CtReturnImpl"},"status":-2},{"failures":[22,23,24,25,26,27,28,29],"variableMapping":{"iterator":"iterator"},"name":"replace","transplant":{"sourceCode":"this.java.util.ListIterator<E>.remove()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:92","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<E>.hasNext()) {\n    E = java.util.ListIterator<E>.next();\n}","position":"org.apache.commons.collections4.iterators.LoopingListIterator:146","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.DualTreeBidiMap<K, V>.inverseBidiMap()","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:193","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().subMap(K, K)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:109","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:221","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>.setValue(V)","position":"org.apache.commons.collections4.map.AbstractReferenceMap:929","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.hashCode()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:81","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Transformer<I, O>)(org.apache.commons.collections4.Transformer<? super I, ? extends O> == null ? org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.<I,O>nullTransformer() : org.apache.commons.collections4.Transformer<? super I, ? extends O>))","position":"org.apache.commons.collections4.functors.SwitchTransformer:66","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.ReverseListIterator:79","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case 1 :\n    if ((K) == null) {\n        return V;\n    } ","position":"org.apache.commons.collections4.map.Flat3Map:141","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"boolean = boolean || boolean","position":"org.apache.commons.collections4.bag.AbstractMapBag:277","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ReverseListIterator:78","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.remove(java.lang.Object)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1725","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.set.AbstractSetDecorator:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap<K, V>.putAll(java.util.Map<? extends K, ? extends V>)","position":"org.apache.commons.collections4.map.Flat3Map:380","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.SynchronizedBag<E>(org.apache.commons.collections4.Bag<E>)","position":"org.apache.commons.collections4.bag.SynchronizedBag:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.decrementSize()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:489","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().toString()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:140","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return (int) > 0","position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:128","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:212","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.list.UnmodifiableList.org.apache.commons.collections4.list.UnmodifiableList.unmodifiableList(java.util.List<K>)","position":"org.apache.commons.collections4.map.ListOrderedMap:306","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectInputStream.defaultReadObject()","position":"org.apache.commons.collections4.bag.TreeBag:126","type":"CtInvocationImpl"},"status":-2},{"failures":[30,31],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Predicate must not be null\");\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:55","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Iterator<T> java.util.Iterator<T> = java.lang.Iterable<T>.iterator() ; java.util.Iterator<T>.hasNext() ; ) {\n    if (!(org.apache.commons.collections4.Predicate<? super T>.evaluate(java.util.Iterator<T>.next()))) {\n        java.util.Iterator<T>.remove();\n        boolean = true;\n    } \n}","position":"org.apache.commons.collections4.CollectionUtils:750","type":"CtForImpl"},"status":-1},{"failures":[8,10,11,12,16,17,18,19],"variableMapping":{"modCount":"nextIndex"},"name":"replace","transplant":{"sourceCode":"(this.int)++","position":"org.apache.commons.collections4.list.AbstractLinkedList:994","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.comparators.ComparatorChain:337","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-2},{"failures":[32,33],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:160","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int) == (-1)) {\n    java.lang.StringBuilder.append(\"parent=\").append(\"ROOT\");\n} else {\n    java.lang.StringBuilder.append(\"parent=\").append(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey()).append(\" [\").append(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int).append(\"]\");\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1347","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.bag.AbstractMapBag<E>.doReadObject(new java.util.TreeMap<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>(java.util.Comparator<? super E>), java.io.ObjectInputStream)","position":"org.apache.commons.collections4.bag.TreeBag:129","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","index":"index"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().remove(int)","position":"org.apache.commons.collections4.list.AbstractListDecorator:99","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-2},{"failures":[34,35],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:65","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\")","position":"org.apache.commons.collections4.comparators.ComparatorChain:252","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Map is empty\")","position":"org.apache.commons.collections4.map.ListOrderedMap:168","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterIterator:179","type":"CtReturnImpl"},"status":-2},{"failures":[36,37,38,39,40,41],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"Map is fixed size\")","position":"org.apache.commons.collections4.map.FixedSizeSortedMap:140","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.hasPrevious()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:67","type":"CtReturnImpl"},"status":-1},{"failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().lastKey()","position":"org.apache.commons.collections4.bag.TreeBag:100","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().firstKey()","position":"org.apache.commons.collections4.bag.TreeBag:96","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.map.SingletonMap:414","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.OnePredicate.org.apache.commons.collections4.functors.OnePredicate.onePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:372","type":"CtReturnImpl"},"status":-2},{"failures":[84,85,86,87,88],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.util.Iterator<? extends E>) instanceof org.apache.commons.collections4.ResettableIterator) {\n    ((org.apache.commons.collections4.ResettableIterator<? extends E>)(java.util.Iterator<? extends E>)).reset();\n} ","position":"org.apache.commons.collections4.iterators.IteratorIterable:125","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case GREATER_OR_EQUAL :\n    boolean = int >= 0;\n    break;","position":"org.apache.commons.collections4.functors.ComparatorPredicate:179","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:93","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"E = null","position":"org.apache.commons.collections4.list.SetUniqueList:372","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return !(org.apache.commons.collections4.ArrayStack<E>.isEmpty()) ? true : java.util.Iterator<? extends E>.hasNext()","position":"org.apache.commons.collections4.iterators.PushbackIterator:92","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated()","position":"org.apache.commons.collections4.map.TransformedSortedMap:98","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * A node used to store the data.\n */\nstatic class Node<K extends java.lang.Comparable<K>, V extends java.lang.Comparable<V>> implements java.util.Map.Entry<K, V> , org.apache.commons.collections4.KeyValue<K, V> {\n    private final K key;\n\n    private final V value;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] leftNode;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] rightNode;\n\n    private final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] parentNode;\n\n    private final boolean[] blackColor;\n\n    private int hashcodeValue;\n\n    private boolean calculatedHashCode;\n\n    /** \n     * Make a new cell with given key and value, and with null\n     * links, and black (true) colors.\n     * \n     * @param key\n     * @param value\n     */\n@java.lang.SuppressWarnings(value = \"unchecked\")\n    Node(final K key ,final V value) {\n        java.lang.Object.super();\n        this.K = K;\n        this.V = V;\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[] = new org.apache.commons.collections4.bidimap.TreeBidiMap.Node[2];\n        boolean[] = new boolean[]{ true , true };\n        boolean = false;\n    }\n\n    private java.lang.Object getData(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        switch (org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement) {\n            case KEY :\n                return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey();\n            case VALUE :\n                return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue();\n            default :\n                throw new java.lang.IllegalArgumentException();\n        }\n    }\n\n    private void setLeft(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getLeft(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    private void setRight(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    private org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getRight(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Set this node's parent node.\n     * \n     * @param node  the new parent node\n     * @param index  the KEY or VALUE int\n     */\nprivate void setParent(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>;\n    }\n\n    /** \n     * Get the parent node.\n     * \n     * @param index  the KEY or VALUE int\n     * @return the parent node, may be null\n     */\nprivate org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> getParent(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Exchange colors with another node.\n     * \n     * @param node  the node to swap with\n     * @param index  the KEY or VALUE int\n     */\nprivate void swapColors(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n        org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] ^= org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Is this node black?\n     * \n     * @param index  the KEY or VALUE int\n     * @return true if black (which is represented as a true boolean)\n     */\nprivate boolean isBlack(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    /** \n     * Is this node red?\n     * \n     * @param index  the KEY or VALUE int\n     * @return true if non-black\n     */\nprivate boolean isRed(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return !(boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]);\n    }\n\n    /** \n     * Make this node black.\n     * \n     * @param index  the KEY or VALUE int\n     */\nprivate void setBlack(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = true;\n    }\n\n    /** \n     * Make this node red.\n     * \n     * @param index  the KEY or VALUE int\n     */\nprivate void setRed(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = false;\n    }\n\n    /** \n     * Make this node the same color as another\n     * \n     * @param node  the node whose color we're adopting\n     * @param index  the KEY or VALUE int\n     */\nprivate void copyColor(final org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> node, final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()] = org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.boolean[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()];\n    }\n\n    private boolean isLeftChild(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) != null) && ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()].org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) == this);\n    }\n\n    private boolean isRightChild(final org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement dataElement) {\n        return ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) != null) && ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()].org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>[][org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement.ordinal()]) == this);\n    }\n\n    /** \n     * Gets the key.\n     * \n     * @return the key corresponding to this entry.\n     */\npublic K getKey() {\n        return K;\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value corresponding to this entry.\n     */\npublic V getValue() {\n        return V;\n    }\n\n    /** \n     * Optional operation that is not permitted in this implementation\n     * \n     * @param ignored\n     * @return does not return\n     * @throws UnsupportedOperationException always\n     */\npublic V setValue(final V ignored) throws java.lang.UnsupportedOperationException {\n        throw new java.lang.UnsupportedOperationException(\"Map.Entry.setValue is not supported\");\n    }\n\n    /** \n     * Compares the specified object with this entry for equality.\n     * Returns true if the given object is also a map entry and\n     * the two entries represent the same mapping.\n     * \n     * @param obj  the object to be compared for equality with this entry.\n     * @return true if the specified object is equal to this entry.\n     */\n@java.lang.Override\n    public boolean equals(final java.lang.Object obj) {\n        if (java.lang.Object == this) {\n            return true;\n        } \n        if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n            return false;\n        } \n        final java.util.Map.Entry<?, ?> java.util.Map.Entry<?, ?> = ((java.util.Map.Entry<?, ?>)(java.lang.Object));\n        return (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().equals(java.util.Map.Entry<?, ?>.getKey())) && (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue().equals(java.util.Map.Entry<?, ?>.getValue()));\n    }\n\n    /** \n     * @return the hash code value for this map entry.\n     */\n@java.lang.Override\n    public int hashCode() {\n        if (!(boolean)) {\n            int = (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().hashCode()) ^ (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getValue().hashCode());\n            boolean = true;\n        } \n        return int;\n    }\n}","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1825","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:156","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.ListIterator<K>.remove()","position":"org.apache.commons.collections4.map.ListOrderedMap:747","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:101","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((int) == int) && (K.equals(K))) {\n    final V V = V;\n    V = V;\n    return V;\n} ","position":"org.apache.commons.collections4.map.Flat3Map:321","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null));\n} ","position":"org.apache.commons.collections4.list.GrowthList:123","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map) && (!(org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.contains(java.lang.Object)))) {\n    org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream, (java.lang.Object == null ? \"null\" : java.lang.Object), ((java.util.Map<?, ?>)(java.lang.Object)), org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>, boolean);\n} else {\n    org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.printIndent(java.io.PrintStream, org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size());\n    java.io.PrintStream.print(java.lang.Object);\n    java.io.PrintStream.print(\" = \");\n    final int int = org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.indexOf(java.lang.Object);\n    if (int == (-1)) {\n        java.io.PrintStream.print(java.lang.Object);\n    } else if (((org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size()) - 1) == int) {\n        java.io.PrintStream.print(\"(this Map)\");\n    } else {\n        java.io.PrintStream.print(((\"(ancestor[\" + ((((org.apache.commons.collections4.ArrayStack<java.util.Map<?, ?>>.size()) - 1) - int) - 1)) + \"] Map)\"));\n    }\n    if (boolean && (java.lang.Object != null)) {\n        java.io.PrintStream.print(' ');\n        java.io.PrintStream.println(java.lang.Object.getClass().getName());\n    } else {\n        java.io.PrintStream.println();\n    }\n}","position":"org.apache.commons.collections4.MapUtils:993","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = java.util.Collection<? extends E>.iterator()","position":"org.apache.commons.collections4.bag.AbstractMapBag:274","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedMap<K, V>)(java.util.Map<K, V>))","position":"org.apache.commons.collections4.map.PredicatedSortedMap:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.util.Map<? super I, ? extends O> == null) {\n    return org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.<I,O>nullTransformer();\n} ","position":"org.apache.commons.collections4.functors.MapTransformer:50","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.MapTransformer.org.apache.commons.collections4.functors.MapTransformer.mapTransformer(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.TransformerUtils:380","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((java.util.List<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.list.AbstractListDecorator:65","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().poll()","position":"org.apache.commons.collections4.queue.PredicatedQueue:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Class<?>[] == null) || ((java.lang.Class<?>[].int) == 0)) {\n    return new org.apache.commons.collections4.functors.InvokerTransformer<I, O>(java.lang.String);\n} ","position":"org.apache.commons.collections4.functors.InvokerTransformer:80","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitInsertCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.InsertCommand:54","type":"CtInvocationImpl"},"status":-2},{"failures":[89],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:56","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Iterator<E>.remove()","position":"org.apache.commons.collections4.list.AbstractLinkedList:1032","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.WhileClosure:56","type":"CtThrowImpl"},"status":-2},{"failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,52,296,297,298,299,300,301,302,303,304,305,306,307,70,308,309,310,82,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:165","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.Set<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.set.AbstractSetDecorator:63","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object = java.util.Map.Entry<?, ?>.getKey()","position":"org.apache.commons.collections4.map.AbstractReferenceMap:673","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.list.FixedSizeList<E>(java.util.List<E>)","position":"org.apache.commons.collections4.list.FixedSizeList:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((boolean) == false) {\n    throw new java.lang.IllegalStateException(org.apache.commons.collections4.map.AbstractHashedMap.java.lang.String);\n} ","position":"org.apache.commons.collections4.map.SingletonMap:450","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.SortedMap<E, org.apache.commons.collections4.bag.AbstractMapBag.MutableInteger>)(org.apache.commons.collections4.bag.AbstractMapBag<E>.getMap()))","position":"org.apache.commons.collections4.bag.TreeBag:109","type":"CtReturnImpl"},"status":-2},{"failures":[397,398],"name":"returnValue","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:45","type":"mutation","return":"return false","status":-1},{"failures":[399,400,401,402,403,404,405,397,398],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Map must not be null\")","position":"org.apache.commons.collections4.map.AbstractMapDecorator:62","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:69","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.incrementSize()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:163","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:120","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.Closure<?>[] == null) {\n    throw new java.lang.IllegalArgumentException(\"The closure array must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FunctorUtils:135","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) - 1","position":"org.apache.commons.collections4.iterators.FilterListIterator:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"T[] = java.lang.reflect.Array.((T[])(java.lang.reflect.Array.newInstance(java.lang.Class<?>, int)))","position":"org.apache.commons.collections4.list.AbstractLinkedList:178","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().toArray(T[])","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:132","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"InvokerTransformer: The method \\'\" + (java.lang.String)) + \"\\' on \\'\") + (java.lang.Object.getClass())) + \"\\' cannot be accessed\")","name":"math","position":"org.apache.commons.collections4.functors.InvokerTransformer:134","type":"mutation","status":-2},{"failures":[406,407,400,408,409,410,411],"variableMapping":{"iterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.TransformIterator:90","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.EmptyIterator.org.apache.commons.collections4.iterators.EmptyIterator.<E>emptyIterator();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return T","position":"org.apache.commons.collections4.sequence.EditCommand:69","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.LoopingIterator:90","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (V == null ? (java.util.Map.Entry<?, ?>.getValue()) == null : V.equals(java.util.Map.Entry<?, ?>.getValue())) {\n    org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.java.util.Map<K, V>.remove(java.lang.Object);\n    org.apache.commons.collections4.bidimap.AbstractDualBidiMap<K, V>.java.util.Map<V, K>.remove(V);\n    return true;\n} ","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:593","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().hashCode()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> != (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) ; org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> = org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> , int++) {\n    if (org.apache.commons.collections4.map.AbstractHashedMap<K, V>.isEqualKey(java.lang.Object, org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.java.lang.Object)) {\n        return int;\n    } \n}","position":"org.apache.commons.collections4.map.LinkedMap:167","type":"CtForImpl"},"status":-2},{"failures":[412],"binaryOperator":"(int <= 0)","name":"conditionalBoundary","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"mutation","status":-1},{"failures":[0,1,2,3,4,5,6,7],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return \"ComparableComparator\".hashCode()","position":"org.apache.commons.collections4.comparators.ComparableComparator:106","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.ListOrderedMap.EntrySetView<K, V>.getEntrySet().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.ListOrderedMap:649","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies(((int - int) + 1), null))","position":"org.apache.commons.collections4.list.GrowthList:184","type":"CtInvocationImpl"},"status":-2},{"failures":[412],"variableMapping":{"count":"count","closure":"closure"},"name":"add","transplant":{"sourceCode":"if (int == 1) {\n    return ((org.apache.commons.collections4.Closure<E>)(org.apache.commons.collections4.Closure<? super E>));\n} ","position":"org.apache.commons.collections4.functors.ForClosure:55","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"status":-2},{"failures":[413,84,414,415,85,416,417,418,87],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this","position":"org.apache.commons.collections4.list.TreeList:878","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().comparator()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:92","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V> = org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>","position":"org.apache.commons.collections4.map.MultiKeyMap:612","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final org.apache.commons.collections4.map.TransformedSortedMap<K, V> org.apache.commons.collections4.map.TransformedSortedMap<K, V> = new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:93","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.CompositeCollection<V>","position":"org.apache.commons.collections4.map.CompositeMap:455","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.FixedSizeList:148","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:124","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.util.ListIterator<E>.hasNext()) {\n    E = java.util.ListIterator<E>.next();\n}","position":"org.apache.commons.collections4.iterators.LoopingListIterator:146","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:147","type":"CtAssignmentImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":0},{"failures":[419,301],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:137","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:131","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:188","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().hashCode()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"lastUsedIterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.Iterator<? extends E>) instanceof org.apache.commons.collections4.ResettableIterator) {\n    this.java.util.Iterator<? extends E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.IteratorIterable:125","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.Values()","position":"org.apache.commons.collections4.map.StaticBucketMap:360","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<E>","position":"org.apache.commons.collections4.collection.SynchronizedCollection:100","type":"CtReturnImpl"},"status":-2},{"failures":[406,407],"variableMapping":{"start":"callCounter","maxElements":"callCounter"},"name":"replace","transplant":{"sourceCode":"if ((this.int) >= (this.int)) {\n    this.int = 0;\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:310","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (((java.util.Iterator<? extends E>.hasNext()) == false) && (!(boolean))) {\n    final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = org.apache.commons.collections4.iterators.LazyIteratorChain<E>.nextIterator(++(int));\n    if (java.util.Iterator<? extends E> != null) {\n        java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n    } else {\n        boolean = true;\n    }\n}","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:94","type":"CtWhileImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.FlatMapIterator<K, V>(this)","position":"org.apache.commons.collections4.map.Flat3Map:616","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>(org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.entrySet())","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:104","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Iterator<? extends E> != null) {\n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} else {\n    boolean = true;\n}","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:96","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this","lock":"lock","object":"lock"},"name":"add","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    if (java.lang.Object == this) {\n        return true;\n    } \n    return (java.lang.Object == this) || (org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().equals(java.lang.Object));\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:194","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[420,421,422,423,424,425,426,427,428,429,430,431,432],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((java.util.Iterator<? extends E>.hasNext()) && ((boolean) == false)) {\n    E E = java.util.Iterator<? extends E>.next();\n    if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n        E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E);\n    } \n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:187","type":"CtWhileImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.list.PredicatedList<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.PredicatedList:134","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasNext()) {\n    final E E = java.util.ListIterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:231","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.Iterator<? extends E>.hasNext()) {\n    final E E = java.util.Iterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterIterator:174","type":"CtWhileImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1709","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.Predicate<T>","position":"org.apache.commons.collections4.PredicateUtils:356","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.functors.ConstantTransformer<I, O>.(getConstant()) != null) {\n    int |= org.apache.commons.collections4.functors.ConstantTransformer<I, O>.getConstant().hashCode();\n} ","position":"org.apache.commons.collections4.functors.ConstantTransformer:124","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:244","type":"CtAssignmentImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains1":257,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains2":258,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":14,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":189,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":181,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray":334,"org.apache.commons.collections4.map.PredicatedMapTest.testFailFastEntrySet":256,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":156,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":193,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":4,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray":365,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetIteratorRemoveChangesMap":214,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFullIterator":411,"org.apache.commons.collections4.comparators.ComparatorChainTest.testBadNoopComparatorChain":34,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":279,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":341,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":359,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":404,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRemoveAll":132,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":7,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":86,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsContract":372,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove1":261,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetContains3":259,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove3":263,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemove2":262,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":3,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRetainAll":130,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":8,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":328,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":1,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetClearChangesMap":169,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":171,"org.apache.commons.collections4.ListUtilsTest.testLazyList":20,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveChangesMap":103,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRetainAll":230,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":385,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":253,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":82,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":275,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagContainsAll":309,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testSortOrder":72,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":118,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":44,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRetainAll":212,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":246,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapRemove":252,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":213,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":277,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":368,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":10,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.initializationError":201,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":388,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":199,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToString":323,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":209,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":427,"org.apache.commons.collections4.bag.HashBagTest.testBagRetainAll":289,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":428,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":276,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":251,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":414,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":88,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":280,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":43,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":94,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":79,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToString":308,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":432,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":247,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAll":313,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":45,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":75,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetClearChangesMap":266,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetIteratorRemoveChangesMap":131,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRetainAll":200,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":63,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRetainAll":175,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping1":24,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToString":311,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetIteratorRemoveChangesMap":112,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testLooping2":25,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":330,"org.apache.commons.collections4.CollectionUtilsTest.filterInverse":31,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":69,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapRemove":234,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray":392,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveAll":126,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":347,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":418,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":64,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":11,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":235,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetIteratorRemoveChangesMap":144,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":83,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRetainAll":111,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagContainsAll":298,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":120,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":245,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRemoveChangesMap":125,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":301,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":116,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":363,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":51,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":424,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":269,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddRemove":316,"org.apache.commons.collections4.comparators.ComparatorChainTest.testBadListComparatorChain":35,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains1":136,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains2":137,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetContains3":138,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":87,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":52,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":366,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRetainAll":219,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagRetainAll":307,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":229,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":326,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsSelfHashCode":396,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":281,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetIteratorRemoveChangesMap":242,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":379,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":54,"org.apache.commons.collections4.bag.TransformedBagTest.testBagContainsAll":291,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":325,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetIteratorRemoveChangesMap":232,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":191,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":2,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRetainAll":108,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":249,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":147,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":67,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":210,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":376,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove3":166,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove2":165,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemove1":164,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains3":204,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapRemove":217,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":15,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains1":202,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetContains2":203,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testJoggingOverBoundary":27,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":267,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsSelfHashCode":355,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":76,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":148,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":390,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetIteratorRemoveChangesMap":134,"org.apache.commons.collections4.bag.TransformedBagTest.testBagRetainAll":292,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToString":296,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":46,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":70,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":74,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetRemoveAll":190,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":231,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":387,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSerializeDeserializeThenCompare":391,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToString":304,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":180,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":55,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRetainAll":254,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":278,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":80,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":243,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionSize":322,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":320,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":271,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains2":185,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains3":186,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveAll":264,"org.apache.commons.collections4.bag.PredicatedBagTest.testlegalAddRemove":297,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetContains1":184,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":398,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSerializeDeserializeThenCompare":353,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesIteratorRemoveChangesMap":106,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":389,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnmodifiable":340,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddIndexed":314,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRemoveAll":104,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":149,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testRemovingElementsAndIteratingBackwards":28,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testEmptyListIteratorIsIndeedEmpty":36,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":399,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testEqualsNull":354,"org.apache.commons.collections4.map.TransformedSortedMapTest.initializationError":237,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRetainAll":236,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToString":300,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":407,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":50,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":302,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAddThenRemove":21,"org.apache.commons.collections4.set.UnmodifiableSetTest.testEqualsNull":370,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRetainAll":248,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testBagRetainAll":310,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToString":305,"org.apache.commons.collections4.CollectionUtilsTest.filter":30,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":419,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":345,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":228,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":393,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":425,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetHashCode":377,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testKeySetRemoveAll":129,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":282,"org.apache.commons.collections4.set.ListOrderedSetTest.testListAddReplacing":315,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testLastKey":182,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsContract":337,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":383,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToString":293,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains3":162,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains2":161,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetContains1":160,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testNextAndPreviousIndex":29,"org.apache.commons.collections4.ClosureUtilsTest.testWhileClosure":89,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":0,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":49,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":412,"org.apache.commons.collections4.set.ListOrderedSet2Test.testObjectHashCodeEqualsContract":395,"org.apache.commons.collections4.bag.TreeBagTest.testBagContainsAll":294,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetRemoveAll":223,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":60,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":430,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":153,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":207,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":81,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetHashCode":319,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":61,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testFullIterator":41,"org.apache.commons.collections4.map.TransformedMapTest.testTransformedMap":158,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":406,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetIteratorRemoveChangesMap":250,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":170,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testKeySetIteratorRemoveChangesMap":196,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":13,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":401,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":284,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":273,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":84,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":119,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":274,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testReverse":37,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":357,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":157,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionSize":364,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesRetainAll":127,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveAll":167,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":378,"org.apache.commons.collections4.bag.TreeBagTest.testOrdering":42,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToString":290,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testValuesIteratorRemoveChangesMap":128,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":361,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetIteratorRemoveChangesMap":265,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetRemoveAll":241,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":344,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":98,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":96,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveAll":143,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":218,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":403,"org.apache.commons.collections4.map.TransformedMapTest.testFailFastEntrySet":159,"org.apache.commons.collections4.bag.HashBagTest.testBagContainsAll":288,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":115,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testObjectHashCodeEqualsContract":356,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":177,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":17,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":77,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":386,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains1":220,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testSet":23,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains3":222,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":352,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetContains2":221,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetRemoveChangesMap":163,"org.apache.commons.collections4.set.ListOrderedSetTest.testSerializeDeserializeThenCompare":333,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetIteratorRemoveChangesMap":206,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":9,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":173,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":343,"org.apache.commons.collections4.set.UnmodifiableSetTest.testObjectHashCodeEqualsSelfHashCode":371,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddIndexed":373,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":285,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":350,"org.apache.commons.collections4.set.ListOrderedSetTest.testRetainAllCollections426":312,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove3":142,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToString":351,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":78,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove2":141,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemove1":140,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionSize":380,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testBidiKeySetValuesOrder":91,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":400,"org.apache.commons.collections4.set.ListOrderedSet2Test.testListAddRemove":374,"org.apache.commons.collections4.splitmap.TransformedSplitMapTest.testMapIterator":32,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetHashCode":342,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":409,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetHashCode":358,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":410,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRemoveChangesMap":260,"org.apache.commons.collections4.bag.PredicatedBagTest.testBagRetainAll":299,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetRetainAll":133,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray":349,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":12,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":429,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":225,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.initializationError":90,"org.apache.commons.collections4.bag.TreeBagTest.testBagRetainAll":295,"org.apache.commons.collections4.set.ListOrderedSetTest.testOrdering":317,"org.apache.commons.collections4.set.ListOrderedSet2Test.testOrdering":375,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":417,"org.apache.commons.collections4.map.FixedSizeMapTest.testEntrySetRemoveAll":205,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":402,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":62,"org.apache.commons.collections4.set.ListOrderedSetTest.testObjectHashCodeEqualsSelfHashCode":338,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":56,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains3":240,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":5,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":97,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":335,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":408,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":172,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains1":238,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testBagContainsAll":306,"org.apache.commons.collections4.map.UnmodifiableMapTest.testEntrySetContains2":239,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":431,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapRemove":121,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":426,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToString":303,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":154,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":360,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetIteratorRemoveChangesMap":188,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":397,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":33,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetRemoveAll":107,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":92,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testValuesRetainAll":105,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRetainAll":194,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":216,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":405,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetRemoveAll":110,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":195,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":382,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":16,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":283,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":423,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testWalkForwardAndBack":38,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testEntrySetRemoveAll":187,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapRemove":99,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":270,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":155,"org.apache.commons.collections4.map.TransformedMapTest.testEntrySetIteratorRemoveChangesMap":168,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":321,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testPut":135,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":6,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":227,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains3":102,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains2":101,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testEntrySetContains1":100,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":117,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":53,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":150,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":68,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":179,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToString":381,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":329,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRetainAll":151,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":416,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testAdd":39,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testAdd":22,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapRemove":198,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":73,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testKeySetRemoveAll":226,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":71,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testKeySetIteratorRemoveChangesMap":109,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":384,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetRemoveChangesMap":139,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testComparator":339,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToString":287,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":415,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":215,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":114,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":413,"org.apache.commons.collections4.set.ListOrderedSetTest.testEqualsNull":336,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":178,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":58,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":176,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":268,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":420,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":421,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":422,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testFirstKey":183,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":327,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":362,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":85,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToString":367,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":211,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":57,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToString":286,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":324,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":19,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains1":122,"org.apache.commons.collections4.map.PredicatedMapTest.testPut":255,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains2":123,"org.apache.commons.collections4.map.UnmodifiableMapTest.testKeySetRemoveAll":244,"org.apache.commons.collections4.iterators.LoopingListIteratorTest.testReset":26,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testEntrySetContains3":124,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":18,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":146,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":332,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":66,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testBidiKeySetValuesOrder":113,"org.apache.commons.collections4.map.FixedSizeMapTest.testKeySetRemoveAll":208,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":174,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":197,"org.apache.commons.collections4.map.PredicatedMapTest.testEntrySetRetainAll":272,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":47,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":95,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":152,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":48,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSerializeDeserializeThenCompare":369,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":93,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":331,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testEntrySetIteratorRemoveChangesMap":224,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":192,"org.apache.commons.collections4.iterators.ReverseListIteratorTest.testEmptyIterator":40,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":65,"org.apache.commons.collections4.set.ListOrderedSet2Test.testEqualsNull":394,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testEntrySetClearChangesMap":145,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionSize":348,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":346,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":59,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":318,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":233}}]

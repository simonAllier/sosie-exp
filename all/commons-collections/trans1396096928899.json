[{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.map.MultiValueMap:217","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.lang.Object == this) || (org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().equals(java.lang.Object))","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:149","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"listSize":"index"},"name":"add","transplant":{"sourceCode":"if (int < 0) {\n    throw new java.lang.IllegalArgumentException((\"negative size: \" + int));\n} ","position":"org.apache.commons.collections4.ListUtils:680","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.queue.CircularFifoQueue.this.remove()","position":"org.apache.commons.collections4.queue.CircularFifoQueue:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:132","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-1},{"failures":[9],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"predicate":"predicate"},"name":"add","transplant":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super C> == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.CollectionUtils:872","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:265","type":"CtIfImpl"},"status":0},{"failures":[],"binaryOperator":"((((\"InvokerTransformer: The method \\'\" + (java.lang.String)) + \"\\' on \\'\") + (java.lang.Object.getClass())) + \"\\' cannot be accessed\")","name":"math","position":"org.apache.commons.collections4.functors.InvokerTransformer:134","type":"mutation","status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.NullPointerException(\"The collection must not be null\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:56","type":"CtThrowImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:135","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"relativePosition":"size"},"name":"add","transplant":{"sourceCode":"if (int >= 0) {\n    int++;\n} ","position":"org.apache.commons.collections4.list.TreeList:509","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractLinkedMap.EntrySetIterator<K, V>(this)","position":"org.apache.commons.collections4.map.AbstractLinkedMap:401","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:116","type":"CtReturnImpl"},"status":-2},{"failures":[10,11],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear()","position":"org.apache.commons.collections4.map.TransformedSortedMap:97","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.bag.TransformedBag<E>.decorated().add(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E))","position":"org.apache.commons.collections4.bag.TransformedBag:83","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.util.Iterator<E>.hasNext()) {\n    final E E = java.util.Iterator<E>.next();\n    for (int int = org.apache.commons.collections4.bag.AbstractMapBag<E>.getCount(E) ; int > 0 ; int--) {\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        final T T = ((T)(E));\n        T[][int++] = T;\n    }\n}","position":"org.apache.commons.collections4.bag.AbstractMapBag:467","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.OnePredicate.org.apache.commons.collections4.functors.OnePredicate.onePredicate(org.apache.commons.collections4.Predicate<? super T>[])","position":"org.apache.commons.collections4.PredicateUtils:372","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:85","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:118","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.previousIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append((V == this ? \"(this Map)\" : V))","position":"org.apache.commons.collections4.map.ListOrderedMap:375","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.defaultWriteObject()","position":"org.apache.commons.collections4.map.DefaultedMap:180","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:712","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:45","type":"CtReturnImpl"},"status":-2},{"failures":[12,13,14,15],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The predicate and transformer arrays must be the same size\")","position":"org.apache.commons.collections4.functors.SwitchTransformer:63","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:114","type":"CtThrowImpl"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163],"name":"returnValue","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.set.PredicatedSortedSet<E>.decorated().first()","position":"org.apache.commons.collections4.set.PredicatedSortedSet:96","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.reflect.Array.((E)(java.lang.reflect.Array.get(java.lang.Object, (int)++)))","position":"org.apache.commons.collections4.iterators.ArrayIterator:150","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().hashCode()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (this.int) - org.apache.commons.collections4.iterators.ObjectArrayIterator<E>.(getStartIndex())","position":"org.apache.commons.collections4.iterators.ObjectArrayListIterator:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final V V = org.apache.commons.collections4.map.StaticBucketMap.Node<K, V>.V","position":"org.apache.commons.collections4.map.StaticBucketMap:293","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.AbstractListDecorator:83","type":"CtReturnImpl"},"status":-2},{"failures":[164,165,166,167,168,169,170,171,172,173,174],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.remove(java.util.Iterator<?>.next())","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:353","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().poll()","position":"org.apache.commons.collections4.queue.PredicatedQueue:103","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().iterator()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<java.util.Map.Entry<K, java.lang.Object>, K>(org.apache.commons.collections4.map.ListOrderedMap<K, java.lang.Object>.entrySet().iterator()) {\n    public K next() {\n        return org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<java.util.Map.Entry<K, java.lang.Object>, K>.getIterator().next().getKey();\n    }\n}","position":"org.apache.commons.collections4.map.ListOrderedMap:579","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:86","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.this.clear()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final V V = ((V)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.map.AbstractHashedMap:1268","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:96","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((int) != (int)) {\n    (int)--;\n} ","position":"org.apache.commons.collections4.list.TreeList:1097","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < int ; int++) {\n    org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null);\n}","position":"org.apache.commons.collections4.list.LazyList:126","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new java.util.ArrayList<E>(this)","position":"org.apache.commons.collections4.collection.CompositeCollection:391","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().hashCode()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:117","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return K","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:461","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int int = 0","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1359","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().add(E, int)","position":"org.apache.commons.collections4.bag.PredicatedBag:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().contains(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:124","type":"CtSynchronizedImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:170","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:596","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"status":-2},{"failures":[175,176],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:68","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:80","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) == org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:509","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:149","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return 0","position":"org.apache.commons.collections4.CollectionUtils:1331","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:151","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return ((K) == null ? 0 : K.hashCode()) ^ ((V) == null ? 0 : V.hashCode())","position":"org.apache.commons.collections4.map.StaticBucketMap:457","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:211","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.queue.CircularFifoQueue.this.remove()","position":"org.apache.commons.collections4.queue.CircularFifoQueue:381","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = java.util.Enumeration<? extends E>.nextElement()","position":"org.apache.commons.collections4.iterators.EnumerationIterator:92","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.keySet()","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:248","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Collection<E>","position":"org.apache.commons.collections4.collection.SynchronizedCollection:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.TransformedSortedMap:141","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.ComparatorUtils.org.apache.commons.collections4.ComparatorUtils.chainedComparator(((java.util.Comparator<E>[])(java.util.Collection<java.util.Comparator<E>>.toArray(new java.util.Comparator[java.util.Collection<java.util.Comparator<E>>.size()]))))","position":"org.apache.commons.collections4.ComparatorUtils:106","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"value":"lock"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.containsKey(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2070","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().removeAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:175","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"sub":"map"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:146","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.AnyPredicate.org.apache.commons.collections4.functors.AnyPredicate.anyPredicate(java.util.Collection<? extends org.apache.commons.collections4.Predicate<T>>)","position":"org.apache.commons.collections4.PredicateUtils:338","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.SortedMap<K, V> java.util.SortedMap<K, V> = org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().tailMap(K)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:119","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.PredicatedBag<E>(org.apache.commons.collections4.Bag<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.bag.PredicatedBag:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((java.util.Collection<?>.contains(java.util.Iterator<E>.next())) == false) {\n    java.util.Iterator<E>.remove();\n    boolean = true;\n} ","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:379","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":-2},{"failures":[177,178,179,180,181,121,122,182,183,184,185],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super K, ? extends V> == null) {\n    throw new java.lang.IllegalArgumentException(\"Transformer must not be null\");\n} ","position":"org.apache.commons.collections4.map.DefaultedMap:128","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n    E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:189","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E","position":"org.apache.commons.collections4.list.TreeList:651","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((org.apache.commons.collections4.Bag<E>)(org.apache.commons.collections4.collection.PredicatedCollection<E>.decorated()))","position":"org.apache.commons.collections4.bag.PredicatedBag:87","type":"CtReturnImpl"},"status":-2},{"failures":[186],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Attempted to add null object to queue\")","position":"org.apache.commons.collections4.queue.CircularFifoQueue:227","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:73","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return boolean","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1936","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (E instanceof java.util.Iterator) {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(((java.util.Iterator<? extends E>)(E)));\n} else {\n    E = E;\n    boolean = true;\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:163","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final V V = this.V","position":"org.apache.commons.collections4.keyvalue.AbstractKeyValue:72","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<K, V>.get(java.lang.Object)","position":"org.apache.commons.collections4.map.DefaultedMap:205","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.size()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1429","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().size()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:188","type":"CtReturnImpl"},"status":-2},{"failures":[187],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:596","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:261","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"input":"input","this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:60","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    org.apache.commons.collections4.functors.CatchAndRethrowClosure<E>.executeAndThrow(E);\n} catch (final java.lang.RuntimeException java.lang.RuntimeException) {\n    throw java.lang.RuntimeException;\n} catch (final java.lang.Throwable java.lang.Throwable) {\n    throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable);\n}","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:59","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.iterators.ArrayListIterator<E>(java.lang.Object , int , int)","position":"org.apache.commons.collections4.IteratorUtils:432","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return -1","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:57","type":"CtReturnImpl"},"status":-2},{"failures":[188],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(java.util.Collections.java.util.Collections.<E>nCopies((int - int), null))","position":"org.apache.commons.collections4.list.GrowthList:124","type":"CtInvocationImpl"},"status":-1},{"failures":[189],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (null == java.lang.Object) {\n    return false;\n} ","position":"org.apache.commons.collections4.comparators.ComparatorChain:336","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:106","type":"CtSynchronizedImpl"},"status":-1},{"failures":[12,13,14,190,191,192,193,194,195,196,197,198,199,200,201,202,15,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"variableMapping":{"size":"len","index":"len"},"name":"replace","transplant":{"sourceCode":"if (int >= int) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Index \" + int) + \" is invalid for size \") + int));\n} ","position":"org.apache.commons.collections4.map.AbstractLinkedMap:232","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > int) {\n    throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s beyond the end of the array. \"));\n} ","position":"org.apache.commons.collections4.iterators.ArrayIterator:113","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final boolean boolean = org.apache.commons.collections4.bag.AbstractMapBag<E>.remove(java.util.Iterator<?>.next(), 1)","position":"org.apache.commons.collections4.bag.AbstractMapBag:347","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().comparator()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.MultiValueMap.this.clear()","position":"org.apache.commons.collections4.map.MultiValueMap:502","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.sequence.CommandVisitor<T>.visitInsertCommand(org.apache.commons.collections4.sequence.EditCommand<T>.getObject())","position":"org.apache.commons.collections4.sequence.InsertCommand:54","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.util.Iterator<? extends E> java.util.Iterator<? extends E> = java.util.Collection<? extends E>.iterator()","position":"org.apache.commons.collections4.bag.AbstractMapBag:274","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.LoopingListIterator:231","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:133","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:137","type":"CtReturnImpl"},"status":-2},{"failures":[243,244],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return null","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:149","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Transformer collection must not be null\")","position":"org.apache.commons.collections4.functors.ChainedTransformer:72","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:41","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>nonePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:405","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"/** \n * Unknown object behavior enum.\n * @since 4.0\n */\npublic static enum UnknownObjectBehavior {\nBEFORE, AFTER, EXCEPTION;}","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:58","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().clear()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:119","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:587","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = T[].getClass().getComponentType()","position":"org.apache.commons.collections4.list.AbstractLinkedList:177","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super E, ?> == null) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.TransformerClosure:49","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if ((java.lang.Object instanceof java.util.Map.Entry) == false) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.AbstractDualBidiMap:586","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:120","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.keyvalue.DefaultKeyValue:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.compareKeys(K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.K)) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1064","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(null)","position":"org.apache.commons.collections4.list.LazyList:127","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.comparators.ComparatorChain<E>.addComparator(java.util.Comparator<E>)","position":"org.apache.commons.collections4.ComparatorUtils:85","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.map.AbstractMapDecorator:128","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.AndPredicate<T>(org.apache.commons.collections4.Predicate<? super T> , org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.functors.AndPredicate:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.set(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:97","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"tmpMap":"map"},"name":"replace","transplant":{"sourceCode":"return java.util.SortedMap<K, V>","position":"org.apache.commons.collections4.map.UnmodifiableSortedMap:64","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.PredicatedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Predicate<? super K> , org.apache.commons.collections4.Predicate<? super V>)","position":"org.apache.commons.collections4.map.PredicatedSortedMap:115","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeEntryMap.this(K, true, K, false)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1858","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().remove(java.lang.Object);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:169","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.Trie<K, V>.isEmpty()","position":"org.apache.commons.collections4.trie.UnmodifiableTrie:110","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return E","position":"org.apache.commons.collections4.iterators.FilterListIterator:153","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal E E = ((E)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.bag.AbstractMapBag:522","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.PredicatedBag<E>(org.apache.commons.collections4.Bag<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.bag.PredicatedBag:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.LRUMap<K, V>.this(org.apache.commons.collections4.map.LRUMap.int, org.apache.commons.collections4.map.AbstractHashedMap.float, false)","position":"org.apache.commons.collections4.map.LRUMap:77","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.MapTransformer<I, O>(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.functors.MapTransformer:53","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"switch (int) {\n    case 3 :\n        if (((int) == int) && (K.equals(K))) {\n            final V V = V;\n            V = V;\n            return V;\n        } \n    case 2 :\n        if (((int) == int) && (K.equals(K))) {\n            final V V = V;\n            V = V;\n            return V;\n        } \n    case 1 :\n        if (((int) == int) && (K.equals(K))) {\n            final V V = V;\n            V = V;\n            return V;\n        } \n}","position":"org.apache.commons.collections4.map.Flat3Map:319","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"nextObject":"object"},"name":"add","transplant":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterIterator:143","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterIterator:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"Entry(\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1339","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n    E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E);\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:189","type":"CtIfImpl"},"status":-2},{"failures":[245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,186,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,9,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"Map is empty\")","position":"org.apache.commons.collections4.map.AbstractLinkedMap:188","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().isEmpty()","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:112","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Key cannot be null\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:131","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = org.apache.commons.collections4.Factory<? extends E>.create()","position":"org.apache.commons.collections4.list.LazyList:130","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.AbstractLinkedList.LinkedSubList<E>.checkModCount()","position":"org.apache.commons.collections4.list.AbstractLinkedList:1045","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.iterators.FilterListIterator:268","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"object":"value"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.EqualPredicate<T>(T)","position":"org.apache.commons.collections4.functors.EqualPredicate:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.IdentityPredicate.org.apache.commons.collections4.functors.IdentityPredicate.<T>identityPredicate(T)","position":"org.apache.commons.collections4.PredicateUtils:161","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(((\"Couldn\\'t get the node: \" + \"index (\") + int) + \") less than zero.\")","name":"math","position":"org.apache.commons.collections4.list.AbstractLinkedList:539","type":"mutation","status":-2},{"failures":[],"variableMapping":{"index":"startIndex"},"name":"add","transplant":{"sourceCode":"int--","position":"org.apache.commons.collections4.map.ListOrderedMap:458","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = this.int","position":"org.apache.commons.collections4.iterators.ArrayIterator:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.<I,O>nullTransformer()","position":"org.apache.commons.collections4.functors.MapTransformer:51","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ChainedTransformer.org.apache.commons.collections4.functors.ChainedTransformer.chainedTransformer(org.apache.commons.collections4.Transformer<? super T, ? extends T>[])","position":"org.apache.commons.collections4.TransformerUtils:194","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"-1","position":"org.apache.commons.collections4.list.TreeList:724","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = this.int","position":"org.apache.commons.collections4.iterators.ArrayIterator:197","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"left=\").append(\"null\")","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1364","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E E = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().get(int)","position":"org.apache.commons.collections4.list.LazyList:115","type":"CtLocalVariableImpl"},"status":-2},{"failures":[822],"variableMapping":{"map":"map"},"name":"replace","transplant":{"sourceCode":"return java.util.Map<K, V>","position":"org.apache.commons.collections4.map.AbstractMapDecorator:73","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.InternalError()","position":"org.apache.commons.collections4.map.AbstractHashedMap:1298","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException()","position":"org.apache.commons.collections4.iterators.ArrayIterator:148","type":"CtThrowImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContainsAll":271,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRetainAll":458,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapSize":755,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":434,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":47,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPut":786,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContains":267,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapEquals":635,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapGet":796,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":397,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionClear":557,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIterator":301,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":4,"org.apache.commons.collections4.map.LRUMapTest.testSerializeDeserializeThenCompare":102,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIsEmpty":329,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContains":311,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIsEmpty":720,"org.apache.commons.collections4.list.GrowthListTest.testGrowthAdd":188,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueRemove":302,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testSetEquals":693,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":25,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRetainAll":668,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testRemove":234,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionToArray2":729,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":385,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":164,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedAdd":421,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionClear":708,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIsEmpty":746,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectEqualsSelf":235,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapClear":780,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRetainAll":260,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRetainAll":470,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContainsAll":252,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPut":762,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapToString":601,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapIsEmpty":643,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsContract":227,"org.apache.commons.collections4.map.MultiKeyMapTest.testSimpleSerialization":41,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapSize":791,"org.apache.commons.collections4.map.PredicatedMapTest.testMapRemove":630,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedRemove":679,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectHashCodeEqualsSelfHashCode":163,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEqualsNull":196,"org.apache.commons.collections4.CollectionUtilsTest.emptyIfNull":658,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapEquals":759,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":77,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIteratorRemove":688,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":165,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":391,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRetainAll":749,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIsEmpty":525,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":98,"org.apache.commons.collections4.bag.HashBagTest.testCollectionClear":534,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":57,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":399,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEqualsNull":224,"org.apache.commons.collections4.list.GrowthListTest.testCollectionToArray2":348,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapSize":640,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":122,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":383,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIsEmpty":665,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContainsAll":536,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContainsAll":551,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsKey":615,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":629,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":31,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":87,"org.apache.commons.collections4.map.SingletonMapTest.testMapSize":607,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIsEmpty":276,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":485,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsKey":803,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIteratorRemove":467,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":46,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAdd":737,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapEquals":602,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalEmptyCollectionExists":197,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":215,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPutAll":579,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapGet":813,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContains":499,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":379,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsSelfHashCode":213,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRetainAll":559,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":541,"org.apache.commons.collections4.map.Flat3MapTest.testMapClear":59,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":427,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":456,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRetainAll":710,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testObjectHashCodeEqualsContract":118,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsSelfHashCode":200,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":82,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionToArray2":284,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIterator":698,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapEquals":617,"org.apache.commons.collections4.list.GrowthListTest.testListHashCode":338,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSerializeDeserializeThenCompare":117,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemoveAll":350,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContainsAll":476,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":435,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":587,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIsEmpty":556,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":108,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionToArray2":471,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapSize":600,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectEqualsSelf":160,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIterator":519,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation0":56,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIterator":677,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapHashCode":89,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapToString":785,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":37,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":32,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAddAll":278,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":360,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRetainAll":506,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIterator":721,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAddAll":331,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":529,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSimpleSerialization":198,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEqualsNull":209,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":17,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":584,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContains":706,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":116,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedAdd":563,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapSize":633,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":135,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapIsEmpty":603,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":495,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIteratorRemove":479,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemoveAll":286,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsKey":810,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionClear":277,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueOffer":306,"org.apache.commons.collections4.set.ListOrderedSet2Test.testSetEquals":740,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIteratorRemove":254,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRetainAll":279,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapRemove":800,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePeek":303,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapSize":571,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":372,"org.apache.commons.collections4.map.LRUMapTest.testMapClear":94,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":621,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPut":774,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":401,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContainsAll":464,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":149,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemove":751,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":34,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRetainAll":482,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionToArray2":509,"org.apache.commons.collections4.set.MapBackedSetTest.testSimpleSerialization":142,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIteratorRemove":455,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":96,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testPreviousKey":175,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":493,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":489,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsValue":782,"org.apache.commons.collections4.map.HashedMapTest.testObjectHashCodeEqualsContract":53,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator_Key":106,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapIsEmpty":754,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":599,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapEquals":771,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":492,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":444,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionContainsAll":702,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePoll":321,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorAdd":341,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIsEmpty":537,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAdd":750,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionContainsAll":264,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":72,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":410,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":125,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":364,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testObjectHashCodeEqualsSelfHashCode":119,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":504,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAddAll":290,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":38,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":398,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSimpleSerialization":211,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContains":523,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":583,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIterator":752,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":231,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":69,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":232,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEmptyIterator":219,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsValue":609,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":18,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIteratorRemove":503,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapIsEmpty":808,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":99,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":30,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIteratorRemove":730,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":569,"org.apache.commons.collections4.list.GrowthListTest.testListIndexOf":345,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContains":298,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":407,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":83,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testCollections360":187,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRetainAll":725,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":138,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIsEmpty":513,"org.apache.commons.collections4.map.Flat3MapTest.testSerializeDeserializeThenCompare":66,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapSize":809,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionAdd":280,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":457,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":152,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionClear":442,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionToArray2":531,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":439,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":430,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapGet":88,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionToArray2":296,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAddAll":515,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":374,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":131,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":168,"org.apache.commons.collections4.map.PredicatedMapTest.testMapIsEmpty":626,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAdd":520,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":113,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapGet":820,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedRemove":424,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPutAll":627,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRetainAll":332,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContains":451,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":377,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":380,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapClear":768,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContainsAll":741,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":441,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":45,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":133,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAdd":715,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapPut":578,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContains":695,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapToString":807,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemoveAll":255,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapHashCode":114,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":126,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapEquals":805,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsValue":646,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":23,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":107,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":406,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapSize":816,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":403,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":365,"org.apache.commons.collections4.map.TransformedMapTest.testMapPutAll":653,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":61,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":172,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectHashCodeEqualsContract":143,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPutAll":799,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEmptyIterator":191,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":127,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedRemove":700,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapContainsValue":811,"org.apache.commons.collections4.map.TransformedMapTest.testMapToString":650,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testUnsupportedAdd":694,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":393,"org.apache.commons.collections4.map.SingletonMapTest.testMapToString":612,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIsEmpty":352,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIterator":282,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":447,"org.apache.commons.collections4.bag.HashBagTest.testCollectionContains":535,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContainsAll":419,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemove":723,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAdd":484,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":487,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":124,"org.apache.commons.collections4.map.LinkedMapTest.testSerializeDeserializeThenCompare":78,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContainsAll":283,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapIsEmpty":570,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":167,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedAdd":247,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContains":684,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalFullCollectionExists":208,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapGet":618,"org.apache.commons.collections4.list.GrowthListTest.testListEquals":340,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIterator":358,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapGet":806,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionClear":717,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":389,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContains":328,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":12,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":19,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIteratorRemove":285,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapGet":595,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionClear":486,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":394,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testCanonicalFullCollectionExists":195,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionToArray2":661,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionToArray2":692,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsKey":757,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContains":664,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapIsEmpty":636,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIsEmpty":312,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":488,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testRemove":206,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectHashCodeEqualsContract":199,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":35,"org.apache.commons.collections4.list.GrowthListTest.testCollectionIteratorRemove":349,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionToArray2":703,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":582,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsValue":818,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":230,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapEquals":592,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":480,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":381,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectEqualsSelf":207,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAdd":460,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionToArray2":552,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRetainAll":315,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRetainAll":355,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContains":718,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":361,"org.apache.commons.collections4.list.GrowthListTest.testListSetByIndex":343,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapGet":644,"org.apache.commons.collections4.set.TransformedSetTest.testSetEquals":659,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":137,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContainsAll":508,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAddAll":682,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapIsEmpty":815,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":371,"org.apache.commons.collections4.list.UnmodifiableListTest.testListHashCode":414,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueueElement":305,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionContainsAll":719,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionContains":256,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapGet":760,"org.apache.commons.collections4.map.TransformedMapTest.testMapGet":654,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIterator":567,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":363,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapPutAll":787,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":128,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapToString":773,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":411,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":60,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapEquals":642,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAddAll":667,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testSetEquals":714,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":384,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIterator":251,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRetainAll":542,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueElement":322,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":369,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRetainAll":291,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":15,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testObjectEqualsSelf":194,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":155,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsKey":588,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemove":712,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":404,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIterator":478,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAddAll":558,"org.apache.commons.collections4.set.MapBackedSet2Test.testSimpleSerialization":161,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":153,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIsEmpty":288,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionToArray2":459,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsContract":240,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapGet":637,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIsEmpty":501,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionIterator":502,"org.apache.commons.collections4.list.GrowthListTest.testCollectionRemove":357,"org.apache.commons.collections4.map.HashedMapTest.testMapClear":44,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":20,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalFullCollectionExists":223,"org.apache.commons.collections4.list.GrowthListTest.testListLastIndexOf":346,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemoveAll":731,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapSize":802,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIteratorRemove":662,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapToString":634,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIterator":425,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionIsEmpty":477,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemoveAll":274,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":101,"org.apache.commons.collections4.queue.TransformedQueueTest.testQueuePoll":304,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testBidiMapIteratorSet":753,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":146,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":169,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapToString":797,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsKey":632,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":97,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsValue":657,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapRemove":597,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":362,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapClear":572,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectHashCodeEqualsContract":162,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionIteratorRemove":722,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":220,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueRemove":319,"org.apache.commons.collections4.map.SingletonMapTest.testMapIsEmpty":606,"org.apache.commons.collections4.set.UnmodifiableSetTest.testUnsupportedAdd":673,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionClear":258,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAddAll":259,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContainsAll":347,"org.apache.commons.collections4.map.LinkedMapTest.testMapClear":70,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":74,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRemove":738,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":76,"org.apache.commons.collections4.map.TransformedMapTest.testMapSize":648,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionIsEmpty":249,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":86,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsValue":605,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapPut":798,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionToArray2":265,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionClear":683,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking":7,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":134,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionContains":287,"org.apache.commons.collections4.map.PredicatedMapTest.testMapGet":628,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionRemoveAll":724,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":36,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapEquals":819,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":494,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionClear":522,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionToArray2":308,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIterator":335,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSerializeDeserializeThenCompare":229,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":437,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":91,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAddAll":497,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapClear":84,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":386,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIsEmpty":733,"org.apache.commons.collections4.map.LinkedMapTest.testObjectHashCodeEqualsSelfHashCode":80,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedAdd":266,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIterator":526,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionAdd":560,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsValue":770,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedAdd":544,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsValue":574,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContains":732,"org.apache.commons.collections4.map.UnmodifiableSortedMapTest.testMapContainsValue":638,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectEqualsSelf":141,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionClear":474,"org.apache.commons.collections4.list.UnmodifiableListTest.testListLastIndexOf":418,"org.apache.commons.collections4.set.TransformedSortedSetTest.testSetEquals":680,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAddAll":314,"org.apache.commons.collections4.list.UnmodifiableListTest.testUnsupportedSet":416,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testCanonicalEmptyCollectionExists":210,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionAddAll":716,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":182,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionIteratorRemove":326,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":392,"org.apache.commons.collections4.list.GrowthListTest.testListAddByIndex":339,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":50,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapGet":604,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":140,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":1,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":202,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionAdd":669,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":373,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":822,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionAdd":496,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionContainsAll":324,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":185,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":405,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":73,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testSerializeDeserializeThenCompare":214,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":151,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIsEmpty":686,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":359,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionContains":463,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":16,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIteratorRemove":539,"org.apache.commons.collections4.map.MultiKeyMapTest.testObjectHashCodeEqualsContract":39,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":528,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":42,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testUnsupportedRemove":269,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionContains":475,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapClear":792,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapToString":577,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIsEmpty":547,"org.apache.commons.collections4.map.LinkedMapTest.testMapHashCode":75,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapPutAll":775,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionContainsAll":660,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":481,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedRemove":300,"org.apache.commons.collections4.map.HashedMapTest.testSerializeDeserializeThenCompare":52,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemoveAll":327,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":159,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":139,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRetainAll":691,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":147,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray":21,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapGet":784,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":518,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":64,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":9,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":166,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRetainAll":516,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":540,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapToString":821,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":28,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionIterator":548,"org.apache.commons.collections4.list.UnmodifiableListTest.testListIndexOf":417,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":817,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueueOffer":323,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapIsEmpty":790,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":29,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":505,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":181,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":428,"org.apache.commons.collections4.list.UnmodifiableListTest.testListEquals":415,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectHashCodeEqualsSelfHashCode":228,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":446,"org.apache.commons.collections4.map.PredicatedMapTest.testMapClear":623,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":205,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":22,"org.apache.commons.collections4.map.HashedMapTest.testObjectHashCodeEqualsSelfHashCode":54,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapGet":772,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionRemove":293,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionToArray2":678,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionContains":555,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapSize":779,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionRemove":281,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testUnsupportedRemove":250,"org.apache.commons.collections4.map.SingletonMapTest.testMapContainsKey":608,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionToArray2":253,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionToArray2":742,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":443,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionRemoveAll":705,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionToArray2":549,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":51,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapSize":589,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":2,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":5,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapSize":614,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionContains":422,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapToString":641,"org.apache.commons.collections4.map.LinkedMapTest.testObjectHashCodeEqualsContract":79,"org.apache.commons.collections4.map.LinkedMapTest.testSimpleSerialization":81,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapContainsKey":769,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectHashCodeEqualsSelfHashCode":144,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":65,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapToString":619,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":170,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":186,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":85,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapClear":590,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testSimpleSerialization":226,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapContainsKey":573,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionRetainAll":736,"org.apache.commons.collections4.list.GrowthListTest.testListGetByIndex":337,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionContainsAll":500,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionAddAll":461,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":585,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionAddAll":748,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":136,"org.apache.commons.collections4.map.TransformedMapTest.testMapRemove":656,"org.apache.commons.collections4.map.SingletonMapTest.testLastKey":244,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContains":564,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsValue":631,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContainsAll":546,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":468,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionToArray2":272,"org.apache.commons.collections4.bag.HashBagTest.testCollectionIterator":538,"org.apache.commons.collections4.map.HashedMapTest.testSimpleSerialization":55,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionContainsAll":524,"org.apache.commons.collections4.map.PredicatedMapTest.testMapEquals":625,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":387,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":490,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":27,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionClear":514,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapToString":814,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":378,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAdd":448,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionIteratorRemove":273,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":432,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapRemove":764,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapSize":767,"org.apache.commons.collections4.map.HashedMapTest.testMapHashCode":49,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapContainsKey":781,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapToString":591,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testObjectHashCodeEqualsSelfHashCode":241,"org.apache.commons.collections4.set.PredicatedSortedSetTest.testCollectionToArray2":726,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionContainsAll":685,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":233,"org.apache.commons.collections4.map.LRUMapTest.testObjectHashCodeEqualsSelfHashCode":104,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionRemove":334,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionClear":666,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionContainsAll":696,"org.apache.commons.collections4.list.GrowthListTest.testListIteratorSet":342,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testBidiMapIteratorSet":789,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":218,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAdd":356,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":204,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionClear":408,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionRemoveAll":744,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContainsAll":245,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSimpleSerialization":120,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionIterator":739,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":90,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":95,"org.apache.commons.collections4.QueueUtilsTest.testEmptyQueue":336,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":190,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":48,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemoveAll":663,"org.apache.commons.collections4.map.LRUMapTest.testSimpleSerialization":105,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":154,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":396,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":376,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPutAll":594,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":639,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIteratorRemove":309,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAddAll":533,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":445,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":402,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":469,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIsEmpty":257,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEqualsNull":237,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAdd":472,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionToArray2":325,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionAdd":333,"org.apache.commons.collections4.list.TransformedListTest.testCollectionClear":388,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIterator":270,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":130,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":156,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":647,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testRemove":193,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSimpleSerialization":239,"org.apache.commons.collections4.map.SingletonMapTest.testMapGet":611,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapIsEmpty":766,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":0,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":145,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testTransformedBag_decorateTransform":11,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":511,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionRemove":262,"org.apache.commons.collections4.set.UnmodifiableSetTest.testSetEquals":672,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapContainsValue":598,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":93,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapEquals":783,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":112,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemove":317,"org.apache.commons.collections4.bag.HashBagTest.testCollectionToArray2":543,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsValue":794,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":148,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContainsAll":675,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionClear":498,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalEmptyCollectionExists":238,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapEquals":575,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":6,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":375,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":192,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":13,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":115,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionIteratorRemove":527,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapPut":620,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIsEmpty":465,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionRemoveAll":310,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionClear":747,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionAddAll":449,"org.apache.commons.collections4.map.Flat3MapTest.testSimpleSerialization":67,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":217,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testBidiMapIteratorSet":777,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":68,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":554,"org.apache.commons.collections4.list.GrowthListTest.testCollectionClear":353,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemove":689,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":62,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionAdd":517,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionToArray2":699,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionIterator":466,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionContains":248,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapRemove":788,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":123,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testPreviousKey":176,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIsEmpty":453,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionClear":289,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionIterator":294,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapGet":576,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapPutAll":763,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":491,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":3,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testCanonicalEmptyCollectionExists":225,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":158,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionContainsAll":452,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":183,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapContainsKey":793,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":129,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":367,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":63,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":426,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":581,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionAddAll":521,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionAdd":261,"org.apache.commons.collections4.queue.PredicatedQueueTest.testCollectionClear":330,"org.apache.commons.collections4.collection.IndexedCollectionTest.testCollectionIterator":263,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":150,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":431,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionAddAll":473,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionContainsAll":565,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIterator":713,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionClear":313,"org.apache.commons.collections4.map.TransformedMapTest.testMapClear":649,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionClear":734,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapContainsValue":758,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapClear":109,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":184,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":43,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":121,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testCollectionIsEmpty":268,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionClear":450,"org.apache.commons.collections4.bidimap.DualTreeBidiMapTest.testMapIsEmpty":778,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionContains":674,"org.apache.commons.collections4.set.PredicatedSetTest.testSetEquals":727,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAdd":189,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":26,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":8,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":368,"org.apache.commons.collections4.list.UnmodifiableListTest.testListGetByIndex":413,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapIsEmpty":801,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":24,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":645,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionIteratorRemove":743,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":14,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":171,"org.apache.commons.collections4.map.SingletonMapTest.testMapEquals":610,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionIsEmpty":423,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":180,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":370,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionIterator":687,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionContains":512,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":400,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":92,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionAdd":316,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionAdd":681,"org.apache.commons.collections4.queue.PredicatedQueueTest.testQueuePeek":320,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testCollectionToArray2":246,"org.apache.commons.collections4.map.PredicatedMapTest.testMapToString":624,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapPut":596,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testRemove":221,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":409,"org.apache.commons.collections4.collection.PredicatedCollectionTest.testCollectionAdd":292,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionContainsAll":728,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":366,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionToArray2":507,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionRemove":670,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIteratorRemove":553,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":655,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAddAll":709,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapToString":761,"org.apache.commons.collections4.list.GrowthListTest.testListRemoveByIndex":344,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRetainAll":530,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionToArray2":483,"org.apache.commons.collections4.set.ListOrderedSet2Test.testCollectionContains":745,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testObjectHashCodeEqualsContract":212,"org.apache.commons.collections4.list.GrowthListTest.testCollectionContains":351,"org.apache.commons.collections4.set.TransformedSetTest.testCollectionIterator":671,"org.apache.commons.collections4.set.TransformedSortedSetTest.testCollectionRemoveAll":690,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionIsEmpty":299,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapContainsValue":616,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testCanonicalFullCollectionExists":236,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":550,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionIteratorRemove":510,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionContainsAll":307,"org.apache.commons.collections4.list.GrowthListTest.testCollectionAddAll":354,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":110,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":412,"org.apache.commons.collections4.map.LRUMapTest.testObjectHashCodeEqualsContract":103,"org.apache.commons.collections4.map.TransformedMapTest.testMapIsEmpty":652,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":177,"org.apache.commons.collections4.map.PredicatedMapTest.testMapSize":622,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":178,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":179,"org.apache.commons.collections4.set.UnmodifiableSetTest.testCollectionIsEmpty":676,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIsEmpty":707,"org.apache.commons.collections4.bidimap.DualHashBidiMapTest.testMapClear":756,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":433,"org.apache.commons.collections4.list.UnmodifiableListTest.testCollectionToArray2":420,"org.apache.commons.collections4.map.MultiKeyMapTest.testObjectHashCodeEqualsSelfHashCode":40,"org.apache.commons.collections4.set.PredicatedSetTest.testCollectionAddAll":735,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionIterator":454,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":216,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionIsEmpty":566,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":111,"org.apache.commons.collections4.bag.TransformedBagTest.testTransformedBag_decorateTransform":10,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":395,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":58,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testLastKey":243,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":436,"org.apache.commons.collections4.map.TransformedSortedMapTest.testMapRemove":580,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionIteratorRemove":704,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testSerializeDeserializeThenCompare":242,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":382,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":174,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testUnsupportedAdd":297,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":173,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testCollectionContainsAll":295,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testObjectEqualsSelf":222,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testSerializeDeserializeThenCompare":201,"org.apache.commons.collections4.map.TransformedMapTest.testMapEquals":651,"org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMapTest.testMapEquals":812,"org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMapTest.testMapContainsValue":804,"org.apache.commons.collections4.map.PredicatedSortedMapTest.testMapIsEmpty":593,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":440,"org.apache.commons.collections4.map.FixedSizeSortedMapTest.testMapIsEmpty":613,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testMapRemove":776,"org.apache.commons.collections4.bidimap.DualLinkedHashBidiMapTest.testBidiMapIteratorSet":765,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":438,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":203,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionIterator":562,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":561,"org.apache.commons.collections4.bidimap.DualTreeBidiMap2Test.testMapEquals":795,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":71,"org.apache.commons.collections4.set.ListOrderedSetTest.testCollectionAdd":711,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":33,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":132,"org.apache.commons.collections4.queue.TransformedQueueTest.testCollectionIterator":318,"org.apache.commons.collections4.collection.TransformedCollectionTest.testCollectionContains":275,"org.apache.commons.collections4.bag.HashBagTest.testCollectionAdd":532,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":390,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionClear":462,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":429,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testCollectionIsEmpty":697,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testCollectionContains":545,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testCollectionToArray2":568,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":157,"org.apache.commons.collections4.set.ListOrderedSetTest.testSetEquals":701,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":100,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapGet":586}}]

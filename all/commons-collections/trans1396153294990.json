[{"failures":[0,1],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.UniquePredicate.org.apache.commons.collections4.functors.UniquePredicate.<T>uniquePredicate()","position":"org.apache.commons.collections4.PredicateUtils:191","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.OnePredicate<T>(org.apache.commons.collections4.functors.FunctorUtils.org.apache.commons.collections4.functors.FunctorUtils.copy(org.apache.commons.collections4.Predicate<? super T>[]))","position":"org.apache.commons.collections4.functors.OnePredicate:60","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.StaticBucketMap.EntrySet()","position":"org.apache.commons.collections4.map.StaticBucketMap:369","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().keySet()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:102","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionFactory.org.apache.commons.collections4.functors.ExceptionFactory.<T>exceptionFactory()","position":"org.apache.commons.collections4.FactoryUtils:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.InstantiateFactory.org.apache.commons.collections4.functors.InstantiateFactory.instantiateFactory(java.lang.Class<T>, null, null)","position":"org.apache.commons.collections4.FactoryUtils:121","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Set<java.lang.Object>.add(java.lang.Object)","position":"org.apache.commons.collections4.CollectionUtils:380","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.functors.ConstantTransformer.org.apache.commons.collections4.functors.ConstantTransformer.constantTransformer(V))","position":"org.apache.commons.collections4.map.DefaultedMap:87","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LoopingListIterator<E>._reset()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:238","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator<E>.addAll(this, java.util.List<java.util.Collection<E>>, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.CompositeCollection:280","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.DefaultedMap:181","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:152","type":"CtInvocationImpl"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntry:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) < (int)","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"CtReturnImpl"},"status":-1},{"failures":[18,19],"name":"returnValue","position":"org.apache.commons.collections4.iterators.FilterListIterator:239","type":"mutation","return":"return false","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"this.K = K","position":"org.apache.commons.collections4.keyvalue.AbstractKeyValue:58","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) == null) {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n} else {\n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E));\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:144","type":"CtIfImpl"},"status":-2},{"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235],"variableMapping":{"answer":"value"},"name":"add","transplant":{"sourceCode":"if (V != null) {\n    return V;\n} ","position":"org.apache.commons.collections4.MapUtils:367","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().put(K, V)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:106","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * Implementation of a map entry that is unmodifiable.\n */\nprivate class UnmodifiableEntry extends org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator<K, V> {\n    protected UnmodifiableEntry(final java.util.Map.Entry<K, V> entry) {\n        org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator<K, V>.super(java.util.Map.Entry<K, V>);\n    }\n\n    @java.lang.Override\n    public V setValue(final V obj) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n}","position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:171","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Enumeration<? extends E>.hasMoreElements()","position":"org.apache.commons.collections4.iterators.EnumerationIterator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"int ^= int >>> 14","position":"org.apache.commons.collections4.map.MultiKeyMap:675","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:118","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (!org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.(inRange(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.castKey(java.lang.Object)))) {\n    return null;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1730","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().indexOf(java.lang.Object)","position":"org.apache.commons.collections4.list.AbstractListDecorator:83","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.SortedMap<K, V>.size()) > 0) {\n    final java.util.Map<K, V> java.util.Map<K, V> = org.apache.commons.collections4.map.TransformedSortedMap<K, V>.transformMap(java.util.SortedMap<K, V>);\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.clear();\n    org.apache.commons.collections4.map.TransformedSortedMap<K, V>.decorated().putAll(java.util.Map<K, V>);\n} ","position":"org.apache.commons.collections4.map.TransformedSortedMap:95","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.doWriteObject(java.io.ObjectOutputStream)","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:229","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.TruePredicate.org.apache.commons.collections4.functors.TruePredicate.truePredicate()","position":"org.apache.commons.collections4.PredicateUtils:102","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.SetUniqueList:399","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:102","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.comparators.ComparableComparator.org.apache.commons.collections4.comparators.ComparableComparator.<java.lang.Comparable>comparableComparator()","position":"org.apache.commons.collections4.ComparatorUtils:54","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.InstanceofPredicate(java.lang.Class<?>)","position":"org.apache.commons.collections4.functors.InstanceofPredicate:49","type":"CtReturnImpl"},"status":-2},{"failures":[236],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:60","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null) {\n    final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.previousEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>);\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> != null ? org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey() : null;\n} else {\n    return null;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:814","type":"CtIfImpl"},"status":-1},{"failures":[237],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\")","position":"org.apache.commons.collections4.iterators.EntrySetMapIterator:110","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"add() not supported for empty Iterator\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:61","type":"CtThrowImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"status":-2},{"failures":[238,239,240,241,242,243],"binaryOperator":"(java.util.Collection<? extends E>.size()) == 0","name":"removeConditional","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"mutation","status":-1},{"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256],"variableMapping":{"this":"this"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:220","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:152","type":"CtInvocationImpl"},"status":-1},{"failures":[244,245,246,247,248,257,250,251,252,253,255,256],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.CloneNotSupportedException java.lang.CloneNotSupportedException","position":"org.apache.commons.collections4.map.SingletonMap:522","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:169","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.list.SetUniqueList.SetListListIterator<E>(org.apache.commons.collections4.list.AbstractSerializableListDecorator<E>.listIterator(int) , java.util.Set<E>)","position":"org.apache.commons.collections4.list.SetUniqueList:305","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"falseClosure":"iClosure","trueClosure":"iClosure"},"name":"replace","transplant":{"sourceCode":"if ((org.apache.commons.collections4.Closure<? super E> == null) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    throw new java.lang.IllegalArgumentException(\"Closures must not be null\");\n} ","position":"org.apache.commons.collections4.functors.IfClosure:76","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.Closure<? super T>.execute(T)","position":"org.apache.commons.collections4.functors.ClosureTransformer:72","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.Flat3Map.Values<V>(this)","position":"org.apache.commons.collections4.map.Flat3Map:1026","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().values()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:122","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * Internal iterator handle remove.\n */\nstatic class OrderedSetIterator<E> extends org.apache.commons.collections4.iterators.AbstractIteratorDecorator<E> implements org.apache.commons.collections4.OrderedIterator<E> {\n    /** \n     * Object we iterate on\n     */\nprivate final java.util.Collection<E> set;\n\n    /** \n     * Last object retrieved\n     */\nprivate E last;\n\n    private OrderedSetIterator(final java.util.ListIterator<E> iterator ,final java.util.Collection<E> set) {\n        org.apache.commons.collections4.iterators.AbstractIteratorDecorator<E>.super(java.util.ListIterator<E>);\n        this.java.util.Collection<E> = java.util.Collection<E>;\n    }\n\n    @java.lang.Override\n    public E next() {\n        E = org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.getIterator().next();\n        return E;\n    }\n\n    @java.lang.Override\n    public void remove() {\n        java.util.Collection<E>.remove(E);\n        org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.getIterator().remove();\n        E = null;\n    }\n\n    public boolean hasPrevious() {\n        return org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.((java.util.ListIterator<E>)(getIterator())).hasPrevious();\n    }\n\n    public E previous() {\n        E = org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<E, E>.((java.util.ListIterator<E>)(getIterator())).previous();\n        return E;\n    }\n}","position":"org.apache.commons.collections4.set.ListOrderedSet:367","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(((\"Attempt to make an ArrayIterator that \" + java.lang.String) + \"s before the start of the array. \"))","position":"org.apache.commons.collections4.iterators.ArrayIterator:120","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.map.StaticBucketMap.this.clear()","position":"org.apache.commons.collections4.map.StaticBucketMap:566","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:125","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (org.apache.commons.collections4.Closure<? super E> == null) {\n    throw new java.lang.IllegalArgumentException(\"Closure must not be null\");\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:58","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n} ","position":"org.apache.commons.collections4.functors.WhileClosure:85","type":"CtIfImpl"},"status":-2},{"failures":[258,259],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NullIsFalsePredicate.org.apache.commons.collections4.functors.NullIsFalsePredicate.nullIsFalsePredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:503","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NotPredicate.org.apache.commons.collections4.functors.NotPredicate.notPredicate(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:452","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.lang.Object[]","position":"org.apache.commons.collections4.map.UnmodifiableEntrySet:116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated().containsAll(java.util.Collection<?>)","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:136","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.queue.CircularFifoQueue<E>.isAtFullCapacity()) {\n    org.apache.commons.collections4.queue.CircularFifoQueue<E>.remove();\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:230","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated()","position":"org.apache.commons.collections4.list.AbstractListDecorator:79","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"switch (int) {\n    case 3 :\n        if ((K) == null) {\n            return true;\n        } \n    case 2 :\n        if ((K) == null) {\n            return true;\n        } \n    case 1 :\n        if ((K) == null) {\n            return true;\n        } \n}","position":"org.apache.commons.collections4.map.Flat3Map:202","type":"CtSwitchImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = java.util.ListIterator<E>.previous()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:77","type":"CtLocalVariableImpl"},"status":-2},{"failures":[260,18,261,262,263,264,265,19,266,267,268,269],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:266","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return java.util.Map<java.lang.String, java.lang.Object>","position":"org.apache.commons.collections4.MapUtils:891","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1713","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"this.E = E","position":"org.apache.commons.collections4.list.AbstractLinkedList:694","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterIterator:177","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((int) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int)) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1655","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.bag.PredicatedBag<E>(org.apache.commons.collections4.Bag<E> , org.apache.commons.collections4.Predicate<? super E>)","position":"org.apache.commons.collections4.bag.PredicatedBag:61","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object[] java.lang.Object[] = null","position":"org.apache.commons.collections4.set.CompositeSet:182","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList<E>.checkInterval(int, 0, org.apache.commons.collections4.list.TreeList<E>.size())","position":"org.apache.commons.collections4.list.TreeList:147","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-2},{"failures":[270,271,272,273,274,275,276,277],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return -1","position":"org.apache.commons.collections4.list.AbstractLinkedList:140","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:72","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>) == null) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1641","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.TransformerPredicate.org.apache.commons.collections4.functors.TransformerPredicate.transformerPredicate(org.apache.commons.collections4.Transformer<? super T, java.lang.Boolean>)","position":"org.apache.commons.collections4.PredicateUtils:470","type":"CtReturnImpl"},"status":-2},{"failures":[278,279,280,281,282,283,284,285,286,287,288,289,92,106,290,291,292,293,294,295,296,297,298,299,300,301,302,164,171,303,304,305,306,307,308,217,231,309],"variableMapping":{"entryKey":"key","entryValue":"key"},"name":"add","transplant":{"sourceCode":"if ((java.lang.Object == null) || (java.lang.Object == null)) {\n    return false;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:675","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().containsKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:82","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.comparator()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1707","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.PredicatedSortedMap<K, V>.getSortedMap().comparator()","position":"org.apache.commons.collections4.map.PredicatedSortedMap:105","type":"CtReturnImpl"},"status":-2},{"failures":[310,311,312,313,314,315,316,317],"binaryOperator":"(java.util.Iterator<? extends E>) == null","name":"negateConditional","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:85","type":"mutation","status":-1},{"failures":[318],"name":"inlineConstant","inlineConstant":"int int = 0","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"mutation","status":-1},{"failures":[319,320,321,322,323],"variableMapping":{"hasNext":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"if ((this.boolean) == false) {\n    throw new java.util.NoSuchElementException(\"No more elements in the iteration\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:221","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n    throw new java.util.NoSuchElementException();\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:99","type":"CtIfImpl"},"status":-2},{"failures":[319,324,325,320,321,322,326,327,323],"variableMapping":{"valid":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"if (!(this.boolean)) {\n    throw new java.util.ConcurrentModificationException(\"Cursor closed\");\n} ","position":"org.apache.commons.collections4.list.CursorableLinkedList:547","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The collection is not a bounded collection\")","position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:98","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot remove from list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:129","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(\"Start index must not be greater than the array length\")","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:91","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:83","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:555","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:169","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.collections4.trie.KeyAnalyzer.org.apache.commons.collections4.trie.KeyAnalyzer.isEqualBitKey(int)) {\n    return org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1083","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.TreeBag<E>.getMap().comparator()","position":"org.apache.commons.collections4.bag.TreeBag:104","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"lastUsedIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:113","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.NullIsExceptionPredicate<T>(org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:50","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:229","type":"CtReturnImpl"},"status":-2},{"failures":[328],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Policy must not be null.\")","position":"org.apache.commons.collections4.map.PassiveExpiringMap:242","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new org.apache.commons.collections4.FunctorException(java.lang.Throwable)","position":"org.apache.commons.collections4.functors.CatchAndRethrowClosure:64","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (java.util.Map.Entry<K, V> == null) {\n    return null;\n} ","position":"org.apache.commons.collections4.map.AbstractReferenceMap:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.setValue(V)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:68","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:212","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    throw new java.lang.IllegalStateException(\"remove() cannot be called\");\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:119","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.MapIterator<org.apache.commons.collections4.keyvalue.MultiKey<? extends K>, V>.remove()","position":"org.apache.commons.collections4.map.MultiKeyMap:773","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:261","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Factory<? extends O> == null) {\n    throw new java.lang.IllegalArgumentException(\"Factory must not be null\");\n} ","position":"org.apache.commons.collections4.functors.FactoryTransformer:48","type":"CtIfImpl"},"status":-2},{"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256],"variableMapping":{"removed":"hasNext","nextCalled":"hasNext"},"name":"add","transplant":{"sourceCode":"if ((!(this.boolean)) || (this.boolean)) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.iterators.SingletonListIterator:133","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while ((java.util.Iterator<? extends E>.hasNext()) && ((boolean) == false)) {\n    E E = java.util.Iterator<? extends E>.next();\n    if ((org.apache.commons.collections4.Transformer<? super E, ? extends E>) != null) {\n        E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E);\n    } \n    org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNext(E);\n}","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:187","type":"CtWhileImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Attempting to compare unknown object \" + java.lang.Object)","name":"math","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:239","type":"mutation","status":-2},{"failures":[],"variableMapping":{"iterator":"currentIterator"},"name":"add","transplant":{"sourceCode":"this.java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.FilterIterator:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:182","type":"CtInvocationImpl"},"status":0},{"failures":[329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Collection must not be null\")","position":"org.apache.commons.collections4.collection.AbstractCollectionDecorator:67","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return 1","position":"org.apache.commons.collections4.map.SingletonMap:491","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.PredicatedBag<E>.decorated().getCount(java.lang.Object)","position":"org.apache.commons.collections4.bag.PredicatedBag:106","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.removeInternalEntry(org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:483","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.TransformedPredicate.org.apache.commons.collections4.functors.TransformedPredicate.<T>transformedPredicate(org.apache.commons.collections4.Transformer<? super T, ? extends T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:537","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.io.ObjectOutputStream.writeObject(java.util.Map<K, V>)","position":"org.apache.commons.collections4.map.DefaultedMap:181","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:162","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"/** \n * Implements an AVLNode which keeps the offset updated.\n * <p>\n * This node contains the real work.\n * TreeList is just there to implement {@link java.util.List}.\n * The nodes don't know the index of the object they are holding.  They\n * do know however their position relative to their parent node.\n * This allows to calculate the index of a node while traversing the tree.\n * <p>\n * The Faedelung calculation stores a flag for both the left and right child\n * to indicate if they are a child (false) or a link as in linked list (true).\n */\nstatic class AVLNode<E> {\n    /** \n     * The left child node or the predecessor if {@link #leftIsPrevious}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> left;\n\n    /** \n     * Flag indicating that left reference is not a subtree but the predecessor.\n     */\nprivate boolean leftIsPrevious;\n\n    /** \n     * The right child node or the successor if {@link #rightIsNext}.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> right;\n\n    /** \n     * Flag indicating that right reference is not a subtree but the successor.\n     */\nprivate boolean rightIsNext;\n\n    /** \n     * How many levels of left/right are below this one.\n     */\nprivate int height;\n\n    /** \n     * The relative position, root holds absolute position.\n     */\nprivate int relativePosition;\n\n    /** \n     * The stored element.\n     */\nprivate E value;\n\n    /** \n     * Constructs a new node with a relative position.\n     * \n     * @param relativePosition  the relative position of the node\n     * @param obj  the value for the node\n     * @param rightFollower the node with the value following this one\n     * @param leftFollower the node with the value leading this one\n     */\nprivate AVLNode(final int relativePosition ,final E obj ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> rightFollower ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> leftFollower) {\n        this.int = int;\n        E = E;\n        boolean = true;\n        boolean = true;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * The collection must be nonempty.\n     * \n     * @param coll  a nonempty collection\n     */\nprivate AVLNode(final java.util.Collection<? extends E> coll) {\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.this(java.util.Collection<? extends E>.iterator(), 0, ((java.util.Collection<? extends E>.size()) - 1), 0, null, null);\n    }\n\n    /** \n     * Constructs a new AVL tree from a collection.\n     * <p>\n     * This is a recursive helper for {@link #AVLNode(Collection)}. A call\n     * to this method will construct the subtree for elements {@code start}\n     * through {@code end} of the collection, assuming the iterator\n     * {@code e} already points at element {@code start}.\n     * \n     * @param iterator  an iterator over the collection, which should already point\n     * to the element at index {@code start} within the collection\n     * @param start  the index of the first element in the collection that\n     * should be in this subtree\n     * @param end  the index of the last element in the collection that\n     * should be in this subtree\n     * @param absolutePositionOfParent  absolute position of this node's\n     * parent, or 0 if this node is the root\n     * @param prev  the {@code AVLNode} corresponding to element (start - 1)\n     * of the collection, or null if start is 0\n     * @param next  the {@code AVLNode} corresponding to element (end + 1)\n     * of the collection, or null if end is the last element of the collection\n     */\nprivate AVLNode(final java.util.Iterator<? extends E> iterator ,final int start ,final int end ,final int absolutePositionOfParent ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> prev ,final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        final int int = int + ((int - int) / 2);\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , int , (int - 1) , int , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        E = java.util.Iterator<? extends E>.next();\n        int = int - int;\n        if (int < int) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = new org.apache.commons.collections4.list.TreeList.AVLNode<E>(java.util.Iterator<? extends E> , (int + 1) , int , int , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        } else {\n            boolean = true;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Gets the value.\n     * \n     * @return the value of this node\n     */\nE getValue() {\n        return E;\n    }\n\n    /** \n     * Sets the value.\n     * \n     * @param obj  the value to store\n     */\nvoid setValue(final E obj) {\n        this.E = E;\n    }\n\n    /** \n     * Locate the element with the given index relative to the\n     * offset of the parent of this node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> get(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return this;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = int < 0 ? org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree() : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree();\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return null;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.get(int);\n    }\n\n    /** \n     * Locate the index that contains the specified object.\n     */\nint indexOf(final java.lang.Object object, final int index) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n            if (int != (-1)) {\n                return int;\n            } \n        } \n        if ((E) == null ? (E) == java.lang.Object : E.equals(java.lang.Object)) {\n            return int;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.indexOf(java.lang.Object, (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        return -1;\n    }\n\n    /** \n     * Stores the node and its children into the array specified.\n     * \n     * @param array the array to be filled\n     * @param index the index of this node\n     */\nvoid toArray(final java.lang.Object[] array, final int index) {\n        java.lang.Object[][int] = E;\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.toArray(java.lang.Object[], (int + (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)));\n        } \n    }\n\n    /** \n     * Gets the next node in the list after this one.\n     * \n     * @return the next node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> next() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Gets the node in the list before this one.\n     * \n     * @return the previous node\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> previous() {\n        if ((boolean) || ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null)) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Inserts a node at the position index.\n     * \n     * @param index is the index of the position relative to the position of\n     * the parent node.\n     * @param obj is the object to be stored in the position.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> insert(final int index, final E obj) {\n        final int int = int - (int);\n        if (int <= 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnLeft(int, E);\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.insertOnRight(int, E);\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(-1 , E , this , org.apache.commons.collections4.list.TreeList.AVLNode<E>), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) >= 0) {\n            (int)++;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(new org.apache.commons.collections4.list.TreeList.AVLNode<E>(+1 , E , org.apache.commons.collections4.list.TreeList.AVLNode<E> , this), null);\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E), null);\n        }\n        if ((int) < 0) {\n            (int)--;\n        } \n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the left node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getLeftSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the right node, returning null if its a faedelung.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> getRightSubTree() {\n        return boolean ? null : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Gets the rightmost child of this node.\n     * \n     * @return the rightmost child (greatest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> max() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n    }\n\n    /** \n     * Gets the leftmost child of this node.\n     * \n     * @return the leftmost child (smallest index)\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> min() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? this : org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n    }\n\n    /** \n     * Removes the node at a given position.\n     * \n     * @param index is the index of the element to be removed relative to the position of\n     * the parent node of the current node.\n     */\norg.apache.commons.collections4.list.TreeList.AVLNode<E> remove(final int index) {\n        final int int = int - (int);\n        if (int == 0) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        if (int > 0) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.remove(int), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMax() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) < 0) {\n            (int)++;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> removeMin() {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeSelf();\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin(), org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        if ((int) > 0) {\n            (int)--;\n        } \n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n    }\n\n    /** \n     * Removes this node from the tree.\n     * \n     * @return the node that replaces this one in the parent\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> removeSelf() {\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) && (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null)) {\n            return null;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null) {\n            if ((int) > 0) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) + ((int) > 0 ? 0 : 1);\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null) {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += (int) - ((int) < 0 ? 0 : 1);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } \n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(heightRightMinusLeft()) > 0) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            if ((int) < 0) {\n                (int)++;\n            } \n        } else {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n            E = org.apache.commons.collections4.list.TreeList.AVLNode<E>.E;\n            if (boolean) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            } \n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>) == null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                boolean = true;\n            } \n            if ((int) > 0) {\n                (int)--;\n            } \n        }\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n        return this;\n    }\n\n    /** \n     * Balances according to the AVL algorithm.\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> balance() {\n        switch (org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) {\n            case 1 :\n            case 0 :\n            case -1 :\n                return this;\n            case -2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) > 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight();\n            case 2 :\n                if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.heightRightMinusLeft()) < 0) {\n                    org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateRight(), null);\n                } \n                return org.apache.commons.collections4.list.TreeList.AVLNode<E>.rotateLeft();\n            default :\n                throw new java.lang.RuntimeException(\"tree inconsistent!\");\n        }\n    }\n\n    /** \n     * Gets the relative position.\n     */\nprivate int getOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Sets the relative position.\n     */\nprivate int setOffset(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final int newOffest) {\n        if (org.apache.commons.collections4.list.TreeList.AVLNode<E> == null) {\n            return 0;\n        } \n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int;\n        return int;\n    }\n\n    /** \n     * Sets the height by calculation.\n     */\nprivate void recalcHeight() {\n        int = java.lang.Math.(java.lang.Math.max((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getLeftSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().int), (org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().int))) + 1;\n    }\n\n    /** \n     * Returns the height of the node or -1 if the node is null.\n     */\nprivate int getHeight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node) {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E> == null ? -1 : org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n    }\n\n    /** \n     * Returns the height difference right - left\n     */\nprivate int heightRightMinusLeft() {\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree())) - org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree()));\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateLeft() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getRightSubTree().getLeftSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    private org.apache.commons.collections4.list.TreeList.AVLNode<E> rotateRight() {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.getLeftSubTree().getRightSubTree();\n        final int int = (int) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        final int int = -(org.apache.commons.collections4.list.TreeList.AVLNode<E>.int);\n        final int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>)) + org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>));\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(this, null);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(this, int);\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.setOffset(org.apache.commons.collections4.list.TreeList.AVLNode<E>, int);\n        return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n    }\n\n    /** \n     * Sets the left field to the node, or the previous node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param previous  the previous node in the linked list\n     */\nprivate void setLeft(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> previous) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Sets the right field to the node, or the next node if that is null\n     * \n     * @param node  the new left subtree node\n     * @param next  the next node in the linked list\n     */\nprivate void setRight(final org.apache.commons.collections4.list.TreeList.AVLNode<E> node, final org.apache.commons.collections4.list.TreeList.AVLNode<E> next) {\n        boolean = org.apache.commons.collections4.list.TreeList.AVLNode<E> == null;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E> = boolean ? org.apache.commons.collections4.list.TreeList.AVLNode<E> : org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        org.apache.commons.collections4.list.TreeList.AVLNode<E>.recalcHeight();\n    }\n\n    /** \n     * Appends the elements of another tree list to this tree list by efficiently\n     * merging the two AVL trees. This operation is destructive to both trees and\n     * runs in O(log(m + n)) time.\n     * \n     * @param otherTree\n     * the root of the AVL tree to merge with this one\n     * @param currentSize\n     * the number of elements in this AVL tree\n     * @return the root of the new, merged AVL tree\n     */\nprivate org.apache.commons.collections4.list.TreeList.AVLNode<E> addAll(org.apache.commons.collections4.list.TreeList.AVLNode<E> otherTree, final int currentSize) {\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.max();\n        final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.min();\n        if ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > (int)) {\n            final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMax();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            int int = (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) + int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int -= int - 1;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - int) + 1;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = (int - 1) - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int += int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        } else {\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.removeMin();\n            final org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>> = new org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>();\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = this;\n            int int = org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n            int int = 0;\n            while ((org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) && ((org.apache.commons.collections4.list.TreeList.AVLNode<E>.int) > org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getHeight(org.apache.commons.collections4.list.TreeList.AVLNode<E>)))) {\n                int = int;\n                org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.push(org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n                if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                    int += org.apache.commons.collections4.list.TreeList.AVLNode<E>.int;\n                } \n            }\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.setLeft(org.apache.commons.collections4.list.TreeList.AVLNode<E>, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.min().setLeft(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                (org.apache.commons.collections4.list.TreeList.AVLNode<E>.int)++;\n            } \n            if (org.apache.commons.collections4.list.TreeList.AVLNode<E> != null) {\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.max().setRight(null, org.apache.commons.collections4.list.TreeList.AVLNode<E>);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            } \n            org.apache.commons.collections4.list.TreeList.AVLNode<E>.int = int - int;\n            org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n            while (!(org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.isEmpty())) {\n                final org.apache.commons.collections4.list.TreeList.AVLNode<E> org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.ArrayStack<org.apache.commons.collections4.list.TreeList.AVLNode<E>>.pop();\n                org.apache.commons.collections4.list.TreeList.AVLNode<E>.setRight(org.apache.commons.collections4.list.TreeList.AVLNode<E>, null);\n                org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.balance();\n            }\n            return org.apache.commons.collections4.list.TreeList.AVLNode<E>;\n        }\n    }\n\n    /** \n     * Used for debugging.\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return new java.lang.StringBuilder().append(\"AVLNode(\").append(int).append(',').append(((org.apache.commons.collections4.list.TreeList.AVLNode<E>) != null)).append(',').append(E).append(',').append((org.apache.commons.collections4.list.TreeList.AVLNode<E>.(getRightSubTree()) != null)).append(\", faedelung \").append(boolean).append(\" )\").toString();\n    }\n}","position":"org.apache.commons.collections4.list.TreeList:305","type":"CtClassImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getKey()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:56","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-2},{"failures":[353,354,320,322,323],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.FilterIterator:122","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"predicate1":"predicate1","predicate2":"predicate1","this":"this"},"name":"add","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.<T>nonePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:405","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.collection.IndexedCollection<K, C>.addToIndex(C)","position":"org.apache.commons.collections4.collection.IndexedCollection:120","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:165","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"public enum Criterion {\nEQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;}","position":"org.apache.commons.collections4.functors.ComparatorPredicate:83","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterIterator<E>.(setNextObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:98","type":"CtIfImpl"},"status":-2},{"failures":[355,356,357,358,359,270,271,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,272,273,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,274,275,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,276,277,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.ListIterator<E>.hasPrevious()) == false) {\n    E E = null;\n    while (this.java.util.ListIterator<E>.hasNext()) {\n        E = this.java.util.ListIterator<E>.next();\n    }\n    this.java.util.ListIterator<E>.previous();\n    return E;\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:144","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.next()","position":"org.apache.commons.collections4.iterators.AbstractListIteratorDecorator:67","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.MapTransformer<I, O>(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.functors.MapTransformer:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.MapTransformer.org.apache.commons.collections4.functors.MapTransformer.mapTransformer(java.util.Map<? super I, ? extends O>)","position":"org.apache.commons.collections4.TransformerUtils:380","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * A submap used for prefix views over the {@link Trie}.\n */\nprivate class PrefixRangeMap extends org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap {\n    private final K prefix;\n\n    private final int offsetInBits;\n\n    private final int lengthInBits;\n\n    private K fromKey = null;\n\n    private K toKey = null;\n\n    private transient int expectedModCount = 0;\n\n    private int size = -1;\n\n    /** \n     * Creates a {@link PrefixRangeMap}.\n     */\nprivate PrefixRangeMap(final K prefix ,final int offsetInBits ,final int lengthInBits) {\n        this.K = K;\n        this.int = int;\n        this.int = int;\n    }\n\n    /** \n     * This method does two things. It determines the FROM\n     * and TO range of the {@link PrefixRangeMap} and the number\n     * of elements in the range. This method must be called every\n     * time the {@link Trie} has changed.\n     */\nprivate int fixup() {\n        if (((int) == (-1)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int) != (int))) {\n            final java.util.Iterator<java.util.Map.Entry<K, V>> java.util.Iterator<java.util.Map.Entry<K, V>> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.entrySet().iterator();\n            int = 0;\n            java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n            if (java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()) {\n                java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next();\n                int = 1;\n            } \n            K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            if ((K) != null) {\n                final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.previousEntry(((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)(java.util.Map.Entry<K, V>)));\n                K = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == null ? null : org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey();\n            } \n            K = K;\n            while (java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()) {\n                ++(int);\n                java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next();\n            }\n            K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            if ((K) != null) {\n                java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)(java.util.Map.Entry<K, V>)));\n                K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            } \n            int = org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int;\n        } \n        return int;\n    }\n\n    public K firstKey() {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.fixup();\n        java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n        if ((K) == null) {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry();\n        } else {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.higherEntry(K);\n        }\n        final K K = java.util.Map.Entry<K, V> != null ? java.util.Map.Entry<K, V>.getKey() : null;\n        if ((java.util.Map.Entry<K, V> == null) || (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K)))) {\n            throw new java.util.NoSuchElementException();\n        } \n        return K;\n    }\n\n    public K lastKey() {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.fixup();\n        java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n        if ((K) == null) {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lastEntry();\n        } else {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lowerEntry(K);\n        }\n        final K K = java.util.Map.Entry<K, V> != null ? java.util.Map.Entry<K, V>.getKey() : null;\n        if ((java.util.Map.Entry<K, V> == null) || (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K)))) {\n            throw new java.util.NoSuchElementException();\n        } \n        return K;\n    }\n\n    /** \n     * Returns true if this {@link PrefixRangeMap}'s key is a prefix of the provided key.\n     */\n@java.lang.Override\n    protected boolean inRange(final K key) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    /** \n     * Same as {@link #inRange(Object)}.\n     */\n@java.lang.Override\n    protected boolean inRange2(final K key) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.inRange(K);\n    }\n\n    /** \n     * Returns true if the provided Key is in the FROM range of the {@link PrefixRangeMap}.\n     */\n@java.lang.Override\n    protected boolean inFromRange(final K key, final boolean forceInclusive) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    /** \n     * Returns true if the provided Key is in the TO range of the {@link PrefixRangeMap}.\n     */\n@java.lang.Override\n    protected boolean inToRange(final K key, final boolean forceInclusive) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    @java.lang.Override\n    protected java.util.Set<java.util.Map.Entry<K, V>> createEntrySet() {\n        return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet(this);\n    }\n\n    @java.lang.Override\n    public K getFromKey() {\n        return K;\n    }\n\n    @java.lang.Override\n    public K getToKey() {\n        return K;\n    }\n\n    @java.lang.Override\n    public boolean isFromInclusive() {\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean isToInclusive() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected java.util.SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive, final K toKey, final boolean toInclusive) {\n        return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap(K , boolean , K , boolean);\n    }\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2082","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionFactory.org.apache.commons.collections4.functors.ExceptionFactory.<T>exceptionFactory()","position":"org.apache.commons.collections4.FactoryUtils:56","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString()","position":"org.apache.commons.collections4.collection.SynchronizedCollection:212","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) != null) {\n    return (((\"MapIterator[\" + org.apache.commons.collections4.bidimap.DualTreeBidiMap.BidiOrderedMapIterator<K, V>.(getKey())) + \"=\") + org.apache.commons.collections4.bidimap.DualTreeBidiMap.BidiOrderedMapIterator<K, V>.(getValue())) + \"]\";\n} ","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:375","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())))","position":"org.apache.commons.collections4.CollectionUtils:1399","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map.Entry<K, V>) == null) {\n    throw new java.lang.IllegalStateException();\n} ","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:108","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.UniquePredicate<T>()","position":"org.apache.commons.collections4.functors.UniquePredicate:48","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NotNullPredicate.org.apache.commons.collections4.functors.NotNullPredicate.<T>notNullPredicate()","position":"org.apache.commons.collections4.PredicateUtils:135","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (!org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.(isBitSet(K, org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.int, int))) {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n} else {\n    org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>;\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:439","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = null","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:249","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"sub":"map"},"name":"add","transplant":{"sourceCode":"return new org.apache.commons.collections4.bidimap.DualTreeBidiMap.ViewMap<K, V>(this , java.util.SortedMap<K, V>)","position":"org.apache.commons.collections4.bidimap.DualTreeBidiMap:204","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:156","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Short java.lang.Short = org.apache.commons.collections4.MapUtils.org.apache.commons.collections4.MapUtils.getShort(java.util.Map<? super K, ?>, K)","position":"org.apache.commons.collections4.MapUtils:763","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.getKey()","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:60","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((int) < (int)) && (int < (int))) {\n    java.lang.System.java.lang.System.arraycopy(E[], int, E[], int, ((int) - int));\n} else {\n    while (int != (int)) {\n        if (int >= (int)) {\n            E[][(int - 1)] = E[][0];\n            int = 0;\n        } else {\n            E[][org.apache.commons.collections4.queue.CircularFifoQueue<E>.decrement(int)] = E[][int];\n            int = org.apache.commons.collections4.queue.CircularFifoQueue<E>.increment(int);\n        }\n    }\n}","position":"org.apache.commons.collections4.queue.CircularFifoQueue:387","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.Iterator<? extends E> != (java.util.Iterator<? extends E>)) {\n    if ((java.util.Iterator<? extends E>) != null) {\n        org.apache.commons.collections4.ArrayStack<java.util.Iterator<? extends E>>.push(java.util.Iterator<? extends E>);\n    } \n    java.util.Iterator<? extends E> = java.util.Iterator<? extends E>;\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:179","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>(org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V> , int , org.apache.commons.collections4.map.AbstractHashedMap<K, V>.convertKey(K) , V)","position":"org.apache.commons.collections4.map.AbstractLinkedMap:284","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:115","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Queue<E>.clear()","position":"org.apache.commons.collections4.queue.TransformedQueue:80","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int <= 0) || (org.apache.commons.collections4.Closure<? super E> == null)) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.ForClosure:52","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"try {\n    return java.lang.reflect.Array.java.lang.reflect.Array.get(java.lang.Object, int);\n} catch (final java.lang.IllegalArgumentException java.lang.IllegalArgumentException) {\n    throw new java.lang.IllegalArgumentException((\"Unsupported object type: \" + (java.lang.Object.getClass().getName())));\n}","position":"org.apache.commons.collections4.CollectionUtils:1288","type":"CtTryImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().peek()","position":"org.apache.commons.collections4.queue.PredicatedQueue:107","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-2},{"failures":[451],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\")","position":"org.apache.commons.collections4.iterators.LoopingIterator:85","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Closure must not be null\")","position":"org.apache.commons.collections4.functors.ClosureTransformer:49","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.set.ListOrderedSet:385","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    org.apache.commons.collections4.Closure<? super E>.execute(E);\n}","position":"org.apache.commons.collections4.functors.ForClosure:80","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"while (java.util.Iterator<?>.hasNext()) {\n    final java.lang.Object java.lang.Object = java.util.Iterator<?>.next();\n    if (org.apache.commons.collections4.bag.AbstractMapBag<E>.(getCount(java.lang.Object)) < (org.apache.commons.collections4.Bag<?>.getCount(java.lang.Object))) {\n        return false;\n    } \n}","position":"org.apache.commons.collections4.bag.AbstractMapBag:151","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (boolean) {\n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject();\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setNextObject())) {\n        return false;\n    } \n    org.apache.commons.collections4.iterators.FilterListIterator<E>.clearNextObject();\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:220","type":"CtIfImpl"},"status":-2},{"failures":[],"binaryOperator":"(((((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int)) + \" maxSize=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failureDictionary":{"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyContainsKey":22,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetClearChangesMap":48,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":265,"org.apache.commons.collections4.map.DefaultedMapTest.testMapSize":95,"org.apache.commons.collections4.list.PredicatedListTest.testListIndexOf":366,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPutAll":299,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRetainAll":191,"org.apache.commons.collections4.list.FixedSizeListTest.testListIteratorSet":410,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsKey":283,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":386,"org.apache.commons.collections4.map.LazyMapTest.testKeySetClearChangesMap":210,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIteratorByIndex":274,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapHashCode":168,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":6,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFullIterator":317,"org.apache.commons.collections4.map.LazySortedMapTest.testLastKey":112,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapIsEmpty":161,"org.apache.commons.collections4.map.LazyMapTest.testValuesIteratorRemoveChangesMap":203,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapEquals":166,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":273,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveChangesMap":56,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":354,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastEntrySet":72,"org.apache.commons.collections4.map.LazySortedMapTest.testMakeMap":133,"org.apache.commons.collections4.collection.UnmodifiableCollectionTest.testDecorateFactory":350,"org.apache.commons.collections4.PredicateUtilsTest.testNotPredicate":259,"org.apache.commons.collections4.list.TransformedListTest.testListListIterator":277,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemoveAll":442,"org.apache.commons.collections4.map.MultiKeyMapTest.testMakeMap":31,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":260,"org.apache.commons.collections4.list.PredicatedListTest.testListListIterator":271,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetClearChangesMap":49,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetIteratorRemoveChangesMap":63,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetIteratorRemoveChangesMap":88,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testIsEmpty":154,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":40,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetIteratorRemoveChangesMap":144,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapEquals":285,"org.apache.commons.collections4.map.LazyMapTest.testValuesRetainAll":205,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionToArray2":371,"org.apache.commons.collections4.map.MultiKeyMapTest.testNullHandling":20,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapClear":163,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContains":443,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetIteratorRemoveChangesMap":105,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRetainAll":119,"org.apache.commons.collections4.map.LazyMapTest.testMapPutAll":229,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":261,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAdd":447,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveChangesMap":211,"org.apache.commons.collections4.map.DefaultedMapTest.testMapRemove":107,"org.apache.commons.collections4.map.LazyMapTest.testFailFastKeySet":198,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetClearChangesMap":214,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveChangesMap":86,"org.apache.commons.collections4.map.LazySortedMapTest.testMapToString":138,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":389,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsKey":294,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":251,"org.apache.commons.collections4.list.TransformedListTest.testCollectionToArray2":440,"org.apache.commons.collections4.map.DefaultedMapTest.testFullMapCompatibility":98,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveAll":186,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsValue":165,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorRemove":252,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRemove":448,"org.apache.commons.collections4.map.PredicatedMapTest.testMapPut":279,"org.apache.commons.collections4.map.LazySortedMapTest.testMapHashCode":120,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":326,"org.apache.commons.collections4.list.TransformedListTest.testListHashCode":425,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullValue":215,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":353,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":35,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet3":69,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet4":70,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet2":68,"org.apache.commons.collections4.map.DefaultedMapTest.testMapEquals":100,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testRemove":256,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":399,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove3":184,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove2":183,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":2,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemove1":182,"org.apache.commons.collections4.list.TransformedListTest.testListRemoveByIndex":434,"org.apache.commons.collections4.list.FixedSizeListTest.testListGetByIndex":407,"org.apache.commons.collections4.map.LazyMapTest.testFullMapCompatibility":223,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapToString":286,"org.apache.commons.collections4.list.PredicatedListTest.testListHashCode":356,"org.apache.commons.collections4.BagUtilsTest.testTransformedSortedBag":347,"org.apache.commons.collections4.list.UnmodifiableListTest.testDecorateFactory":351,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testFullMapCompatibility":170,"org.apache.commons.collections4.CollectionUtilsTest.filterInverse":258,"org.apache.commons.collections4.map.MultiKeyMapTest.testFullMapCompatibility":41,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveChangesMap":204,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains1":179,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains2":180,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetContains3":181,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":325,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testDecorateFactory":339,"org.apache.commons.collections4.map.LazySortedMapTest.testMapEquals":139,"org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection":329,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableBag":343,"org.apache.commons.collections4.BagUtilsTest.testUnmodifiableSortedBag":345,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullKey":43,"org.apache.commons.collections4.map.LazySortedMapTest.testFirstKey":113,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":383,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":262,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsValue":308,"org.apache.commons.collections4.list.PredicatedListTest.testListLastIndexOf":367,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRetainAll":226,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsKey":92,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveAll":194,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":32,"org.apache.commons.collections4.map.LazyMapTest.testMapEquals":225,"org.apache.commons.collections4.bidimap.UnmodifiableBidiMapTest.testMapContainsKey":309,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRetainAll":66,"org.apache.commons.collections4.map.LazyMapTest.testMapPutNullKey":221,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":33,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Simple":248,"org.apache.commons.collections4.list.PredicatedListTest.testListAddByIndex":358,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRemoveAll":103,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":46,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemove":379,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":36,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":12,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains1":75,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains2":76,"org.apache.commons.collections4.list.FixedSizeListTest.testListHashCode":408,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetContains3":77,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullKey":172,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapRemove":289,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRemoveAll":57,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRetainAll":140,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":320,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveChangesMap":130,"org.apache.commons.collections4.map.LazySortedMapTest.testSortOrder":111,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapEquals":306,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemoveNext":438,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove3":55,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove2":54,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemove1":53,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAddAll":376,"org.apache.commons.collections4.list.FixedSizeListTest.testFullListCompatibility":414,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorByIndex":276,"org.apache.commons.collections4.list.PredicatedListTest.testFullListCompatibility":368,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapIsEmpty":292,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains1":50,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains2":51,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapContainsValue":284,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetContains3":52,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPutAll":288,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testExpiration":156,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRetainAll":101,"org.apache.commons.collections4.map.LazyMapTest.testFailFastValues":199,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove3":84,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove2":83,"org.apache.commons.collections4.list.TransformedListTest.testFullListCompatibility":437,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemove1":82,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastKeySet":29,"org.apache.commons.collections4.list.TransformedListTest.testListGetByIndex":424,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":19,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testDecorateFactory":341,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedAdd":417,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutAll":174,"org.apache.commons.collections4.map.PredicatedMapTest.testMapContainsKey":278,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveChangesMap":60,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":393,"org.apache.commons.collections4.map.DefaultedMapTest.testMakeMap":94,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":38,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":395,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testDecoratedMap":153,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapIsEmpty":307,"org.apache.commons.collections4.map.DefaultedMapTest.testMapToString":99,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemovePrevious":364,"org.apache.commons.collections4.map.DefaultedMapTest.testMapHashCode":81,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveChangesMap":216,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testSize":159,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsValue":233,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testGet":150,"org.apache.commons.collections4.map.UnmodifiableMapTest.testMapContainsKey":280,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRetainAll":377,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIsEmpty":444,"org.apache.commons.collections4.list.TransformedListTest.testListSetByIndex":432,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemove":23,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesIteratorRemoveChangesMap":78,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveAll":93,"org.apache.commons.collections4.list.PredicatedListTest.testListSetByIndex":363,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRemoveChangesMap":91,"org.apache.commons.collections4.list.TransformedListTest.testTransformedList":423,"org.apache.commons.collections4.CollectionUtilsTest.testUnmodifiableCollection":331,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRetainAll":234,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPut":42,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains3":202,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains2":201,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAdd":403,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySet":155,"org.apache.commons.collections4.list.FixedSizeListTest.testListIndexOf":412,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetContains1":200,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":311,"org.apache.commons.collections4.trie.PatriciaTrie2Test.testPreviousKey":236,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping1":238,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":15,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping2":239,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping3":240,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesIteratorRemoveChangesMap":117,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":388,"org.apache.commons.collections4.set.ListOrderedSetTest.testDecorator":333,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorNextRemovePrevious":433,"org.apache.commons.collections4.map.LazyMapTest.testMapToString":224,"org.apache.commons.collections4.map.LazyMapTest.testMapIsEmpty":227,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorNextRemoveNext":369,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapToString":305,"org.apache.commons.collections4.BagUtilsTest.testTransformedBag":342,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":14,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_Empty":249,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":5,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetClearChangesMap":177,"org.apache.commons.collections4.queue.UnmodifiableQueueTest.testDecorateFactory":348,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRemoveAll":61,"org.apache.commons.collections4.map.LazyMapTest.testKeySetIteratorRemoveChangesMap":230,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemovePrevious":426,"org.apache.commons.collections4.map.DefaultedMapTest.testMapIsEmpty":102,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorByIndex":270,"org.apache.commons.collections4.SetUtilsTest.testpredicatedSet":338,"org.apache.commons.collections4.QueueUtilsTest.testPredicatedQueue":336,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":8,"org.apache.commons.collections4.ClosureUtilsTest.testForClosure":318,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":34,"org.apache.commons.collections4.map.DefaultedMapTest.testMapGet":71,"org.apache.commons.collections4.map.LazySortedMapTest.testFullMapCompatibility":137,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testEmptyIterator":254,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":401,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":385,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorAdd":429,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapContainsKey":290,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPut":145,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionAdd":378,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":394,"org.apache.commons.collections4.map.LazyMapTest.testMapSize":220,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastValues":74,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove1":121,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove2":122,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemove3":123,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetIteratorRemoveChangesMap":192,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":310,"org.apache.commons.collections4.map.TransformedMapTest.testMapContainsKey":301,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionRemoveAll":373,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorAdd":360,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesIteratorRemoveChangesMap":59,"org.apache.commons.collections4.map.LazyMapTest.testMapRemove":232,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesClearChangesMap":176,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutAll":104,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapToString":297,"org.apache.commons.collections4.set.UnmodifiableSetTest.testDecorateFactory":334,"org.apache.commons.collections4.list.TransformedListTest.testListAddByIndex":427,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRetainAll":148,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":264,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":322,"org.apache.commons.collections4.list.TransformedListTest.testListIteratorSet":430,"org.apache.commons.collections4.list.TransformedListTest.testListIndexOf":435,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveAll":190,"org.apache.commons.collections4.BagUtilsTest.testPredicatedBag":344,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemoveAll":212,"org.apache.commons.collections4.list.PredicatedListTest.testSerializeDeserializeThenCompare":380,"org.apache.commons.collections4.QueueUtilsTest.testUnmodifiableQueue":335,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIsEmpty":375,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetIteratorRemoveChangesMap":127,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyGet":21,"org.apache.commons.collections4.map.LazyMapTest.testMapHashCode":206,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapRemove":300,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesClearChangesMap":47,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetIteratorRemoveChangesMap":213,"org.apache.commons.collections4.map.LazyMapTest.testMapContainsKey":217,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapIsEmpty":281,"org.apache.commons.collections4.list.TransformedListTest.testListEquals":428,"org.apache.commons.collections4.list.TransformedListTest.testListListIteratorPreviousRemoveNext":431,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapSize":293,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsKey":131,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":9,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":17,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":400,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":397,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetClearChangesMap":178,"org.apache.commons.collections4.list.FixedSizeListTest.testListLastIndexOf":413,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":267,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastEntrySet":28,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetClearChangesMap":85,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":4,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveChangesMap":125,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetClearChangesMap":89,"org.apache.commons.collections4.map.DefaultedMapTest.testKeySetRetainAll":109,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFailingHasNextBug":18,"org.apache.commons.collections4.map.LazySortedMapTest.testMapRemove":146,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIterator":450,"org.apache.commons.collections4.map.LazySortedMapTest.testMapIsEmpty":141,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemoveNext":362,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRemoveChangesMap":185,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":312,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIterator":381,"org.apache.commons.collections4.QueueUtilsTest.testTransformedQueue":337,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testSize":242,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySet":151,"org.apache.commons.collections4.map.MultiKeyMapTest.testFailFastValues":30,"org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection":330,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove3":209,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":315,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetIteratorRemoveChangesMap":67,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":316,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove1":207,"org.apache.commons.collections4.map.LazyMapTest.testEntrySetRemove2":208,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_SimpleNoHasNext":253,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":263,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetClearChangesMap":124,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutNullValue":44,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemovePrevious":391,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionToArray2":416,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapContainsKey":303,"org.apache.commons.collections4.list.PredicatedListTest.testListGetByIndex":355,"org.apache.commons.collections4.BagUtilsTest.testPredicatedSortedBag":346,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testEmptyIterator":324,"org.apache.commons.collections4.TransformerUtilsTest.testExecutorTransformer":451,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPut":106,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesRemoveAll":142,"org.apache.commons.collections4.list.PredicatedListTest.testListIteratorSet":361,"org.apache.commons.collections4.list.PredicatedListTest.testListListIteratorPreviousRemovePrevious":357,"org.apache.commons.collections4.list.FixedSizeListTest.testListListIterator":275,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesRetainAll":187,"org.apache.commons.collections4.map.LazyMapTest.testValuesRemoveAll":228,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemovePrevious":387,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":313,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testReset":241,"org.apache.commons.collections4.list.TransformedListTest.testCollectionAddAll":445,"org.apache.commons.collections4.map.LazyMapTest.testValuesClearChangesMap":235,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testKeySetRemoveChangesMap":189,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullValue":90,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":16,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapSize":162,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll1":24,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testFullIterator":255,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapPutAll":45,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":250,"org.apache.commons.collections4.map.MultiKeyMapTest.testValuesRetainAll":58,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll4":27,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll3":26,"org.apache.commons.collections4.map.MultiKeyMapTest.testMultiKeyRemoveAll2":25,"org.apache.commons.collections4.list.TransformedListTest.testSerializeDeserializeThenCompare":449,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":382,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContains":418,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains1":114,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains2":115,"org.apache.commons.collections4.map.DefaultedMapTest.testFailFastKeySet":73,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetContains3":116,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRemoveChangesMap":193,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesRetainAll":80,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveChangesMap":64,"org.apache.commons.collections4.map.DefaultedMapTest.testValuesClearChangesMap":110,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPutNullValue":173,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetIteratorRemoveChangesMap":196,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":237,"org.apache.commons.collections4.map.FixedSizeMapTest.testMapPut":291,"org.apache.commons.collections4.set.UnmodifiableSortedSetTest.testDecorateFactory":332,"org.apache.commons.collections4.map.LazyMapTest.testFailFastEntrySet":197,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":7,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMakeMap":160,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":266,"org.apache.commons.collections4.map.LazySortedMapTest.testMapContainsValue":147,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullValue":129,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapToString":169,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIterators":247,"org.apache.commons.collections4.list.FixedSizeListTest.testUnsupportedRemove":420,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":39,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":392,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":402,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapContainsKey":164,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":272,"org.apache.commons.collections4.map.UnmodifiableOrderedMapTest.testMapSize":304,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapPut":287,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionContainsAll":415,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":13,"org.apache.commons.collections4.map.DefaultedMapTest.testMapPutNullKey":96,"org.apache.commons.collections4.map.LazySortedMapTest.testMapClear":136,"org.apache.commons.collections4.map.TransformedMapTest.testMapPut":302,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testDecorate":340,"org.apache.commons.collections4.list.TransformedListTest.testListLastIndexOf":436,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testContainsValue":157,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveAll":126,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":319,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapPut":298,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveChangesMap":79,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetClearChangesMap":128,"org.apache.commons.collections4.list.FixedSizeListTest.testSerializeDeserializeThenCompare":421,"org.apache.commons.collections4.ListUtilsTest.testPredicatedList":352,"org.apache.commons.collections4.map.MultiKeyMapTest.testKeySetRetainAll":62,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":243,"org.apache.commons.collections4.PredicateUtilsTest.testOnePredicate":1,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapRemove":175,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_RootNoTransformer":257,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":327,"org.apache.commons.collections4.list.FixedSizeListTest.testListEquals":409,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValuesIteratorRemoveChangesMap":188,"org.apache.commons.collections4.map.LazyMapTest.testMapPut":231,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIterator":422,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapContainsValue":295,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":321,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorNextRemoveNext":396,"org.apache.commons.collections4.map.LazySortedMapTest.testEntrySetRemoveChangesMap":118,"org.apache.commons.collections4.map.DefaultedMapTest.testMapContainsValue":108,"org.apache.commons.collections4.list.SetUniqueListTest.testSerializeDeserializeThenCompare":405,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testContainsKey":152,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":406,"org.apache.commons.collections4.map.LazyMapTest.testKeySetRemoveAll":218,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutAll":143,"org.apache.commons.collections4.list.FixedSizeListTest.testListSetByIndex":411,"org.apache.commons.collections4.map.DefaultedMapTest.testMapClear":97,"org.apache.commons.collections4.map.LazySortedMapTest.testValuesClearChangesMap":149,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed1":244,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed2":245,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_Transformed3":246,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":404,"org.apache.commons.collections4.list.PredicatedListTest.testListRemoveByIndex":365,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":323,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorPreviousRemoveNext":390,"org.apache.commons.collections4.map.ListOrderedMap2Test.testMapEquals":296,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":3,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapPut":171,"org.apache.commons.collections4.list.TransformedListTest.testCollectionIteratorRemove":441,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":384,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContainsAll":370,"org.apache.commons.collections4.list.FixedSizeListTest.testCollectionIsEmpty":419,"org.apache.commons.collections4.list.TransformedListTest.testCollectionContainsAll":439,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":269,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":10,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":268,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":398,"org.apache.commons.collections4.collection.UnmodifiableBoundedCollectionTest.testDecorateFactory":349,"org.apache.commons.collections4.map.LazySortedMapTest.testMapSize":134,"org.apache.commons.collections4.map.ListOrderedMapTest.testMapSize":282,"org.apache.commons.collections4.PredicateUtilsTest.testEitherPredicate":0,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testValues":158,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionContains":374,"org.apache.commons.collections4.map.DefaultedMapTest.testEntrySetRemoveAll":87,"org.apache.commons.collections4.functors.CatchAndRethrowClosureTest.testThrowingClosure":328,"org.apache.commons.collections4.map.LazyMapTest.testMakeMap":219,"org.apache.commons.collections4.list.PredicatedListTest.testCollectionIteratorRemove":372,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":11,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":314,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testMapGet":167,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":37,"org.apache.commons.collections4.map.PassiveExpiringMapTest.testEntrySetRetainAll":195,"org.apache.commons.collections4.list.TransformedListTest.testCollectionRetainAll":446,"org.apache.commons.collections4.map.LazyMapTest.testMapClear":222,"org.apache.commons.collections4.list.PredicatedListTest.testListEquals":359,"org.apache.commons.collections4.map.LazySortedMapTest.testKeySetRemoveAll":132,"org.apache.commons.collections4.map.LazySortedMapTest.testMapPutNullKey":135,"org.apache.commons.collections4.map.MultiKeyMapTest.testEntrySetRemoveAll":65}}]

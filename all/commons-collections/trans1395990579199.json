[{"failures":[0,1,2],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"this.int = this.int","position":"org.apache.commons.collections4.iterators.ArrayIterator:197","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"binaryOperator":"((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:312","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.map.Flat3Map:205","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.map.AbstractMapDecorator:128","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.NullPointerException(\"Collection must not be null\")","position":"org.apache.commons.collections4.IteratorUtils:875","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.util.NoSuchElementException(\"Iterator contains no elements\")","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:49","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"lastUsedIterator":"currentIterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.Iterator<? extends E>) == null) {\n    throw new java.lang.IllegalStateException(\"Iterator remove() cannot be called at this time\");\n} ","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:245","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Iterator<? extends E>) == null) {\n    org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator();\n} ","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:144","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.bag.AbstractMapBag<E>.int) != (int)) {\n    throw new java.util.ConcurrentModificationException();\n} ","position":"org.apache.commons.collections4.bag.AbstractMapBag:202","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>.getSortedMap().lastKey()","position":"org.apache.commons.collections4.map.TransformedSortedMap:137","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"org.apache.commons.collections4.iterators.LazyIteratorChain<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:125","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (final java.util.Map.Entry<? extends K, ? extends V> java.util.Map.Entry<? extends K, ? extends V> : java.util.Map<? extends K, ? extends V>.entrySet()) {\n    org.apache.commons.collections4.map.AbstractHashedMap<K, V>.put(java.util.Map.Entry<? extends K, ? extends V>.getKey(), java.util.Map.Entry<? extends K, ? extends V>.getValue());\n}","position":"org.apache.commons.collections4.map.AbstractHashedMap:325","type":"CtForEachImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal java.util.Comparator<? super E> java.util.Comparator<? super E> = ((java.util.Comparator<? super E>)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.bag.TreeBag:128","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final V V = ((V)(java.io.ObjectInputStream.readObject()))","position":"org.apache.commons.collections4.map.AbstractHashedMap:1268","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasPrevious()) {\n    final E E = java.util.ListIterator<? extends E>.previous();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:263","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().previousKey(K)","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:82","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"currentIterator"},"name":"replace","transplant":{"sourceCode":"if ((this.java.util.Iterator<? extends E>) instanceof org.apache.commons.collections4.ResettableIterator) {\n    this.java.util.Iterator<? extends E>.reset();\n} ","position":"org.apache.commons.collections4.iterators.IteratorIterable:125","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.findNextByIterator(java.util.Iterator<? extends E>)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:198","type":"CtInvocationImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterListIterator:235","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.FilterListIterator<E>.clearPreviousObject()","position":"org.apache.commons.collections4.iterators.FilterListIterator:221","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().toString()","position":"org.apache.commons.collections4.map.AbstractMapDecorator:140","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((boolean) == true) {\n    return (((\"Iterator[\" + org.apache.commons.collections4.map.ListOrderedMap.ListOrderedMapIterator<K, V>.(getKey())) + \"=\") + org.apache.commons.collections4.map.ListOrderedMap.ListOrderedMapIterator<K, V>.(getValue())) + \"]\";\n} ","position":"org.apache.commons.collections4.map.ListOrderedMap:781","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if ((org.apache.commons.collections4.list.AbstractLinkedList.Node<E>) == (org.apache.commons.collections4.list.AbstractLinkedList<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)) {\n    int = org.apache.commons.collections4.list.AbstractLinkedList<E>.size();\n} else {\n    int int = 0;\n    org.apache.commons.collections4.list.AbstractLinkedList.Node<E> org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n    while (org.apache.commons.collections4.list.AbstractLinkedList.Node<E> != (org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)) {\n        int++;\n        org.apache.commons.collections4.list.AbstractLinkedList.Node<E> = org.apache.commons.collections4.list.AbstractLinkedList.Node<E>.org.apache.commons.collections4.list.AbstractLinkedList.Node<E>;\n    }\n    int = int;\n}","position":"org.apache.commons.collections4.list.CursorableLinkedList:474","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Transformer<? super E, ?> == null) {\n    return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure();\n} ","position":"org.apache.commons.collections4.functors.TransformerClosure:49","type":"CtIfImpl"},"status":-2},{"failures":[0,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"binaryOperator":"(int) < (int)","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"mutation","status":-1},{"failures":[30,31,32,33,34,35,36,37,38],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.LazyList:123","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().set(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:103","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{"list":"list"},"name":"add","transplant":{"sourceCode":"return this.java.util.List<E>.size()","position":"org.apache.commons.collections4.iterators.LoopingListIterator:251","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (java.util.List<E>.size()) - 1","position":"org.apache.commons.collections4.iterators.LoopingListIterator:172","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Object = org.apache.commons.collections4.map.AbstractHashedMap<K, V>.convertKey(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractHashedMap:180","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Set<T>.add(T)","position":"org.apache.commons.collections4.functors.UniquePredicate:67","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.isEmpty()","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2054","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:45","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((K) == null) {\n    return true;\n} ","position":"org.apache.commons.collections4.map.Flat3Map:212","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.ListIterator<E>.nextIndex()","position":"org.apache.commons.collections4.iterators.ReverseListIterator:118","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return V","position":"org.apache.commons.collections4.map.ListOrderedMap:226","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.iterators.FilterIterator:178","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"binaryOperator":"((((\"NPE, entry=\" + org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>) + \" entryIsHeader=\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V> == (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>))) + \" key=\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:325","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"/** \n * A submap used for prefix views over the {@link Trie}.\n */\nprivate class PrefixRangeMap extends org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap {\n    private final K prefix;\n\n    private final int offsetInBits;\n\n    private final int lengthInBits;\n\n    private K fromKey = null;\n\n    private K toKey = null;\n\n    private transient int expectedModCount = 0;\n\n    private int size = -1;\n\n    /** \n     * Creates a {@link PrefixRangeMap}.\n     */\nprivate PrefixRangeMap(final K prefix ,final int offsetInBits ,final int lengthInBits) {\n        this.K = K;\n        this.int = int;\n        this.int = int;\n    }\n\n    /** \n     * This method does two things. It determines the FROM\n     * and TO range of the {@link PrefixRangeMap} and the number\n     * of elements in the range. This method must be called every\n     * time the {@link Trie} has changed.\n     */\nprivate int fixup() {\n        if (((int) == (-1)) || ((org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int) != (int))) {\n            final java.util.Iterator<java.util.Map.Entry<K, V>> java.util.Iterator<java.util.Map.Entry<K, V>> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeMap.entrySet().iterator();\n            int = 0;\n            java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n            if (java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()) {\n                java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next();\n                int = 1;\n            } \n            K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            if ((K) != null) {\n                final org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.previousEntry(((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)(java.util.Map.Entry<K, V>)));\n                K = org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V> == null ? null : org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>.getKey();\n            } \n            K = K;\n            while (java.util.Iterator<java.util.Map.Entry<K, V>>.hasNext()) {\n                ++(int);\n                java.util.Map.Entry<K, V> = java.util.Iterator<java.util.Map.Entry<K, V>>.next();\n            }\n            K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            if ((K) != null) {\n                java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.nextEntry(((org.apache.commons.collections4.trie.AbstractPatriciaTrie.TrieEntry<K, V>)(java.util.Map.Entry<K, V>)));\n                K = java.util.Map.Entry<K, V> == null ? null : java.util.Map.Entry<K, V>.getKey();\n            } \n            int = org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int;\n        } \n        return int;\n    }\n\n    public K firstKey() {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.fixup();\n        java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n        if ((K) == null) {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.firstEntry();\n        } else {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.higherEntry(K);\n        }\n        final K K = java.util.Map.Entry<K, V> != null ? java.util.Map.Entry<K, V>.getKey() : null;\n        if ((java.util.Map.Entry<K, V> == null) || (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K)))) {\n            throw new java.util.NoSuchElementException();\n        } \n        return K;\n    }\n\n    public K lastKey() {\n        org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.fixup();\n        java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> = null;\n        if ((K) == null) {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lastEntry();\n        } else {\n            java.util.Map.Entry<K, V> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.lowerEntry(K);\n        }\n        final K K = java.util.Map.Entry<K, V> != null ? java.util.Map.Entry<K, V>.getKey() : null;\n        if ((java.util.Map.Entry<K, V> == null) || (!(org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K)))) {\n            throw new java.util.NoSuchElementException();\n        } \n        return K;\n    }\n\n    /** \n     * Returns true if this {@link PrefixRangeMap}'s key is a prefix of the provided key.\n     */\n@java.lang.Override\n    protected boolean inRange(final K key) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    /** \n     * Same as {@link #inRange(Object)}.\n     */\n@java.lang.Override\n    protected boolean inRange2(final K key) {\n        return org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.PrefixRangeMap.inRange(K);\n    }\n\n    /** \n     * Returns true if the provided Key is in the FROM range of the {@link PrefixRangeMap}.\n     */\n@java.lang.Override\n    protected boolean inFromRange(final K key, final boolean forceInclusive) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    /** \n     * Returns true if the provided Key is in the TO range of the {@link PrefixRangeMap}.\n     */\n@java.lang.Override\n    protected boolean inToRange(final K key, final boolean forceInclusive) {\n        return org.apache.commons.collections4.trie.AbstractBitwiseTrie<K, V>.getKeyAnalyzer().isPrefix(K, int, int, K);\n    }\n\n    @java.lang.Override\n    protected java.util.Set<java.util.Map.Entry<K, V>> createEntrySet() {\n        return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.PrefixRangeEntrySet(this);\n    }\n\n    @java.lang.Override\n    public K getFromKey() {\n        return K;\n    }\n\n    @java.lang.Override\n    public K getToKey() {\n        return K;\n    }\n\n    @java.lang.Override\n    public boolean isFromInclusive() {\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean isToInclusive() {\n        return false;\n    }\n\n    @java.lang.Override\n    protected java.util.SortedMap<K, V> createRangeMap(final K fromKey, final boolean fromInclusive, final K toKey, final boolean toInclusive) {\n        return new org.apache.commons.collections4.trie.AbstractPatriciaTrie.RangeEntryMap(K , boolean , K , boolean);\n    }\n}","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:2082","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return ((java.util.List<E>)(org.apache.commons.collections4.collection.AbstractCollectionDecorator<E>.decorated()))","position":"org.apache.commons.collections4.list.AbstractListDecorator:65","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.swapColors(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1179","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure()","position":"org.apache.commons.collections4.functors.TransformerClosure:50","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return new org.apache.commons.collections4.map.AbstractLinkedMap.EntrySetIterator<K, V>(this)","position":"org.apache.commons.collections4.map.AbstractLinkedMap:401","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Iterator<I>","position":"org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator:54","type":"CtReturnImpl"},"status":-2},{"failures":[],"binaryOperator":"(\"Can\\'t move header to MRU\" + \" (please report this to dev@commons.apache.org)\")","name":"math","position":"org.apache.commons.collections4.map.LRUMap:209","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new org.apache.commons.collections4.set.ListOrderedSet.OrderedSetIterator<E>(java.util.List<E>.listIterator() , org.apache.commons.collections4.set.AbstractSetDecorator<E>.decorated())","position":"org.apache.commons.collections4.set.ListOrderedSet:189","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.queue.PredicatedQueue<E>.decorated().poll()","position":"org.apache.commons.collections4.queue.PredicatedQueue:103","type":"CtReturnImpl"},"status":-2},{"failures":[39],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.functors.NOPClosure.org.apache.commons.collections4.functors.NOPClosure.<E>nopClosure()","position":"org.apache.commons.collections4.functors.ForClosure:53","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ExceptionClosure.org.apache.commons.collections4.functors.ExceptionClosure.<E>exceptionClosure()","position":"org.apache.commons.collections4.ClosureUtils:70","type":"CtReturnImpl"},"status":-1},{"failures":[],"binaryOperator":"(((((((((\"Entry.next=null, data[removeIndex]=\" + (org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>[][int])) + \" previous=\") + org.apache.commons.collections4.map.AbstractHashedMap.HashEntry<K, V>) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:312","type":"mutation","status":-2},{"failures":[],"binaryOperator":"(((((((((\"Entry.after=null, header.after\" + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" header.before\") + (org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>)) + \" key=\") + K) + \" value=\") + V) + \" size=\") + (int))","name":"math","position":"org.apache.commons.collections4.map.LRUMap:259","type":"mutation","status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:271","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalStateException(java.text.MessageFormat.java.text.MessageFormat.format(org.apache.commons.collections4.iterators.ListIteratorWrapper.java.lang.String, java.lang.Integer.java.lang.Integer.valueOf(int)))","position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:216","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractSortedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractSortedMapDecorator:88","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().isEmpty()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:84","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V> != null) && (org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getKey().equals(java.lang.Object))) {\n    org.apache.commons.collections4.bidimap.TreeBidiMap<K, V>.doRedBlackDelete(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>);\n    return true;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:1592","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.AbstractReferenceMap<K, V>.isKeyType(org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength.org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength)","position":"org.apache.commons.collections4.map.ReferenceIdentityMap:205","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.DefaultedMap<K, V>(java.util.Map<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends V>)","position":"org.apache.commons.collections4.map.DefaultedMap:131","type":"CtReturnImpl"},"status":-2},{"failures":[0,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"binaryOperator":"(int) < (int)","name":"removeConditional","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"mutation","status":-1},{"failures":[],"variableMapping":{"iArgs":"iArgs","iConstructor":"iConstructor"},"name":"add","transplant":{"sourceCode":"return this.java.lang.reflect.Constructor<T>.newInstance(this.java.lang.Object[])","position":"org.apache.commons.collections4.functors.InstantiateFactory:126","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.reflect.Constructor<T>.newInstance(java.lang.Object[]);\n} catch (final java.lang.InstantiationException java.lang.InstantiationException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: InstantiationException\" , java.lang.InstantiationException);\n} catch (final java.lang.IllegalAccessException java.lang.IllegalAccessException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor must be public\" , java.lang.IllegalAccessException);\n} catch (final java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException) {\n    throw new org.apache.commons.collections4.FunctorException(\"InstantiateFactory: Constructor threw an exception\" , java.lang.reflect.InvocationTargetException);\n}","position":"org.apache.commons.collections4.functors.InstantiateFactory:125","type":"CtTryImpl"},"status":-2},{"failures":[3,4,5,6,8,9,10,11],"variableMapping":{"total":"nextIndex","counter":"nextIndex"},"name":"add","transplant":{"sourceCode":"int = (int * 37) + (this.int)","position":"org.apache.commons.collections4.comparators.FixedOrderComparator:261","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)--","position":"org.apache.commons.collections4.iterators.FilterListIterator:150","type":"CtUnaryOperatorImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.PeekingIterator:142","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.ListIterator<? extends E>) == null) {\n    return false;\n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:260","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map.Entry<K, V>.equals(java.lang.Object)","position":"org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator:76","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractOrderedMapDecorator<K, V>.decorated().lastKey()","position":"org.apache.commons.collections4.map.AbstractOrderedMapDecorator:74","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().size()","position":"org.apache.commons.collections4.list.GrowthList:122","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"iterator":"iterator"},"name":"add","transplant":{"sourceCode":"if ((this.java.util.Iterator<? extends E>) instanceof java.util.ListIterator) {\n    return this.java.util.Iterator<? extends E>.next();\n} ","position":"org.apache.commons.collections4.iterators.ListIteratorWrapper:138","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !(org.apache.commons.collections4.ArrayStack<E>.isEmpty()) ? org.apache.commons.collections4.ArrayStack<E>.pop() : java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.PushbackIterator:96","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>.getParent(org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement).setLeft(org.apache.commons.collections4.bidimap.TreeBidiMap.Node<K, V>, org.apache.commons.collections4.bidimap.TreeBidiMap.DataElement)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:836","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().isEmpty();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:136","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{"flag":"hasNext","removed":"hasNext"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:227","type":"CtAssignmentImpl"},"status":0},{"failures":[40,41],"binaryOperator":"(java.util.Collection<? extends E>.size()) > 0","name":"conditionalBoundary","position":"org.apache.commons.collections4.iterators.LoopingIterator:71","type":"mutation","status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.collection.PredicatedCollection<E>.validate(E)","position":"org.apache.commons.collections4.bag.PredicatedBag:93","type":"CtInvocationImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return java.util.Comparator<E>.compare(E, E)","position":"org.apache.commons.collections4.comparators.ReverseComparator:76","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"(int)++","position":"org.apache.commons.collections4.iterators.FilterListIterator:134","type":"CtUnaryOperatorImpl"},"status":-2},{"failures":[3,4,5,6,8,9,10,11],"variableMapping":{"previousObjectSet":"previousObjectSet"},"name":"add","transplant":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterListIterator:244","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (!(boolean)) {\n    if (!org.apache.commons.collections4.iterators.FilterListIterator<E>.(setPreviousObject())) {\n        throw new java.util.NoSuchElementException();\n    } \n} ","position":"org.apache.commons.collections4.iterators.FilterListIterator:145","type":"CtIfImpl"},"status":-1},{"failures":[42,43],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return false","position":"org.apache.commons.collections4.comparators.ComparatorChain:337","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:110","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.TreeList.AVLNode<E> = org.apache.commons.collections4.list.TreeList.AVLNode<E>.insert(int, E)","position":"org.apache.commons.collections4.list.TreeList:206","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E E = java.util.Iterator<? extends E>.next()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:188","type":"CtLocalVariableImpl"},"status":-2},{"failures":[3,4,5,6,44,7,45,8,9,10,11],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.FilterListIterator:234","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.clear()","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1434","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.iterators.ObjectGraphIterator<E>.updateCurrentIterator()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:209","type":"CtInvocationImpl"},"status":-2},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().retainAll(java.util.Collection<?>);\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:181","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"K = org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator<K, java.util.Map.Entry<K, V>>.getIterator().next()","position":"org.apache.commons.collections4.map.ListOrderedMap:679","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.collections4.iterators.FilterListIterator:261","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"final int int = int / (org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer.int)","position":"org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer:66","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().getValue()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:63","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().entrySet()","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:72","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator<K, V>.isSetValueChecking()) {\n    return new org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator.EntrySet(java.util.Map<K, V>.entrySet() , this);\n} ","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:99","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.util.Set<E>.add(E)) {\n    java.util.List<E>.add(E);\n} ","position":"org.apache.commons.collections4.list.SetUniqueList:193","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalStateException(\"Cannot set to list until next() or previous() called\")","position":"org.apache.commons.collections4.iterators.ReverseListIterator:143","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return org.apache.commons.collections4.map.LazySortedMap<K, V>.getSortedMap().firstKey()","position":"org.apache.commons.collections4.map.LazySortedMap:131","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.Flat3Map.EntryIterator<K, java.lang.Object>.nextEntry().getKey()","position":"org.apache.commons.collections4.map.Flat3Map:1011","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"flag":"result","removed":"result"},"name":"replace","transplant":{"sourceCode":"boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = true","position":"org.apache.commons.collections4.list.GrowthList:155","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return ((V)(java.lang.Object))","position":"org.apache.commons.collections4.map.AbstractHashedMap:1092","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Map<K, V>.containsKey(java.lang.Object)) == false) {\n    return org.apache.commons.collections4.Transformer<? super K, ? extends V>.transform(((K)(java.lang.Object)));\n} ","position":"org.apache.commons.collections4.map.DefaultedMap:202","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>.org.apache.commons.collections4.map.AbstractLinkedMap.LinkEntry<K, V>","position":"org.apache.commons.collections4.map.AbstractLinkedMap:331","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator<K, V>.decorated().firstKey()","position":"org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator:68","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"org.apache.commons.collections4.map.Flat3Map<K, V>.V = V","position":"org.apache.commons.collections4.map.Flat3Map:842","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    if (java.lang.Object == this) {\n        return true;\n    } \n    return (java.lang.Object == this) || (org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().equals(java.lang.Object));\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:194","type":"CtSynchronizedImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"Predicate must not be null\")","position":"org.apache.commons.collections4.functors.NullIsExceptionPredicate:48","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().get(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:94","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"E = E","position":"org.apache.commons.collections4.iterators.CollatingIterator:369","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.map.TransformedSortedMap<K, V>(java.util.SortedMap<K, V> , org.apache.commons.collections4.Transformer<? super K, ? extends K> , org.apache.commons.collections4.Transformer<? super V, ? extends V>)","position":"org.apache.commons.collections4.map.TransformedSortedMap:146","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"E = null","position":"org.apache.commons.collections4.iterators.FilterIterator:143","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"E = org.apache.commons.collections4.Transformer<? super E, ? extends E>.transform(E)","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:190","type":"CtAssignmentImpl"},"status":-2},{"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1520","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().add(E)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:107","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.iterators.UnmodifiableIterator.org.apache.commons.collections4.iterators.UnmodifiableIterator.<E>unmodifiableIterator(org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().iterator())","position":"org.apache.commons.collections4.bag.UnmodifiableBag:108","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.TransformedSortedMap<K, V>","position":"org.apache.commons.collections4.map.TransformedSortedMap:100","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter<K, V>.current().setValue(V)","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:70","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:113","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (((int) == (-1)) || ((int) != (org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int))) {\n    int = 0;\n    for (final java.util.Iterator<?> java.util.Iterator<?> = org.apache.commons.collections4.trie.AbstractPatriciaTrie<K, V>.RangeEntrySet.iterator() ; java.util.Iterator<?>.hasNext() ; java.util.Iterator<?>.next()) {\n        ++(int);\n    }\n    int = org.apache.commons.collections4.trie.AbstractPatriciaTrie.this.int;\n} ","position":"org.apache.commons.collections4.trie.AbstractPatriciaTrie:1995","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E>.remove()","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:248","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (null == E) {\n    throw new java.lang.NullPointerException(\"Attempted to add null object to queue\");\n} ","position":"org.apache.commons.collections4.queue.CircularFifoQueue:226","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.collections4.bidimap.TreeBidiMap.this.remove(java.lang.Object)","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2116","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator<K, V>.decorated().remove(java.lang.Object)","position":"org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator:80","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"org.apache.commons.collections4.list.CursorableLinkedList<E>.broadcastNodeRemoved(org.apache.commons.collections4.list.AbstractLinkedList.Node<E>)","position":"org.apache.commons.collections4.list.CursorableLinkedList:247","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return (int) - 1","position":"org.apache.commons.collections4.iterators.FilterListIterator:157","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"remove() method is not supported\")","position":"org.apache.commons.collections4.iterators.ArrayIterator:159","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ArrayIndexOutOfBoundsException(\"End index must not be greater than the array length\")","position":"org.apache.commons.collections4.iterators.ObjectArrayIterator:88","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.Iterator<java.util.Map.Entry<K, V>>.remove()","position":"org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter:99","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().add(int, E)","position":"org.apache.commons.collections4.list.AbstractListDecorator:71","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"return java.util.Map<K, V>.entrySet()","position":"org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator:102","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.set.UnmodifiableSet.org.apache.commons.collections4.set.UnmodifiableSet.unmodifiableSet(java.util.Map<K, V>.entrySet())","position":"org.apache.commons.collections4.map.FixedSizeSortedMap:145","type":"CtReturnImpl"},"status":0},{"failures":[64,65,66,67,68,69,70,71,72,73,74,75],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n    E = E;\n    boolean = true;\n    return true;\n} ","position":"org.apache.commons.collections4.iterators.FilterIterator:176","type":"CtIfImpl"},"status":-1},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final E E = E","position":"org.apache.commons.collections4.iterators.ObjectGraphIterator:225","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"if (java.util.Collection<? extends E> instanceof org.apache.commons.collections4.BoundedCollection) {\n    break;\n} ","position":"org.apache.commons.collections4.collection.UnmodifiableBoundedCollection:87","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.util.Collection<? extends E>.size()) == 0) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"E = org.apache.commons.collections4.iterators.AbstractListIteratorDecorator<E>.previous()","position":"org.apache.commons.collections4.list.SetUniqueList:398","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.UnsupportedOperationException(\"List is fixed size\")","position":"org.apache.commons.collections4.list.FixedSizeList:73","type":"CtThrowImpl"},"status":-2},{"failures":[],"variableMapping":{"obj":"object"},"name":"replace","transplant":{"sourceCode":"if (!(java.lang.Object instanceof java.util.Map.Entry)) {\n    return false;\n} ","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:2016","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.map.AbstractMapDecorator<K, V>.decorated().equals(java.lang.Object)","position":"org.apache.commons.collections4.map.AbstractMapDecorator:130","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"a":"list","b":"list"},"name":"add","transplant":{"sourceCode":"if ((java.util.List<E> == null) || (java.util.List<E> == null)) {\n    throw new java.lang.IllegalArgumentException(\"List must not be null\");\n} ","position":"org.apache.commons.collections4.ListUtils:548","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.util.List<E>.isEmpty()) {\n    throw new java.util.NoSuchElementException(\"There are no elements for this iterator to loop on\");\n} ","position":"org.apache.commons.collections4.iterators.LoopingListIterator:86","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{"flag":"nextObjectSet","removed":"nextObjectSet"},"name":"add","transplant":{"sourceCode":"this.boolean = boolean","position":"org.apache.commons.collections4.map.Flat3Map:802","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"boolean = false","position":"org.apache.commons.collections4.iterators.FilterIterator:165","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"(org.apache.commons.collections4.map.StaticBucketMap.Lock[][int].int)++","position":"org.apache.commons.collections4.map.StaticBucketMap:282","type":"CtUnaryOperatorImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"while (java.util.ListIterator<? extends E>.hasNext()) {\n    final E E = java.util.ListIterator<? extends E>.next();\n    if (org.apache.commons.collections4.Predicate<? super E>.evaluate(E)) {\n        E = E;\n        boolean = true;\n        return true;\n    } \n}","position":"org.apache.commons.collections4.iterators.FilterListIterator:231","type":"CtWhileImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"variableMapping":{"endIndex":"count","index":"count"},"name":"replace","transplant":{"sourceCode":"return int < int","position":"org.apache.commons.collections4.iterators.ArrayIterator:135","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.bag.AbstractBagDecorator<E>.decorated().remove(java.lang.Object, int)","position":"org.apache.commons.collections4.bag.AbstractBagDecorator:77","type":"CtReturnImpl"},"status":-1},{"failures":[96,97,98,99,100,34,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"variableMapping":{"nodeCount":"index"},"name":"replace","transplant":{"sourceCode":"return int == 0","position":"org.apache.commons.collections4.bidimap.TreeBidiMap:150","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.list.AbstractListDecorator<E>.decorated().addAll(int, java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.list.AbstractListDecorator:75","type":"CtReturnImpl"},"status":-1},{"failures":[126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,77,78,145,146,147,148],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.comparators.ComparatorChain:334","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().addAll(java.util.Collection<? extends E>)","position":"org.apache.commons.collections4.collection.SynchronizedCollection:113","type":"CtReturnImpl"},"status":-1},{"failures":[149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296],"name":"returnValue","position":"org.apache.commons.collections4.iterators.AbstractEmptyIterator:37","type":"mutation","return":"return false","status":-1},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.collections4.CollectionUtils:368","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"synchronized(java.lang.Object) {\n    return org.apache.commons.collections4.collection.SynchronizedCollection<E>.decorated().toString();\n}","position":"org.apache.commons.collections4.collection.SynchronizedCollection:211","type":"CtSynchronizedImpl"},"status":-2},{"failures":[297,298,299,300,301],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Iterator<? extends E> = java.util.Iterator<? extends E>","position":"org.apache.commons.collections4.iterators.LazyIteratorChain:97","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return E","position":"org.apache.commons.collections4.list.TreeList:1060","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.ListIterator<E>.add(E)","position":"org.apache.commons.collections4.iterators.ReverseListIterator:162","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return new org.apache.commons.collections4.functors.InstantiateTransformer<T>()","position":"org.apache.commons.collections4.functors.InstantiateTransformer:74","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return new org.apache.commons.collections4.functors.FactoryTransformer<I, O>(org.apache.commons.collections4.Factory<? extends O>)","position":"org.apache.commons.collections4.functors.FactoryTransformer:51","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return ((org.apache.commons.collections4.map.CaseInsensitiveMap<K, V>)(org.apache.commons.collections4.map.AbstractHashedMap<K, V>.clone()))","position":"org.apache.commons.collections4.map.CaseInsensitiveMap:142","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nfinal org.apache.commons.collections4.Predicate<T> org.apache.commons.collections4.Predicate<T> = org.apache.commons.collections4.PredicateUtils.org.apache.commons.collections4.PredicateUtils.<T>onePredicate(org.apache.commons.collections4.Predicate<? super T>, org.apache.commons.collections4.Predicate<? super T>)","position":"org.apache.commons.collections4.PredicateUtils:355","type":"CtLocalVariableImpl"},"status":-2},{"failures":[302,303,304,305,306,41],"binaryOperator":"(java.util.Collection<? extends E>.size()) == 0","name":"negateConditional","position":"org.apache.commons.collections4.iterators.LoopingIterator:84","type":"mutation","status":-1},{"failures":[],"variableMapping":{"prototype":"constantToReturn"},"name":"replace","transplant":{"sourceCode":"return ((org.apache.commons.collections4.Factory<T>)(new org.apache.commons.collections4.functors.PrototypeFactory.PrototypeSerializationFactory<java.io.Serializable>(((java.io.Serializable)(T)))))","position":"org.apache.commons.collections4.functors.PrototypeFactory:75","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.collections4.functors.ConstantFactory.org.apache.commons.collections4.functors.ConstantFactory.constantFactory(T)","position":"org.apache.commons.collections4.FactoryUtils:84","type":"CtReturnImpl"},"status":-2},{"failures":[],"name":"inlineConstant","inlineConstant":"boolean boolean = false","position":"org.apache.commons.collections4.list.GrowthList:152","type":"mutation","status":0},{"failureDictionary":{"org.apache.commons.collections4.iterators.FilterListIteratorTest.testPreviousChangesNext":7,"org.apache.commons.collections4.collection.CompositeCollectionTest.testUnsupportedAdd":156,"org.apache.commons.collections4.map.HashedMapTest.testMapEquals":245,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSimpleSerialization":173,"org.apache.commons.collections4.map.LRUMapTest.testMapEquals":217,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapToString":210,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsKey":215,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIterator":21,"org.apache.commons.collections4.map.LRUMapTest.testMapHashCode":219,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemove":60,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray":147,"org.apache.commons.collections4.map.HashedMapTest.testMapGet":246,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapClear":178,"org.apache.commons.collections4.list.SetUniqueListTest.testListHashCode":106,"org.apache.commons.collections4.map.LRUMapTest.testSimpleSerialization":224,"org.apache.commons.collections4.bag.UnmodifiableSortedBagTest.testUnsupportedRemove":79,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionClear":263,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectHashCodeEqualsContract":271,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndex":34,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIsEmpty":121,"org.apache.commons.collections4.list.SetUniqueListTest.testListGetByIndex":105,"org.apache.commons.collections4.map.LRUMapTest.testSerializeDeserializeThenCompare":225,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testFullIterator":29,"org.apache.commons.collections4.list.SetUniqueListTest.testListLastIndexOf":114,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapSize":203,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetIterator":69,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemoveAll":81,"org.apache.commons.collections4.set.MapBackedSetTest.testSerializeDeserializeThenCompare":285,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyMapIterator":151,"org.apache.commons.collections4.map.Flat3MapTest.testSerializeDeserializeThenCompare":201,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemoveAll":95,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIterator":110,"org.apache.commons.collections4.iterators.IteratorChainTest.testRemoveFromFilteredIterator":67,"org.apache.commons.collections4.map.MultiValueMapTest.testRemoveAllViaEntryIterator":297,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContains":261,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemove":265,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToString":277,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemove":135,"org.apache.commons.collections4.map.LinkedMapTest.testMapClear":228,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapGet":208,"org.apache.commons.collections4.map.LinkedMapTest.testMapGet":232,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testTruePredicate":3,"org.apache.commons.collections4.map.LinkedMapTest.testMapToString":234,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNextChangesPrevious":44,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsValue":206,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIteratorRemove":278,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArray":54,"org.apache.commons.collections4.iterators.FilterIteratorTest.testReturnValues":73,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapGet":167,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking":37,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAddAll":133,"org.apache.commons.collections4.list.SetUniqueListTest.testUniqueListReInsert":30,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetEquals":254,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIsEmpty":281,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagToArrayPopulate":55,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemoveAll":84,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapToString":184,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRetainAll":145,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapRemove":211,"org.apache.commons.collections4.map.LRUMapTest.testMapSize":213,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapClear":204,"org.apache.commons.collections4.map.LinkedMapTest.testObjectHashCodeEqualsSelfHashCode":237,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray":136,"org.apache.commons.collections4.map.MultiKeyMapTest.testSimpleSerialization":188,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapEquals":166,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIteratorRemove":129,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectHashCodeEqualsSelfHashCode":272,"org.apache.commons.collections4.map.LinkedMapTest.testMapRemove":235,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsKey":243,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testEvens":4,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContains":280,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContains":62,"org.apache.commons.collections4.map.LRUMapTest.testMapGet":218,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray2":257,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectEqualsSelf":288,"org.apache.commons.collections4.map.Flat3MapTest.testMapIsEmpty":191,"org.apache.commons.collections4.list.SetUniqueListTest.testSetInBiggerList":36,"org.apache.commons.collections4.list.SetUniqueListTest.testListEquals":108,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapHashCode":168,"org.apache.commons.collections4.set.MapBackedSetTest.testSetEquals":273,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteratorConstructorIteration_WithEmptyIterators":296,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testFullIterator":23,"org.apache.commons.collections4.IteratorUtilsTest.testArrayListIterator":12,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyIterator":149,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagSize":47,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapIsEmpty":161,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContains":120,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionSize":118,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionContainsAll":116,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapToString":169,"org.apache.commons.collections4.map.HashedMapTest.testMapToString":248,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsValue":195,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionIterator":287,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes":9,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectHashCodeEqualsContract":290,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testEmptyIterator":22,"org.apache.commons.collections4.iterators.FilterIteratorTest.testEmptyIterator":24,"org.apache.commons.collections4.list.SetUniqueListTest.testSetDownwardsInList":31,"org.apache.commons.collections4.map.Flat3MapTest.testSimpleSerialization":200,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testReset":2,"org.apache.commons.collections4.set.MapBackedSetTest.testSetHashCode":274,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemoveFromFilteredIterator":68,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsKey":179,"org.apache.commons.collections4.map.LinkedMapTest.testMapIsEmpty":226,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemoveAll":90,"org.apache.commons.collections4.map.Flat3MapTest.testMapEquals":196,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapEquals":207,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionAddAll":139,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemoveAll":119,"org.apache.commons.collections4.map.HashedMapTest.testMapContainsValue":244,"org.apache.commons.collections4.map.LinkedMapTest.testMapEquals":231,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRemoveAll":260,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIterator":25,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListSerialization":111,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyChain":293,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedHasNext":71,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorSet":100,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRemoveAll":130,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testSize":306,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContainsAll":154,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemoveAll":83,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContains":140,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIteratorRemove":144,"org.apache.commons.collections4.map.MultiKeyMapTest.testObjectHashCodeEqualsContract":186,"org.apache.commons.collections4.list.SetUniqueListTest.testCollections304":33,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemove":88,"org.apache.commons.collections4.map.Flat3MapTest.testMapClear":193,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToArray":267,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testIterator":301,"org.apache.commons.collections4.map.HashedMapTest.testMapIsEmpty":240,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testEmptyIterator":294,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFail":50,"org.apache.commons.collections4.map.LinkedMapTest.testSerializeDeserializeThenCompare":239,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testOdds":6,"org.apache.commons.collections4.bag.TransformedBagTest.testCollectionRemove":94,"org.apache.commons.collections4.map.LinkedMapTest.testMapHashCode":233,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemoveAll":93,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testObjectHashCodeEqualsContract":171,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray2":276,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapIsEmpty":202,"org.apache.commons.collections4.map.Flat3MapTest.testMapGet":197,"org.apache.commons.collections4.map.HashedMapTest.testSerializeDeserializeThenCompare":253,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIterator":268,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionToArray":286,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionContainsAll":256,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIteratorRemove":259,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testFullIterator":65,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray":159,"org.apache.commons.collections4.bag.CollectionSortedBagTest.testCollectionRemove":85,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testSerializeDeserializeThenCompare":174,"org.apache.commons.collections4.map.Flat3MapTest.testMapToString":198,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testFirstIteratorIsEmptyBug":299,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testReset":305,"org.apache.commons.collections4.list.SetUniqueListTest.testListIteratorAdd":99,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testFours":5,"org.apache.commons.collections4.list.SetUniqueListTest.testIntCollectionAddAll":103,"org.apache.commons.collections4.bag.HashBagTest.testCollectionRemove":82,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapSize":162,"org.apache.commons.collections4.IteratorUtilsTest.testArrayIterator":0,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapClear":163,"org.apache.commons.collections4.map.HashedMapTest.testMapSize":241,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionContains":157,"org.apache.commons.collections4.iterators.ObjectGraphIteratorTest.testIteration_IteratorOfIteratorsWithEmptyIterators":295,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapIsEmpty":176,"org.apache.commons.collections4.set.MapBackedSet2Test.testObjectEqualsSelf":269,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagContainsAll":63,"org.apache.commons.collections4.map.Flat3MapTest.testSerialisation0":190,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionAdd":46,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedIterator":152,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapSize":177,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemoveAll":87,"org.apache.commons.collections4.SplitMapUtilsTest.testReadableMap":42,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIteratorRemove":98,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapHashCode":209,"org.apache.commons.collections4.list.SetUniqueListTest.testListSetByIndexBoundsChecking2":38,"org.apache.commons.collections4.list.SetUniqueListTest.testFactory":96,"org.apache.commons.collections4.SplitMapUtilsTest.testWritableMap":43,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapRemove":185,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapContainsValue":180,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testFullIterator":16,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagHashCode":58,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIterator":160,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testRemove":66,"org.apache.commons.collections4.map.HashedMapTest.testObjectHashCodeEqualsSelfHashCode":251,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyListIterator":150,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIsEmpty":132,"org.apache.commons.collections4.iterators.ArrayListIterator2Test.testIndexedArray":20,"org.apache.commons.collections4.bag.PredicatedBagTest.testCollectionRemoveAll":89,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionContainsAll":141,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testThrees":8,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionToArray2":155,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailNoMore":51,"org.apache.commons.collections4.iterators.FilterIteratorTest.testSetPredicate":72,"org.apache.commons.collections4.list.SetUniqueListTest.testRetainAllWithInitialList":97,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapHashCode":183,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorRemoveProtectsInvariants":53,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRemoveAll":61,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapRemove":170,"org.apache.commons.collections4.list.SetUniqueListTest.testListRemoveByIndex":112,"org.apache.commons.collections4.map.LRUMapTest.testMapIsEmpty":212,"org.apache.commons.collections4.map.HashedMapTest.testMapRemove":249,"org.apache.commons.collections4.bag.SynchronizedBagTest.testFullBagCompatibility":138,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionClear":282,"org.apache.commons.collections4.list.SetUniqueListTest.testSubListIsUnmodifiable":101,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRetainAll":122,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionToArray2":148,"org.apache.commons.collections4.ClosureUtilsTest.testExceptionClosure":39,"org.apache.commons.collections4.list.SetUniqueListTest.testSet":32,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagAdd":59,"org.apache.commons.collections4.list.SetUniqueListTest.testListListIteratorByIndex":109,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionSize":146,"org.apache.commons.collections4.list.SetUniqueListTest.testSetUpwardsInList":35,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testReset":1,"org.apache.commons.collections4.bag.TransformedSortedBagTest.testCollectionRemove":92,"org.apache.commons.collections4.map.LinkedMapTest.testObjectHashCodeEqualsContract":236,"org.apache.commons.collections4.iterators.UniqueFilterIteratorTest.testIterator":64,"org.apache.commons.collections4.map.LinkedMapTest.testSimpleSerialization":238,"org.apache.commons.collections4.set.MapBackedSetTest.testObjectHashCodeEqualsSelfHashCode":291,"org.apache.commons.collections4.map.Flat3MapTest.testMapRemove":199,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionIterator":137,"org.apache.commons.collections4.list.SetUniqueListTest.testAddAll":104,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testManual":45,"org.apache.commons.collections4.map.LRUMapTest.testMapClear":214,"org.apache.commons.collections4.map.ReferenceIdentityMapTest.testMapContainsKey":205,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testRemoving1":41,"org.apache.commons.collections4.iterators.FilterIteratorTest.testFullIterator":74,"org.apache.commons.collections4.list.SetUniqueListTest.testListIndexOf":113,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionToString":258,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemove":284,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapGet":182,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRepeatedNext":70,"org.apache.commons.collections4.list.SetUniqueListTest.testFullListCompatibility":115,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionSize":128,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRetainAll":283,"org.apache.commons.collections4.set.MapBackedSetTest.testSimpleSerialization":289,"org.apache.commons.collections4.bag.UnmodifiableBagTest.testUnsupportedRemove":76,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsKey":164,"org.apache.commons.collections4.map.LRUMapTest.testMapContainsValue":216,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemoveAll":78,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionIterator":125,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIsEmpty":142,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator_Key":175,"org.apache.commons.collections4.map.LRUMapTest.testObjectHashCodeEqualsContract":222,"org.apache.commons.collections4.map.HashedMapTest.testObjectHashCodeEqualsContract":250,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionContainsAll":275,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionRemove":123,"org.apache.commons.collections4.bag.PredicatedSortedBagTest.testCollectionRemove":80,"org.apache.commons.collections4.map.Flat3MapTest.testMapContainsKey":194,"org.apache.commons.collections4.iterators.FilterIteratorTest.testRemove":75,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionRemove":77,"org.apache.commons.collections4.map.MultiKeyMapTest.testObjectHashCodeEqualsSelfHashCode":187,"org.apache.commons.collections4.map.HashedMapTest.testSimpleSerialization":252,"org.apache.commons.collections4.bag.SynchronizedBagTest.testCollectionIterator":143,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEqualsHashBag":57,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContains":131,"org.apache.commons.collections4.IteratorUtilsTest.testEmptyOrderedMapIterator":153,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testListIteratorSet":26,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIteratorFailDoubleRemove":52,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testMapContainsValue":165,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionAddAll":102,"org.apache.commons.collections4.map.Flat3MapTest.testMapSize":192,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes3":11,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIndexedArray":13,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionRetainAll":134,"org.apache.commons.collections4.iterators.FilterListIteratorTest.testNestedSixes2":10,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionRetainAll":264,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray2":117,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsValue":230,"org.apache.commons.collections4.map.HashedMapTest.testMapHashCode":247,"org.apache.commons.collections4.set.MapBackedSet2Test.testSimpleSerialization":270,"org.apache.commons.collections4.set.MapBackedSet2Test.testCollectionIsEmpty":262,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionToArray2":127,"org.apache.commons.collections4.iterators.IteratorChainTest.testEmptyChain":292,"org.apache.commons.collections4.map.CaseInsensitiveMapTest.testObjectHashCodeEqualsSelfHashCode":172,"org.apache.commons.collections4.map.MultiValueMapTest.testIterator":298,"org.apache.commons.collections4.bag.TreeBagTest.testCollectionRemove":86,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping0":40,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagRetainAll":48,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping1":302,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testFullIterator":19,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping2":303,"org.apache.commons.collections4.iterators.LoopingIteratorTest.testLooping3":304,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagIterator":49,"org.apache.commons.collections4.map.MultiKeyMapTest.testSerializeDeserializeThenCompare":189,"org.apache.commons.collections4.map.HashedMapTest.testMapClear":242,"org.apache.commons.collections4.map.LRUMapTest.testObjectHashCodeEqualsSelfHashCode":223,"org.apache.commons.collections4.collection.CompositeCollectionTest.testCollectionIsEmpty":158,"org.apache.commons.collections4.list.SetUniqueListTest.testListAddByIndex":107,"org.apache.commons.collections4.bag.SynchronizedBagTest.testBagEquals":56,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testIterator":14,"org.apache.commons.collections4.iterators.LazyIteratorChainTest.testRemove":300,"org.apache.commons.collections4.list.SetUniqueListTest.testCollectionToArray":124,"org.apache.commons.collections4.bag.CollectionBagTest.testCollectionRemove":91,"org.apache.commons.collections4.map.LinkedMapTest.testMapContainsKey":229,"org.apache.commons.collections4.collection.SynchronizedCollectionTest.testCollectionContainsAll":126,"org.apache.commons.collections4.map.MultiKeyMapTest.testMapEquals":181,"org.apache.commons.collections4.set.MapBackedSetTest.testCollectionRemoveAll":279,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testIterator":17,"org.apache.commons.collections4.iterators.ArrayIteratorTest.testEmptyIterator":18,"org.apache.commons.collections4.map.LinkedMapTest.testMapSize":227,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testIterator":27,"org.apache.commons.collections4.map.LRUMapTest.testMapRemove":221,"org.apache.commons.collections4.iterators.ArrayListIteratorTest.testEmptyIterator":28,"org.apache.commons.collections4.iterators.ArrayIterator2Test.testEmptyIterator":15,"org.apache.commons.collections4.set.MapBackedSet2Test.testSerializeDeserializeThenCompare":266,"org.apache.commons.collections4.map.LRUMapTest.testMapToString":220,"org.apache.commons.collections4.set.MapBackedSet2Test.testSetHashCode":255}}]

[{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:785","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    if (int == 0) {\n        java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n        if (boolean) {\n            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n            org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n            java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n        } \n        int += int;\n        final int int = int;\n        java.lang.String java.lang.String = java.lang.String;\n        java.lang.String java.lang.String = null;\n        if (org.apache.commons.lang3.text.StrMatcher != null) {\n            final char[] char[] = java.lang.String.toCharArray();\n            int int = 0;\n            for (int int = 0 ; int < (char[].int) ; int++) {\n                if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                    break;\n                } \n                if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                    java.lang.String = java.lang.String.substring(0, int);\n                    java.lang.String = java.lang.String.substring((int + int));\n                    break;\n                } \n            }\n        } \n        if (java.util.List<java.lang.String> == null) {\n            java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n            java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n        } \n        org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n        java.util.List<java.lang.String>.add(java.lang.String);\n        java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n        if (java.lang.String == null) {\n            java.lang.String = java.lang.String;\n        } \n        if (java.lang.String != null) {\n            final int int = java.lang.String.length();\n            org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n            boolean = true;\n            int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n            int = (int + int) - (int - int);\n            int += int;\n            int += int;\n            int += int;\n            char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        } \n        java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n        break;\n    } else {\n        int--;\n        int += int;\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:789","sourceCode":"if (int == 0) {\n    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n    if (boolean) {\n        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n    } \n    int += int;\n    final int int = int;\n    java.lang.String java.lang.String = java.lang.String;\n    java.lang.String java.lang.String = null;\n    if (org.apache.commons.lang3.text.StrMatcher != null) {\n        final char[] char[] = java.lang.String.toCharArray();\n        int int = 0;\n        for (int int = 0 ; int < (char[].int) ; int++) {\n            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                break;\n            } \n            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                java.lang.String = java.lang.String.substring(0, int);\n                java.lang.String = java.lang.String.substring((int + int));\n                break;\n            } \n        }\n    } \n    if (java.util.List<java.lang.String> == null) {\n        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n    } \n    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n    java.util.List<java.lang.String>.add(java.lang.String);\n    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n    if (java.lang.String == null) {\n        java.lang.String = java.lang.String;\n    } \n    if (java.lang.String != null) {\n        final int int = java.lang.String.length();\n        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n        boolean = true;\n        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n        int = (int + int) - (int - int);\n        int += int;\n        int += int;\n        int += int;\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n    } \n    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n    break;\n} else {\n    int--;\n    int += int;\n}","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"nestedVarCount":"lengthChange","valueDelimMatcher":"pfxMatcher","startPos":"bufEnd","substitutionInVariablesEnabled":"substitutionInVariablesEnabled","endMatchLen":"startMatchLen","pfxMatcher":"valueDelimMatcher","pos":"length","startMatchLen":"startMatchLen","buffer":"chars","altered":"altered","priorVariables":"priorVariables","bufEnd":"endMatchLen","lengthChange":"length","length":"endMatchLen","chars":"chars","offset":"startMatchLen","this":"this","buf":"buf"}},{"transplant":{"position":"org.apache.commons.lang3.text.WordUtils:368","sourceCode":"if (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.isEmpty(java.lang.String)) {\n    return java.lang.String;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:5123","sourceCode":"if ((int == 1) && (int <= (org.apache.commons.lang3.StringUtils.int))) {\n    return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.repeat(java.lang.String.charAt(0), int);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"str":"str","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:798","sourceCode":"char[][int++] = char","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:212","sourceCode":"char[][int] = java.lang.Character.java.lang.Character.toTitleCase(char)","type":"CtAssignmentImpl"},"failures":[21,22,23,24],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"buffer":"buffer","ch":"ch","size":"i"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:166","sourceCode":"double = org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.max(double[][int], double)","type":"CtAssignmentImpl"},"failures":[25],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:2476","sourceCode":"if (((java.lang.String == null) || (java.lang.String == null)) || (java.lang.String == null)) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Range:459","sourceCode":"return java.lang.String","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"open":"result","str":"result","close":"result"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:789","sourceCode":"if (int == 0) {\n    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n    if (boolean) {\n        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n    } \n    int += int;\n    final int int = int;\n    java.lang.String java.lang.String = java.lang.String;\n    java.lang.String java.lang.String = null;\n    if (org.apache.commons.lang3.text.StrMatcher != null) {\n        final char[] char[] = java.lang.String.toCharArray();\n        int int = 0;\n        for (int int = 0 ; int < (char[].int) ; int++) {\n            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                break;\n            } \n            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                java.lang.String = java.lang.String.substring(0, int);\n                java.lang.String = java.lang.String.substring((int + int));\n                break;\n            } \n        }\n    } \n    if (java.util.List<java.lang.String> == null) {\n        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n    } \n    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n    java.util.List<java.lang.String>.add(java.lang.String);\n    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n    if (java.lang.String == null) {\n        java.lang.String = java.lang.String;\n    } \n    if (java.lang.String != null) {\n        final int int = java.lang.String.length();\n        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n        boolean = true;\n        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n        int = (int + int) - (int - int);\n        int += int;\n        int += int;\n        int += int;\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n    } \n    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n    break;\n} else {\n    int--;\n    int += int;\n}","type":"CtIfImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:377","sourceCode":"return java.lang.Short.java.lang.Short.parseShort(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:352","sourceCode":"return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, ((short)(0)))","type":"CtReturnImpl"},"failures":[26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:2288","sourceCode":"if (java.lang.String.isEmpty()) {\n    return java.lang.String;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:89","sourceCode":"if (java.lang.String == null) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[27,28],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"org.apache.commons.lang3.StringUtils.EMPTY":"str","separator":"str"}},{"position":"org.apache.commons.lang3.Conversion:1160","failures":[29],"status":-1,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:940","sourceCode":"if ((((int - 1) * 4) + int) >= 32) {\n    throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 32\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:118","sourceCode":"java.io.Writer.write((\"\\\\u\" + org.apache.commons.lang3.text.translate.CharSequenceTranslator.(org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(int))))","type":"CtInvocationImpl"},"failures":[30,31,32],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"nHex":"codepoint","dstPos":"codepoint"}},{"transplant":{"position":"org.apache.commons.lang3.Range:235","sourceCode":"return (java.util.Comparator<T>.compare(T, T)) < 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Range:222","sourceCode":"return ((java.util.Comparator<T>.compare(T, T)) > (-1)) && ((java.util.Comparator<T>.compare(T, T)) < 1)","type":"CtReturnImpl"},"failures":[33,34,35,36,37,38,39,40],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.LocaleUtils:140","sourceCode":"throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + java.lang.String))","type":"CtThrowImpl"},"failures":[41],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:293","sourceCode":"if (org.apache.commons.lang3.concurrent.TimedSemaphore.isShutdown()) {\n    throw new java.lang.IllegalStateException(\"TimedSemaphore is shut down!\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:255","sourceCode":"if (!(boolean)) {\n    if (boolean) {\n        org.apache.commons.lang3.concurrent.TimedSemaphore.getExecutorService().shutdownNow();\n    } \n    if ((java.util.concurrent.ScheduledFuture<?>) != null) {\n        java.util.concurrent.ScheduledFuture<?>.cancel(false);\n    } \n    boolean = true;\n} ","type":"CtIfImpl"},"failures":[42,43,44,45,46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:85","sourceCode":"return org.apache.commons.lang3.reflect.ConstructorUtils.org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(java.lang.Class<T>, java.lang.Object[], java.lang.Class<?>[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:145","sourceCode":"return org.apache.commons.lang3.reflect.ConstructorUtils.org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class<T>, java.lang.Object[], java.lang.Class<?>[])","type":"CtReturnImpl"},"failures":[47],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:966","sourceCode":"throw new java.lang.IllegalArgumentException(\"Variable prefix matcher must not be null!\")","type":"CtThrowImpl"},"failures":[48],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.BooleanUtils:1042","sourceCode":"throw new java.lang.IllegalArgumentException(\"Array is empty\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.StopWatch:285","sourceCode":"throw new java.lang.IllegalStateException(\"Stopwatch must be running to suspend. \")","type":"CtThrowImpl"},"failures":[49],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:485","sourceCode":"if ((java.lang.reflect.Method.getName().equals(java.lang.String)) && org.apache.commons.lang3.ClassUtils.(org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes(), true))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && ((java.lang.reflect.Method == null) || (org.apache.commons.lang3.reflect.MemberUtils.(org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(java.lang.reflect.Method.getParameterTypes(), java.lang.reflect.Method.getParameterTypes(), java.lang.Class<?>[])) < 0))) {\n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[50,51,52,53,54,55,56,57,58,59],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:885","sourceCode":"org.apache.commons.lang3.text.StrBuilder.append(java.util.List<java.lang.String>.remove(0))","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:280","sourceCode":"int = (int * int) + int","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:1172","sourceCode":"int = java.util.Calendar.int","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"a1":"endCutoff","numer0":"endCutoff","numer1":"endCutoff","numer2":"endCutoff"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:1060","sourceCode":"if ((char[]) == null) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[60,61],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:501","sourceCode":"java.lang.String = java.lang.String.substring((int + 1), int)","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:814","sourceCode":"java.lang.String = java.lang.String.substring(0, int)","type":"CtAssignmentImpl"},"failures":[62,4,6,9,12,13,14,15,63],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"dec":"varName","str":"varNameExpr","expPos":"i","decPos":"i"}},{"transplant":{"position":"org.apache.commons.lang3.CharacterIterator:315","sourceCode":"char = ((char)(char + 1))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:72","sourceCode":"char = char","type":"CtAssignmentImpl"},"failures":[64,65,66,67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"current":"end"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:527","sourceCode":"switch (char) {\n    case 'l' :\n    case 'L' :\n        if (((java.lang.String == null) && (java.lang.String == null)) && ((((java.lang.String.charAt(0)) == '-') && org.apache.commons.lang3.math.NumberUtils.(org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String.substring(1)))) || org.apache.commons.lang3.math.NumberUtils.(org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String)))) {\n            try {\n                return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String);\n            } catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n            }\n            return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String);\n        } \n        throw new java.lang.NumberFormatException((java.lang.String + \" is not a valid number.\"));\n    case 'f' :\n    case 'F' :\n        try {\n            final java.lang.Float java.lang.Float = org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String);\n            if (!((java.lang.Float.isInfinite()) || (((java.lang.Float.floatValue()) == 0.0F) && (!boolean)))) {\n                return java.lang.Float;\n            } \n        } catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n        }\n    case 'd' :\n    case 'D' :\n        try {\n            final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String);\n            if (!((java.lang.Double.isInfinite()) || (((java.lang.Double.floatValue()) == 0.0) && (!boolean)))) {\n                return java.lang.Double;\n            } \n        } catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n        }\n        try {\n            return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String);\n        } catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n        }\n    default :\n        throw new java.lang.NumberFormatException((java.lang.String + \" is not a valid number.\"));\n}","type":"CtSwitchImpl"},"failures":[68,69,70],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:155","sourceCode":"if ((java.util.Date == null) || (java.util.Date == null)) {\n    throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:700","sourceCode":"if (java.util.Date == null) {\n    throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"date2":"date","date1":"date"}},{"position":"org.apache.commons.lang3.Conversion:1088","failures":[71],"status":-1,"binaryOperator":"(int * 1) + int","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:577","sourceCode":"return '0'","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:413","sourceCode":"if (boolean[][(int + 3)]) {\n    if (boolean[][(int + 2)]) {\n        if (boolean[][(int + 1)]) {\n            if (boolean[][int]) {\n                return 'f';\n            } else {\n                return '7';\n            }\n        } else {\n            if (boolean[][int]) {\n                return 'b';\n            } else {\n                return '3';\n            }\n        }\n    } else {\n        if (boolean[][(int + 1)]) {\n            if (boolean[][int]) {\n                return 'd';\n            } else {\n                return '5';\n            }\n        } else {\n            if (boolean[][int]) {\n                return '9';\n            } else {\n                return '1';\n            }\n        }\n    }\n} else {\n    if (boolean[][(int + 2)]) {\n        if (boolean[][(int + 1)]) {\n            if (boolean[][int]) {\n                return 'e';\n            } else {\n                return '6';\n            }\n        } else {\n            if (boolean[][int]) {\n                return 'a';\n            } else {\n                return '2';\n            }\n        }\n    } else {\n        if (boolean[][(int + 1)]) {\n            if (boolean[][int]) {\n                return 'c';\n            } else {\n                return '4';\n            }\n        } else {\n            if (boolean[][int]) {\n                return '8';\n            } else {\n                return '0';\n            }\n        }\n    }\n}","type":"CtIfImpl"},"failures":[72,73],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.Conversion:1405","failures":[74],"status":-1,"binaryOperator":"(int + int)","name":"math","type":"mutation"},{"failureDictionary":{"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeWithDelimiters_String":21,"org.apache.commons.lang3.CharSetTest.testContains_Char":64,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":61,"org.apache.commons.lang3.ConversionTest.testBinaryToByte":29,"org.apache.commons.lang3.RangeTest.testRangeOfChars":35,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":7,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":50,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":20,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":2,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":16,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":27,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":1,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":59,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":12,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetPrefix":48,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorNoTask":46,"org.apache.commons.lang3.RangeTest.testContainsRange":38,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang708":32,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":30,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part":41,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":53,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":25,"org.apache.commons.lang3.RangeTest.testIntersectionWithNonOverlapping":40,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":54,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":18,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Reversed":67,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":51,"org.apache.commons.lang3.ConversionTest.testLongToHex":74,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalize_String":22,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":31,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testPassAfterShutdown":42,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":17,"org.apache.commons.lang3.reflect.MethodUtilsTest.testNullArgument":52,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":28,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":8,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":0,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorTask":44,"org.apache.commons.lang3.RangeTest.testIsWithCompare":33,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":70,"org.apache.commons.lang3.RangeTest.testIntersectionWith":36,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":19,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String":23,"org.apache.commons.lang3.RangeTest.testContains":39,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownOwnExecutor":43,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":69,"org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Reversed":66,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":11,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits":72,"org.apache.commons.lang3.time.StopWatchTest.testBadStates":49,"org.apache.commons.lang3.RangeTest.testBetweenWithCompare":37,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":63,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor":47,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":65,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":4,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":55,"org.apache.commons.lang3.math.NumberUtilsTest.testToShortString":26,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":5,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":56,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":15,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":14,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":6,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownMultipleTimes":45,"org.apache.commons.lang3.RangeTest.testIsOverlappedBy":34,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":10,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":62,"org.apache.commons.lang3.text.StrTokenizerTest.testGetContent":60,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String":24,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":68,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":57,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":58,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":13,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":3,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":9,"org.apache.commons.lang3.ConversionTest.testBinaryToInt":71,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_4bits_2args":73}}]

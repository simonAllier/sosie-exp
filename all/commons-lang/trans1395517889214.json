[{"transplant":{"position":"org.apache.commons.lang3.CharSet:250","sourceCode":"if ((java.lang.Object instanceof org.apache.commons.lang3.CharSet) == false) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:212","sourceCode":"if ((java.lang.Object instanceof org.apache.commons.lang3.CharRange) == false) {\n    return false;\n} ","type":"CtIfImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"obj":"obj"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:105","sourceCode":"return 8","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.TimedSemaphore:348","sourceCode":"return org.apache.commons.lang3.concurrent.TimedSemaphore.(getLimit()) - org.apache.commons.lang3.concurrent.TimedSemaphore.(getAcquireCount())","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.StopWatch:181","sourceCode":"if ((this.org.apache.commons.lang3.time.StopWatch.State) == (org.apache.commons.lang3.time.StopWatch.State.org.apache.commons.lang3.time.StopWatch.State)) {\n    throw new java.lang.IllegalStateException(\"Stopwatch must be reset before being restarted. \");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.CharRange:243","sourceCode":"java.lang.StringBuilder.append('-')","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:491","sourceCode":"return org.apache.commons.lang3.text.StrBuilder.toString()","type":"CtReturnImpl"},"failures":[11,12,13,14,15,16,17,18,19,20,21],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:1614","sourceCode":"byte[][int] = byte[][int]","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1299","sourceCode":"byte[][(int + int)] = ((byte)(255 & (long >> int)))","type":"CtAssignmentImpl"},"failures":[22,23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"j":"shift","array":"dst","i":"dstPos"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:867","sourceCode":"if (boolean) {\n    return boolean ? 1 : 0;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:226","sourceCode":"return ((83 + (char)) + (7 * (char))) + (boolean ? 1 : 0)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"altered":"negated","top":"negated"}},{"position":"org.apache.commons.lang3.time.DateUtils:386","failures":[],"status":0,"binaryOperator":"(java.util.Date != null)","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.time.TimeZoneNumberRule:1208","sourceCode":"java.lang.StringBuffer.append(':')","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:619","sourceCode":"java.lang.StringBuffer.append(java.util.Map<?, ?>)","type":"CtInvocationImpl"},"failures":[24,25,26,27,28,29,30,31],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer"}},{"position":"org.apache.commons.lang3.RandomStringUtils:282","failures":[],"status":0,"binaryOperator":"(char >= 56192)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:180","sourceCode":"throw new java.lang.IllegalArgumentException(\"The date must not be null\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:177","sourceCode":"throw new java.lang.ArithmeticException(\"The denominator must not be negative\")","type":"CtThrowImpl"},"failures":[32],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:6069","sourceCode":"int = int - int","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:738","sourceCode":"int = 16","type":"CtAssignmentImpl"},"failures":[33,34],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"count":"radix","set":"radix","srcIndex":"radix"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.ObjectUtils:356","sourceCode":"if (java.lang.Object == null) {\n    throw new java.lang.NullPointerException(\"Cannot get the toString of a null identity\");\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:444","sourceCode":"if (boolean[][(int + 2)]) {\n    if (boolean[][(int + 1)]) {\n        if (boolean[][int]) {\n            return 'e';\n        } else {\n            return '6';\n        }\n    } else {\n        if (boolean[][int]) {\n            return 'a';\n        } else {\n            return '2';\n        }\n    }\n} else {\n    if (boolean[][(int + 1)]) {\n        if (boolean[][int]) {\n            return 'c';\n        } else {\n            return '4';\n        }\n    } else {\n        if (boolean[][int]) {\n            return '8';\n        } else {\n            return '0';\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:466","sourceCode":"if (boolean[][int]) {\n    return '8';\n} else {\n    return '0';\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilderReader:2883","sourceCode":"int += int","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:96","sourceCode":"int = 1","type":"CtAssignmentImpl"},"failures":[35,36],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"len":"wrapLength","pos":"wrapLength"}},{"position":"org.apache.commons.lang3.math.NumberUtils:495","failures":[37,33,38,39,40],"status":-1,"binaryOperator":"int > (-1)","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:694","sourceCode":"final long long = ((long)(int)) - ((long)(int))","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1053","sourceCode":"final long long = (boolean[][(int + int)] ? 1L : 0) << int","type":"CtLocalVariableImpl"},"failures":[41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"y":"shift","x":"srcPos"}},{"position":"org.apache.commons.lang3.text.translate.CharSequenceTranslator:82","inlineConstant":"int int = 0","failures":[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.BooleanUtils:326","sourceCode":"return java.lang.Boolean.java.lang.Boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:161","sourceCode":"return java.lang.Boolean","type":"CtReturnImpl"},"failures":[82,83,84,85,86],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.SystemUtils:927","sourceCode":"org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(\"1.7\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.SystemUtils:1152","sourceCode":"org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.java.lang.String) + \" 9\"), \"4.0\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1118","sourceCode":"java.lang.StringBuffer.append(java.lang.String)","type":"CtInvocationImpl"},"failures":[87,88,89],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:4086","sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(256)","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:183","sourceCode":"if (org.apache.commons.lang3.CharRange == null) {\n    throw new java.lang.IllegalArgumentException(\"The Range must not be null\");\n} ","type":"CtIfImpl"},"failures":[90],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:1109","sourceCode":"return \"StrTokenizer[not tokenized yet]\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:200","sourceCode":"return org.apache.commons.lang3.builder.ReflectionToStringBuilder.org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(T, org.apache.commons.lang3.builder.ToStringStyle, boolean, false, java.lang.Class<? super T>)","type":"CtReturnImpl"},"failures":[91],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:1576","sourceCode":"char[][int++] = 'r'","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.RandomStringUtils:271","sourceCode":"char[][int] = ((char)(55296 + (java.util.Random.nextInt(128))))","type":"CtAssignmentImpl"},"failures":[92],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","index":"count"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:756","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    if ((int > int) && ((char[][(int - 1)]) == char)) {\n        org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        int--;\n        boolean = true;\n        int--;\n    } else {\n        final int int = int;\n        int += int;\n        int int = 0;\n        int int = 0;\n        while (int < int) {\n            if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n                int++;\n                int += int;\n                continue;\n            } \n            int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n            if (int == 0) {\n                int++;\n            } else {\n                if (int == 0) {\n                    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                    if (boolean) {\n                        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                    } \n                    int += int;\n                    final int int = int;\n                    java.lang.String java.lang.String = java.lang.String;\n                    java.lang.String java.lang.String = null;\n                    if (org.apache.commons.lang3.text.StrMatcher != null) {\n                        final char[] char[] = java.lang.String.toCharArray();\n                        int int = 0;\n                        for (int int = 0 ; int < (char[].int) ; int++) {\n                            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                                break;\n                            } \n                            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                                java.lang.String = java.lang.String.substring(0, int);\n                                java.lang.String = java.lang.String.substring((int + int));\n                                break;\n                            } \n                        }\n                    } \n                    if (java.util.List<java.lang.String> == null) {\n                        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                    } \n                    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                    java.util.List<java.lang.String>.add(java.lang.String);\n                    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                    if (java.lang.String == null) {\n                        java.lang.String = java.lang.String;\n                    } \n                    if (java.lang.String != null) {\n                        final int int = java.lang.String.length();\n                        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                        boolean = true;\n                        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                        int = (int + int) - (int - int);\n                        int += int;\n                        int += int;\n                        int += int;\n                        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                    } \n                    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                    break;\n                } else {\n                    int--;\n                    int += int;\n                }\n            }\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:760","sourceCode":"if ((int > int) && ((char[][(int - 1)]) == char)) {\n    org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n    char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n    int--;\n    boolean = true;\n    int--;\n} else {\n    final int int = int;\n    int += int;\n    int int = 0;\n    int int = 0;\n    while (int < int) {\n        if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n            int++;\n            int += int;\n            continue;\n        } \n        int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n        if (int == 0) {\n            int++;\n        } else {\n            if (int == 0) {\n                java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                if (boolean) {\n                    final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                    org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                    java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                } \n                int += int;\n                final int int = int;\n                java.lang.String java.lang.String = java.lang.String;\n                java.lang.String java.lang.String = null;\n                if (org.apache.commons.lang3.text.StrMatcher != null) {\n                    final char[] char[] = java.lang.String.toCharArray();\n                    int int = 0;\n                    for (int int = 0 ; int < (char[].int) ; int++) {\n                        if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                            break;\n                        } \n                        if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                            java.lang.String = java.lang.String.substring(0, int);\n                            java.lang.String = java.lang.String.substring((int + int));\n                            break;\n                        } \n                    }\n                } \n                if (java.util.List<java.lang.String> == null) {\n                    java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                    java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                } \n                org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                java.util.List<java.lang.String>.add(java.lang.String);\n                java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                if (java.lang.String == null) {\n                    java.lang.String = java.lang.String;\n                } \n                if (java.lang.String != null) {\n                    final int int = java.lang.String.length();\n                    org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                    boolean = true;\n                    int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                    int = (int + int) - (int - int);\n                    int += int;\n                    int += int;\n                    int += int;\n                    char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                } \n                java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                break;\n            } else {\n                int--;\n                int += int;\n            }\n        }\n    }\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:377","sourceCode":"java.text.ParsePosition.setIndex(0)","type":"CtInvocationImpl"},"failures":[93],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:113","sourceCode":"return 10","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.ObjectUtils:500","sourceCode":"return boolean ? -1 : 1","type":"CtReturnImpl"},"failures":[94,95],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.apache.commons.lang3.StringEscapeUtilsTest.testLang313":67,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween":49,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity":79,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang911":69,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":66,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml":62,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":29,"org.apache.commons.lang3.CharSetTest.testStatics":7,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":91,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":17,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson":64,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testBuilderReset":84,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":58,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858":57,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":13,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":47,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml":81,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testSupplementary":50,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":20,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":35,"org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUuuuu":46,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash":0,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":12,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":18,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":27,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter":77,"org.apache.commons.lang3.CharRangeTest.testEquals_Object":9,"org.apache.commons.lang3.CharRangeTest.testContainsNullArg":90,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testSupplementaryUnescaping":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":25,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testOutOfBounds":54,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava":59,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript":70,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":33,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate":6,"org.apache.commons.lang3.CharSetTest.testEquals_Object":2,"org.apache.commons.lang3.CharSetTest.testSerialization":1,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBetween":44,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":89,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testNewThreadDaemonFalse":83,"org.apache.commons.lang3.ObjectUtilsTest.testCompare":95,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava":63,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash":65,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":87,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_4":40,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4":61,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":11,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":26,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testBelow":43,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":30,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":39,"org.apache.commons.lang3.CharRangeTest.testSerialization":8,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":21,"org.apache.commons.lang3.text.translate.UnicodeUnescaperTest.testUPlus":45,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":38,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode":73,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString":76,"org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs":56,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int_int":32,"org.apache.commons.lang3.RandomStringUtilsTest.testLang100":92,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testBuildDefaults":86,"org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs":55,"org.apache.commons.lang3.ObjectUtilsTest.testMin":94,"org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand":60,"org.apache.commons.lang3.ConversionTest.testBinaryToLong":41,"org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations":4,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":28,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":15,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger":34,"org.apache.commons.lang3.ConversionTest.testLongToByteArray":23,"org.apache.commons.lang3.ConversionTest.testUuidToByteArray":22,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testBuilderResetAfterBuild":85,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":24,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testNewThreadNoDaemonFlag":82,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana":80,"org.apache.commons.lang3.StringEscapeUtilsTest.testLang720":68,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml":74,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":19,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":88,"org.apache.commons.lang3.text.translate.UnicodeEscaperTest.testAbove":42,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAvailablePermits":10,"org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters":75,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":51,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter":72,"org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.testUnfinishedEntity":53,"org.apache.commons.lang3.time.DateUtilsTest.testParseDate":93,"org.apache.commons.lang3.CharSetTest.testConstructor_String_combo":3,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":37,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":14,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions":78,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString":71,"org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated":5}}]

[{"failures":[],"variableMapping":{"found":"rhsClass","annotationType":"testClass"},"name":"replace","transplant":{"sourceCode":"java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<? extends java.lang.annotation.Annotation>","position":"org.apache.commons.lang3.AnnotationUtils:79","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>","position":"org.apache.commons.lang3.builder.EqualsBuilder:343","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if (int == 0) {\n    return int;\n} else if (int == 0) {\n    return int;\n} ","position":"org.apache.commons.lang3.StringUtils:6766","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int >= 0 ; int--) {\n    if ((java.lang.Object[][int]) == null) {\n        return int;\n    } \n}","position":"org.apache.commons.lang3.ArrayUtils:1963","type":"CtForImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.Object java.lang.Object","position":"org.apache.commons.lang3.ObjectUtils:610","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.String","position":"org.apache.commons.lang3.StringUtils:672","type":"CtReturnImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder((int * 16))","position":"org.apache.commons.lang3.StringUtils:4005","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if ((java.lang.Integer[].int) == 0) {\n    return org.apache.commons.lang3.ArrayUtils.int[];\n} ","position":"org.apache.commons.lang3.ArrayUtils:3118","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, 0)","position":"org.apache.commons.lang3.text.StrBuilder:1743","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int = org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.indexOf(long[], java.lang.Long.longValue(), int)","position":"org.apache.commons.lang3.ArrayUtils:5730","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(java.lang.reflect.Type)) {\n    if (java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?>) {\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.get(java.lang.reflect.Type));\n    } \n    if (java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType) {\n        final java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type));\n        final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n        if ((java.lang.reflect.ParameterizedType.getOwnerType()) == null) {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>;\n        } else {\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.putAll(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType));\n        }\n        final java.lang.reflect.Type[] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType.getActualTypeArguments();\n        for (int int = 0 ; int < (java.lang.reflect.Type[].int) ; int++) {\n            final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Type[][int]);\n            if (java.lang.reflect.Type != null) {\n                java.lang.reflect.Type[][int] = java.lang.reflect.Type;\n            } \n        }\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.parameterizeWithOwner(java.lang.reflect.ParameterizedType.getOwnerType(), ((java.lang.Class<?>)(java.lang.reflect.ParameterizedType.getRawType())), java.lang.reflect.Type[]);\n    } \n    if (java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) {\n        final java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(java.lang.reflect.Type));\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.wildcardType().withUpperBounds(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.WildcardType.getUpperBounds())).withLowerBounds(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollBounds(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.WildcardType.getLowerBounds())).build();\n    } \n} ","position":"org.apache.commons.lang3.reflect.TypeUtils:1367","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return this","position":"org.apache.commons.lang3.text.StrBuilder:1166","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String.java.lang.String.valueOf(float))","position":"org.apache.commons.lang3.text.StrBuilder:1646","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"array":"subarray"},"name":"add","transplant":{"sourceCode":"return int[].clone()","position":"org.apache.commons.lang3.ArrayUtils:358","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int[]","position":"org.apache.commons.lang3.ArrayUtils:971","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"comparison":"java.util.Calendar.MONDAY"},"name":"add","transplant":{"sourceCode":"this.java.util.Calendar.int = +1","position":"org.apache.commons.lang3.builder.CompareToBuilder:594","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = java.util.Calendar.int","position":"org.apache.commons.lang3.time.DateUtils:1190","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"if ((int[] == null) || (int[] == null)) {\n    org.apache.commons.lang3.builder.EqualsBuilder.setEquals(false);\n    return this;\n} ","position":"org.apache.commons.lang3.builder.EqualsBuilder:708","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((int[].int) != (int[].int)) {\n    org.apache.commons.lang3.builder.EqualsBuilder.setEquals(false);\n    return this;\n} ","position":"org.apache.commons.lang3.builder.EqualsBuilder:712","type":"CtIfImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return new boolean[]{ true , true , true , true }","position":"org.apache.commons.lang3.Conversion:259","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuffer.append(((char)((int / 10) + '0')))","position":"org.apache.commons.lang3.time.FastDatePrinter:855","type":"CtInvocationImpl"},"status":-2},{"failures":[0],"variableMapping":{"seconds":"idx"},"name":"add","transplant":{"sourceCode":"int -= 1","position":"org.apache.commons.lang3.time.DurationFormatUtils:300","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int += java.lang.CharSequence.length()","position":"org.apache.commons.lang3.StringUtils:5819","type":"CtOperatorAssignmentImpl"},"status":-1},{"failures":[1,2],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (byte[] == null) {\n    return org.apache.commons.lang3.ArrayUtils.int;\n} ","position":"org.apache.commons.lang3.ArrayUtils:2439","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    return org.apache.commons.lang3.ArrayUtils.int;\n} else if (int >= (int[].int)) {\n    int = (int[].int) - 1;\n} ","position":"org.apache.commons.lang3.ArrayUtils:2171","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"int int = org.apache.commons.lang3.ObjectUtils.org.apache.commons.lang3.ObjectUtils.hashCode(java.lang.Object)","position":"org.apache.commons.lang3.ObjectUtils:242","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final char[] char[] = new char[java.lang.Character[].int]","position":"org.apache.commons.lang3.ArrayUtils:2963","type":"CtLocalVariableImpl"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"binaryOperator":"(int + int)","name":"math","position":"org.apache.commons.lang3.text.StrBuilder:659","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return true","position":"org.apache.commons.lang3.StringUtils:1633","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 1 ; int < (short[].int) ; int++) {\n    if ((short[][int]) > short) {\n        short = short[][int];\n    } \n}","position":"org.apache.commons.lang3.math.NumberUtils:988","type":"CtForImpl"},"status":-2},{"failures":[18],"variableMapping":{"denom2":"i","numer2":"i","fraction":"min"},"name":"add","transplant":{"sourceCode":"double = ((double)(int)) / ((double)(int))","position":"org.apache.commons.lang3.math.Fraction:282","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"double = org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.min(double[][int], double)","position":"org.apache.commons.lang3.math.IEEE754rUtils:48","type":"CtAssignmentImpl"},"status":-1},{"failures":[19],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"float float","position":"org.apache.commons.lang3.ArrayUtils:1719","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = (int) * (int)","position":"org.apache.commons.lang3.builder.HashCodeBuilder:895","type":"CtAssignmentImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.apache.commons.lang3.builder.HashCodeBuilder:731","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String = new java.lang.StringBuilder(32).append(org.apache.commons.lang3.math.Fraction.getProperWhole()).append(' ').append(int).append('/').append(org.apache.commons.lang3.math.Fraction.getDenominator()).toString()","position":"org.apache.commons.lang3.math.Fraction:947","type":"CtAssignmentImpl"},"status":-2},{"failures":[20,21],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return -1","position":"org.apache.commons.lang3.math.Fraction:897","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = int ; int < (java.lang.Throwable[].int) ; int++) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Throwable[][int].getClass())) {\n        return int;\n    } \n}","position":"org.apache.commons.lang3.exception.ExceptionUtils:398","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"if (java.lang.reflect.Type instanceof java.lang.reflect.GenericArrayType) {\n    return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.equals(((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type)), java.lang.reflect.Type);\n} ","position":"org.apache.commons.lang3.reflect.TypeUtils:1578","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.apache.commons.lang3.StringUtils:5815","type":"CtLocalVariableImpl"},"status":-2},{"failures":[22],"variableMapping":{"sb":"buf"},"name":"add","transplant":{"sourceCode":"java.lang.StringBuilder.append(\"/\")","position":"org.apache.commons.lang3.ClassPathUtils:134","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(char)","position":"org.apache.commons.lang3.StringUtils:3868","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{"this":"this"},"name":"add","transplant":{"sourceCode":"org.apache.commons.lang3.SystemUtils.getOSMatchesName(\"Solaris\")","position":"org.apache.commons.lang3.SystemUtils:1091","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(\"1.3\")","position":"org.apache.commons.lang3.SystemUtils:885","type":"CtInvocationImpl"},"status":0},{"failures":[23,24],"name":"inlineConstant","inlineConstant":"long long = 0","position":"org.apache.commons.lang3.EnumUtils:145","type":"mutation","status":-1},{"failures":[25],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.ArrayUtils.int","position":"org.apache.commons.lang3.ArrayUtils:2344","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.concurrent.TimedSemaphore.(getLimit()) - org.apache.commons.lang3.concurrent.TimedSemaphore.(getAcquireCount())","position":"org.apache.commons.lang3.concurrent.TimedSemaphore:348","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"int int = 0","position":"org.apache.commons.lang3.Conversion:1436","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> java.util.Set<org.apache.commons.lang3.tuple.Pair<org.apache.commons.lang3.builder.IDKey, org.apache.commons.lang3.builder.IDKey>> = org.apache.commons.lang3.builder.EqualsBuilder.org.apache.commons.lang3.builder.EqualsBuilder.getRegistry()","position":"org.apache.commons.lang3.builder.EqualsBuilder:196","type":"CtLocalVariableImpl"},"status":-2},{"failures":[26],"variableMapping":{"replacementLength":"half","searchLength":"size"},"name":"replace","transplant":{"sourceCode":"if (int != int) {\n    throw new java.lang.IllegalArgumentException((((\"Search and Replace array lengths don\\'t match: \" + int) + \" vs \") + int));\n} ","position":"org.apache.commons.lang3.StringUtils:4705","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0, int int = (int) - 1 ; int < int ; int++ , int--) {\n    final char char = char[][int];\n    char[][int] = char[][int];\n    char[][int] = char;\n}","position":"org.apache.commons.lang3.text.StrBuilder:2024","type":"CtForImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"do {\n    while ((int & 1) == 0) {\n        int /= 2;\n    }\n    if (int > 0) {\n        int = -int;\n    } else {\n        int = int;\n    }\n    int = (int - int) / 2;\n} while (int != 0 )","position":"org.apache.commons.lang3.math.Fraction:607","type":"CtDoImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.String) == null) {\n    if ((int) == 0) {\n        java.lang.String = \"0\";\n    } else if ((int) == (int)) {\n        java.lang.String = \"1\";\n    } else if ((int) == ((-1) * (int))) {\n        java.lang.String = \"-1\";\n    } else if (((int) > 0 ? -(int) : int) < (-(int))) {\n        final int int = org.apache.commons.lang3.math.Fraction.getProperNumerator();\n        if (int == 0) {\n            java.lang.String = java.lang.Integer.java.lang.Integer.toString(org.apache.commons.lang3.math.Fraction.getProperWhole());\n        } else {\n            java.lang.String = new java.lang.StringBuilder(32).append(org.apache.commons.lang3.math.Fraction.getProperWhole()).append(' ').append(int).append('/').append(org.apache.commons.lang3.math.Fraction.getDenominator()).toString();\n        }\n    } else {\n        java.lang.String = new java.lang.StringBuilder(32).append(org.apache.commons.lang3.math.Fraction.getNumerator()).append('/').append(org.apache.commons.lang3.math.Fraction.getDenominator()).toString();\n    }\n} ","position":"org.apache.commons.lang3.math.Fraction:931","type":"CtIfImpl"},"status":-2},{"failures":[27],"variableMapping":{"className":"str"},"name":"add","transplant":{"sourceCode":"while ((java.lang.String.charAt(0)) == '[') {\n    java.lang.String = java.lang.String.substring(1);\n}","position":"org.apache.commons.lang3.ClassUtils:302","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"The string must not be null\");\n} ","position":"org.apache.commons.lang3.math.Fraction:320","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.Class<?> = java.lang.Class<?>.getEnclosingClass()","position":"org.apache.commons.lang3.reflect.ConstructorUtils:295","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[][int]","position":"org.apache.commons.lang3.reflect.TypeUtils:1026","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return false","position":"org.apache.commons.lang3.math.Fraction:849","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return true","position":"org.apache.commons.lang3.text.WordUtils:575","type":"CtReturnImpl"},"status":-2},{"failures":[28],"binaryOperator":"int < (java.lang.reflect.Type[].int)","name":"conditionalBoundary","position":"org.apache.commons.lang3.reflect.TypeUtils:1024","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"java.util.Calendar.add(java.util.Calendar.int, 1)","position":"org.apache.commons.lang3.time.DateUtils:1021","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.reflect.Type[].int) > 0) {\n    java.lang.StringBuilder.append(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.toString(java.lang.reflect.Type[][0]));\n    for (int int = 1 ; int < (java.lang.reflect.Type[].int) ; int++) {\n        java.lang.StringBuilder.append(java.lang.String).append(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.toString(java.lang.reflect.Type[][int]));\n    }\n} ","position":"org.apache.commons.lang3.reflect.TypeUtils:1839","type":"CtIfImpl"},"status":-2},{"failures":[29],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"return true","position":"org.apache.commons.lang3.math.Fraction:846","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.lang3.StringUtils:7398","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (java.lang.Object == null) {\n    int = (int) * (int);\n} else {\n    if (java.lang.Object.getClass().isArray()) {\n        if (java.lang.Object instanceof long[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((long[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof int[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((int[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof short[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((short[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof char[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((char[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof byte[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((byte[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof double[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((double[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof float[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((float[])(java.lang.Object)));\n        } else if (java.lang.Object instanceof boolean[]) {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((boolean[])(java.lang.Object)));\n        } else {\n            org.apache.commons.lang3.builder.HashCodeBuilder.append(((java.lang.Object[])(java.lang.Object)));\n        }\n    } else {\n        int = ((int) * (int)) + (java.lang.Object.hashCode());\n    }\n}","position":"org.apache.commons.lang3.builder.HashCodeBuilder:816","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int","position":"org.apache.commons.lang3.StringUtils:6769","type":"CtReturnImpl"},"status":-2},{"failures":[30,31],"binaryOperator":"(int * 8)","name":"math","position":"org.apache.commons.lang3.Conversion:1298","type":"mutation","status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.io.Writer.write((\"\\\\u\" + org.apache.commons.lang3.text.translate.CharSequenceTranslator.(org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(int))))","position":"org.apache.commons.lang3.text.translate.UnicodeEscaper:118","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return float[]","position":"org.apache.commons.lang3.ArrayUtils:3375","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY":"dst"},"name":"replace","transplant":{"sourceCode":"return byte[]","position":"org.apache.commons.lang3.ArrayUtils:614","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return byte[]","position":"org.apache.commons.lang3.Conversion:1685","type":"CtReturnImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return new java.lang.String(new char[]{ char })","position":"org.apache.commons.lang3.CharUtils:311","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return null","position":"org.apache.commons.lang3.BooleanUtils:634","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"int int = 73 << 8","position":"org.apache.commons.lang3.reflect.TypeUtils:276","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = int","position":"org.apache.commons.lang3.Conversion:839","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.lang3.event.EventUtils.EventBindingInvocationHandler.hasMatchingParametersMethod(java.lang.reflect.Method)) {\n    return org.apache.commons.lang3.reflect.MethodUtils.org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]);\n} else {\n    return org.apache.commons.lang3.reflect.MethodUtils.org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String);\n}","position":"org.apache.commons.lang3.event.EventUtils:112","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Object.getClass().isArray()) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    }\n} else {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    }\n}","position":"org.apache.commons.lang3.builder.ToStringStyle:550","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.CharUtils.(org.apache.commons.lang3.CharUtils.isAsciiAlpha(char)) || org.apache.commons.lang3.CharUtils.(org.apache.commons.lang3.CharUtils.isAsciiNumeric(char))","position":"org.apache.commons.lang3.CharUtils:536","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Math.java.lang.Math.max(double, double)","position":"org.apache.commons.lang3.math.IEEE754rUtils:227","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"this.byte = byte","position":"org.apache.commons.lang3.mutable.MutableByte:97","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int[].int) ; int++) {\n    java.lang.Integer[][int] = java.lang.Integer.java.lang.Integer.valueOf(int[][int]);\n}","position":"org.apache.commons.lang3.ArrayUtils:3144","type":"CtForImpl"},"status":-2},{"failures":[32],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"The array must not contain any null elements\")","position":"org.apache.commons.lang3.BooleanUtils:1019","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.ClassCastException()","position":"org.apache.commons.lang3.builder.CompareToBuilder:283","type":"CtThrowImpl"},"status":-1},{"failures":[],"variableMapping":{"str":"separatorChars","this":"this","separator":"str"},"name":"add","transplant":{"sourceCode":"return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, -1, true)","position":"org.apache.commons.lang3.StringUtils:2753","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, -1, false)","position":"org.apache.commons.lang3.StringUtils:2632","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for (int int = int ; int < (java.lang.Throwable[].int) ; int++) {\n    if (java.lang.Class<?>.isAssignableFrom(java.lang.Throwable[][int].getClass())) {\n        return int;\n    } \n}","position":"org.apache.commons.lang3.exception.ExceptionUtils:398","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.builder.CompareToBuilder.append(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)), java.util.Comparator<?>)","position":"org.apache.commons.lang3.builder.CompareToBuilder:436","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{"size":"size","ch":"ch","buffer":"buffer"},"name":"add","transplant":{"sourceCode":"char[][(int)++] = char","position":"org.apache.commons.lang3.text.StrBuilder:798","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (int int = 0 ; int < (int) ; int++) {\n    if ((char[][int]) == char) {\n        final int int = int;\n        while ((++int) < (int)) {\n            if ((char[][int]) != char) {\n                break;\n            } \n        }\n        final int int = int - int;\n        org.apache.commons.lang3.text.StrBuilder.deleteImpl(int, int, int);\n        int -= int;\n    } \n}","position":"org.apache.commons.lang3.text.StrBuilder:1701","type":"CtForImpl"},"status":0},{"failures":[33],"variableMapping":{"toTypeVarAssigns":"typeVarAssigns","this":"this","fromTypeVarAssigns":"typeVarAssigns","typeVarAssigns":"typeVarAssigns"},"name":"add","transplant":{"sourceCode":"for (final java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> : java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>.keySet()) {\n    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(java.lang.reflect.TypeVariable<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.unrollVariableAssignments(java.lang.reflect.TypeVariable<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    if (((java.lang.reflect.Type != null) && (!(java.lang.reflect.Type.equals(java.lang.reflect.Type)))) && (!((java.lang.reflect.Type instanceof java.lang.reflect.WildcardType) && (org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>))))) {\n        return false;\n    } \n}","position":"org.apache.commons.lang3.reflect.TypeUtils:464","type":"CtForEachImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"for (java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n    java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>);\n    for (final java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[]) {\n        if (!org.apache.commons.lang3.reflect.TypeUtils.(org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>))) {\n            return false;\n        } \n    }\n}","position":"org.apache.commons.lang3.reflect.TypeUtils:628","type":"CtForEachImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.lang.StringBuilder.append(java.lang.String).append(org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.toString(java.lang.reflect.Type[][int]))","position":"org.apache.commons.lang3.reflect.TypeUtils:1842","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, java.lang.Integer.int)","position":"org.apache.commons.lang3.ArrayUtils:2047","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isStatic(java.lang.reflect.Field.getModifiers())) && (!org.apache.commons.lang3.builder.ReflectionToStringBuilder.(isAppendStatics()))) {\n    return false;\n} ","position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:488","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.time.DateUtils.(org.apache.commons.lang3.time.DateUtils.truncatedCompareTo(java.util.Date, java.util.Date, int)) == 0","position":"org.apache.commons.lang3.time.DateUtils:1764","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"break","position":"org.apache.commons.lang3.text.StrBuilder:1727","type":"CtBreakImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 32\")","position":"org.apache.commons.lang3.Conversion:1432","type":"CtThrowImpl"},"status":-2},{"failures":[34],"variableMapping":{"fieldName":"fieldName","this":"this","buffer":"buffer"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)","position":"org.apache.commons.lang3.builder.ToStringStyle:844","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendNullText(java.lang.StringBuffer, java.lang.String)","position":"org.apache.commons.lang3.builder.ToStringStyle:1154","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"java.lang.String = java.lang.String","position":"org.apache.commons.lang3.math.NumberUtils:514","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.String = org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, (int + (int / 2)), java.lang.String)","position":"org.apache.commons.lang3.StringUtils:5561","type":"CtAssignmentImpl"},"status":-2},{"failures":[35],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"long long = 0","position":"org.apache.commons.lang3.time.DateUtils:1692","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final long long = (4294967295L & (int[][(int + int)])) << int","position":"org.apache.commons.lang3.Conversion:696","type":"CtLocalVariableImpl"},"status":-1},{"failures":[36],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"case 'D' :\n    return 11;","position":"org.apache.commons.lang3.Conversion:132","type":"CtCaseImpl"},"status":-1},{"failures":[],"variableMapping":{"change":"radix","varLen":"radix","startPos":"radix","endPos":"radix"},"name":"add","transplant":{"sourceCode":"int = (int + int) - (int - int)","position":"org.apache.commons.lang3.text.StrSubstitutor:855","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = 16","position":"org.apache.commons.lang3.math.NumberUtils:737","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"if (org.apache.commons.lang3.builder.ToStringStyle.isFullDetail(java.lang.Boolean)) {\n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object[]);\n} else {\n    org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object[]);\n}","position":"org.apache.commons.lang3.builder.ToStringStyle:877","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.builder.DiffResult.java.lang.String","position":"org.apache.commons.lang3.builder.DiffResult:182","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"throw new java.lang.IllegalArgumentException(java.lang.String.java.lang.String.format(java.lang.String, java.lang.Object[]))","position":"org.apache.commons.lang3.Validate:925","type":"CtThrowImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (char[] == null) {\n    return null;\n} else if ((char[].int) == 0) {\n    return org.apache.commons.lang3.ArrayUtils.java.lang.Character[];\n} ","position":"org.apache.commons.lang3.ArrayUtils:3002","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"for ( ; (java.text.ParsePosition.getIndex()) < (java.lang.String.length()) ; org.apache.commons.lang3.text.ExtendedMessageFormat.next(java.text.ParsePosition)) {\n    switch (java.lang.String.charAt(java.text.ParsePosition.getIndex())) {\n        case org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n            int++;\n            break;\n        case org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n            int--;\n            if (int == 0) {\n                return java.lang.String.substring(int, java.text.ParsePosition.getIndex());\n            } \n            break;\n        case org.apache.commons.lang3.text.ExtendedMessageFormat.char :\n            org.apache.commons.lang3.text.ExtendedMessageFormat.getQuotedString(java.lang.String, java.text.ParsePosition, false);\n            break;\n        default :\n            break;\n    }\n}","position":"org.apache.commons.lang3.text.ExtendedMessageFormat:378","type":"CtForImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.StringBuilder.append(char[][int])","position":"org.apache.commons.lang3.CharSetUtils:228","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"/** \n * Enumeration type which indicates the split status of stopwatch.\n */\nprivate enum SplitState {\nSPLIT, UNSPLIT;}","position":"org.apache.commons.lang3.time.StopWatch:125","type":"CtEnumImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.builder.EqualsBuilder.setEquals(false)","position":"org.apache.commons.lang3.builder.EqualsBuilder:868","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"/** \n * <p>\n * A <em>builder<\/em> class for creating instances of {@code\n * BasicThreadFactory}.\n * <\/p>\n * <p>\n * Using this builder class instances of {@code BasicThreadFactory} can be\n * created and initialized. The class provides methods that correspond to\n * the configuration options supported by {@code BasicThreadFactory}. Method\n * chaining is supported. Refer to the documentation of {@code\n * BasicThreadFactory} for a usage example.\n * <\/p>\n * \n * @version $Id$\n */\npublic static class Builder implements org.apache.commons.lang3.builder.Builder<org.apache.commons.lang3.concurrent.BasicThreadFactory> {\n    /** \n     * The wrapped factory.\n     */\nprivate java.util.concurrent.ThreadFactory wrappedFactory;\n\n    /** \n     * The uncaught exception handler.\n     */\nprivate java.lang.Thread.UncaughtExceptionHandler exceptionHandler;\n\n    /** \n     * The naming pattern.\n     */\nprivate java.lang.String namingPattern;\n\n    /** \n     * The priority.\n     */\nprivate java.lang.Integer priority;\n\n    /** \n     * The daemon flag.\n     */\nprivate java.lang.Boolean daemonFlag;\n\n    /** \n     * Sets the {@code ThreadFactory} to be wrapped by the new {@code\n     * BasicThreadFactory}.\n     * \n     * @param factory the wrapped {@code ThreadFactory} (must not be\n     * <b>null<\/b>)\n     * @return a reference to this {@code Builder}\n     * @throws NullPointerException if the passed in {@code ThreadFactory}\n     * is <b>null<\/b>\n     */\npublic org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder wrappedFactory(final java.util.concurrent.ThreadFactory factory) {\n        if (java.util.concurrent.ThreadFactory == null) {\n            throw new java.lang.NullPointerException(\"Wrapped ThreadFactory must not be null!\");\n        } \n        java.util.concurrent.ThreadFactory = java.util.concurrent.ThreadFactory;\n        return this;\n    }\n\n    /** \n     * Sets the naming pattern to be used by the new {@code\n     * BasicThreadFactory}.\n     * \n     * @param pattern the naming pattern (must not be <b>null<\/b>)\n     * @return a reference to this {@code Builder}\n     * @throws NullPointerException if the naming pattern is <b>null<\/b>\n     */\npublic org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder namingPattern(final java.lang.String pattern) {\n        if (java.lang.String == null) {\n            throw new java.lang.NullPointerException(\"Naming pattern must not be null!\");\n        } \n        java.lang.String = java.lang.String;\n        return this;\n    }\n\n    /** \n     * Sets the daemon flag for the new {@code BasicThreadFactory}. If this\n     * flag is set to <b>true<\/b> the new thread factory will create daemon\n     * threads.\n     * \n     * @param f the value of the daemon flag\n     * @return a reference to this {@code Builder}\n     */\npublic org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder daemon(final boolean f) {\n        java.lang.Boolean = java.lang.Boolean.java.lang.Boolean.valueOf(boolean);\n        return this;\n    }\n\n    /** \n     * Sets the priority for the threads created by the new {@code\n     * BasicThreadFactory}.\n     * \n     * @param prio the priority\n     * @return a reference to this {@code Builder}\n     */\npublic org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder priority(final int prio) {\n        java.lang.Integer = java.lang.Integer.java.lang.Integer.valueOf(int);\n        return this;\n    }\n\n    /** \n     * Sets the uncaught exception handler for the threads created by the\n     * new {@code BasicThreadFactory}.\n     * \n     * @param handler the {@code UncaughtExceptionHandler} (must not be\n     * <b>null<\/b>)\n     * @return a reference to this {@code Builder}\n     * @throws NullPointerException if the exception handler is <b>null<\/b>\n     */\npublic org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder uncaughtExceptionHandler(final java.lang.Thread.UncaughtExceptionHandler handler) {\n        if (java.lang.Thread.UncaughtExceptionHandler == null) {\n            throw new java.lang.NullPointerException(\"Uncaught exception handler must not be null!\");\n        } \n        java.lang.Thread.UncaughtExceptionHandler = java.lang.Thread.UncaughtExceptionHandler;\n        return this;\n    }\n\n    /** \n     * Resets this builder. All configuration options are set to default\n     * values. Note: If the {@link #build()} method was called, it is not\n     * necessary to call {@code reset()} explicitly because this is done\n     * automatically.\n     */\npublic void reset() {\n        java.util.concurrent.ThreadFactory = null;\n        java.lang.Thread.UncaughtExceptionHandler = null;\n        java.lang.String = null;\n        java.lang.Integer = null;\n        java.lang.Boolean = null;\n    }\n\n    /** \n     * Creates a new {@code BasicThreadFactory} with all configuration\n     * options that have been specified by calling methods on this builder.\n     * After creating the factory {@link #reset()} is called.\n     * \n     * @return the new {@code BasicThreadFactory}\n     */\n@java.lang.Override\n    public org.apache.commons.lang3.concurrent.BasicThreadFactory build() {\n        final org.apache.commons.lang3.concurrent.BasicThreadFactory org.apache.commons.lang3.concurrent.BasicThreadFactory = new org.apache.commons.lang3.concurrent.BasicThreadFactory(this);\n        org.apache.commons.lang3.concurrent.BasicThreadFactory.Builder.reset();\n        return org.apache.commons.lang3.concurrent.BasicThreadFactory;\n    }\n}","position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:254","type":"CtClassImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return this","position":"org.apache.commons.lang3.text.StrBuilder:214","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"str":"property"},"name":"add","transplant":{"sourceCode":"return java.lang.String == null ? null : java.lang.String.trim()","position":"org.apache.commons.lang3.StringUtils:418","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"try {\n    return java.lang.System.java.lang.System.getProperty(java.lang.String);\n} catch (final java.lang.SecurityException java.lang.SecurityException) {\n    java.lang.System.java.io.PrintStream.println(((\"Caught a SecurityException reading the system property \\'\" + java.lang.String) + \"\\'; the SystemUtils property value will default to null.\"));\n    return null;\n}","position":"org.apache.commons.lang3.SystemUtils:1344","type":"CtTryImpl"},"status":-2},{"failures":[],"variableMapping":{"java.util.Calendar.SUNDAY":"pos"},"name":"add","transplant":{"sourceCode":"int int = int","position":"org.apache.commons.lang3.time.DateUtils:1161","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = int","position":"org.apache.commons.lang3.text.StrSubstitutor:809","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{"a":"a"},"name":"add","transplant":{"sourceCode":"return double","position":"org.apache.commons.lang3.math.IEEE754rUtils:107","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.max(org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.max(double, double), double)","position":"org.apache.commons.lang3.math.IEEE754rUtils:208","type":"CtReturnImpl"},"status":-2},{"failures":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,33,73,28,74],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.Class<? extends java.lang.annotation.Annotation> = null","position":"org.apache.commons.lang3.AnnotationUtils:73","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.lang.Class<?> java.lang.Class<?> = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.ParameterizedType)","position":"org.apache.commons.lang3.reflect.TypeUtils:847","type":"CtLocalVariableImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"add","transplant":{"sourceCode":"return '1'","position":"org.apache.commons.lang3.Conversion:575","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Character == null) {\n    return char;\n} ","position":"org.apache.commons.lang3.CharUtils:150","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replace","transplant":{"sourceCode":"int int = 1","position":"org.apache.commons.lang3.math.Fraction:260","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int int = 0","position":"org.apache.commons.lang3.time.DateUtils:1045","type":"CtLocalVariableImpl"},"status":0},{"failures":[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,3,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,4,121,5,6,122,7,8,9,123,10,124,125,11,12,126,13,14,15,16,17,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,26,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211],"variableMapping":{"str":"this","this":"this"},"name":"replace","transplant":{"sourceCode":"org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder)","position":"org.apache.commons.lang3.text.StrBuilder:955","type":"CtInvocationImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.text.StrBuilder.this(org.apache.commons.lang3.text.StrBuilder.int)","position":"org.apache.commons.lang3.text.StrBuilder:103","type":"CtInvocationImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.lang3.StringUtils:5612","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final java.util.List<java.lang.Class<?>> java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>>()","position":"org.apache.commons.lang3.ClassUtils:330","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return this.org.apache.commons.lang3.text.StrMatcher","position":"org.apache.commons.lang3.text.StrTokenizer:848","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int < 0) {\n    throw new java.lang.StringIndexOutOfBoundsException(int);\n} ","position":"org.apache.commons.lang3.text.StrBuilder:2780","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return int","position":"org.apache.commons.lang3.builder.HashCodeBuilder:927","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Integer","position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:171","type":"CtReturnImpl"},"status":-2},{"failures":[212,213],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"if (T == null) {\n    throw new java.lang.NullPointerException(java.lang.String.java.lang.String.format(java.lang.String, java.lang.Object[]));\n} ","position":"org.apache.commons.lang3.Validate:345","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final long long = ((long)(int)) - ((long)(int))","position":"org.apache.commons.lang3.math.Fraction:694","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final long long = ((long)(int)) * ((long)(int))","position":"org.apache.commons.lang3.math.Fraction:640","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return null","position":"org.apache.commons.lang3.ObjectUtils:269","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"char char","position":"org.apache.commons.lang3.ArrayUtils:1649","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return this","position":"org.apache.commons.lang3.builder.CompareToBuilder:343","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return 'a'","position":"org.apache.commons.lang3.Conversion:541","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"increase":"increase"},"name":"add","transplant":{"sourceCode":"int = int < 0 ? 0 : int","position":"org.apache.commons.lang3.StringUtils:4527","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (int > 0) {\n    int += 3 * int;\n} ","position":"org.apache.commons.lang3.StringUtils:4757","type":"CtIfImpl"},"status":0},{"failures":[],"name":"delete","type":"adrStmt","transplantationPoint":{"sourceCode":"int -= 1","position":"org.apache.commons.lang3.time.DurationFormatUtils:300","type":"CtOperatorAssignmentImpl"},"status":0},{"failures":[214,215,216,217,218,219],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"return 11","position":"org.apache.commons.lang3.Conversion:133","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return int & (int)","position":"org.apache.commons.lang3.BitField:95","type":"CtReturnImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.builder.DiffBuilder.append(java.lang.String, ((float[])(java.lang.Object)), ((float[])(java.lang.Object)))","position":"org.apache.commons.lang3.builder.DiffBuilder:829","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((++int) == (java.lang.String.length())) {\n    return java.lang.StringBuilder;\n} ","position":"org.apache.commons.lang3.time.FastDateParser:341","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"case 'F' :\n    return new boolean[]{ true , true , true , true };","position":"org.apache.commons.lang3.Conversion:258","type":"CtCaseImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return boolean","position":"org.apache.commons.lang3.ObjectUtils:746","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.text.StrBuilder.appendNull()","position":"org.apache.commons.lang3.text.StrBuilder:497","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>","position":"org.apache.commons.lang3.reflect.TypeUtils:882","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.time.FastDateFormat.org.apache.commons.lang3.time.FormatCache<org.apache.commons.lang3.time.FastDateFormat>.getDateInstance(int, null, java.util.Locale)","position":"org.apache.commons.lang3.time.FastDateFormat:195","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return '5'","position":"org.apache.commons.lang3.Conversion:561","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","position":"org.apache.commons.lang3.reflect.MethodUtils:341","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return !org.apache.commons.lang3.StringUtils.(org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]))","position":"org.apache.commons.lang3.StringUtils:288","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"min":"java.lang.Integer.MAX_VALUE","d":"d","java.lang.Integer.MAX_VALUE":"java.lang.Integer.MAX_VALUE"},"name":"add","transplant":{"sourceCode":"if (int > 1) {\n    int[][(int - 1)] = java.lang.Integer.int;\n} ","position":"org.apache.commons.lang3.StringUtils:6950","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int[][(int - 1)] = java.lang.Integer.int","position":"org.apache.commons.lang3.StringUtils:6951","type":"CtAssignmentImpl"},"status":-2},{"failures":[],"variableMapping":{"org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY":"result"},"name":"add","transplant":{"sourceCode":"return java.lang.Boolean[]","position":"org.apache.commons.lang3.ArrayUtils:834","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return java.lang.Boolean[]","position":"org.apache.commons.lang3.ArrayUtils:3487","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"return org.apache.commons.lang3.ArrayUtils.long[]","position":"org.apache.commons.lang3.ArrayUtils:534","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.clone(long[])","position":"org.apache.commons.lang3.ArrayUtils:5099","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{"useOwner":"useOwner"},"name":"replace","transplant":{"sourceCode":"java.lang.reflect.Type = null","position":"org.apache.commons.lang3.reflect.TypeUtils:1493","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"java.lang.reflect.Type = java.lang.Class<?>.getEnclosingClass()","position":"org.apache.commons.lang3.reflect.TypeUtils:1495","type":"CtAssignmentImpl"},"status":0},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.builder.ToStringBuilder.build()","position":"org.apache.commons.lang3.AnnotationUtils:209","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (((!(java.lang.reflect.AccessibleObject.isAccessible())) && java.lang.reflect.Modifier.(java.lang.reflect.Modifier.isPublic(java.lang.reflect.Member.getModifiers()))) && org.apache.commons.lang3.reflect.MemberUtils.(org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(java.lang.reflect.Member.getDeclaringClass().getModifiers()))) {\n    try {\n        java.lang.reflect.AccessibleObject.setAccessible(true);\n        return true;\n    } catch (final java.lang.SecurityException java.lang.SecurityException) {\n    }\n} ","position":"org.apache.commons.lang3.reflect.MemberUtils:59","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceReaction","transplant":{"sourceCode":"final int int = ((java.lang.String.indexOf('e')) + (java.lang.String.indexOf('E'))) + 1","position":"org.apache.commons.lang3.math.NumberUtils:490","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final int int = java.lang.String.length()","position":"org.apache.commons.lang3.text.WordUtils:542","type":"CtLocalVariableImpl"},"status":-2},{"failures":[220],"binaryOperator":"(byte >> int)","name":"math","position":"org.apache.commons.lang3.Conversion:1520","type":"mutation","status":-1},{"failures":[],"variableMapping":{"startCutoff":"len"},"name":"add","transplant":{"sourceCode":"int -= 7","position":"org.apache.commons.lang3.time.DateUtils:1212","type":"CtOperatorAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"int = int","position":"org.apache.commons.lang3.StringUtils:4955","type":"CtAssignmentImpl"},"status":-2},{"failures":[221,222,223,224],"binaryOperator":"(int - 1)","name":"math","position":"org.apache.commons.lang3.StringUtils:674","type":"mutation","status":-1},{"failures":[225,226],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Short.java.lang.Class<java.lang.Short>)) {\n    return java.util.Arrays.java.util.Arrays.equals(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} ","position":"org.apache.commons.lang3.AnnotationUtils:294","type":"CtIfImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if (java.lang.Class<?>.equals(java.lang.Float.java.lang.Class<java.lang.Float>)) {\n    return java.util.Arrays.java.util.Arrays.equals(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} ","position":"org.apache.commons.lang3.AnnotationUtils:306","type":"CtIfImpl"},"status":-1},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.ArrayUtils.int","position":"org.apache.commons.lang3.ArrayUtils:2272","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.lang3.time.FastDatePrinter:530","type":"CtReturnImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceWittgenstein","transplant":{"sourceCode":"final org.apache.commons.lang3.concurrent.ConcurrentException org.apache.commons.lang3.concurrent.ConcurrentException","position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:209","type":"CtLocalVariableImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"final boolean[] boolean[] = org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])","position":"org.apache.commons.lang3.BooleanUtils:947","type":"CtLocalVariableImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"T = java.util.Map.Entry<T, org.apache.commons.lang3.mutable.MutableInt>.getKey()","position":"org.apache.commons.lang3.ObjectUtils:589","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"org.apache.commons.lang3.builder.CompareToBuilder.org.apache.commons.lang3.builder.CompareToBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class<?>, org.apache.commons.lang3.builder.CompareToBuilder, boolean, java.lang.String[])","position":"org.apache.commons.lang3.builder.CompareToBuilder:289","type":"CtInvocationImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addRandom","transplant":{"sourceCode":"return org.apache.commons.lang3.builder.HashCodeBuilder.append(java.lang.Double.java.lang.Double.doubleToLongBits(double))","position":"org.apache.commons.lang3.builder.HashCodeBuilder:677","type":"CtReturnImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((java.lang.Object.getClass()) != (java.lang.Object.getClass())) {\n    org.apache.commons.lang3.builder.EqualsBuilder.setEquals(false);\n} else if (java.lang.Object instanceof long[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((long[])(java.lang.Object)), ((long[])(java.lang.Object)));\n} else if (java.lang.Object instanceof int[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((int[])(java.lang.Object)), ((int[])(java.lang.Object)));\n} else if (java.lang.Object instanceof short[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((short[])(java.lang.Object)), ((short[])(java.lang.Object)));\n} else if (java.lang.Object instanceof char[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((char[])(java.lang.Object)), ((char[])(java.lang.Object)));\n} else if (java.lang.Object instanceof byte[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((byte[])(java.lang.Object)), ((byte[])(java.lang.Object)));\n} else if (java.lang.Object instanceof double[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((double[])(java.lang.Object)), ((double[])(java.lang.Object)));\n} else if (java.lang.Object instanceof float[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((float[])(java.lang.Object)), ((float[])(java.lang.Object)));\n} else if (java.lang.Object instanceof boolean[]) {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((boolean[])(java.lang.Object)), ((boolean[])(java.lang.Object)));\n} else {\n    org.apache.commons.lang3.builder.EqualsBuilder.append(((java.lang.Object[])(java.lang.Object)), ((java.lang.Object[])(java.lang.Object)));\n}","position":"org.apache.commons.lang3.builder.EqualsBuilder:466","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"addReaction","transplant":{"sourceCode":"while (int != 0) {\n    int += 12 * int;\n    int = 0;\n}","position":"org.apache.commons.lang3.time.DurationFormatUtils:328","type":"CtWhileImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"if ((double[][int]) < double) {\n    double = double[][int];\n} ","position":"org.apache.commons.lang3.math.NumberUtils:891","type":"CtIfImpl"},"status":-2},{"failures":[],"variableMapping":{},"name":"replaceRandom","transplant":{"sourceCode":"java.util.List<java.util.Locale> = new java.util.ArrayList<java.util.Locale>()","position":"org.apache.commons.lang3.LocaleUtils:266","type":"CtAssignmentImpl"},"type":"adrStmt","transplantationPoint":{"sourceCode":"return false","position":"org.apache.commons.lang3.text.ExtendedMessageFormat:279","type":"CtReturnImpl"},"status":-2},{"failureDictionary":{"org.apache.commons.lang3.builder.DiffBuilderTest.testInt":40,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":69,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":18,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean":79,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":126,"org.apache.commons.lang3.builder.DiffBuilderTest.testByteArray":41,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String":98,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":172,"org.apache.commons.lang3.text.StrBuilderTest.testToCharArray":139,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":125,"org.apache.commons.lang3.builder.DiffResultTest.testListIsNonModifiable":57,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":5,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":171,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAll":222,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":9,"org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty":153,"org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher":151,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int":106,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array":121,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int":160,"org.apache.commons.lang3.text.StrBuilderTest.testReverse":26,"org.apache.commons.lang3.builder.DiffBuilderTest.testBooleanArray":48,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder":96,"org.apache.commons.lang3.builder.DiffBuilderTest.testObjectArray":38,"org.apache.commons.lang3.text.StrBuilderTest.testHashCode":146,"org.apache.commons.lang3.builder.DiffResultTest.testNullRhs":61,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":122,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int":81,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfIntWithStartIndex":1,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String":111,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":7,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":183,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int":117,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString":119,"org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToInt":36,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":193,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int":4,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":123,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":175,"org.apache.commons.lang3.BitFieldTest.testGetValue":214,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int":84,"org.apache.commons.lang3.reflect.TypeLiteralTest.testEquals":68,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType":74,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int":141,"org.apache.commons.lang3.math.FractionTest.testFactory_String":27,"org.apache.commons.lang3.BitFieldTest.testSetValue":219,"org.apache.commons.lang3.reflect.TypeLiteralTest.testBasic":66,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array":101,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":170,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int":3,"org.apache.commons.lang3.text.StrBuilderTest.testClear":130,"org.apache.commons.lang3.text.StrBuilderTest.testToStringBuilder":138,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int":77,"org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder":211,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":226,"org.apache.commons.lang3.builder.CompareToBuilderTest.testReflectionCompareEx2":32,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder":114,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String":97,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":203,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int":88,"org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer":155,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":11,"org.apache.commons.lang3.builder.DiffBuilderTest.testChar":45,"org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles":22,"org.apache.commons.lang3.ConversionTest.testUuidToByteArray":30,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":204,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":174,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":205,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":206,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":12,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":207,"org.apache.commons.lang3.text.StrBuilderTest.testGetChars":129,"org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence":225,"org.apache.commons.lang3.ConversionTest.testLongToByteArray":31,"org.apache.commons.lang3.builder.DiffTest.testCannotModify":64,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator":90,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText":93,"org.apache.commons.lang3.BitFieldTest.testGetRawValue":218,"org.apache.commons.lang3.ConversionTest.testIntArrayToLong":35,"org.apache.commons.lang3.builder.DiffBuilderTest.testIntArray":51,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean":80,"org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase":136,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":196,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":197,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable":33,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText":104,"org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments":28,"org.apache.commons.lang3.builder.DiffBuilderTest.testShort":43,"org.apache.commons.lang3.builder.DiffBuilderTest.testDoubleArray":54,"org.apache.commons.lang3.builder.HashCodeBuilderTest.testShortArray":19,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":216,"org.apache.commons.lang3.text.StrBuilderTest.testStartsWith":158,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString":107,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder":94,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int":112,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":14,"org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher":149,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String":100,"org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments":71,"org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAvailablePermits":25,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":6,"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":127,"org.apache.commons.lang3.builder.DiffResultTest.testToStringSpecifyStyleOutput":56,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char":102,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight":116,"org.apache.commons.lang3.builder.DiffBuilderTest.testByte":44,"org.apache.commons.lang3.builder.DiffResultTest.testIterator":59,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer":89,"org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity":134,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":16,"org.apache.commons.lang3.text.StrBuilderTest.testConstructors":133,"org.apache.commons.lang3.builder.DiffBuilderTest.testCharArray":37,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection":75,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloatArray":39,"org.apache.commons.lang3.text.StrBuilderTest.testLength":152,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":17,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray":120,"org.apache.commons.lang3.builder.DiffBuilderTest.testDouble":52,"org.apache.commons.lang3.reflect.TypeLiteralTest.testTyped":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":34,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":173,"org.apache.commons.lang3.builder.DiffBuilderTest.testShortArray":50,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt":21,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer":103,"org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt":154,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int":85,"org.apache.commons.lang3.BitFieldTest.testGetShortValue":215,"org.apache.commons.lang3.builder.DiffResultTest.testNullStyle":58,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":168,"org.apache.commons.lang3.builder.DiffResultTest.testToStringOutput":55,"org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance":72,"org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity":142,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object":95,"org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength":137,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection":86,"org.apache.commons.lang3.builder.DiffBuilderTest.testLongArray":49,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char":91,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object":108,"org.apache.commons.lang3.builder.DiffResultTest.testNullLhs":60,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":162,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_StringString":223,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":209,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":210,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int":82,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":10,"org.apache.commons.lang3.text.StrBuilderTest.testEndsWith":128,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":8,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int":99,"org.apache.commons.lang3.builder.DiffBuilderTest.testBoolean":47,"org.apache.commons.lang3.text.StrBuilderTest.testLang412Left":135,"org.apache.commons.lang3.StringUtilsTest.testLANG666":221,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding":110,"org.apache.commons.lang3.builder.DiffTest.testGetFieldName":62,"org.apache.commons.lang3.text.StrBuilderTest.testChaining":161,"org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt":2,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":165,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":166,"org.apache.commons.lang3.ValidateTest.testNotEmptyMap1":212,"org.apache.commons.lang3.ValidateTest.testNotEmptyMap2":213,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":70,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber":113,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":169,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":208,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator":92,"org.apache.commons.lang3.builder.DiffTest.testGetType":65,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectorFromArray":24,"org.apache.commons.lang3.builder.DiffBuilderTest.testLong":46,"org.apache.commons.lang3.text.StrBuilderTest.testLang412Right":143,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft":83,"org.apache.commons.lang3.text.StrBuilderTest.testCapacity":144,"org.apache.commons.lang3.text.StrBuilderTest.testSize":131,"org.apache.commons.lang3.text.StrTokenizerTest.test8":192,"org.apache.commons.lang3.BitFieldTest.testGetShortRawValue":217,"org.apache.commons.lang3.text.StrTokenizerTest.test5":189,"org.apache.commons.lang3.text.StrTokenizerTest.test4":188,"org.apache.commons.lang3.StringUtilsSubstringTest.testCountMatches_String":0,"org.apache.commons.lang3.text.StrTokenizerTest.test7":191,"org.apache.commons.lang3.text.StrTokenizerTest.test6":190,"org.apache.commons.lang3.text.StrTokenizerTest.test1":185,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":184,"org.apache.commons.lang3.text.StrTokenizerTest.test3":187,"org.apache.commons.lang3.text.StrTokenizerTest.test2":186,"org.apache.commons.lang3.builder.DiffTest.testToString":63,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert":115,"org.apache.commons.lang3.text.StrBuilderTest.testCharAt":148,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":163,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder":87,"org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt":157,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":164,"org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt":145,"org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector":23,"org.apache.commons.lang3.text.StrBuilderTest.testTrim":132,"org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny":29,"org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass":20,"org.apache.commons.lang3.builder.DiffBuilderTest.testObject":53,"org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripEnd_StringString":224,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int":109,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":124,"org.apache.commons.lang3.builder.DiffBuilderTest.testFloat":42,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":176,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":167,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":178,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":177,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":180,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":179,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":182,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":181,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":202,"org.apache.commons.lang3.ConversionTest.testByteToHex":220,"org.apache.commons.lang3.text.StrBuilderTest.testSetLength":147,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray":118,"org.apache.commons.lang3.text.StrBuilderTest.testEquals":150,"org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables":73,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":194,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":200,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":199,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":201,"org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher":159,"org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher":140,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":198,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":195,"org.apache.commons.lang3.text.StrBuilderTest.testAsBuilder":156,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":15,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber":78,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText":76,"org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int":105,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":13}}]

[{"transplant":{"position":"org.apache.commons.lang3.time.FastDateParser:331","sourceCode":"char = 'Q'","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:72","sourceCode":"char = char","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"c":"end"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:1999","sourceCode":"int = (int + int) - 1","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1361","sourceCode":"int--","type":"CtUnaryOperatorImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"replaceLen":"sz","i":"sz"}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:324","sourceCode":"if (java.lang.String == null) {\n    return byte;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:327","sourceCode":"try {\n    return java.lang.Byte.java.lang.Byte.parseByte(java.lang.String);\n} catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n    return byte;\n}","type":"CtTryImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"str":"str","defaultValue":"defaultValue"}},{"transplant":{"position":"org.apache.commons.lang3.RandomStringUtils:273","sourceCode":"if ((char >= 55296) && (char <= 56191)) {\n    if (int == 0) {\n        int++;\n    } else {\n        char[][int] = ((char)(56320 + (java.util.Random.nextInt(128))));\n        int--;\n        char[][int] = char;\n    }\n} else if ((char >= 56192) && (char <= 56319)) {\n    int++;\n} else {\n    char[][int] = char;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.RandomStringUtils:274","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    char[][int] = ((char)(56320 + (java.util.Random.nextInt(128))));\n    int--;\n    char[][int] = char;\n}","type":"CtIfImpl"},"failures":[1],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","count":"count","random":"random","ch":"ch"}},{"transplant":{"position":"org.apache.commons.lang3.tuple.Pair:161","sourceCode":"new java.lang.StringBuilder().append('(')","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:953","sourceCode":"new java.lang.StringBuilder(32).append(org.apache.commons.lang3.math.Fraction.getNumerator()).append('/').append(org.apache.commons.lang3.math.Fraction.getDenominator())","type":"CtInvocationImpl"},"failures":[2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:673","sourceCode":"return \"\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:429","sourceCode":"return org.apache.commons.lang3.text.StrBuilder.toString()","type":"CtReturnImpl"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:402","sourceCode":"if (byte[] == null) {\n    return null;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1290","sourceCode":"return byte[]","type":"CtReturnImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"array":"dst"}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:849","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.tuple.Pair:131","sourceCode":"return true","type":"CtReturnImpl"},"failures":[16,17],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.exception.ContextedRuntimeException:188","sourceCode":"org.apache.commons.lang3.exception.ExceptionContext.setContextValue(java.lang.String, java.lang.Object)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.exception.ContextedException:169","sourceCode":"org.apache.commons.lang3.exception.ExceptionContext.addContextValue(java.lang.String, java.lang.Object)","type":"CtInvocationImpl"},"failures":[18,19,20,21,22],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"exceptionContext":"exceptionContext","value":"value","label":"label"}},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:155","sourceCode":"if ((java.util.Date == null) || (java.util.Date == null)) {\n    throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:887","sourceCode":"java.util.Calendar.setTime(java.util.Date)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"date2":"date","date1":"date"}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:494","sourceCode":"throw new java.lang.ArithmeticException(\"overflow: can\\'t negate numerator\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:261","sourceCode":"throw new java.lang.IllegalArgumentException(((\"Cannot interpret \\'\" + char) + \"\\' as a hexadecimal digit\"))","type":"CtThrowImpl"},"failures":[23],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:412","sourceCode":"boolean boolean = true","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1340","sourceCode":"boolean boolean = false","type":"CtLocalVariableImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:770","sourceCode":"int += int","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:773","sourceCode":"while (int < int) {\n    if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n        int++;\n        int += int;\n        continue;\n    } \n    int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n    if (int == 0) {\n        int++;\n    } else {\n        if (int == 0) {\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n            if (boolean) {\n                final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n            } \n            int += int;\n            final int int = int;\n            java.lang.String java.lang.String = java.lang.String;\n            java.lang.String java.lang.String = null;\n            if (org.apache.commons.lang3.text.StrMatcher != null) {\n                final char[] char[] = java.lang.String.toCharArray();\n                int int = 0;\n                for (int int = 0 ; int < (char[].int) ; int++) {\n                    if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                        break;\n                    } \n                    if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                        java.lang.String = java.lang.String.substring(0, int);\n                        java.lang.String = java.lang.String.substring((int + int));\n                        break;\n                    } \n                }\n            } \n            if (java.util.List<java.lang.String> == null) {\n                java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n            } \n            org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n            java.util.List<java.lang.String>.add(java.lang.String);\n            java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n            if (java.lang.String == null) {\n                java.lang.String = java.lang.String;\n            } \n            if (java.lang.String != null) {\n                final int int = java.lang.String.length();\n                org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                boolean = true;\n                int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                int = (int + int) - (int - int);\n                int += int;\n                int += int;\n                int += int;\n                char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n            } \n            java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n            break;\n        } else {\n            int--;\n            int += int;\n        }\n    }\n}","type":"CtWhileImpl"},"failures":[3,5,24,6,7,8,25,26,27,9,10,28,29,30,31,12,32,13,33,14,34,35,15,36],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"pos":"pos","startMatchLen":"pos"}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:734","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldEnd(java.lang.StringBuffer, java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:802","sourceCode":"java.lang.StringBuffer.append(double)","type":"CtInvocationImpl"},"failures":[37,38,39,40],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:569","sourceCode":"return '3'","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:645","sourceCode":"return 'e'","type":"CtReturnImpl"},"failures":[41],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:152","sourceCode":"return org.apache.commons.lang3.text.StrTokenizer.getCSVClone()","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:139","sourceCode":"return ((org.apache.commons.lang3.text.StrTokenizer)(org.apache.commons.lang3.text.StrTokenizer.org.apache.commons.lang3.text.StrTokenizer.clone()))","type":"CtReturnImpl"},"failures":[42,43,44,45,46],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"this":"org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:444","sourceCode":"if (boolean[][(int + 2)]) {\n    if (boolean[][(int + 1)]) {\n        if (boolean[][int]) {\n            return 'e';\n        } else {\n            return '6';\n        }\n    } else {\n        if (boolean[][int]) {\n            return 'a';\n        } else {\n            return '2';\n        }\n    }\n} else {\n    if (boolean[][(int + 1)]) {\n        if (boolean[][int]) {\n            return 'c';\n        } else {\n            return '4';\n        }\n    } else {\n        if (boolean[][int]) {\n            return '8';\n        } else {\n            return '0';\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:327","sourceCode":"if (boolean[][int]) {\n    return '9';\n} else {\n    return '8';\n}","type":"CtIfImpl"},"failures":[47,48],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.Conversion:880","failures":[49],"status":-1,"binaryOperator":"(255 & (byte[][(int + int)]))","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.LocaleUtils:116","sourceCode":"if ((java.lang.String.charAt(3)) != '_') {\n    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:802","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long)","type":"CtInvocationImpl"},"failures":[50,51,52,53,53,54,55,56,57],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"str":"fieldName"}},{"transplant":{"position":"org.apache.commons.lang3.AnnotationUtils:227","sourceCode":"if (java.lang.Class<?>.isArray()) {\n    java.lang.Class<?> = java.lang.Class<?>.getComponentType();\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MemberUtils:136","sourceCode":"while ((java.lang.Class<?> != null) && (!(java.lang.Class<?>.equals(java.lang.Class<?>)))) {\n    if ((java.lang.Class<?>.isInterface()) && org.apache.commons.lang3.ClassUtils.(org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>))) {\n        float += 0.25F;\n        break;\n    } \n    float++;\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"type":"srcClass"}},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:6066","sourceCode":"int int","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:150","sourceCode":"int = -int","type":"CtAssignmentImpl"},"failures":[58,59],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1471","sourceCode":"java.lang.StringBuffer.append('@')","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:364","sourceCode":"java.lang.StringBuffer.append(java.lang.String)","type":"CtInvocationImpl"},"failures":[60,61,62,63,64,65,66,67],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:3223","sourceCode":"final char[] char[] = java.lang.String.toCharArray()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharSetUtils:65","sourceCode":"if (org.apache.commons.lang3.StringUtils.(org.apache.commons.lang3.StringUtils.isEmpty(java.lang.String)) || org.apache.commons.lang3.CharSetUtils.(org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]))) {\n    return java.lang.String;\n} ","type":"CtIfImpl"},"failures":[68,69],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.NumberUtils:1133","failures":[70],"status":-1,"binaryOperator":"short < short","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.reflect.TypeLiteral:99","sourceCode":"if ((java.lang.Object instanceof org.apache.commons.lang3.reflect.TypeLiteral) == false) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:155","sourceCode":"if (java.lang.Object instanceof org.apache.commons.lang3.mutable.MutableBoolean) {\n    return (boolean) == (((org.apache.commons.lang3.mutable.MutableBoolean)(java.lang.Object)).booleanValue());\n} ","type":"CtIfImpl"},"failures":[71],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"failureDictionary":{"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":4,"org.apache.commons.lang3.mutable.MutableBooleanTest.testEquals":71,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLong":52,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":42,"org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort":70,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":10,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":45,"org.apache.commons.lang3.tuple.ImmutablePairTest.testEquals":16,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":6,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":38,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":14,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit":47,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLong":50,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":5,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":40,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testAppendSuper":65,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":11,"org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToBinary":23,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testAppendSuper":66,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextLabels":20,"org.apache.commons.lang3.ConversionTest.testByteArrayToShort":49,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":43,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextEntries":19,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":35,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":46,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLong":55,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetContextValues":22,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testAppendSuper":60,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":34,"org.apache.commons.lang3.exception.ContextedExceptionTest.testGetFirstContextValue":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":28,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":3,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLong":56,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testAppendSuper":62,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLong":51,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":0,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":37,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":54,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":31,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit_2args":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":64,"org.apache.commons.lang3.RandomStringUtilsTest.testLang100":1,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":36,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":8,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":26,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":27,"org.apache.commons.lang3.math.FractionTest.testReduce":58,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":33,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":13,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":53,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":30,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testAppendSuper":61,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLong":57,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":24,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":44,"org.apache.commons.lang3.math.FractionTest.testToProperString":2,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":25,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString":68,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":63,"org.apache.commons.lang3.tuple.MutablePairTest.testEquals":17,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testAppendSuper":67,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":7,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":32,"org.apache.commons.lang3.exception.ContextedExceptionTest.testSetContextValue":18,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":29,"org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray":69,"org.apache.commons.lang3.ConversionTest.testIntToHexDigitMsb0":41}}]

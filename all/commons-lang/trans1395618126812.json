[{"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:499","sourceCode":"throw new java.lang.NumberFormatException((java.lang.String + \" is not a valid number.\"))","type":"CtThrowImpl"},"failures":[0,1],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:522","sourceCode":"hierarchyTraversal : while (java.util.Iterator<java.lang.Class<?>>.hasNext()) {\n    final java.lang.Class<?> java.lang.Class<?> = java.util.Iterator<java.lang.Class<?>>.next();\n    final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(java.lang.Class<?>, java.lang.reflect.Method.getName(), java.lang.Class<?>[]);\n    if (java.lang.reflect.Method == null) {\n        continue;\n    } \n    if (java.util.Arrays.java.util.Arrays.equals(java.lang.reflect.Method.getParameterTypes(), java.lang.Class<?>[])) {\n        java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n        continue;\n    } \n    final java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class<?>, java.lang.reflect.Method.getDeclaringClass());\n    for (int int = 0 ; int < (java.lang.Class<?>[].int) ; int++) {\n        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Method.getGenericParameterTypes()[int]);\n        final java.lang.reflect.Type java.lang.reflect.Type = org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.unrollVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>, java.lang.reflect.Method.getGenericParameterTypes()[int]);\n        if (!org.apache.commons.lang3.reflect.TypeUtils.(org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type, java.lang.reflect.Type))) {\n            continue hierarchyTraversal;\n        } \n    }\n    java.util.Set<java.lang.reflect.Method>.add(java.lang.reflect.Method);\n}","type":"CtWhileImpl"},"failures":[2,3],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.Conversion:1479","failures":[4],"status":-1,"binaryOperator":"(int * 4)","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:827","sourceCode":"throw new java.lang.ArithmeticException(\"The fraction to divide by must not be zero\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Validate:180","sourceCode":"throw new java.lang.IllegalArgumentException(org.apache.commons.lang3.Validate.java.lang.String)","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:997","sourceCode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Variable prefix must not be null!\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1029","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)","type":"CtInvocationImpl"},"failures":[6,6],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"prefix":"fieldName"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:1109","sourceCode":"return \"StrTokenizer[not tokenized yet]\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:165","sourceCode":"return org.apache.commons.lang3.builder.ReflectionToStringBuilder.org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle)","type":"CtReturnImpl"},"failures":[7],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:673","sourceCode":"return \"\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharUtils:309","sourceCode":"return org.apache.commons.lang3.CharUtils.java.lang.String[][char]","type":"CtReturnImpl"},"failures":[8,9],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:117","sourceCode":"return 14","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:101","sourceCode":"switch (char) {\n    case '0' :\n        return 0;\n    case '1' :\n        return 8;\n    case '2' :\n        return 4;\n    case '3' :\n        return 12;\n    case '4' :\n        return 2;\n    case '5' :\n        return 10;\n    case '6' :\n        return 6;\n    case '7' :\n        return 14;\n    case '8' :\n        return 1;\n    case '9' :\n        return 9;\n    case 'a' :\n    case 'A' :\n        return 5;\n    case 'b' :\n    case 'B' :\n        return 13;\n    case 'c' :\n    case 'C' :\n        return 3;\n    case 'd' :\n    case 'D' :\n        return 11;\n    case 'e' :\n    case 'E' :\n        return 7;\n    case 'f' :\n    case 'F' :\n        return 15;\n    default :\n        throw new java.lang.IllegalArgumentException(((\"Cannot interpret \\'\" + char) + \"\\' as a hexadecimal digit\"));\n}","type":"CtSwitchImpl"},"failures":[10],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.tuple.Pair:161","sourceCode":"new java.lang.StringBuilder()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.tuple.Pair:161","sourceCode":"new java.lang.StringBuilder().append('(').append(org.apache.commons.lang3.tuple.Pair<L, R>.getLeft()).append(',').append(org.apache.commons.lang3.tuple.Pair<L, R>.getRight()).append(')')","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:637","sourceCode":"for (int int = (java.lang.String.length()) - 1 ; int >= 0 ; int--) {\n    if ((java.lang.String.charAt(int)) != '0') {\n        return false;\n    } \n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1313","sourceCode":"for (int int = 0 ; int < (java.lang.String.length()) ; int++) {\n    if (!java.lang.Character.(java.lang.Character.isDigit(java.lang.String.charAt(int)))) {\n        return false;\n    } \n}","type":"CtForImpl"},"failures":[11,12,13,0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"str":"str"}},{"position":"org.apache.commons.lang3.LocaleUtils:292","failures":[],"status":0,"binaryOperator":"java.util.List<java.util.Locale> == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:2421","sourceCode":"if (int < 0) {\n    return -1;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:779","sourceCode":"if (int > 0) {\n    org.apache.commons.lang3.text.StrTokenizer.addToken(java.util.List<java.lang.String>, org.apache.commons.lang3.text.StrBuilder.substring(0, int));\n    return int + int;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"startIndex":"pos"}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:467","sourceCode":"char char = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharSetUtils:73","sourceCode":"char char = ' '","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1031","sourceCode":"throw new java.lang.IllegalArgumentException(\"Variable suffix matcher must not be null!\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDateParser:258","sourceCode":"throw new java.text.ParseException((((\"Unparseable date: \\\"\" + java.lang.String) + \"\\\" does not match \") + (java.util.regex.Pattern.pattern())) , 0)","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1299","sourceCode":"for (int int = 0 ; int < (double[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(java.lang.String);\n    } \n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double[][int]);\n}","type":"CtForImpl"},"failures":[14,15,16],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:493","sourceCode":"if ((int) == (java.lang.Integer.int)) {\n    throw new java.lang.ArithmeticException(\"overflow: can\\'t negate numerator\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:145","sourceCode":"if (int < 0) {\n    if ((int == (java.lang.Integer.int)) || (int == (java.lang.Integer.int))) {\n        throw new java.lang.ArithmeticException(\"overflow: can\\'t negate\");\n    } \n    int = -int;\n    int = -int;\n} ","type":"CtIfImpl"},"failures":[17,18,19,20,21,22,23,24,25,26],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:593","sourceCode":"final java.lang.NumberFormatException java.lang.NumberFormatException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:888","sourceCode":"return 0","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:278","sourceCode":"double = double","type":"CtAssignmentImpl"},"failures":[27,28],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.LocaleUtils:142","failures":[29,30,31],"status":-1,"binaryOperator":"int == 5","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:491","sourceCode":"throw new java.lang.ArithmeticException(\"Unable to invert zero.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:145","sourceCode":"return org.apache.commons.lang3.builder.ReflectionToStringBuilder.org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle, false, false, null)","type":"CtReturnImpl"},"failures":[7],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:1056","sourceCode":"java.lang.Class<?> java.lang.Class<?> = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:390","sourceCode":"java.lang.Class<?> java.lang.Class<?> = java.lang.Class<?>.getSuperclass()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:109","sourceCode":"if ((int >= (this.int)) && (int <= (this.int))) {\n    return false;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:104","sourceCode":"if (boolean) {\n    if ((int < (int)) || (int > (int))) {\n        return false;\n    } \n} else {\n    if ((int >= (int)) && (int <= (int))) {\n        return false;\n    } \n}","type":"CtIfImpl"},"failures":[32,33,34,35,36,37],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"codepoint":"above","below":"below","above":"above"}},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:1209","sourceCode":"if (int < (java.util.Calendar.int)) {\n    int += 7;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:1170","sourceCode":"if (int == (org.apache.commons.lang3.time.DateUtils.int)) {\n    int = java.util.Calendar.int;\n    int = java.util.Calendar.int;\n} ","type":"CtIfImpl"},"failures":[38],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:227","sourceCode":"java.lang.Thread.setUncaughtExceptionHandler(org.apache.commons.lang3.concurrent.BasicThreadFactory.getUncaughtExceptionHandler())","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:235","sourceCode":"java.lang.Thread.setDaemon(org.apache.commons.lang3.concurrent.BasicThreadFactory.getDaemonFlag().booleanValue())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"t":"t","this":"this"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:446","sourceCode":"java.util.List<java.lang.String>.add(java.lang.String)","type":"CtInvocationImpl"},"failures":[39,40],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MemberUtils:169","sourceCode":"if (!(java.lang.Class<?>.isPrimitive())) {\n    float += 0.1F;\n    java.lang.Class<?> = org.apache.commons.lang3.ClassUtils.org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class<?>);\n} ","type":"CtIfImpl"},"failures":[41,42,43,44],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween":34,"org.apache.commons.lang3.math.FractionTest.testMultiply":22,"org.apache.commons.lang3.CharUtilsTest.testToString_char":9,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_2":1,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":39,"org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits":13,"org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToInt":10,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":28,"org.apache.commons.lang3.math.FractionTest.testInvert":23,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters":37,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":14,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":7,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int":26,"org.apache.commons.lang3.ValidateTest.testIsTrue1":5,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":6,"org.apache.commons.lang3.math.NumberUtilsTest.testLang300":12,"org.apache.commons.lang3.math.FractionTest.testFactory_double":27,"org.apache.commons.lang3.ConversionTest.testShortToHex":4,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":15,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":43,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":32,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testSupplementary":35,"org.apache.commons.lang3.math.FractionTest.testSubtract":20,"org.apache.commons.lang3.math.FractionTest.testAdd":18,"org.apache.commons.lang3.math.FractionTest.testPow":19,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":16,"org.apache.commons.lang3.math.FractionTest.testReduce":25,"org.apache.commons.lang3.math.FractionTest.testNegate":24,"org.apache.commons.lang3.math.FractionTest.testAbs":17,"org.apache.commons.lang3.math.FractionTest.testDivide":21,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part":30,"org.apache.commons.lang3.CharUtilsTest.testToString_Character":8,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":41,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part":31,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":33,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":44,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":38,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":3,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":11,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":40,"org.apache.commons.lang3.LocaleUtilsTest.testParseAllLocales":29}}]

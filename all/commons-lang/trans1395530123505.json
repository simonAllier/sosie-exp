[{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:617","sourceCode":"int = int","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.BitField:45","sourceCode":"int >>= 1","type":"CtOperatorAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"v":"bit_pattern","t":"bit_pattern"}},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:2819","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:104","sourceCode":"if (boolean) {\n    if ((int < (int)) || (int > (int))) {\n        return false;\n    } \n} else {\n    if ((int >= (int)) && (int <= (int))) {\n        return false;\n    } \n}","type":"CtIfImpl"},"failures":[0,1,2,3],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableObject:104","sourceCode":"return false","type":"CtReturnImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.NumberUtils:793","failures":[],"status":0,"binaryOperator":"(long[][int]) < long","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:947","sourceCode":"this.boolean = true","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1181","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isEquals":"enableSubstitutionInVariables"}},{"transplant":{"position":"org.apache.commons.lang3.ClassUtils:357","sourceCode":"final java.util.LinkedHashSet<java.lang.Class<?>> java.util.LinkedHashSet<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>>()","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:1447","sourceCode":"return org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.getFragment(java.util.Date, int, java.util.Calendar.int)","type":"CtReturnImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.ObjectUtils:434","failures":[5],"status":-1,"binaryOperator":"org.apache.commons.lang3.ObjectUtils.(org.apache.commons.lang3.ObjectUtils.compare(T, T, true)) < 0","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:835","sourceCode":"if ((((int - 1) * 8) + int) >= 32) {\n    throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 32\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:839","sourceCode":"if ((short[][int]) < short) {\n    short = short[][int];\n} ","type":"CtIfImpl"},"failures":[6],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"dstPos":"i","nBytes":"i"}},{"transplant":{"position":"org.apache.commons.lang3.StringUtils:1974","sourceCode":"if (int == int) {\n    continue;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDateParser:287","sourceCode":"org.apache.commons.lang3.time.FastDateParser.Strategy.setCalendar(this, java.util.Calendar, java.util.regex.Matcher.group(int))","type":"CtInvocationImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND":"i","tmp":"i"}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:515","sourceCode":"if (java.lang.Object instanceof byte[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((byte[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((byte[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof char[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((char[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((char[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof double[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof float[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((float[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((float[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof boolean[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((boolean[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((boolean[])(java.lang.Object)));\n    }\n} else if (java.lang.Object.getClass().isArray()) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    }\n} else {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:529","sourceCode":"if (java.lang.Object instanceof double[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof float[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((float[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((float[])(java.lang.Object)));\n    }\n} else if (java.lang.Object instanceof boolean[]) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((boolean[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((boolean[])(java.lang.Object)));\n    }\n} else if (java.lang.Object.getClass().isArray()) {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((java.lang.Object[])(java.lang.Object)));\n    }\n} else {\n    if (boolean) {\n        org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    } else {\n        org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, java.lang.Object);\n    }\n}","type":"CtIfImpl"},"failures":[48,49,50],"status":-1,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:1097","sourceCode":"return org.apache.commons.lang3.text.StrTokenizer","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:1076","sourceCode":"try {\n    return org.apache.commons.lang3.text.StrTokenizer.cloneReset();\n} catch (final java.lang.CloneNotSupportedException java.lang.CloneNotSupportedException) {\n    return null;\n}","type":"CtTryImpl"},"failures":[51,52,53,54,55,56,57],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cloned":"this"}},{"position":"org.apache.commons.lang3.Conversion:1299","failures":[58,59],"status":-1,"binaryOperator":"(int + int)","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:99","sourceCode":"org.apache.commons.lang3.text.StrTokenizer.org.apache.commons.lang3.text.StrTokenizer.setIgnoreEmptyTokens(false)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:97","sourceCode":"org.apache.commons.lang3.text.StrTokenizer.org.apache.commons.lang3.text.StrTokenizer.setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher.org.apache.commons.lang3.text.StrMatcher.trimMatcher())","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:190","sourceCode":"throw new java.lang.ArithmeticException(\"Numerator too large to represent as an Integer.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:1201","sourceCode":"throw new java.lang.IllegalArgumentException(((\"The range style \" + int) + \" is not valid.\"))","type":"CtThrowImpl"},"failures":[60],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.CharEncoding:100","sourceCode":"final java.nio.charset.IllegalCharsetNameException java.nio.charset.IllegalCharsetNameException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:525","sourceCode":"final java.util.List<java.lang.String> java.util.List<java.lang.String> = java.util.List<java.lang.String>","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:899","sourceCode":"return 1","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:130","sourceCode":"return 3","type":"CtReturnImpl"},"failures":[61],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:192","sourceCode":"return false","type":"CtReturnImpl"},"failures":[62],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:664","sourceCode":"throw new java.lang.IllegalArgumentException(\"Specified class is not a superclass of the object\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:530","sourceCode":"return org.apache.commons.lang3.text.StrBuilder.toString()","type":"CtReturnImpl"},"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:1190","sourceCode":"if ((((int - 1) * 32) + int) >= 64) {\n    throw new java.lang.IllegalArgumentException(\"(nInts-1)*32+srcPos is greather or equal to than 64\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:117","sourceCode":"if (boolean) {\n    java.lang.StringBuilder.append(java.lang.String.substring(int, (int + int)));\n    java.lang.StringBuilder.append(java.lang.String);\n    int += int;\n} else {\n    int = java.lang.String.indexOf(' ', (int + int));\n    if (int >= 0) {\n        java.lang.StringBuilder.append(java.lang.String.substring(int, int));\n        java.lang.StringBuilder.append(java.lang.String);\n        int = int + 1;\n    } else {\n        java.lang.StringBuilder.append(java.lang.String.substring(int));\n        int = int;\n    }\n}","type":"CtIfImpl"},"failures":[76,77],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"srcPos":"wrapLength","nInts":"wrapLength"}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:1035","sourceCode":"return java.lang.Double.double","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableDouble:231","sourceCode":"return double","type":"CtReturnImpl"},"failures":[78,79,80,81,82,83,84,85],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.Conversion:914","failures":[86],"status":-1,"binaryOperator":"(15L & org.apache.commons.lang3.Conversion.(org.apache.commons.lang3.Conversion.hexDigitToInt(java.lang.String.charAt((int + int)))))","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:494","sourceCode":"return false","type":"CtReturnImpl"},"failures":[87,88,89,90],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:554","sourceCode":"throw new java.util.NoSuchElementException()","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer:140","sourceCode":"throw new java.lang.IllegalArgumentException(\"Child initializer must not be null!\")","type":"CtThrowImpl"},"failures":[91],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.reflect.TypeUtils:146","sourceCode":"/** \n * ParameterizedType implementation class.\n * @since 3.2\n */\nprivate static final class ParameterizedTypeImpl implements java.lang.reflect.ParameterizedType {\n    private final java.lang.Class<?> raw;\n\n    private final java.lang.reflect.Type useOwner;\n\n    private final java.lang.reflect.Type[] typeArguments;\n\n    /** \n     * Constructor\n     * @param raw type\n     * @param useOwner owner type to use, if any\n     * @param typeArguments formal type arguments\n     */\nprivate ParameterizedTypeImpl(java.lang.Class<?> raw ,java.lang.reflect.Type useOwner ,java.lang.reflect.Type[] typeArguments) {\n        this.java.lang.Class<?> = java.lang.Class<?>;\n        this.java.lang.reflect.Type = java.lang.reflect.Type;\n        this.java.lang.reflect.Type[] = java.lang.reflect.Type[];\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public java.lang.reflect.Type getRawType() {\n        return java.lang.Class<?>;\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public java.lang.reflect.Type getOwnerType() {\n        return java.lang.reflect.Type;\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public java.lang.reflect.Type[] getActualTypeArguments() {\n        return java.lang.reflect.Type[].clone();\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public java.lang.String toString() {\n        return org.apache.commons.lang3.reflect.TypeUtils.org.apache.commons.lang3.reflect.TypeUtils.toString(this);\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        return (java.lang.Object == this) || ((java.lang.Object instanceof java.lang.reflect.ParameterizedType) && org.apache.commons.lang3.reflect.TypeUtils.(org.apache.commons.lang3.reflect.TypeUtils.equals(this, ((java.lang.reflect.ParameterizedType)(java.lang.Object)))));\n    }\n\n    /** \n     * {@inheritDoc}\n     */\n@java.lang.Override\n    public int hashCode() {\n        int int = 71 << 4;\n        int |= java.lang.Class<?>.hashCode();\n        int <<= 4;\n        int |= org.apache.commons.lang3.ObjectUtils.org.apache.commons.lang3.ObjectUtils.hashCode(java.lang.reflect.Type);\n        int <<= 8;\n        int |= java.util.Arrays.java.util.Arrays.hashCode(java.lang.reflect.Type[]);\n        return int;\n    }\n}","type":"CtClassImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDateParser:750","sourceCode":"new org.apache.commons.lang3.time.FastDateParser.NumberStrategy(java.util.Calendar.int) {\n    @java.lang.Override\n    int modify(final int iValue) {\n        return int % 24;\n    }\n}","type":"CtNewClassImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringBuilder:486","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, null, java.lang.Object[], null)","type":"CtInvocationImpl"},"failures":[92,93,94,95,96,97,98,99,100,101,50,102,103,104,105,106,107,108,109,110,111],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:614","sourceCode":"if (int > 0) {\n    int = -int;\n} else {\n    int = int;\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:756","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    if ((int > int) && ((char[][(int - 1)]) == char)) {\n        org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        int--;\n        boolean = true;\n        int--;\n    } else {\n        final int int = int;\n        int += int;\n        int int = 0;\n        int int = 0;\n        while (int < int) {\n            if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n                int++;\n                int += int;\n                continue;\n            } \n            int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n            if (int == 0) {\n                int++;\n            } else {\n                if (int == 0) {\n                    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                    if (boolean) {\n                        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                    } \n                    int += int;\n                    final int int = int;\n                    java.lang.String java.lang.String = java.lang.String;\n                    java.lang.String java.lang.String = null;\n                    if (org.apache.commons.lang3.text.StrMatcher != null) {\n                        final char[] char[] = java.lang.String.toCharArray();\n                        int int = 0;\n                        for (int int = 0 ; int < (char[].int) ; int++) {\n                            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                                break;\n                            } \n                            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                                java.lang.String = java.lang.String.substring(0, int);\n                                java.lang.String = java.lang.String.substring((int + int));\n                                break;\n                            } \n                        }\n                    } \n                    if (java.util.List<java.lang.String> == null) {\n                        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                    } \n                    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                    java.util.List<java.lang.String>.add(java.lang.String);\n                    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                    if (java.lang.String == null) {\n                        java.lang.String = java.lang.String;\n                    } \n                    if (java.lang.String != null) {\n                        final int int = java.lang.String.length();\n                        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                        boolean = true;\n                        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                        int = (int + int) - (int - int);\n                        int += int;\n                        int += int;\n                        int += int;\n                        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                    } \n                    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                    break;\n                } else {\n                    int--;\n                    int += int;\n                }\n            }\n        }\n    }\n}","type":"CtIfImpl"},"failures":[],"status":-2,"name":"replace","type":"adrStmt","variableMapping":{"v":"lengthChange","u":"bufEnd","t":"lengthChange"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:218","sourceCode":"int /= 2","type":"CtOperatorAssignmentImpl"},"failures":[112],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBetween":2,"org.apache.commons.lang3.ConversionTest.testHexToLong":86,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeWithDelimiters_String":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":99,"org.apache.commons.lang3.mutable.MutableDoubleTest.testAddValueObject":85,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":53,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_AD":23,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":51,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_BC":26,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":9,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":55,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":57,"org.apache.commons.lang3.time.FastDateParserTest.testParseZone":32,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":3,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":0,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":106,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testLongArrayArray":105,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_AD":15,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":72,"org.apache.commons.lang3.time.FastDateParserTest.testParseNumerics":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":97,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":71,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_LongNoEra_BC":24,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testSpecialCharacters":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":101,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testBelow":1,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":52,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLANG_832":19,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":56,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringInt":77,"org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullInit":91,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":110,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testQuotes":27,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":75,"org.apache.commons.lang3.time.FastDateParserTest.testLang538":38,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_AD":20,"org.apache.commons.lang3.text.WordUtilsTest.testInitials_String_charArray":88,"org.apache.commons.lang3.time.FastDateFormatTest.testParseSync":7,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseZone":12,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":108,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_BC":44,"org.apache.commons.lang3.ConversionTest.testLongToByteArray":59,"org.apache.commons.lang3.mutable.MutableDoubleTest.testAddValuePrimitive":82,"org.apache.commons.lang3.ConversionTest.testUuidToByteArray":58,"org.apache.commons.lang3.time.FastDateParserTest.testDayOf":31,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Short_AD":25,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":102,"org.apache.commons.lang3.text.WordUtilsTest.testUncapitalizeWithDelimiters_String":89,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":54,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":29,"org.apache.commons.lang3.mutable.MutableDoubleTest.testPrimitiveValues":80,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":67,"org.apache.commons.lang3.mutable.MutableObjectTest.testEquals":4,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testLongArrayArray":111,"org.apache.commons.lang3.mutable.MutableDoubleTest.testConstructors":79,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_ShortNoEra_BC":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":64,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseLongShort":22,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testLongArrayArray":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":50,"org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToInt":61,"org.apache.commons.lang3.time.FastDateParserTest.testQuotes":47,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":70,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLocales_Long_BC":16,"org.apache.commons.lang3.math.NumberUtilsTest.testMinShort":6,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":66,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":112,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":74,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":76,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testParseNumerics":17,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":65,"org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testStartMultipleTimes":62,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testLongArrayArray":109,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testMilleniumBug":10,"org.apache.commons.lang3.time.FastDateParserTest.testAmPm":33,"org.apache.commons.lang3.time.FastDateParserTest.testMilleniumBug":30,"org.apache.commons.lang3.time.FastDateParserTest.testLANG_832":39,"org.apache.commons.lang3.time.FastDateParserTest.testParseLongShort":42,"org.apache.commons.lang3.mutable.MutableDoubleTest.testSubtractValuePrimitive":81,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":95,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testLongArrayArray":103,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_BC":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":49,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_LongNoEra_AD":43,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":96,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLang538":18,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":63,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_BC":36,"org.apache.commons.lang3.time.FastDateParserTest.testSpecialCharacters":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":94,"org.apache.commons.lang3.mutable.MutableDoubleTest.testSubtractValueObject":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":100,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":92,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_ShortNoEra_AD":40,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_BC":46,"org.apache.commons.lang3.ObjectUtilsTest.testMin":5,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testLowYearPadding":14,"org.apache.commons.lang3.mutable.MutableDoubleTest.testToDouble":78,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":68,"org.apache.commons.lang3.time.FastDateParserTest.testLowYearPadding":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":48,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Long_AD":35,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":69,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":73,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testDayOf":11,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testAmPm":13,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":104,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String":90,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testLongArrayArray":107,"org.apache.commons.lang3.time.FastDateParserTest.testLocales_Short_AD":45,"org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx":60,"org.apache.commons.lang3.mutable.MutableDoubleTest.testGetSet":84}}]

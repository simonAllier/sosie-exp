[{"transplantationPoint":{"position":"org.apache.commons.lang3.time.StopWatch:288","sourceCode":"this.org.apache.commons.lang3.time.StopWatch.State = org.apache.commons.lang3.time.StopWatch.State.org.apache.commons.lang3.time.StopWatch.State","type":"CtAssignmentImpl"},"failures":[0,1,2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:222","sourceCode":"return double","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:208","sourceCode":"return org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.max(org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.max(double, double), double)","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"b":"c"}},{"position":"org.apache.commons.lang3.Conversion:1127","failures":[4],"status":-1,"binaryOperator":"1 << int","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:2296","sourceCode":"int = int < 0 ? 0 : int","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1088","sourceCode":"int = (int * 1) + int","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"startIndex":"i"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:953","sourceCode":"new java.lang.StringBuilder(32).append(org.apache.commons.lang3.math.Fraction.getNumerator()).append('/').append(org.apache.commons.lang3.math.Fraction.getDenominator())","type":"CtInvocationImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:485","sourceCode":"if ((java.lang.reflect.Method.getName().equals(java.lang.String)) && org.apache.commons.lang3.ClassUtils.(org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>[], java.lang.reflect.Method.getParameterTypes(), true))) {\n    final java.lang.reflect.Method java.lang.reflect.Method = org.apache.commons.lang3.reflect.MethodUtils.org.apache.commons.lang3.reflect.MethodUtils.getAccessibleMethod(java.lang.reflect.Method);\n    if ((java.lang.reflect.Method != null) && ((java.lang.reflect.Method == null) || (org.apache.commons.lang3.reflect.MemberUtils.(org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(java.lang.reflect.Method.getParameterTypes(), java.lang.reflect.Method.getParameterTypes(), java.lang.Class<?>[])) < 0))) {\n        java.lang.reflect.Method = java.lang.reflect.Method;\n    } \n} ","type":"CtIfImpl"},"failures":[6,7,8,9,10,11,12,13,14,15],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.math.Fraction:280","failures":[16,5,17],"status":-1,"binaryOperator":"(int * int)","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.RandomStringUtils:246","sourceCode":"if (int <= int) {\n    throw new java.lang.IllegalArgumentException(((((\"Parameter end (\" + int) + \") must be greater than start (\") + int) + \")\"));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:803","sourceCode":"if (int > 0) {\n    org.apache.commons.lang3.text.StrBuilder.append(char[], int, int);\n    int += int;\n    continue;\n} ","type":"CtIfImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"start":"pos","end":"pos"}},{"transplant":{"position":"org.apache.commons.lang3.SystemUtils:875","sourceCode":"org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(\"1.2\")","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.SystemUtils:1152","sourceCode":"org.apache.commons.lang3.SystemUtils.org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.java.lang.String) + \" 9\"), \"4.0\")","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:381","sourceCode":"if (java.lang.String.endsWith(\"ZZ\")) {\n    java.lang.String = java.lang.String.replaceAll(\"([-+][0-9][0-9]):([0-9][0-9])$\", \"$1$2\");\n} ","type":"CtIfImpl"},"failures":[68],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:735","sourceCode":"int = 16","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:597","sourceCode":"int /= 2","type":"CtOperatorAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"radix":"v"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilderReader:2893","sourceCode":"if (long < 0) {\n    return 0;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:903","sourceCode":"if (0 == int) {\n    return long;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"n":"dstInit"}},{"position":"org.apache.commons.lang3.time.DateUtils:1687","inlineConstant":"long long = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.BitField:84","sourceCode":"return org.apache.commons.lang3.BitField.((short)(getValue(short)))","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.BitField:106","sourceCode":"return org.apache.commons.lang3.BitField.((short)(getRawValue(short)))","type":"CtReturnImpl"},"failures":[69],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:518","sourceCode":"return org.apache.commons.lang3.ArrayUtils.java.lang.String[]","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:331","sourceCode":"return java.util.List<java.lang.String>.toArray(org.apache.commons.lang3.ArrayUtils.java.lang.String[])","type":"CtReturnImpl"},"failures":[70,71,72],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:109","sourceCode":"return 12","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.BitField:66","sourceCode":"return org.apache.commons.lang3.BitField.(getRawValue(int)) >> (int)","type":"CtReturnImpl"},"failures":[73,74,75,76,77],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:555","sourceCode":"return '7'","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:552","sourceCode":"if (((boolean[].int) > (int + 1)) && (boolean[][(int + 1)])) {\n    if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n        if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n            return '7';\n        } else {\n            return '6';\n        }\n    } else {\n        if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n            return '5';\n        } else {\n            return '4';\n        }\n    }\n} else {\n    if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n        if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n            return '3';\n        } else {\n            return '2';\n        }\n    } else {\n        if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n            return '1';\n        } else {\n            return '0';\n        }\n    }\n}","type":"CtIfImpl"},"failures":[78,79],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:1131","sourceCode":"if (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.isEmpty(java.lang.String)) {\n    org.apache.commons.lang3.text.StrSubstitutor.setValueDelimiterMatcher(null);\n    return this;\n} ","type":"CtIfImpl"},"failures":[80],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:226","sourceCode":"return java.lang.Float.java.lang.Float.parseFloat(java.lang.String)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:199","sourceCode":"return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, 0.0F)","type":"CtReturnImpl"},"failures":[81],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:611","sourceCode":"try {\n    if (int <= 16) {\n        final java.lang.Double java.lang.Double = org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String);\n        if (!((java.lang.Double.isInfinite()) || (((java.lang.Double.doubleValue()) == 0.0) && (!boolean)))) {\n            return java.lang.Double;\n        } \n    } \n} catch (final java.lang.NumberFormatException java.lang.NumberFormatException) {\n}","type":"CtTryImpl"},"failures":[82,83,84],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:1173","sourceCode":"return java.lang.Math.min(java.lang.Math.min(double, double), double)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:106","sourceCode":"if (java.lang.Double.java.lang.Double.isNaN(double)) {\n    return double;\n} else {\n    return java.lang.Math.java.lang.Math.min(double, double);\n}","type":"CtIfImpl"},"failures":[3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"b":"b","c":"a","a":"b","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:252","sourceCode":"java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = null","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.ConstructorUtils:113","sourceCode":"final java.lang.reflect.Constructor<T> java.lang.reflect.Constructor<T> = org.apache.commons.lang3.reflect.ConstructorUtils.org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class<T>, java.lang.Class<?>[])","type":"CtLocalVariableImpl"},"failures":[85],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:679","sourceCode":"throw new java.lang.ArithmeticException(\"overflow: add\")","type":"CtThrowImpl"},"failures":[86],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer":18,"org.apache.commons.lang3.text.StrTokenizerTest.testToString":30,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":17,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":19,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyIncludingInterfaces":6,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":65,"org.apache.commons.lang3.math.FractionTest.testFactory_double":16,"org.apache.commons.lang3.text.StrTokenizerTest.test1":42,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed1":66,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicTrimmed2":67,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty1":22,"org.apache.commons.lang3.text.StrTokenizerTest.test3":44,"org.apache.commons.lang3.BitFieldTest.testGetShortRawValue":69,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicEmpty2":23,"org.apache.commons.lang3.ConversionTest.testBinaryToShort":4,"org.apache.commons.lang3.text.StrTokenizerTest.test2":43,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor":85,"org.apache.commons.lang3.text.StrTokenizerTest.test8":49,"org.apache.commons.lang3.math.FractionTest.testAdd":86,"org.apache.commons.lang3.BitFieldTest.testGetValue":73,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_charArray":29,"org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss":84,"org.apache.commons.lang3.text.StrTokenizerTest.test5":46,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":70,"org.apache.commons.lang3.text.StrTokenizerTest.test4":45,"org.apache.commons.lang3.text.StrTokenizerTest.test7":48,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethodWithEvent":15,"org.apache.commons.lang3.text.StrTokenizerTest.test6":47,"org.apache.commons.lang3.ConversionTest.testBinaryBeMsb0ToHexDigit_2args":78,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed2":56,"org.apache.commons.lang3.BitFieldTest.testGetShortValue":74,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed3":57,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed4":58,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassInputChange":51,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":71,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicIgnoreTrimmed1":55,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude":83,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":9,"org.apache.commons.lang3.math.IEEE754rUtilsTest.testLang381":3,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char_char":27,"org.apache.commons.lang3.text.StrTokenizerTest.testReset_String":40,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":25,"org.apache.commons.lang3.ConversionTest.testBinaryBeMsb0ToHexDigit":79,"org.apache.commons.lang3.text.StrTokenizerTest.testTokenizeSubclassOutputChange":31,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetOverrideHierarchyExcludingInterfaces":10,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String_char":50,"org.apache.commons.lang3.time.StopWatchTest.testBooleanStates":0,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeStaticMethod":7,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":54,"org.apache.commons.lang3.text.StrTokenizerTest.testListArray":32,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":81,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog":77,"org.apache.commons.lang3.reflect.MethodUtilsTest.testNullArgument":8,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic1":60,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_String":41,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char":24,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray_char_char":53,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic5":64,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic4":63,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic3":62,"org.apache.commons.lang3.text.StrTokenizerTest.testBasic2":61,"org.apache.commons.lang3.BitFieldTest.testSetValue":76,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted7":39,"org.apache.commons.lang3.reflect.MethodUtilsTest.testInvokeMethod":11,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted6":38,"org.apache.commons.lang3.event.EventUtilsTest.testAddEventListener":12,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted3":35,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted2":34,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted5":37,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted4":36,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":72,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuoted1":33,"org.apache.commons.lang3.math.FractionTest.testToProperString":5,"org.apache.commons.lang3.BitFieldTest.testSetShortValue":75,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicQuotedTrimmed1":59,"org.apache.commons.lang3.text.StrTokenizerTest.testConstructor_charArray":52,"org.apache.commons.lang3.text.StrSubstitutorTest.testGetSetValueDelimiter":80,"org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber":82,"org.apache.commons.lang3.event.EventUtilsTest.testBindEventsToMethod":13,"org.apache.commons.lang3.event.EventUtilsTest.testBindFilteredEventsToMethod":14,"org.apache.commons.lang3.time.StopWatchTest.testStopWatchSuspend":2,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":26,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim1":20,"org.apache.commons.lang3.time.StopWatchTest.testLang315":1,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":68,"org.apache.commons.lang3.text.StrTokenizerTest.testBasicDelim2":21,"org.apache.commons.lang3.text.StrTokenizerTest.testReset":28}}]

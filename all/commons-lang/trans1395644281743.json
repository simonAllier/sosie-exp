[{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:663","sourceCode":"if ((java.lang.Object != null) && ((java.lang.Class<?>.isInstance(java.lang.Object)) == false)) {\n    throw new java.lang.IllegalArgumentException(\"Specified class is not a superclass of the object\");\n} ","type":"CtIfImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.text.translate.NumericEntityUnescaper:82","sourceCode":"int int = int + 2","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.CodePointTranslator:37","sourceCode":"final int int = java.lang.Character.java.lang.Character.codePointAt(java.lang.CharSequence, int)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:738","sourceCode":"throw new java.lang.IllegalArgumentException(\"The date must not be null\")","type":"CtThrowImpl"},"failures":[0],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1240","sourceCode":"short = short","type":"CtAssignmentImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableDouble:146","sourceCode":"(double)--","type":"CtUnaryOperatorImpl"},"failures":[2],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:42","sourceCode":"throw new java.lang.IllegalArgumentException(\"Array cannot be empty.\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableShort:212","sourceCode":"return short","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1279","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double[])","type":"CtInvocationImpl"},"failures":[4],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.Conversion:913","failures":[5],"status":-1,"binaryOperator":"(int * 4) + int","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:334","sourceCode":"boolean boolean = false","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1437","sourceCode":"int int = java.lang.StringBuilder.length()","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.StopWatch:244","sourceCode":"throw new java.lang.IllegalStateException(\"Stopwatch is not running. \")","type":"CtThrowImpl"},"failures":[6],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.RandomStringUtils:235","sourceCode":"if (char[] != null) {\n    int = char[].int;\n} else {\n    if ((!boolean) && (!boolean)) {\n        int = java.lang.Integer.int;\n    } else {\n        int = 'z' + 1;\n        int = ' ';\n    }\n}","type":"CtIfImpl"},"failures":[7,8,9,10,11,12],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:647","sourceCode":"java.util.Arrays.sort(this.java.lang.String[])","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ReflectionToStringBuilder:642","sourceCode":"if (java.lang.String[] == null) {\n    this.java.lang.String[] = null;\n} else {\n    this.java.lang.String[] = org.apache.commons.lang3.builder.ReflectionToStringBuilder.org.apache.commons.lang3.builder.ReflectionToStringBuilder.toNoNullStringArray(java.lang.String[]);\n    java.util.Arrays.java.util.Arrays.sort(this.java.lang.String[]);\n}","type":"CtIfImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,4,96],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"excludeFieldNames":"excludeFieldNames","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.reflect.MemberUtils:136","sourceCode":"while ((java.lang.Class<?> != null) && (!(java.lang.Class<?>.equals(java.lang.Class<?>)))) {\n    if ((java.lang.Class<?>.isInterface()) && org.apache.commons.lang3.ClassUtils.(org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>))) {\n        float += 0.25F;\n        break;\n    } \n    float++;\n    java.lang.Class<?> = java.lang.Class<?>.getSuperclass();\n}","type":"CtWhileImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MemberUtils:137","sourceCode":"if ((java.lang.Class<?>.isInterface()) && org.apache.commons.lang3.ClassUtils.(org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>))) {\n    float += 0.25F;\n    break;\n} ","type":"CtIfImpl"},"failures":[97,98],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"destClass":"destClass","srcClass":"srcClass","cost":"cost","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.RandomStringUtils:284","sourceCode":"int++","type":"CtUnaryOperatorImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.ArrayUtils:6071","sourceCode":"java.lang.System.java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)","type":"CtInvocationImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"count":"srcIndex"}},{"transplant":{"position":"org.apache.commons.lang3.time.PaddedNumberField:834","sourceCode":"return 4","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BackgroundInitializer:264","sourceCode":"return 1","type":"CtReturnImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.BooleanUtils:242","sourceCode":"return (java.lang.Integer.intValue()) == 0 ? java.lang.Boolean.java.lang.Boolean : java.lang.Boolean.java.lang.Boolean","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.BooleanUtils:357","sourceCode":"if (java.lang.Integer == null) {\n    if (java.lang.Integer == null) {\n        return java.lang.Boolean.java.lang.Boolean;\n    } \n    if (java.lang.Integer == null) {\n        return java.lang.Boolean.java.lang.Boolean;\n    } \n    if (java.lang.Integer == null) {\n        return null;\n    } \n} else if (java.lang.Integer.equals(java.lang.Integer)) {\n    return java.lang.Boolean.java.lang.Boolean;\n} else if (java.lang.Integer.equals(java.lang.Integer)) {\n    return java.lang.Boolean.java.lang.Boolean;\n} else if (java.lang.Integer.equals(java.lang.Integer)) {\n    return null;\n} ","type":"CtIfImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"java.lang.Boolean.FALSE":"java.lang.Boolean.TRUE","value":"trueValue","java.lang.Boolean.TRUE":"java.lang.Boolean.TRUE"}},{"transplant":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:392","sourceCode":"int += 1000 * int","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:620","sourceCode":"int = (int - int) / 2","type":"CtAssignmentImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"seconds":"v","milliseconds":"v"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1056","sourceCode":"org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.validateArray(float[])","type":"CtInvocationImpl"},"failures":[99,100],"status":-1,"name":"delete","type":"adrStmt"},{"transplantationPoint":{"position":"org.apache.commons.lang3.LocaleUtils:123","sourceCode":"throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + java.lang.String))","type":"CtThrowImpl"},"failures":[101,102],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:309","sourceCode":"if ((int < 0) || (int >= (org.apache.commons.lang3.text.StrBuilder.length()))) {\n    throw new java.lang.StringIndexOutOfBoundsException(int);\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:773","sourceCode":"while (int < int) {\n    if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n        int++;\n        int += int;\n        continue;\n    } \n    int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n    if (int == 0) {\n        int++;\n    } else {\n        if (int == 0) {\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n            if (boolean) {\n                final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n            } \n            int += int;\n            final int int = int;\n            java.lang.String java.lang.String = java.lang.String;\n            java.lang.String java.lang.String = null;\n            if (org.apache.commons.lang3.text.StrMatcher != null) {\n                final char[] char[] = java.lang.String.toCharArray();\n                int int = 0;\n                for (int int = 0 ; int < (char[].int) ; int++) {\n                    if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                        break;\n                    } \n                    if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                        java.lang.String = java.lang.String.substring(0, int);\n                        java.lang.String = java.lang.String.substring((int + int));\n                        break;\n                    } \n                }\n            } \n            if (java.util.List<java.lang.String> == null) {\n                java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n            } \n            org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n            java.util.List<java.lang.String>.add(java.lang.String);\n            java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n            if (java.lang.String == null) {\n                java.lang.String = java.lang.String;\n            } \n            if (java.lang.String != null) {\n                final int int = java.lang.String.length();\n                org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                boolean = true;\n                int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                int = (int + int) - (int - int);\n                int += int;\n                int += int;\n                int += int;\n                char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n            } \n            java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n            break;\n        } else {\n            int--;\n            int += int;\n        }\n    }\n}","type":"CtWhileImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"index":"endMatchLen","this":"buf"}},{"position":"org.apache.commons.lang3.text.StrSubstitutor:773","failures":[],"status":0,"binaryOperator":"int < int","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:704","sourceCode":"return false","type":"CtReturnImpl"},"failures":[103],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:50","sourceCode":"if ((java.lang.Class<?> == null) || (java.lang.Class<?> == null)) {\n    return -1;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:54","sourceCode":"if (java.lang.Class<?>.equals(java.lang.Class<?>)) {\n    return 0;\n} ","type":"CtIfImpl"},"failures":[104,105],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.time.DurationFormatUtils:337","sourceCode":"if (int < 0) {\n    int -= 1;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharSetUtils:146","sourceCode":"if (org.apache.commons.lang3.CharSet.contains(char)) {\n    int++;\n} ","type":"CtIfImpl"},"failures":[106,107],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"months":"count","target":"count"}},{"transplant":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:535","sourceCode":"for (int int = 0 ; int < (java.util.List<java.lang.String>.size()) ; int++) {\n    java.util.List<java.lang.String>.add(java.util.List<java.lang.String>.get(int));\n}","type":"CtForImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:753","sourceCode":"while (int < int) {\n    final int int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n    if (int == 0) {\n        int++;\n    } else {\n        if ((int > int) && ((char[][(int - 1)]) == char)) {\n            org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n            char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n            int--;\n            boolean = true;\n            int--;\n        } else {\n            final int int = int;\n            int += int;\n            int int = 0;\n            int int = 0;\n            while (int < int) {\n                if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n                    int++;\n                    int += int;\n                    continue;\n                } \n                int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n                if (int == 0) {\n                    int++;\n                } else {\n                    if (int == 0) {\n                        java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                        if (boolean) {\n                            final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                            org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                            java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                        } \n                        int += int;\n                        final int int = int;\n                        java.lang.String java.lang.String = java.lang.String;\n                        java.lang.String java.lang.String = null;\n                        if (org.apache.commons.lang3.text.StrMatcher != null) {\n                            final char[] char[] = java.lang.String.toCharArray();\n                            int int = 0;\n                            for (int int = 0 ; int < (char[].int) ; int++) {\n                                if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                                    break;\n                                } \n                                if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                                    java.lang.String = java.lang.String.substring(0, int);\n                                    java.lang.String = java.lang.String.substring((int + int));\n                                    break;\n                                } \n                            }\n                        } \n                        if (java.util.List<java.lang.String> == null) {\n                            java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                            java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                        } \n                        org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                        java.util.List<java.lang.String>.add(java.lang.String);\n                        java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                        if (java.lang.String == null) {\n                            java.lang.String = java.lang.String;\n                        } \n                        if (java.lang.String != null) {\n                            final int int = java.lang.String.length();\n                            org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                            boolean = true;\n                            int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                            int = (int + int) - (int - int);\n                            int += int;\n                            int += int;\n                            int += int;\n                            char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                        } \n                        java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                        break;\n                    } else {\n                        int--;\n                        int += int;\n                    }\n                }\n            }\n        }\n    }\n}","type":"CtWhileImpl"},"failures":[108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"frames":"priorVariables","trace":"priorVariables"}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:1115","sourceCode":"if (int < int) {\n    int = int;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1240","sourceCode":"short = short","type":"CtAssignmentImpl"},"failures":[1],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.NumberUtils:1367","failures":[142],"status":-1,"binaryOperator":"((char[][int]) >= '0')","name":"negateConditional","type":"mutation"},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.OctalUnescaper:57","sourceCode":"java.io.Writer.write(java.lang.Integer.java.lang.Integer.parseInt(java.lang.StringBuilder.toString(), 8))","type":"CtInvocationImpl"},"failures":[143],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:96","sourceCode":"return new org.apache.commons.lang3.text.translate.NumericEntityEscaper(int , int , false)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:74","sourceCode":"return org.apache.commons.lang3.text.translate.NumericEntityEscaper.org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(0, int)","type":"CtReturnImpl"},"failures":[144,145],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"codepointLow":"codepoint","codepointHigh":"codepoint"}},{"transplant":{"position":"org.apache.commons.lang3.text.WordUtils:452","sourceCode":"if (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.isEmpty(java.lang.String)) {\n    return java.lang.String;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.StringUtils:4244","sourceCode":"if (org.apache.commons.lang3.StringUtils.org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.String, java.lang.String)) {\n    return java.lang.String.substring(java.lang.String.length());\n} ","type":"CtIfImpl"},"failures":[146],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:673","sourceCode":"return \"\"","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.tuple.Pair:161","sourceCode":"return new java.lang.StringBuilder().append('(').append(org.apache.commons.lang3.tuple.Pair<L, R>.getLeft()).append(',').append(org.apache.commons.lang3.tuple.Pair<L, R>.getRight()).append(')').toString()","type":"CtReturnImpl"},"failures":[147,148,149,150,151],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.mutable.MutableBoolean:88","sourceCode":"boolean = boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1393","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"value":"foundDigit"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:107","sourceCode":"return 4","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:100","sourceCode":"return org.apache.commons.lang3.math.NumberUtils.org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, 0)","type":"CtReturnImpl"},"failures":[152],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:1471","sourceCode":"if ((((int - 1) * 4) + int) >= 16) {\n    throw new java.lang.IllegalArgumentException(\"(nHexs-1)*4+srcPos is greather or equal to than 16\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:145","sourceCode":"if (int < 0) {\n    if ((int == (java.lang.Integer.int)) || (int == (java.lang.Integer.int))) {\n        throw new java.lang.ArithmeticException(\"overflow: can\\'t negate\");\n    } \n    int = -int;\n    int = -int;\n} ","type":"CtIfImpl"},"failures":[153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"srcPos":"denominator","nHexs":"denominator"}},{"failureDictionary":{"org.apache.commons.lang3.tuple.MutablePairTest.testToString":147,"org.apache.commons.lang3.ConversionTest.testHexToLong":5,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_emptyArray":99,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle":46,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArray":40,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":77,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":81,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":57,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePartialString_noReplace":141,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtStart":138,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":83,"org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase":146,"org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters":144,"org.apache.commons.lang3.mutable.MutableShortTest.testPrimitiveValues":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchyArrayList":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":88,"org.apache.commons.lang3.text.translate.NumericEntityEscaperTest.testAbove":145,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray":18,"org.apache.commons.lang3.mutable.MutableDoubleTest.testDecrement":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShort":45,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray":15,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmptyKeys":129,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":66,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":76,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSolo":126,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray":42,"org.apache.commons.lang3.time.DateUtilsTest.testRound":0,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoVariables":131,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":68,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part":102,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArrayArray":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":94,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":85,"org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part":101,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":59,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":55,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableDisabled":136,"org.apache.commons.lang3.text.StrSubstitutorTest.testSubstituteDefaultProperties":110,"org.apache.commons.lang3.tuple.PairTest.testFormattable_simple":149,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":72,"org.apache.commons.lang3.math.FractionTest.testInvert":165,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":89,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceIncompletePrefix":137,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBlank":43,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls":21,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceChangedMap":127,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":29,"org.apache.commons.lang3.time.StopWatchTest.testBadStates":6,"org.apache.commons.lang3.RandomStringUtilsTest.testLang100":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":90,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":152,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":91,"org.apache.commons.lang3.math.FractionTest.testPow":155,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorNoArgs":124,"org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_nullArray":100,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplace":119,"org.apache.commons.lang3.text.StrSubstitutorTest.testSamePrefixAndSuffix":118,"org.apache.commons.lang3.math.FractionTest.testReduce":167,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":65,"org.apache.commons.lang3.math.FractionTest.testCompareTo":158,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":70,"org.apache.commons.lang3.tuple.PairTest.testToString":150,"org.apache.commons.lang3.text.translate.OctalUnescaperTest.testBetween":143,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceAdjacentAtEnd":125,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":79,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSimple":114,"org.apache.commons.lang3.RandomStringUtilsTest.testLANG805":7,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":60,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":64,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceSoloEscaping":109,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":87,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":71,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":12,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixNoSuffix":121,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_valid":24,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceToIdentical":113,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":54,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort":1,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplacePrefixNoSuffix":134,"org.apache.commons.lang3.builder.ToStringBuilderTest.test_setUpToClass_invalid":52,"org.apache.commons.lang3.math.FractionTest.testSubtract":156,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":80,"org.apache.commons.lang3.math.FractionTest.testAdd":154,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByte":47,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull":23,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNoPrefixSuffix":111,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionNull":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":4,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceEqualObject":105,"org.apache.commons.lang3.math.FractionTest.testNegate":166,"org.apache.commons.lang3.math.FractionTest.testAbs":153,"org.apache.commons.lang3.builder.ToStringBuilderTest.testChar":48,"org.apache.commons.lang3.reflect.MethodUtilsTest.testGetMatchingAccessibleMethod":97,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection":13,"org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod":98,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":74,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":86,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":82,"org.apache.commons.lang3.math.FractionTest.testFactory_String_improper":159,"org.apache.commons.lang3.tuple.PairTest.testFormattable_padded":148,"org.apache.commons.lang3.math.FractionTest.testToString":157,"org.apache.commons.lang3.text.StrSubstitutorTest.testResolveVariable":135,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":69,"org.apache.commons.lang3.math.FractionTest.testMultiply":164,"org.apache.commons.lang3.math.FractionTest.testHashCode":161,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplaceSystemProperties":122,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArrayArray":36,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEmpty":139,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscaping":108,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":93,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":73,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBoolean":53,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":142,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":28,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int":168,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull":14,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":84,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle":34,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":75,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapFull":140,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString":107,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloat":44,"org.apache.commons.lang3.math.FractionTest.testEquals":163,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceRecursive":116,"org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray":106,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":62,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":92,"org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix":115,"org.apache.commons.lang3.reflect.InheritanceUtilsTest.testDistanceEqual":104,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariable":133,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArray":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":95,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceComplexEscaping":132,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceUnknownKey":120,"org.apache.commons.lang3.math.FractionTest.testDivide":162,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLong":49,"org.apache.commons.lang3.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude":20,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric":11,"org.apache.commons.lang3.text.StrSubstitutorTest.testCyclicReplacement":112,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInt":39,"org.apache.commons.lang3.tuple.ImmutablePairTest.testToString":151,"org.apache.commons.lang3.math.FractionTest.testToProperString":160,"org.apache.commons.lang3.text.StrSubstitutorTest.testConstructorMapPrefixSuffix":117,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceWeirdPattens":128,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":78,"org.apache.commons.lang3.text.StrSubstitutorTest.testDefaultValueDelimiters":130,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceInVariableRecursive":123,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":96,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToStringUsingMultiLineStyle":35,"org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceNull":103}}]

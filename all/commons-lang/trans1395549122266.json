[{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:736","sourceCode":"int += 2","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1399","sourceCode":"int = (int * 4) + int","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"pos":"i"}},{"transplant":{"position":"org.apache.commons.lang3.text.ExtendedMessageFormat:410","sourceCode":"int int = -1","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:79","sourceCode":"final int int = java.lang.Character.java.lang.Character.digit(char, 16)","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.WordUtils:383","sourceCode":"if (java.lang.Character.java.lang.Character.isLowerCase(char)) {\n    if (boolean) {\n        char[][int] = java.lang.Character.java.lang.Character.toTitleCase(char);\n        boolean = false;\n    } else {\n        char[][int] = java.lang.Character.java.lang.Character.toUpperCase(char);\n    }\n} else {\n    boolean = java.lang.Character.java.lang.Character.isWhitespace(char);\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:384","sourceCode":"if (boolean) {\n    char[][int] = java.lang.Character.java.lang.Character.toTitleCase(char);\n    boolean = false;\n} else {\n    char[][int] = java.lang.Character.java.lang.Character.toUpperCase(char);\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.time.DateUtils:1081","failures":[1,2,3,4,5,6,7],"status":-1,"binaryOperator":"(java.util.Calendar.get(int[][0])) - int","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.WordUtils:121","sourceCode":"int += int","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:119","sourceCode":"java.lang.StringBuilder.append(java.lang.String.substring(int, (int + int)))","type":"CtInvocationImpl"},"failures":[8],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.NumberUtils:1341","inlineConstant":"boolean boolean = false","failures":[9],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Range:315","sourceCode":"return false","type":"CtReturnImpl"},"failures":[10],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:521","sourceCode":"if (boolean[][int]) {\n    if (((boolean[].int) > (int + 1)) && (boolean[][(int + 1)])) {\n        if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return 'f';\n            } else {\n                return 'e';\n            }\n        } else {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return 'd';\n            } else {\n                return 'c';\n            }\n        }\n    } else {\n        if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return 'b';\n            } else {\n                return 'a';\n            }\n        } else {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return '9';\n            } else {\n                return '8';\n            }\n        }\n    }\n} else {\n    if (((boolean[].int) > (int + 1)) && (boolean[][(int + 1)])) {\n        if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return '7';\n            } else {\n                return '6';\n            }\n        } else {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return '5';\n            } else {\n                return '4';\n            }\n        }\n    } else {\n        if (((boolean[].int) > (int + 2)) && (boolean[][(int + 2)])) {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return '3';\n            } else {\n                return '2';\n            }\n        } else {\n            if (((boolean[].int) > (int + 3)) && (boolean[][(int + 3)])) {\n                return '1';\n            } else {\n                return '0';\n            }\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:350","sourceCode":"if (((boolean[].int) > (int + 1)) && (boolean[][(int + 1)])) {\n    if (boolean[][int]) {\n        return '3';\n    } else {\n        return '2';\n    }\n} else {\n    if (boolean[][int]) {\n        return '1';\n    } else {\n        return '0';\n    }\n}","type":"CtIfImpl"},"failures":[11,12],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:846","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldEnd(java.lang.StringBuffer, java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:491","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendSummarySize(java.lang.StringBuffer, java.lang.String, ((java.util.Map<?, ?>)(java.lang.Object)).size())","type":"CtInvocationImpl"},"failures":[13,14,15,16,17,18,19,20],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.time.FastDateParser:434","sourceCode":"java.lang.String = java.lang.String.substring(1, ((java.lang.String.length()) - 1))","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:373","sourceCode":"java.lang.String = java.lang.String.substring(0, ((java.lang.String.length()) - 1))","type":"CtAssignmentImpl"},"failures":[21],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"formatField":"pattern"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:873","sourceCode":"throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 16\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:190","sourceCode":"throw new java.lang.ArithmeticException(\"Numerator too large to represent as an Integer.\")","type":"CtThrowImpl"},"failures":[22],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.BooleanUtils:976","sourceCode":"for (final boolean boolean : boolean[]) {\n    if (boolean) {\n        return true;\n    } \n}","type":"CtForEachImpl"},"failures":[23,24,25,26],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.Conversion:735","failures":[27],"status":-1,"binaryOperator":"(long & (~long)) | long","name":"math","type":"mutation"},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.FormatCache:194","sourceCode":"if (java.lang.String == null) {\n    try {\n        java.text.DateFormat java.text.DateFormat;\n        if (java.lang.Integer == null) {\n            java.text.DateFormat = java.text.DateFormat.java.text.DateFormat.getTimeInstance(java.lang.Integer.intValue(), java.util.Locale);\n        } else if (java.lang.Integer == null) {\n            java.text.DateFormat = java.text.DateFormat.java.text.DateFormat.getDateInstance(java.lang.Integer.intValue(), java.util.Locale);\n        } else {\n            java.text.DateFormat = java.text.DateFormat.java.text.DateFormat.getDateTimeInstance(java.lang.Integer.intValue(), java.lang.Integer.intValue(), java.util.Locale);\n        }\n        java.lang.String = ((java.text.SimpleDateFormat)(java.text.DateFormat)).toPattern();\n        final java.lang.String java.lang.String = org.apache.commons.lang3.time.FormatCache.java.util.concurrent.ConcurrentMap<org.apache.commons.lang3.time.FormatCache.MultipartKey, java.lang.String>.putIfAbsent(org.apache.commons.lang3.time.FormatCache.MultipartKey, java.lang.String);\n        if (java.lang.String != null) {\n            java.lang.String = java.lang.String;\n        } \n    } catch (final java.lang.ClassCastException java.lang.ClassCastException) {\n        throw new java.lang.IllegalArgumentException((\"No date time pattern for locale: \" + java.util.Locale));\n    }\n} ","type":"CtIfImpl"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:295","sourceCode":"if (int == 25) {\n    throw new java.lang.ArithmeticException(\"Unable to convert double to fraction\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:275","sourceCode":"do {\n    double = double;\n    int = ((int)(double / double));\n    double = double;\n    double = double - (int * double);\n    int = (int * int) + int;\n    int = (int * int) + int;\n    double = ((double)(int)) / ((double)(int));\n    double = java.lang.Math.java.lang.Math.abs((double - double));\n    int = int;\n    double = double;\n    double = double;\n    int = int;\n    int = int;\n    int = int;\n    int = int;\n    int++;\n} while ((((double > double) && (int <= 10000)) && (int > 0)) && (int < 25) )","type":"CtDoImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"i":"numer1"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:337","sourceCode":"char[][int] = java.lang.Character.java.lang.Character.toLowerCase(char)","type":"CtAssignmentImpl"},"failures":[40,41],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:846","sourceCode":"return true","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.mutable.MutableObject:104","sourceCode":"return false","type":"CtReturnImpl"},"failures":[42],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:360","sourceCode":"java.text.SimpleDateFormat = new java.text.SimpleDateFormat()","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:362","sourceCode":"java.text.SimpleDateFormat = new java.text.SimpleDateFormat(\"\" , java.util.Locale)","type":"CtAssignmentImpl"},"failures":[43],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"parser":"parser"}},{"position":"org.apache.commons.lang3.time.DateUtils:1170","failures":[44],"status":-1,"binaryOperator":"int == (org.apache.commons.lang3.time.DateUtils.int)","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:109","sourceCode":"return java.lang.Math.java.lang.Math.min(double, double)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1279","sourceCode":"return java.lang.Math.java.lang.Math.max(java.lang.Math.java.lang.Math.max(double, double), double)","type":"CtReturnImpl"},"failures":[45,46],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ObjectUtils:459","sourceCode":"if ((org.apache.commons.lang3.ObjectUtils.compare(T, T, false)) > 0) {\n    T = T;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.ObjectUtils:432","sourceCode":"if (T[] != null) {\n    for (final T T : T[]) {\n        if (org.apache.commons.lang3.ObjectUtils.(org.apache.commons.lang3.ObjectUtils.compare(T, T, true)) < 0) {\n            T = T;\n        } \n    }\n} ","type":"CtIfImpl"},"failures":[47],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"result":"result","value":"result","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.time.PaddedNumberField:859","sourceCode":"int = 3","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1264","sourceCode":"int = (int * 16) + int","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"digits":"shift"}},{"position":"org.apache.commons.lang3.text.WordUtils:460","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"position":"org.apache.commons.lang3.Conversion:1014","inlineConstant":"int int = 0","failures":[],"status":0,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1212","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:502","sourceCode":"if (boolean) {\n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((int[])(java.lang.Object)));\n} else {\n    org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((int[])(java.lang.Object)));\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"buffer":"buffer","fieldName":"fieldName","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.reflect.ParameterizedTypeImpl:208","sourceCode":"int int = 71 << 4","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1123","sourceCode":"int int = 0","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:354","sourceCode":"if ((java.lang.String == null) || (java.lang.String[] == null)) {\n    throw new java.lang.IllegalArgumentException(\"Date and Patterns must not be null\");\n} ","type":"CtIfImpl"},"failures":[48],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:145","sourceCode":"if (int < 0) {\n    if ((int == (java.lang.Integer.int)) || (int == (java.lang.Integer.int))) {\n        throw new java.lang.ArithmeticException(\"overflow: can\\'t negate\");\n    } \n    int = -int;\n    int = -int;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:217","sourceCode":"if ((int == (java.lang.Integer.int)) && ((int & 1) == 0)) {\n    int /= 2;\n    int /= 2;\n} ","type":"CtIfImpl"},"failures":[49],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1421","sourceCode":"for (int int = 0 ; int < (boolean[].int) ; int++) {\n    if (int > 0) {\n        java.lang.StringBuffer.append(java.lang.String);\n    } \n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean[][int]);\n}","type":"CtForImpl"},"failures":[50,51,52],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:5184","sourceCode":"if ((int < 0) || (int >= int)) {\n    throw new java.lang.IndexOutOfBoundsException((((\"Index: \" + int) + \", Length: \") + int));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.ObjectUtils:774","sourceCode":"if ((int < (java.lang.Byte.byte)) || (int > (java.lang.Byte.byte))) {\n    throw new java.lang.IllegalArgumentException(((\"Supplied value must be a valid byte literal between -128 and 127: [\" + int) + \"]\"));\n} ","type":"CtIfImpl"},"failures":[53],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"index":"v","length":"v"}},{"position":"org.apache.commons.lang3.AnnotationUtils:143","failures":[54],"status":-1,"name":"returnValue","return":"return false","type":"mutation"},{"failureDictionary":{"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_3items":24,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear":2,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_3items":26,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDefaults":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":52,"org.apache.commons.lang3.ObjectUtilsTest.testConstMethods":53,"org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance":30,"org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_2items":23,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObject":18,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":51,"org.apache.commons.lang3.time.FastDateFormat_ParserTest.testShortDateStyleWithLocales":38,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDefaults":37,"org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int":49,"org.apache.commons.lang3.text.WordUtilsTest.testWrap_StringIntStringBoolean":8,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit":11,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth":1,"org.apache.commons.lang3.text.WordUtilsTest.testUncapitalize_String":40,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObject":14,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArrayArray":50,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectBuild":16,"org.apache.commons.lang3.RangeTest.testContainsRange":10,"org.apache.commons.lang3.time.DateUtilsTest.testRound":6,"org.apache.commons.lang3.ConversionTest.testShortArrayToLong":27,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth":3,"org.apache.commons.lang3.time.FastDatePrinterTest.testShortDateStyleWithLocales":39,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":7,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance":36,"org.apache.commons.lang3.time.DateUtilsTest.testTruncate":5,"org.apache.commons.lang3.ConversionTest.testLongToHex":0,"org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance":31,"org.apache.commons.lang3.time.FastDateFormatTest.testCheckDifferingStyles":35,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObject":19,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":17,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObject":20,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":9,"org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType":54,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit_2args":12,"org.apache.commons.lang3.math.FractionTest.testFactory_int_int_int":22,"org.apache.commons.lang3.math.NumberUtilsTest.testLang381":46,"org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear":4,"org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_2items":25,"org.apache.commons.lang3.ObjectUtilsTest.testMin":47,"org.apache.commons.lang3.time.DateUtilsTest.testLANG799_EN_WITH_DE_LOCALE":43,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObject":15,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObject":13,"org.apache.commons.lang3.time.FastDateFormat_PrinterTest.testShortDateStyleWithLocales":28,"org.apache.commons.lang3.text.WordUtilsTest.testUncapitalizeWithDelimiters_String":41,"org.apache.commons.lang3.time.FastDateParserTest.testShortDateStyleWithLocales":29,"org.apache.commons.lang3.time.FastDateFormatTest.testDateDefaults":33,"org.apache.commons.lang3.time.DateUtilsTest.testParseDate":48,"org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator":44,"org.apache.commons.lang3.mutable.MutableObjectTest.testEquals":42,"org.apache.commons.lang3.time.DateUtilsTest.testLang530":21,"org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble":45,"org.apache.commons.lang3.time.FastDateFormatTest.testTimeDateDefaults":32}}]

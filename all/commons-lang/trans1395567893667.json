[{"transplant":{"position":"org.apache.commons.lang3.CharacterIterator:294","sourceCode":"char = 0","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:469","sourceCode":"char = java.lang.String.charAt(int)","type":"CtAssignmentImpl"},"failures":[0],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"current":"firstSigDigit"}},{"transplant":{"position":"org.apache.commons.lang3.text.translate.JavaUnicodeEscaper:65","sourceCode":"return new org.apache.commons.lang3.text.translate.JavaUnicodeEscaper(int , int , true)","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:710","sourceCode":"return java.lang.Long.java.lang.Long.decode(java.lang.String)","type":"CtReturnImpl"},"failures":[],"status":-2,"name":"addRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.reflect.MethodUtils:432","sourceCode":"try {\n    return java.lang.Class<?>[][int].getDeclaredMethod(java.lang.String, java.lang.Class<?>[]);\n} catch (final java.lang.NoSuchMethodException java.lang.NoSuchMethodException) {\n}","type":"CtTryImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:433","sourceCode":"return java.lang.Class<?>[][int].getDeclaredMethod(java.lang.String, java.lang.Class<?>[])","type":"CtReturnImpl"},"failures":[],"status":-2,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.AnnotationUtils:177","sourceCode":"int += org.apache.commons.lang3.AnnotationUtils.org.apache.commons.lang3.AnnotationUtils.hashMember(java.lang.reflect.Method.getName(), java.lang.Object)","type":"CtOperatorAssignmentImpl"},"failures":[1],"status":-1,"name":"delete","type":"adrStmt"},{"position":"org.apache.commons.lang3.Conversion:1366","failures":[2],"status":-1,"binaryOperator":"(short >> int)","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:267","sourceCode":"return org.apache.commons.lang3.time.DateUtils.parseDate(java.lang.String, null, java.lang.String[])","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:310","sourceCode":"return org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.parseDateStrictly(java.lang.String, null, java.lang.String[])","type":"CtReturnImpl"},"failures":[3],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"str":"str","parsePatterns":"parsePatterns","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:143","sourceCode":"throw new java.lang.ArithmeticException(\"The denominator must not be zero\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:836","sourceCode":"throw new java.lang.IllegalArgumentException(\"(nBytes-1)*8+dstPos is greather or equal to than 32\")","type":"CtThrowImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:130","sourceCode":"return 3","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:122","sourceCode":"return int","type":"CtReturnImpl"},"failures":[4],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.time.DateUtils:179","sourceCode":"if ((java.util.Calendar == null) || (java.util.Calendar == null)) {\n    throw new java.lang.IllegalArgumentException(\"The date must not be null\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:651","sourceCode":"java.util.Calendar.setLenient(false)","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"cal1":"c","cal2":"c"}},{"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:643","sourceCode":"throw new java.lang.ArithmeticException(\"overflow: mul\")","type":"CtThrowImpl"},"failures":[5],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.text.translate.NumericEntityEscaper:110","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.ArrayUtils:3533","sourceCode":"return (char[] == null) || ((char[].int) == 0)","type":"CtReturnImpl"},"failures":[6,7,8,9,10,11],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:133","sourceCode":"return 11","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.InheritanceUtils:51","sourceCode":"return -1","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ClassUtils:95","sourceCode":"new java.util.HashMap<java.lang.Class<?>, java.lang.Class<?>>()","type":"CtNewClassImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.tuple.Pair:130","sourceCode":"if (java.lang.Object == this) {\n    return true;\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.Conversion:845","failures":[12],"status":-1,"binaryOperator":"(int & (~int))","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:538","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((float[])(java.lang.Object)))","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:530","sourceCode":"if (boolean) {\n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n} else {\n    org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, ((double[])(java.lang.Object)));\n}","type":"CtIfImpl"},"failures":[13,13,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,57,58],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:1097","sourceCode":"return org.apache.commons.lang3.text.StrTokenizer","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:1076","sourceCode":"try {\n    return org.apache.commons.lang3.text.StrTokenizer.cloneReset();\n} catch (final java.lang.CloneNotSupportedException java.lang.CloneNotSupportedException) {\n    return null;\n}","type":"CtTryImpl"},"failures":[59,60,61,62,63,64,65],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"cloned":"this"}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:442","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendNullText(java.lang.StringBuffer, java.lang.String)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:977","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, long[])","type":"CtInvocationImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:133","sourceCode":"return 11","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.CharRange:226","sourceCode":"return ((83 + (char)) + (7 * (char))) + (boolean ? 1 : 0)","type":"CtReturnImpl"},"failures":[66],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:1192","sourceCode":"int = int - 1","type":"CtAssignmentImpl"},"failures":[67],"status":-1,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.CharSetUtils:72","sourceCode":"char char = ' '","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:208","sourceCode":"final char char = char[][int]","type":"CtLocalVariableImpl"},"failures":[68,69,70,71],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:885","sourceCode":"return 0","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.tuple.Triple:96","sourceCode":"return new org.apache.commons.lang3.builder.CompareToBuilder().append(org.apache.commons.lang3.tuple.Triple<L, M, R>.getLeft(), org.apache.commons.lang3.tuple.Triple<L, M, R>.getLeft()).append(org.apache.commons.lang3.tuple.Triple<L, M, R>.getMiddle(), org.apache.commons.lang3.tuple.Triple<L, M, R>.getMiddle()).append(org.apache.commons.lang3.tuple.Triple<L, M, R>.getRight(), org.apache.commons.lang3.tuple.Triple<L, M, R>.getRight()).toComparison()","type":"CtReturnImpl"},"failures":[9,72,73,74,75],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.NumberUtils:889","sourceCode":"if ((double[][int]) < double) {\n    double = double[][int];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.IEEE754rUtils:48","sourceCode":"double = org.apache.commons.lang3.math.IEEE754rUtils.org.apache.commons.lang3.math.IEEE754rUtils.min(double[][int], double)","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:304","sourceCode":"if ((int > (int + 3)) && (boolean[][(int + 3)])) {\n    if ((int > (int + 2)) && (boolean[][(int + 2)])) {\n        if ((int > (int + 1)) && (boolean[][(int + 1)])) {\n            if (boolean[][int]) {\n                return 'f';\n            } else {\n                return 'e';\n            }\n        } else {\n            if (boolean[][int]) {\n                return 'd';\n            } else {\n                return 'c';\n            }\n        }\n    } else {\n        if ((int > (int + 1)) && (boolean[][(int + 1)])) {\n            if (boolean[][int]) {\n                return 'b';\n            } else {\n                return 'a';\n            }\n        } else {\n            if (boolean[][int]) {\n                return '9';\n            } else {\n                return '8';\n            }\n        }\n    }\n} else {\n    if ((int > (int + 2)) && (boolean[][(int + 2)])) {\n        if ((int > (int + 1)) && (boolean[][(int + 1)])) {\n            if (boolean[][int]) {\n                return '7';\n            } else {\n                return '6';\n            }\n        } else {\n            if (boolean[][int]) {\n                return '5';\n            } else {\n                return '4';\n            }\n        }\n    } else {\n        if ((int > (int + 1)) && (boolean[][(int + 1)])) {\n            if (boolean[][int]) {\n                return '3';\n            } else {\n                return '2';\n            }\n        } else {\n            if (boolean[][int]) {\n                return '1';\n            } else {\n                return '0';\n            }\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:459","sourceCode":"if (boolean[][(int + 1)]) {\n    if (boolean[][int]) {\n        return 'c';\n    } else {\n        return '4';\n    }\n} else {\n    if (boolean[][int]) {\n        return '8';\n    } else {\n        return '0';\n    }\n}","type":"CtIfImpl"},"failures":[76,77],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"srcPos":"srcPos","length":"srcPos","src":"src"}},{"position":"org.apache.commons.lang3.Conversion:768","inlineConstant":"int int = 0","failures":[78],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.reflect.MethodUtils:435","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.reflect.MethodUtils:124","sourceCode":"java.lang.Object[] = org.apache.commons.lang3.ArrayUtils.org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.math.Fraction:694","sourceCode":"final long long = ((long)(int)) - ((long)(int))","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:640","sourceCode":"final long long = ((long)(int)) * ((long)(int))","type":"CtLocalVariableImpl"},"failures":[],"status":0,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:756","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    if ((int > int) && ((char[][(int - 1)]) == char)) {\n        org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        int--;\n        boolean = true;\n        int--;\n    } else {\n        final int int = int;\n        int += int;\n        int int = 0;\n        int int = 0;\n        while (int < int) {\n            if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n                int++;\n                int += int;\n                continue;\n            } \n            int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n            if (int == 0) {\n                int++;\n            } else {\n                if (int == 0) {\n                    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                    if (boolean) {\n                        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                    } \n                    int += int;\n                    final int int = int;\n                    java.lang.String java.lang.String = java.lang.String;\n                    java.lang.String java.lang.String = null;\n                    if (org.apache.commons.lang3.text.StrMatcher != null) {\n                        final char[] char[] = java.lang.String.toCharArray();\n                        int int = 0;\n                        for (int int = 0 ; int < (char[].int) ; int++) {\n                            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                                break;\n                            } \n                            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                                java.lang.String = java.lang.String.substring(0, int);\n                                java.lang.String = java.lang.String.substring((int + int));\n                                break;\n                            } \n                        }\n                    } \n                    if (java.util.List<java.lang.String> == null) {\n                        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                    } \n                    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                    java.util.List<java.lang.String>.add(java.lang.String);\n                    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                    if (java.lang.String == null) {\n                        java.lang.String = java.lang.String;\n                    } \n                    if (java.lang.String != null) {\n                        final int int = java.lang.String.length();\n                        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                        boolean = true;\n                        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                        int = (int + int) - (int - int);\n                        int += int;\n                        int += int;\n                        int += int;\n                        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                    } \n                    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                    break;\n                } else {\n                    int--;\n                    int += int;\n                }\n            }\n        }\n    }\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:760","sourceCode":"if ((int > int) && ((char[][(int - 1)]) == char)) {\n    org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n    char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n    int--;\n    boolean = true;\n    int--;\n} else {\n    final int int = int;\n    int += int;\n    int int = 0;\n    int int = 0;\n    while (int < int) {\n        if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n            int++;\n            int += int;\n            continue;\n        } \n        int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n        if (int == 0) {\n            int++;\n        } else {\n            if (int == 0) {\n                java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                if (boolean) {\n                    final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                    org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                    java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                } \n                int += int;\n                final int int = int;\n                java.lang.String java.lang.String = java.lang.String;\n                java.lang.String java.lang.String = null;\n                if (org.apache.commons.lang3.text.StrMatcher != null) {\n                    final char[] char[] = java.lang.String.toCharArray();\n                    int int = 0;\n                    for (int int = 0 ; int < (char[].int) ; int++) {\n                        if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                            break;\n                        } \n                        if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                            java.lang.String = java.lang.String.substring(0, int);\n                            java.lang.String = java.lang.String.substring((int + int));\n                            break;\n                        } \n                    }\n                } \n                if (java.util.List<java.lang.String> == null) {\n                    java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                    java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                } \n                org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                java.util.List<java.lang.String>.add(java.lang.String);\n                java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                if (java.lang.String == null) {\n                    java.lang.String = java.lang.String;\n                } \n                if (java.lang.String != null) {\n                    final int int = java.lang.String.length();\n                    org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                    boolean = true;\n                    int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                    int = (int + int) - (int - int);\n                    int += int;\n                    int += int;\n                    int += int;\n                    char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                } \n                java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                break;\n            } else {\n                int--;\n                int += int;\n            }\n        }\n    }\n}","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.ClassUtils:939","sourceCode":"final java.lang.NoSuchMethodException java.lang.NoSuchMethodException","type":"CtLocalVariableImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:574","sourceCode":"throw new java.lang.UnsupportedOperationException(\"remove() is unsupported\")","type":"CtThrowImpl"},"failures":[79],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.NumberUtils:222","failures":[80,81],"status":-1,"binaryOperator":"java.lang.String == null","name":"removeConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.text.StrBuilder:654","sourceCode":"throw new java.lang.StringIndexOutOfBoundsException(\"length must be valid\")","type":"CtThrowImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1443","sourceCode":"java.lang.StringBuilder.append(org.apache.commons.lang3.Conversion.org.apache.commons.lang3.Conversion.intToHexDigit(int))","type":"CtInvocationImpl"},"failures":[82],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:759","sourceCode":"int += int * 2","type":"CtOperatorAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:1264","sourceCode":"int = (int * 16) + int","type":"CtAssignmentImpl"},"failures":[83],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"quoteLen":"srcPos","pos":"i"}},{"failureDictionary":{"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeWithDelimiters_String":68,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":22,"org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArrayArray":19,"org.apache.commons.lang3.ConversionTest.testShortToByteArray":2,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":32,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneNotSupportedException":61,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimple":59,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":24,"org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testBooleanArray":18,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF":80,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVEmpty":63,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":44,"org.apache.commons.lang3.text.StrTokenizerTest.testCloneReset":65,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":49,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":41,"org.apache.commons.lang3.ConversionTest.testByteArrayToInt":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":57,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionInteger":17,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":55,"org.apache.commons.lang3.ConversionTest.testIntToShortArray":83,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":46,"org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator":67,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray":20,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArray":7,"org.apache.commons.lang3.time.DateUtilsTest.testParseDateWithLeniency":3,"org.apache.commons.lang3.text.StrTokenizerTest.testTSV":60,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray":16,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":35,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":47,"org.apache.commons.lang3.text.StrTokenizerTest.testCSVSimpleNeedsTrim":64,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray":8,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":43,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalize_String":69,"org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString":81,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":30,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":54,"org.apache.commons.lang3.ConversionTest.testIntToHex":82,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":34,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":33,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":50,"org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArrayArray":13,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFully_String":70,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBoolean":14,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits":76,"org.apache.commons.lang3.tuple.TripleTest.testComparable4":75,"org.apache.commons.lang3.tuple.TripleTest.testComparable3":74,"org.apache.commons.lang3.tuple.TripleTest.testComparable2":73,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArray":6,"org.apache.commons.lang3.tuple.TripleTest.testComparable1":72,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":36,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":51,"org.apache.commons.lang3.math.NumberUtilsTest.TestLang747":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":52,"org.apache.commons.lang3.math.NumberUtilsTest.testToIntString":4,"org.apache.commons.lang3.math.FractionTest.testPow":5,"org.apache.commons.lang3.CharRangeTest.testHashCode":66,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":53,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":23,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":56,"org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":26,"org.apache.commons.lang3.AnnotationUtilsTest.testHashCode":1,"org.apache.commons.lang3.ConversionTest.testShortArrayToInt":78,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":31,"org.apache.commons.lang3.text.StrTokenizerTest.testTSVEmpty":62,"org.apache.commons.lang3.text.WordUtilsTest.testCapitalizeFullyWithDelimiters_String":71,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":39,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":40,"org.apache.commons.lang3.text.StrTokenizerTest.testIteration":79,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":58,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray":21,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":25,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_4bits_2args":77}}]

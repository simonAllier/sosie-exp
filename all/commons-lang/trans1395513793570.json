[{"position":"org.apache.commons.lang3.BooleanUtils:361","failures":[0,1],"status":-1,"binaryOperator":"java.lang.Integer == null","name":"negateConditional","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.ArrayUtils:5275","sourceCode":"if (int < 0) {\n    break;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.exception.ExceptionUtils:561","sourceCode":"if (java.lang.String.equals(java.lang.String)) {\n    java.util.List<java.lang.String>.remove(int);\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"found":"causeFrameIndex"}},{"position":"org.apache.commons.lang3.ObjectUtils:774","failures":[],"status":0,"binaryOperator":"(int < (java.lang.Byte.byte))","name":"conditionalBoundary","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.Conversion:557","sourceCode":"return '6'","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:417","sourceCode":"return 'f'","type":"CtReturnImpl"},"failures":[2],"status":-1,"name":"replaceReaction","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1535","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendFieldSeparator(java.lang.StringBuffer)","type":"CtInvocationImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1095","sourceCode":"if (org.apache.commons.lang3.builder.ToStringStyle.isFullDetail(java.lang.Boolean)) {\n    org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short[]);\n} else {\n    org.apache.commons.lang3.builder.ToStringStyle.appendSummary(java.lang.StringBuffer, java.lang.String, short[]);\n}","type":"CtIfImpl"},"failures":[3,4],"status":-1,"name":"addReaction","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.Conversion:1332","failures":[5],"status":-1,"binaryOperator":"(int >> int)","name":"math","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:625","sourceCode":"this.boolean = boolean == boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1923","sourceCode":"this.boolean = boolean","type":"CtAssignmentImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"isEquals":"fieldSeparatorAtStart","rhs":"fieldSeparatorAtStart","lhs":"fieldSeparatorAtStart"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:301","sourceCode":"if ((boolean[].int) == 0) {\n    throw new java.lang.IllegalArgumentException(\"Cannot convert an empty array.\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:404","sourceCode":"if ((boolean[].int) > 8) {\n    throw new java.lang.IllegalArgumentException((\"src.length>8: src.length=\" + (boolean[].int)));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.BooleanUtils:902","sourceCode":"if (boolean[] == null) {\n    throw new java.lang.IllegalArgumentException(\"The Array must not be null\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Conversion:407","sourceCode":"if (((boolean[].int) - int) < 4) {\n    throw new java.lang.IllegalArgumentException((((\"src.length-srcPos<4: src.length=\" + (boolean[].int)) + \", srcPos=\") + int));\n} ","type":"CtIfImpl"},"failures":[],"status":0,"name":"add","type":"adrStmt","variableMapping":{"array":"src"}},{"transplant":{"position":"org.apache.commons.lang3.Range:369","sourceCode":"return false","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Range:334","sourceCode":"return org.apache.commons.lang3.Range<T>.isAfter(org.apache.commons.lang3.Range<T>.T)","type":"CtReturnImpl"},"failures":[6],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"position":"org.apache.commons.lang3.math.Fraction:267","inlineConstant":"double double = 1","failures":[7,8],"status":-1,"name":"inlineConstant","type":"mutation"},{"transplant":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:230","sourceCode":"if (org.apache.commons.lang3.concurrent.BasicThreadFactory.(getPriority()) != null) {\n    java.lang.Thread.setPriority(org.apache.commons.lang3.concurrent.BasicThreadFactory.getPriority().intValue());\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.concurrent.BasicThreadFactory:227","sourceCode":"java.lang.Thread.setUncaughtExceptionHandler(org.apache.commons.lang3.concurrent.BasicThreadFactory.getUncaughtExceptionHandler())","type":"CtInvocationImpl"},"failures":[9],"status":-1,"name":"replaceWittgenstein","type":"adrStmt","variableMapping":{}},{"transplant":{"position":"org.apache.commons.lang3.LocaleUtils:145","sourceCode":"if (int < 7) {\n    throw new java.lang.IllegalArgumentException((\"Invalid locale format: \" + java.lang.String));\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.builder.ToStringStyle:1059","sourceCode":"org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int[][int])","type":"CtInvocationImpl"},"failures":[10,11,12,13,13,14,15,16,17,18,19,20,21,21,22,23,24,25,3,26,26,27,28,29,30,31,32,33,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"str":"fieldName","len":"i"}},{"transplant":{"position":"org.apache.commons.lang3.RandomStringUtils:256","sourceCode":"if (char[] == null) {\n    char = ((char)((java.util.Random.nextInt(int)) + int));\n} else {\n    char = char[][((java.util.Random.nextInt(int)) + int)];\n}","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.RandomStringUtils:259","sourceCode":"char = char[][((java.util.Random.nextInt(int)) + int)]","type":"CtAssignmentImpl"},"failures":[53,54,55],"status":-1,"name":"add","type":"adrStmt","variableMapping":{"start":"gap","random":"random","chars":"chars","ch":"ch","gap":"start"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:1224","sourceCode":"if ((((int - 1) * 16) + int) >= 64) {\n    throw new java.lang.IllegalArgumentException(\"(nShorts-1)*16+srcPos is greather or equal to than 64\");\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.DateUtils:913","sourceCode":"org.apache.commons.lang3.time.DateUtils.org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, org.apache.commons.lang3.time.DateUtils.int)","type":"CtInvocationImpl"},"failures":[56],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"nShorts":"org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING","srcPos":"org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrTokenizer:421","sourceCode":"if (org.apache.commons.lang3.text.StrTokenizer.hasPrevious()) {\n    return java.lang.String[][--(int)];\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrTokenizer:517","sourceCode":"if (org.apache.commons.lang3.text.StrTokenizer.hasNext()) {\n    return java.lang.String[][(int)++];\n} ","type":"CtIfImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"tokens":"tokens","tokenPos":"tokenPos","this":"this"}},{"transplant":{"position":"org.apache.commons.lang3.JavaVersion:151","sourceCode":"return null","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.Range:194","sourceCode":"return java.util.Comparator<T>","type":"CtReturnImpl"},"failures":[57],"status":-1,"name":"replaceRandom","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:756","sourceCode":"if (int == 0) {\n    int++;\n} else {\n    if ((int > int) && ((char[][(int - 1)]) == char)) {\n        org.apache.commons.lang3.text.StrBuilder.deleteCharAt((int - 1));\n        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n        int--;\n        boolean = true;\n        int--;\n    } else {\n        final int int = int;\n        int += int;\n        int int = 0;\n        int int = 0;\n        while (int < int) {\n            if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n                int++;\n                int += int;\n                continue;\n            } \n            int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int);\n            if (int == 0) {\n                int++;\n            } else {\n                if (int == 0) {\n                    java.lang.String java.lang.String = new java.lang.String(char[] , (int + int) , ((int - int) - int));\n                    if (boolean) {\n                        final org.apache.commons.lang3.text.StrBuilder org.apache.commons.lang3.text.StrBuilder = new org.apache.commons.lang3.text.StrBuilder(java.lang.String);\n                        org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, 0, org.apache.commons.lang3.text.StrBuilder.length());\n                        java.lang.String = org.apache.commons.lang3.text.StrBuilder.toString();\n                    } \n                    int += int;\n                    final int int = int;\n                    java.lang.String java.lang.String = java.lang.String;\n                    java.lang.String java.lang.String = null;\n                    if (org.apache.commons.lang3.text.StrMatcher != null) {\n                        final char[] char[] = java.lang.String.toCharArray();\n                        int int = 0;\n                        for (int int = 0 ; int < (char[].int) ; int++) {\n                            if ((!boolean) && ((org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, char[].int)) != 0)) {\n                                break;\n                            } \n                            if ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int)) != 0) {\n                                java.lang.String = java.lang.String.substring(0, int);\n                                java.lang.String = java.lang.String.substring((int + int));\n                                break;\n                            } \n                        }\n                    } \n                    if (java.util.List<java.lang.String> == null) {\n                        java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String>();\n                        java.util.List<java.lang.String>.add(new java.lang.String(char[] , int , int));\n                    } \n                    org.apache.commons.lang3.text.StrSubstitutor.checkCyclicSubstitution(java.lang.String, java.util.List<java.lang.String>);\n                    java.util.List<java.lang.String>.add(java.lang.String);\n                    java.lang.String java.lang.String = org.apache.commons.lang3.text.StrSubstitutor.resolveVariable(java.lang.String, org.apache.commons.lang3.text.StrBuilder, int, int);\n                    if (java.lang.String == null) {\n                        java.lang.String = java.lang.String;\n                    } \n                    if (java.lang.String != null) {\n                        final int int = java.lang.String.length();\n                        org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String);\n                        boolean = true;\n                        int int = org.apache.commons.lang3.text.StrSubstitutor.substitute(org.apache.commons.lang3.text.StrBuilder, int, int, java.util.List<java.lang.String>);\n                        int = (int + int) - (int - int);\n                        int += int;\n                        int += int;\n                        int += int;\n                        char[] = org.apache.commons.lang3.text.StrBuilder.char[];\n                    } \n                    java.util.List<java.lang.String>.remove(((java.util.List<java.lang.String>.size()) - 1));\n                    break;\n                } else {\n                    int--;\n                    int += int;\n                }\n            }\n        }\n    }\n}","type":"CtIfImpl"},"failures":[],"status":-2,"name":"delete","type":"adrStmt"},{"transplant":{"position":"org.apache.commons.lang3.time.FastDateParser:510","sourceCode":"if (org.apache.commons.lang3.time.FastDateParser.Strategy != null) {\n    return org.apache.commons.lang3.time.FastDateParser.Strategy;\n} ","type":"CtIfImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.time.FastDateParser:450","sourceCode":"return org.apache.commons.lang3.time.FastDateParser.org.apache.commons.lang3.time.FastDateParser.Strategy","type":"CtReturnImpl"},"failures":[],"status":0,"name":"replace","type":"adrStmt","variableMapping":{"inCache":"org.apache.commons.lang3.time.FastDateParser.HOUR_STRATEGY"}},{"transplant":{"position":"org.apache.commons.lang3.text.StrSubstitutor:859","sourceCode":"int--","type":"CtUnaryOperatorImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.text.StrSubstitutor:774","sourceCode":"if (boolean && ((int = org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int, int, int)) != 0)) {\n    int++;\n    int += int;\n    continue;\n} ","type":"CtIfImpl"},"failures":[],"status":-2,"name":"add","type":"adrStmt","variableMapping":{"nestedVarCount":"pos"}},{"transplant":{"position":"org.apache.commons.lang3.builder.EqualsBuilder:625","sourceCode":"boolean = boolean == boolean","type":"CtAssignmentImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.NumberUtils:1369","sourceCode":"boolean = false","type":"CtAssignmentImpl"},"failures":[58],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{"isEquals":"allowSigns","rhs":"allowSigns","lhs":"allowSigns"}},{"transplant":{"position":"org.apache.commons.lang3.Conversion:117","sourceCode":"return 14","type":"CtReturnImpl"},"transplantationPoint":{"position":"org.apache.commons.lang3.math.Fraction:897","sourceCode":"return -1","type":"CtReturnImpl"},"failures":[59],"status":-1,"name":"replace","type":"adrStmt","variableMapping":{}},{"transplantationPoint":{"position":"org.apache.commons.lang3.text.WordUtils:381","sourceCode":"char[][int] = java.lang.Character.java.lang.Character.toLowerCase(char)","type":"CtAssignmentImpl"},"failures":[60,61],"status":-1,"name":"delete","type":"adrStmt"},{"failureDictionary":{"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray":13,"org.apache.commons.lang3.builder.ToStringBuilderTest.testCharArrayArray":38,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray":23,"org.apache.commons.lang3.math.FractionTest.testFactory_String_double":8,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils":55,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionStatics":15,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray":28,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSetDefaultEx":32,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArray":34,"org.apache.commons.lang3.math.FractionTest.testFactory_double":7,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii":4,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle":39,"org.apache.commons.lang3.builder.MultiLineToStringStyleTest.testObjectArray":52,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle":31,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx1":18,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInheritedReflectionStatics":27,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDoubleArray":47,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx2":19,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue":1,"org.apache.commons.lang3.builder.ToStringBuilderTest.testConstructorEx3":20,"org.apache.commons.lang3.builder.ToStringBuilderTest.testInnerClassReflection":45,"org.apache.commons.lang3.builder.ToStringBuilderTest.testByteArrayArray":36,"org.apache.commons.lang3.time.DateUtilsTest.testCeil":56,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectArray":12,"org.apache.commons.lang3.builder.ToStringBuilderTest.testShortArray":3,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray":37,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray":33,"org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog":53,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray":21,"org.apache.commons.lang3.builder.ToStringBuilderTest.testGetSetDefault":44,"org.apache.commons.lang3.RangeTest.testIsAfterRange":6,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle":25,"org.apache.commons.lang3.builder.ToStringBuilderTest.testLongArray":24,"org.apache.commons.lang3.builder.ToStringBuilderTest.testObject":40,"org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber":58,"org.apache.commons.lang3.RangeTest.testIntersectionWith":57,"org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest.testObjectArray":49,"org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer":0,"org.apache.commons.lang3.builder.ToStringBuilderTest.testDouble":35,"org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits":2,"org.apache.commons.lang3.StringUtilsTest.testSwapCase_String":60,"org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest.testObjectArray":51,"org.apache.commons.lang3.builder.ToStringBuilderTest.testIntArrayArray":26,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendSuper":41,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray":42,"org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionStatics":14,"org.apache.commons.lang3.ConversionTest.testIntToByteArray":5,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray":43,"org.apache.commons.lang3.builder.SimpleToStringStyleTest.testObjectArray":11,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharacter":46,"org.apache.commons.lang3.concurrent.BasicThreadFactoryTest.testNewThreadExHandler":9,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray":17,"org.apache.commons.lang3.math.FractionTest.testCompareTo":59,"org.apache.commons.lang3.builder.DefaultToStringStyleTest.testObjectArray":50,"org.apache.commons.lang3.text.WordUtilsTest.testSwapCase_String":61,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle":22,"org.apache.commons.lang3.builder.StandardToStringStyleTest.testObjectArray":10,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2":29,"org.apache.commons.lang3.builder.ToStringBuilderTest.testAppendToString":30,"org.apache.commons.lang3.RandomStringUtilsTest.testLANG805":54,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray":48,"org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray":16}}]

{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"fe84b647-0d6f-11e6-bb08-09bc12e88428","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:829","type":"CtAssignmentImpl","sourcecode":"result = java.lang.String"},"variableMap":{"result":"peekedString","peekedString":"peekedString"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:830","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-3},{"failures":[],"tindex":"fe84dd58-0d6f-11e6-bb08-3dd2359d393e","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.bind.TypeAdapters:552","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:542","type":"CtLocalVariableImpl","sourcecode":"int int = nextNonWhitespace(false)"},"status":-3},{"failures":[],"tindex":"fe84dd59-0d6f-11e6-bb08-0fb5b8ab2f2f","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:774","type":"CtIfImpl","sourcecode":"if ((int) != (int)) {\n    throw new java.util.ConcurrentModificationException();\n} "},"variableMap":{"modCount":"com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME","expectedModCount":"com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1249","type":"CtIfImpl","sourcecode":"if (p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int)) {\n    (int)--;\n    count--;\n} else if ((p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int)) || (p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int))) {\n    skipUnquotedValue();\n} else if ((p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int)) || (p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int))) {\n    skipQuotedValue('\\'');\n} else if ((p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int)) || (p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int))) {\n    skipQuotedValue('\"');\n} else if (p == (com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int)) {\n    int += int;\n} "},"status":-3},{"failures":[],"tindex":"fe84dd5a-0d6f-11e6-bb08-5d33c424a97b","series":0,"name":"add","transplant":{"position":"com.google.gson.GsonBuilder:403","type":"CtAssignmentImpl","sourcecode":"com.google.gson.GsonBuilder.this.int = style"},"variableMap":{"dateStyle":"size","style":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:692","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-3},{"failures":[],"tindex":"fe84dd5b-0d6f-11e6-bb08-c5564b266e0d","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1481","type":"CtInvocationImpl","sourcecode":"result.append('[')"},"variableMap":{"result":"sb"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.DefaultDateTypeAdapter:116","type":"CtInvocationImpl","sourcecode":"sb.append('(').append(java.text.DateFormat.getClass().getSimpleName())"},"status":-3},{"failures":[],"tindex":"fe84dd5c-0d6f-11e6-bb08-498528176af1","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:556","type":"CtIfImpl","sourcecode":"if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n} "},"variableMap":{"peekStack":"limit","peeked":"peeked","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:482","type":"CtIfImpl","sourcecode":"if ((peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) || (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int))) {\n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n    if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n        int int = nextNonWhitespace(true);\n        switch (c) {\n            case '}' :\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            case ';' :\n                checkLenient();\n            case ',' :\n                break;\n            default :\n                throw syntaxError(\"Unterminated object\");\n        }\n    } \n    int int = nextNonWhitespace(true);\n    switch (c) {\n        case '\"' :\n            return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n        case '\\'' :\n            checkLenient();\n            return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n        case '}' :\n            if (peekStack != (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            } else {\n                throw syntaxError(\"Expected name\");\n            }\n        default :\n            checkLenient();\n            (int)--;\n            if (isLiteral(((char)(c)))) {\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            } else {\n                throw syntaxError(\"Expected name\");\n            }\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n    int int = nextNonWhitespace(true);\n    switch (c) {\n        case ':' :\n            break;\n        case '=' :\n            checkLenient();\n            if ((((int) < (int)) || (fillBuffer(1))) && ((char[][int]) == '>')) {\n                (int)++;\n            } \n            break;\n        default :\n            throw syntaxError(\"Expected ':'\");\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    if (boolean) {\n        consumeNonExecutePrefix();\n    } \n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    int int = nextNonWhitespace(false);\n    if (c == (-1)) {\n        return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n    } else {\n        checkLenient();\n        (int)--;\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    throw new java.lang.IllegalStateException(\"JsonReader is closed\");\n} "},"status":-3},{"failures":[],"tindex":"fe85046d-0d6f-11e6-bb08-abfea5508320","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:281","type":"CtAssignmentImpl","sourcecode":"adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right"},"variableMap":{"adjacent":"node","right":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:550","type":"CtAssignmentImpl","sourcecode":"node = child"},"status":-3},{"failures":[],"tindex":"fe85046e-0d6f-11e6-bb08-1bbf9c955d80","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.reflect.TypeToken:262","type":"CtInvocationImpl","sourcecode":"exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString())"},"status":-3},{"failures":[],"tindex":"fe85046f-0d6f-11e6-bb08-2542a90c0511","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:588","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.this.clear()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtIfImpl","sourcecode":"if (!(fillBuffer(1))) {\n    break;\n} "},"status":-3},{"failures":[],"tindex":"fe850470-0d6f-11e6-bb08-d36905943b41","series":0,"name":"add","transplant":{"position":"com.google.gson.GsonBuilder:425","type":"CtAssignmentImpl","sourcecode":"com.google.gson.GsonBuilder.this.int = timeStyle"},"variableMap":{"timeStyle":"stackSize"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:932","type":"CtUnaryOperatorImpl","sourcecode":"(int[][((int) - 1)])++"},"status":-3},{"failures":[],"tindex":"fe852b81-0d6f-11e6-bb08-4f746e81aee5","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1253","type":"CtInvocationImpl","sourcecode":"skipUnquotedValue()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:239","type":"CtInvocationImpl","sourcecode":"com.google.gson.TypeAdapter<V>.write(out, values.get(i))"},"status":-3},{"failures":[],"tindex":"fe852b82-0d6f-11e6-bb08-19af37d46c53","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:762","type":"CtInvocationImpl","sourcecode":"checkLenient()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:491","type":"CtForImpl","sourcecode":"for (int int = 1 ; i < (java.lang.reflect.Type[].int) ; i++) {\n    stringBuilder.append(\", \").append(com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type[][i]));\n}"},"status":-3}],"header":{"groupId":"com.google.code.gson","transformationCount":12,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"c79481c5-0d72-11e6-9ccb-77b71b777e86","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.bind.JsonTreeReader:209","type":"CtInvocationImpl","sourcecode":"nextName()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:64","type":"CtInvocationImpl","sourcecode":"java.text.DateFormat.format(value)"},"status":-3},{"failures":[],"tindex":"c794a8d6-0d72-11e6-9ccb-7935cd88b8ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:267","type":"CtInvocationImpl","sourcecode":"removeInternal(adjacent, false)"},"status":-3},{"failures":[],"tindex":"c794a8d7-0d72-11e6-9ccb-e99e12021a72","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1318","type":"CtReturnImpl","sourcecode":"return (int) + 1"},"variableMap":{"lineNumber":"pos"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:469","type":"CtIfImpl","sourcecode":"if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    int int = nextNonWhitespace(true);\n    switch (c) {\n        case ']' :\n            return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n        case ';' :\n            checkLenient();\n        case ',' :\n            break;\n        default :\n            throw syntaxError(\"Unterminated array\");\n    }\n} else if ((peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) || (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int))) {\n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n    if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n        int int = nextNonWhitespace(true);\n        switch (c) {\n            case '}' :\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            case ';' :\n                checkLenient();\n            case ',' :\n                break;\n            default :\n                throw syntaxError(\"Unterminated object\");\n        }\n    } \n    int int = nextNonWhitespace(true);\n    switch (c) {\n        case '\"' :\n            return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n        case '\\'' :\n            checkLenient();\n            return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n        case '}' :\n            if (peekStack != (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            } else {\n                throw syntaxError(\"Expected name\");\n            }\n        default :\n            checkLenient();\n            (int)--;\n            if (isLiteral(((char)(c)))) {\n                return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n            } else {\n                throw syntaxError(\"Expected name\");\n            }\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n    int int = nextNonWhitespace(true);\n    switch (c) {\n        case ':' :\n            break;\n        case '=' :\n            checkLenient();\n            if ((((int) < (int)) || (fillBuffer(1))) && ((char[][int]) == '>')) {\n                (int)++;\n            } \n            break;\n        default :\n            throw syntaxError(\"Expected ':'\");\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    if (boolean) {\n        consumeNonExecutePrefix();\n    } \n    int[][((int) - 1)] = com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int;\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    int int = nextNonWhitespace(false);\n    if (c == (-1)) {\n        return int = com.google.gson.stream.JsonReader.com.google.gson.stream.JsonReader.int;\n    } else {\n        checkLenient();\n        (int)--;\n    }\n} else if (peekStack == (com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int)) {\n    throw new java.lang.IllegalStateException(\"JsonReader is closed\");\n} "},"status":-3},{"failures":[],"tindex":"c794cfe8-0d72-11e6-9ccb-c36e20718cc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtIfImpl","sourcecode":"if (parent != null) {\n    if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n        parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n    } else {\n        assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n        parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n    }\n} else {\n    int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n}"},"status":-3},{"failures":[],"tindex":"c794cfe9-0d72-11e6-9ccb-d1c52222e5d1","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtIfImpl","sourcecode":"if (!(skipTo(\"*/\"))) {\n    throw syntaxError(\"Unterminated comment\");\n} "},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:643","type":"CtForImpl","sourcecode":"for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = result.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n    n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n    stackTop = n;\n}"},"status":-3}],"header":{"groupId":"com.google.code.gson","transformationCount":5,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
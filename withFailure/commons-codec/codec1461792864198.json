{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":116,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":143,"org.apache.commons.codec.language.NysiisTest.testSnat":89,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":18,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":122,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":17,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":73,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":140,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":100,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":98,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":33,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":105,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":37,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":13,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":29,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":61,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":30,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":148,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":145,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":48,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":128,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":64,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":102,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":147,"org.apache.commons.codec.language.NysiisTest.testCap":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":131,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":150,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":129,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":47,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":10,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":56,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":7,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":121,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":28,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":137,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":58,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":50,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":104,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":15,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":126,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":132,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":2,"org.apache.commons.codec.language.NysiisTest.testTranan":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":127,"org.apache.commons.codec.language.NysiisTest.testFal":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":106,"org.apache.commons.codec.language.NysiisTest.testSnad":88,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":139,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":76,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":65,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":4,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":69,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":12,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":66,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":0,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":110,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":97,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":32,"org.apache.commons.codec.language.NysiisTest.testDropBy":91,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":134,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":19,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":43,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":118,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":26,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":57,"org.apache.commons.codec.binary.Base64Test.testUUID":149,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":41,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":8,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":11,"org.apache.commons.codec.language.NysiisTest.testRule2":83,"org.apache.commons.codec.language.NysiisTest.testRule1":82,"org.apache.commons.codec.language.NysiisTest.testRule7":86,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":63,"org.apache.commons.codec.language.NysiisTest.testRule6":85,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":42,"org.apache.commons.codec.language.NysiisTest.testRule5":84,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":107,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":1,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":138,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":71,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":40,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":90,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":133,"org.apache.commons.codec.language.NysiisTest.testBran":87,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":94,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":49,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":51,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":112,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":144,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":103,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":146,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":108,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":53,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":95,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":114,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":14,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":3,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":75,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":70,"org.apache.commons.codec.language.NysiisTest.testDad":79,"org.apache.commons.codec.language.NysiisTest.testOthers":92,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":21,"org.apache.commons.codec.language.SoundexTest.testDifference":101,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":77,"org.apache.commons.codec.language.NysiisTest.testDan":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":123,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":62,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":67,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":117,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":130,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":36},"transformations":[{"failures":[],"tindex":"cf95656a-0cbf-11e6-b8c8-9db9f3bc147b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-2},{"failures":[],"tindex":"cf95b38b-0cbf-11e6-b8c8-f57c714352d5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"incl"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:440","type":"CtInvocationImpl","sourcecode":"lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)))"},"status":0},{"failures":[0,1],"tindex":"cf95b38c-0cbf-11e6-b8c8-f7e008b2e0a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:287","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"cf95b38d-0cbf-11e6-b8c8-e70d3e4bbf9c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:279","type":"CtReturnImpl","sourcecode":"return other"},"status":-2},{"failures":[],"tindex":"cf95da9e-0cbf-11e6-b8c8-2d0cabdbc9c6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"cf95da9f-0cbf-11e6-b8c8-e53c4455bc83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:223","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb, 0, (ii > 16 ? 16 : ii))"},"status":-2},{"failures":[],"tindex":"cf95daa0-0cbf-11e6-b8c8-99eb0289394e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:111","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:531","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"cf9601b1-0cbf-11e6-b8c8-dbd6510f9921","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"variableMap":{"base64":"language"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.contains(language)"},"status":0},{"failures":[],"tindex":"cf9601b2-0cbf-11e6-b8c8-d711e293847d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}"},"status":-2},{"failures":[2,3,4,5,6],"tindex":"cf9601b3-0cbf-11e6-b8c8-c78262a90e34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:362","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"cf9601b4-0cbf-11e6-b8c8-b5cf02dbfba4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:72","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[7,8,9,10,11,12,13],"tindex":"cf9628c5-0cbf-11e6-b8c8-a57f16aaa407","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"read"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:798","type":"CtAssignmentImpl","sourcecode":"read = data.read(buffer, 0, org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int)"},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22],"tindex":"cf9628c6-0cbf-11e6-b8c8-65c07efb7f7b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"status":-1},{"failures":[23,24,25,26],"tindex":"cf9628c7-0cbf-11e6-b8c8-758fdf85d8c4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:769","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"cf964fd8-0cbf-11e6-b8c8-3fdcb3302618","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:252","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(charArray)"},"variableMap":{"charArray":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:289","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[27,28,29,30,31,32,33,34],"tindex":"cf964fd9-0cbf-11e6-b8c8-8fdca7bce6b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:214","type":"CtIfImpl","sourcecode":"if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n    org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"cf964fda-0cbf-11e6-b8c8-ddb1da958808","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:384","type":"CtAssignmentImpl","sourcecode":"ch = java.lang.Character.toLowerCase(ch)"},"variableMap":{"ch":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"status":-2},{"failures":[],"tindex":"cf9676eb-0cbf-11e6-b8c8-615b80ac71b5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ry\", \"Ry\")"},"status":0},{"failures":[23,24,25,26],"tindex":"cf9676ec-0cbf-11e6-b8c8-ab1c18946f49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 2))) == 'I') {\n    result.append('J');\n} else {\n    result.append('K');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:709","type":"CtIfImpl","sourcecode":"if ((index == 0) && ((isVowel(charAt(value, (index + 1)))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"WH\")))) {\n    if (isVowel(charAt(value, (index + 1)))) {\n        result.append('A', 'F');\n    } else {\n        result.append('A');\n    }\n    index++;\n} else if ((((index == ((value.length()) - 1)) && (isVowel(charAt(value, (index - 1))))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.appendAlternate('F');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"WICZ\", \"WITZ\")) {\n    result.append(\"TS\", \"FX\");\n    index += 4;\n} else {\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"cf9676ed-0cbf-11e6-b8c8-f75bd88a1d31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:503","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[35],"tindex":"cf969dfe-0cbf-11e6-b8c8-9f8db4bc1a53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[],"tindex":"cf969dff-0cbf-11e6-b8c8-e3d54feed091","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:89","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[36,37],"tindex":"cf969e00-0cbf-11e6-b8c8-5b1919cfce45","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:350","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[],"tindex":"cf969e01-0cbf-11e6-b8c8-ad86797e6ab2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:288","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n    result.append('S', 'X');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n    return handleCC(value, result, index);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[38,39,40,41,42,43,44,45],"tindex":"cf96c512-0cbf-11e6-b8c8-b78722346063","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:256","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-1},{"failures":[],"tindex":"cf96c513-0cbf-11e6-b8c8-1b08ddc7f999","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"status":-2},{"failures":[],"tindex":"cf96c514-0cbf-11e6-b8c8-5998f848f396","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:801","type":"CtReturnImpl","sourcecode":"return digest"},"status":-2},{"failures":[],"tindex":"cf96c515-0cbf-11e6-b8c8-b9ba88e55472","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:255","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:100","type":"CtReturnImpl","sourcecode":"return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[2,4,5,6],"tindex":"cf96ec26-0cbf-11e6-b8c8-57fa1e5c7340","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:386","type":"CtAssignmentImpl","sourcecode":"context.long = (context.long) >> 4"},"status":-1},{"failures":[],"tindex":"cf96ec27-0cbf-11e6-b8c8-3fdbf91ef6f5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:116","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[46,0,1,47,48,49,50],"tindex":"cf96ec28-0cbf-11e6-b8c8-379db8ac1d20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[51,52,53,54,55,56,57,58,59],"tindex":"cf971339-0cbf-11e6-b8c8-6938dfc0656c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"variableMap":{"str":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:249","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"))"},"status":-1},{"failures":[60,61],"tindex":"cf97133a-0cbf-11e6-b8c8-178e4e36ff93","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"status":-1},{"failures":[62],"tindex":"cf97133b-0cbf-11e6-b8c8-67535cb300e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:169","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"))"},"variableMap":{"rawLine":"obj","languageRulesResourceName":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:535","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"))"},"status":-1},{"failures":[],"tindex":"cf97133c-0cbf-11e6-b8c8-cd848674c409","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:130","type":"CtIfImpl","sourcecode":"if ((inwd[1]) == 'H') {\n    local.append(inwd, 1, ((inwd.int) - 1));\n    local.setCharAt(0, 'W');\n} else {\n    local.append(inwd);\n}"},"status":-2},{"failures":[25,26],"tindex":"cf973a4d-0cbf-11e6-b8c8-b9a7aa8fc0de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-1},{"failures":[],"tindex":"cf973a4e-0cbf-11e6-b8c8-7f24476d96b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))"},"status":-2},{"failures":[],"tindex":"cf973a4f-0cbf-11e6-b8c8-796959e5b6e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-2},{"failures":[],"tindex":"cf976160-0cbf-11e6-b8c8-f3dd672c6616","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:491","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)))"},"status":-2},{"failures":[23,25,26],"tindex":"cf976161-0cbf-11e6-b8c8-1750cc2fb667","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:377","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-1},{"failures":[63,64,65,66],"tindex":"cf976162-0cbf-11e6-b8c8-87ee58fa06b2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[27,28,29,30,67,68],"tindex":"cf976163-0cbf-11e6-b8c8-d3426c469c8f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:147","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}"},"status":-1},{"failures":[],"tindex":"cf978874-0cbf-11e6-b8c8-39aea0deaa4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:422","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n    result.append(\"KL\", \"L\");\n    index += 2;\n} else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n    result.append('K', 'J');\n    index += 2;\n} else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n    result.append('K', 'J');\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n        result.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        result.append('J');\n    } else {\n        result.append('J', 'K');\n    }\n    index += 2;\n} else if ((charAt(value, (index + 1))) == 'G') {\n    index += 2;\n    result.append('K');\n} else {\n    index++;\n    result.append('K');\n}"},"status":-2},{"failures":[69,60,70,71,72,61,73,74,75,76],"tindex":"cf978875-0cbf-11e6-b8c8-8dbfd9571a2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:460","type":"CtInvocationImpl","sourcecode":"result.append(\"-\")"},"variableMap":{"result":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:430","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"status":-1},{"failures":[],"tindex":"cf97af86-0cbf-11e6-b8c8-01d95645bba0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} "},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:792","type":"CtReturnImpl","sourcecode":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))"},"status":-2},{"failures":[27,28,29,30,31,34],"tindex":"cf97af87-0cbf-11e6-b8c8-c33e2fa10dc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:716","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"cf97d698-0cbf-11e6-b8c8-03b7ef6b2ab3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{"ctx1":"digest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:50","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.DigestUtils.updateDigest(digest, data)"},"status":0},{"failures":[51,52,53,54,55,56,57,59],"tindex":"cf97d699-0cbf-11e6-b8c8-51b324175217","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)"},"status":-1},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"cf97fdaa-0cbf-11e6-b8c8-a5304c7f5e71","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n}"},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_SSS","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[],"tindex":"cf97fdab-0cbf-11e6-b8c8-f176c3af002b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"replacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"status":-2},{"failures":[95],"tindex":"cf97fdac-0cbf-11e6-b8c8-a338d1e74fd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:266","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[],"tindex":"cf97fdad-0cbf-11e6-b8c8-63d2ce6e4f0b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:71","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"cf97fdae-0cbf-11e6-b8c8-171cece3e07a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:207","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.getHmacMd5(key)"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key)"},"status":0},{"failures":[],"tindex":"cf9824bf-0cbf-11e6-b8c8-2f21b3b239a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (n + 1) == wdsz"},"variableMap":{"wdsz":"index","n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:792","type":"CtReturnImpl","sourcecode":"return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"))"},"status":0},{"failures":[],"tindex":"cf9824c0-0cbf-11e6-b8c8-e33fe49d6b19","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:278","type":"CtLocalVariableImpl","sourcecode":"final int int = chars.int"},"status":-2},{"failures":[],"tindex":"cf9824c1-0cbf-11e6-b8c8-5fbdaf7e8381","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:152","type":"CtIfImpl","sourcecode":"if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n    n++;\n} else {\n    switch (symb) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n            if (n == 0) {\n                code.append(symb);\n            } \n            break;\n        case 'B' :\n            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                break;\n            } \n            code.append(symb);\n            break;\n        case 'C' :\n            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                break;\n            } \n            if (regionMatch(local, n, \"CIA\")) {\n                code.append('X');\n                break;\n            } \n            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                code.append('S');\n                break;\n            } \n            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                code.append('K');\n                break;\n            } \n            if (isNextChar(local, n, 'H')) {\n                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                    code.append('K');\n                } else {\n                    code.append('X');\n                }\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'D' :\n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                code.append('J');\n                n += 2;\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'G' :\n            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                break;\n            } \n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                break;\n            } \n            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                break;\n            } \n            if (isPreviousChar(local, n, 'G')) {\n                hard = true;\n            } else {\n                hard = false;\n            }\n            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                code.append('J');\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'H' :\n            if (isLastChar(wdsz, n)) {\n                break;\n            } \n            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                break;\n            } \n            if (isVowel(local, (n + 1))) {\n                code.append('H');\n            } \n            break;\n        case 'F' :\n        case 'J' :\n        case 'L' :\n        case 'M' :\n        case 'N' :\n        case 'R' :\n            code.append(symb);\n            break;\n        case 'K' :\n            if (n > 0) {\n                if (!(isPreviousChar(local, n, 'C'))) {\n                    code.append(symb);\n                } \n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'P' :\n            if (isNextChar(local, n, 'H')) {\n                code.append('F');\n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'Q' :\n            code.append('K');\n            break;\n        case 'S' :\n            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                code.append('X');\n            } else {\n                code.append('S');\n            }\n            break;\n        case 'T' :\n            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                code.append('X');\n                break;\n            } \n            if (regionMatch(local, n, \"TCH\")) {\n                break;\n            } \n            if (regionMatch(local, n, \"TH\")) {\n                code.append('0');\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'V' :\n            code.append('F');\n            break;\n        case 'W' :\n        case 'Y' :\n            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                code.append(symb);\n            } \n            break;\n        case 'X' :\n            code.append('K');\n            code.append('S');\n            break;\n        case 'Z' :\n            code.append('S');\n            break;\n        default :\n            break;\n    }\n    n++;\n}"},"status":-2},{"failures":[],"tindex":"cf9824c2-0cbf-11e6-b8c8-f97f66765545","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:339","type":"CtIfImpl","sourcecode":"if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[27,28,29,30,31,32,33,34],"tindex":"cf984ad3-0cbf-11e6-b8c8-978e88312b51","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:176","type":"CtAssignmentImpl","sourcecode":"hasUnderscores = true"},"variableMap":{"hasUnderscores":"found"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:207","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = false"},"status":-1},{"failures":[],"tindex":"cf984ad4-0cbf-11e6-b8c8-53238051761f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"variableMap":{"encodeSize":"pos","org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:351","type":"CtUnaryOperatorImpl","sourcecode":"((context.int)++)"},"status":0},{"failures":[25,26],"tindex":"cf984ad5-0cbf-11e6-b8c8-d36e414c400f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"status":-1},{"failures":[],"tindex":"cf984ad6-0cbf-11e6-b8c8-95bac18bafa9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:213","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero]"},"status":-2},{"failures":[],"tindex":"cf984ad7-0cbf-11e6-b8c8-a73eb42fc2e4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:292","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"))"},"status":-2},{"failures":[96,97,98,99,100,101,102],"tindex":"cf984ad8-0cbf-11e6-b8c8-7b041c5372e4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"code = '5'"},"variableMap":{"code":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:271","type":"CtAssignmentImpl","sourcecode":"last = getMappingCode(str, 0)"},"status":-1},{"failures":[25,26],"tindex":"cf984ad9-0cbf-11e6-b8c8-61fe0f19b49c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"cf984ada-0cbf-11e6-b8c8-57fe07be9cad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"variableMap":{"array":"buf"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"status":-2},{"failures":[],"tindex":"cf9871eb-0cbf-11e6-b8c8-8b64797a3119","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:222","type":"CtAssignmentImpl","sourcecode":"key[i] = ((byte)(iChar << 1))"},"variableMap":{"iChar":"pos","i":"org.apache.commons.codec.binary.Base64.MASK_6BITS","key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[],"tindex":"cf9871ec-0cbf-11e6-b8c8-599b2c9b9b47","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:266","type":"CtInvocationImpl","sourcecode":"getNextPos()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:70","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[103],"tindex":"cf9871ed-0cbf-11e6-b8c8-0d5c110ce950","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtIfImpl","sourcecode":"if (cs1 == cs2) {\n    return true;\n} "},"variableMap":{"cs1":"cs2","cs2":"cs1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"status":-1},{"failures":[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"tindex":"cf9871ee-0cbf-11e6-b8c8-e702088e26d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"variableMap":{"es1":"name2","es2":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:299","type":"CtLocalVariableImpl","sourcecode":"final int int = (name2.length()) - 1"},"status":-1},{"failures":[],"tindex":"cf9871ef-0cbf-11e6-b8c8-9ffb6fb07c81","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"variableMap":{"pos":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_RESIZE_FACTOR","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,142,143],"tindex":"cf9871f0-0cbf-11e6-b8c8-d3423cf6f977","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-1},{"failures":[2,3,4,5,6],"tindex":"cf989901-0cbf-11e6-b8c8-c52af100128d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:364","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[70,73],"tindex":"cf989902-0cbf-11e6-b8c8-758912670aea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:223","type":"CtWhileImpl","sourcecode":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}"},"status":-1},{"failures":[2,144],"tindex":"cf989903-0cbf-11e6-b8c8-63bfe9e498f2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"singleByte"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:98","type":"CtWhileImpl","sourcecode":"while (r == 0) {\n    r = read(byte[], 0, 1);\n}"},"status":-1},{"failures":[],"tindex":"cf989904-0cbf-11e6-b8c8-ad0eb7d2c626","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:69","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"cf989905-0cbf-11e6-b8c8-214a837859d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"variableMap":{"altResult":"source","buffer":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:85","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n} "},"status":-2},{"failures":[],"tindex":"cf989906-0cbf-11e6-b8c8-6b23858f360f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (name1Char.int) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}"},"status":-2},{"failures":[],"tindex":"cf989907-0cbf-11e6-b8c8-6bbb03a3ca03","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"variableMap":{"urlsafe":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:71","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('&')"},"status":-2},{"failures":[],"tindex":"cf989908-0cbf-11e6-b8c8-395b247bfbc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:751","type":"CtAssignmentImpl","sourcecode":"bitlen = ((bitlen + 7) >> 3) << 3"},"variableMap":{"bitlen":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:293","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)"},"status":-2},{"failures":[],"tindex":"cf98c019-0cbf-11e6-b8c8-651950c4f328","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"));\n}"},"variableMap":{"obj":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-2},{"failures":[],"tindex":"cf98c01a-0cbf-11e6-b8c8-89fb79c2df09","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:594","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:72","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-2},{"failures":[],"tindex":"cf98c01b-0cbf-11e6-b8c8-c15f608053b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:806","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"value":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:216","type":"CtIfImpl","sourcecode":"if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"status":-2},{"failures":[],"tindex":"cf98c01c-0cbf-11e6-b8c8-b11cd25fe2b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:938","type":"CtInvocationImpl","sourcecode":"getMaxCodeLen()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:96","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"status":-2},{"failures":[],"tindex":"cf98c01d-0cbf-11e6-b8c8-3f4f19d7962c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:287","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"cf98c01e-0cbf-11e6-b8c8-47371ead5072","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[145,146],"tindex":"cf98c01f-0cbf-11e6-b8c8-45ecafef0126","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-1},{"failures":[],"tindex":"cf98e730-0cbf-11e6-b8c8-093c4fcb89e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"status":-2},{"failures":[147,148],"tindex":"cf98e731-0cbf-11e6-b8c8-3f115672f4ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[91],"tindex":"cf98e732-0cbf-11e6-b8c8-3f86005116d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:140","type":"CtIfImpl","sourcecode":"if (next == 'N') {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} else {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n}"},"status":-1},{"failures":[149,150],"tindex":"cf98e733-0cbf-11e6-b8c8-a9f1f8886c2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"binaryData","key":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":90,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
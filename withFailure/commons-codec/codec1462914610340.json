{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":73,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":19,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":12,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":74,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":5,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":45,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":53,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":59,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":54,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":18,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":58,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":24,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":48,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":46,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":49,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":64,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":44,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":16,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":11,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":38,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":55,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":10,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":76,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":15,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":67,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":61,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":50,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":25,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":42,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":20,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":63,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":41,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":28,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":37,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":65,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":32,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":47,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":35,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":13,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":6,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":9,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":57,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":7,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":66,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":71,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":1,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":21,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":72,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":22,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":75,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":23},"transformations":[{"failures":[],"tindex":"9461301f-16f3-11e6-a046-411a08812434","series":0,"name":"add","transplant":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"variableMap":{"name":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"status":-2},{"failures":[],"tindex":"94615730-16f3-11e6-a046-cdb18a5ed53e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"break","position":"org.apache.commons.codec.language.DoubleMetaphone:924","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[0,1,2,3,4,5,6,7],"tindex":"94615731-16f3-11e6-a046-ddb498495ea7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp))","position":"org.apache.commons.codec.digest.Sha2Crypt:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, (keyLen - cp))"},"status":-1},{"failures":[],"tindex":"94617e42-16f3-11e6-a046-635ce4ceef89","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:484","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer)"},"variableMap":{"altResult":"finalb","buffer":"passwd"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)"},"status":-2},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"94617e43-16f3-11e6-a046-45921e10ed7a","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"pArray","key":"pArray"},"type":"adrStmt","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-1},{"failures":[1,4],"tindex":"94617e44-16f3-11e6-a046-0d7af6cae1e9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.append(rounds)","position":"org.apache.commons.codec.digest.Sha2Crypt:426","type":"CtInvocationImpl","sourcecode":"buffer.append(rounds)"},"status":-1},{"failures":[],"tindex":"94617e45-16f3-11e6-a046-abfe4bd37b46","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String before = ph.substring(0, open);\n    final java.lang.String in = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> langs = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE);\n}","position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtIfImpl","sourcecode":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String java.lang.String = ph.substring(0, open);\n    final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n}"},"status":-2},{"failures":[],"tindex":"9461a556-16f3-11e6-a046-67de6654eeaa","series":0,"name":"add","transplant":{"toString":"decode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"variableMap":{"pArray":"singleByte","length":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n} else {\n    baseNCodec.decode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"9461a557-16f3-11e6-a046-6d24e633a85d","series":0,"name":"add","transplant":{"toString":"return c","position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:460","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[23,24],"tindex":"9461cc68-16f3-11e6-a046-6bbd03606cf0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-1},{"failures":[],"tindex":"9461cc69-16f3-11e6-a046-4f602da575de","series":0,"name":"replace","transplant":{"toString":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"acceptOnMatch","value":"text","element":"text"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Lang.LangRule rule : org.apache.commons.codec.language.bm.Lang.this.rules) {\n    if (rule.matches(text)) {\n        if (rule.acceptOnMatch) {\n            langs.retainAll(rule.languages);\n        } else {\n            langs.removeAll(rule.languages);\n        }\n    } \n}","position":"org.apache.commons.codec.language.bm.Lang:218","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Lang.LangRule org.apache.commons.codec.language.bm.Lang.LangRule : org.apache.commons.codec.language.bm.Lang.this.java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>) {\n    if (rule.matches(text)) {\n        if (rule.boolean) {\n            langs.retainAll(rule.java.util.Set<java.lang.String>);\n        } else {\n            langs.removeAll(rule.java.util.Set<java.lang.String>);\n        }\n    } \n}"},"status":-2},{"failures":[25,26,27,28,29,30,31,32],"tindex":"9461cc6a-16f3-11e6-a046-61d7e52ff0f8","series":0,"name":"replace","transplant":{"toString":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}","position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"variableMap":{"code":"code","lastChar":"lastCode","nextChar":"lastChar","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"org.apache.commons.codec.language.ColognePhonetic.TDX","org.apache.commons.codec.language.ColognePhonetic.SZ":"org.apache.commons.codec.language.ColognePhonetic.AEIJOUY"},"type":"adrStmt","transplantationPoint":{"toString":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AEIJOUY, chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SCZ, nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.WFPV, chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.GKQ, chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.CKQ, lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX, nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.SZ, lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.AHOUKQX, nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.TDX, chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}","position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-1},{"failures":[33],"tindex":"94621a8b-16f3-11e6-a046-4fe0db6a6e4d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-1},{"failures":[],"tindex":"94621a8c-16f3-11e6-a046-d9327e905c44","series":0,"name":"add","transplant":{"toString":"final java.lang.String before = ph.substring(0, open)","position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"variableMap":{"ph":"text","open":"from"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String encoding = text.substring(from, to)","position":"org.apache.commons.codec.net.RFC1522Codec:147","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = text.substring(from, to)"},"status":-2},{"failures":[34,35,36,37,38,39,40,41,42,43,44],"tindex":"9462419d-16f3-11e6-a046-c3b9c52432dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base64:373","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[45],"tindex":"9462419e-16f3-11e6-a046-51b73b39166c","series":0,"name":"replace","transplant":{"toString":"return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\"","position":"org.apache.commons.codec.language.bm.PhoneticEngine:413","type":"CtReturnImpl","sourcecode":"return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\""},"variableMap":{"combined":"str","remainder":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.Nysiis:256","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"failures":[],"tindex":"9462419f-16f3-11e6-a046-033403eedb99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ii -= 16","position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"status":-2},{"failures":[],"tindex":"946241a0-16f3-11e6-a046-e305fa644618","series":0,"name":"replace","transplant":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.bm.Lang:159","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"variableMap":{"line":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ce\", \"se\")","position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"status":-2},{"failures":[],"tindex":"946241a1-16f3-11e6-a046-6fcee66ca2d7","series":0,"name":"replace","transplant":{"toString":"return metaphone(str1).equals(metaphone(str2))","position":"org.apache.commons.codec.language.Metaphone:415","type":"CtReturnImpl","sourcecode":"return metaphone(str1).equals(metaphone(str2))"},"variableMap":{"str1":"value","str2":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))","position":"org.apache.commons.codec.language.DoubleMetaphone:858","type":"CtReturnImpl","sourcecode":"return ((((value.indexOf('W')) > (-1)) || ((value.indexOf('K')) > (-1))) || ((value.indexOf(\"CZ\")) > (-1))) || ((value.indexOf(\"WITZ\")) > (-1))"},"status":-2},{"failures":[],"tindex":"946268b2-16f3-11e6-a046-e77de75a9efd","series":0,"name":"add","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean found = rulesApplication.isFound()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:348","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = rulesApplication.isFound()"},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"946268b3-16f3-11e6-a046-e9cb9bd93900","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx.update(pBytes, 0, keyLen)","position":"org.apache.commons.codec.digest.Sha2Crypt:398","type":"CtInvocationImpl","sourcecode":"ctx.update(pBytes, 0, keyLen)"},"status":-1},{"failures":[],"tindex":"946268b4-16f3-11e6-a046-f5038d0eff9e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:284","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd)"},"variableMap":{"finalb":"altResult","passwd":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-2},{"failures":[],"tindex":"946268b5-16f3-11e6-a046-c3659e00ad9d","series":0,"name":"replace","transplant":{"toString":"final boolean slavoGermanic = isSlavoGermanic(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:92","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = isSlavoGermanic(value)"},"variableMap":{"value":"boxContent"},"type":"adrStmt","transplantationPoint":{"toString":"final boolean negate = boxContent.startsWith(\"^\")","position":"org.apache.commons.codec.language.bm.Rule:552","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = boxContent.startsWith(\"^\")"},"status":-2},{"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"946268b6-16f3-11e6-a046-292f57a38f3c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.bm.Rule:430","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[64],"tindex":"94628fc7-16f3-11e6-a046-15ece8a47207","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-1},{"failures":[65],"tindex":"94628fc8-16f3-11e6-a046-a1848533b047","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:616","type":"CtIfImpl","sourcecode":"if (slavoGermanic) {\n    result.append('S');\n} else {\n    result.append('S', 'X');\n}"},"status":-1},{"failures":[],"tindex":"94628fc9-16f3-11e6-a046-3f0703f8d627","series":0,"name":"add","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n    return true;\n} else if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char c = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n    return true;\n} else if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"variableMap":{"index":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE","value":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6,7],"tindex":"94628fca-16f3-11e6-a046-c396339b686a","series":0,"name":"replace","transplant":{"toString":"ctx.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"variableMap":{"keyBytes":"altResult","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, cnt)","position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[],"tindex":"94628fcb-16f3-11e6-a046-3f918661a962","series":0,"name":"replace","transplant":{"toString":"txt = txt + (org.apache.commons.codec.language.Caverphone2.TEN_1)","position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"txt","txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"z\", \"s\")","position":"org.apache.commons.codec.language.Caverphone1:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":-3},{"failures":[],"tindex":"94628fcc-16f3-11e6-a046-ffa0c0574f3f","series":0,"name":"replace","transplant":{"toString":"final int len = str.length()","position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"variableMap":{"str":"accentedWord"},"type":"adrStmt","transplantationPoint":{"toString":"final int n = accentedWord.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"status":-3},{"failures":[],"tindex":"9462b6dd-16f3-11e6-a046-55491faa3f63","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('#')","position":"org.apache.commons.codec.net.QCodec:68","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('#')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:75","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[],"tindex":"9462b6de-16f3-11e6-a046-c37aad494c13","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes)","position":"org.apache.commons.codec.net.URLCodec:210","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes)"},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"failures":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"tindex":"9462b6df-16f3-11e6-a046-4fa974fce4dd","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"str","leftCharacter":"str","rightCharacter":"str","location":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"status":-1},{"failures":[],"tindex":"9462b6e0-16f3-11e6-a046-41308029fd92","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"variableMap":{"sBytes":"lineSeparator","blocksize":"length","tempResult":"lineSeparator","cp":"length"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:286","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int)"},"status":-2},{"failures":[],"tindex":"9462ddf1-16f3-11e6-a046-7d397c0aa01c","series":0,"name":"replace","transplant":{"toString":"if (c != 0) {\n    return c;\n} ","position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"toString":"return index","position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"9462ddf2-16f3-11e6-a046-8babf1048747","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.RuleType rt : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> rs = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages ls = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String l : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}","position":"org.apache.commons.codec.language.bm.Rule:217","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n    final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n    final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n    for (final java.lang.String java.lang.String : ls.getLanguages()) {\n        try {\n            rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n        } catch (final java.lang.IllegalStateException e) {\n            throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n        }\n    }\n    if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n        rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n    } \n    rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n}"},"status":-2},{"failures":[],"tindex":"9462ddf3-16f3-11e6-a046-e5216eeec9c9","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset.name()","position":"org.apache.commons.codec.binary.Hex:322","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset.name()"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.ISO_8859_1"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.ISO_8859_1)","position":"org.apache.commons.codec.binary.StringUtils:303","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"9462ddf4-16f3-11e6-a046-41d8d7c1a447","series":0,"name":"replace","transplant":{"toString":"final int n = accentedWord.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"variableMap":{"accentedWord":"name2"},"type":"adrStmt","transplantationPoint":{"toString":"final int sumLength = java.lang.Math.abs(((name1.length()) + (name2.length())))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:250","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.abs(((name1.length()) + (name2.length())))"},"status":-1},{"failures":[],"tindex":"94630505-16f3-11e6-a046-5b34580ae2c0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}","position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":39,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
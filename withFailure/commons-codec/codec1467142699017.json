{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":111,"org.apache.commons.codec.binary.HexTest.testCustomCharset":184,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":108,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":181,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":36,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":88,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":123,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":24,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":23,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":110,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":48,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":125,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":90,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":149,"org.apache.commons.codec.binary.Base64Test.testTriplets":153,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":51,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":30,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":73,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":101,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":46,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":28,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":31,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":164,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":55,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":60,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":135,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":174,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":33,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":137,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":41,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":136,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex":140,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":40,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":113,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":91,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":159,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":25,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":160,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":112,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":163,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":14,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":134,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":39,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":132,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":103,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":161,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":69,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":133,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":162,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":0,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":97,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":75,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":98,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":116,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":32,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":109,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":117,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":186,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":63,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":72,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":169,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":45,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":29,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":126,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":154,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":7,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":82,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":11,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":37,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":71,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":151,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":104,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":87,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":77,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":118,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":142,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":175,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":6,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":83,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":143,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":62,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":182,"org.apache.commons.codec.language.SoundexTest.testNewInstance":129,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException":176,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":52,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":148,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":66,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":105,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":68,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":89,"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence":139,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":78,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":74,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":92,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":53,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":106,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":84,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":94,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":100,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":120,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":166,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":121,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":122,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":183,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":17,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":173,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":10,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":43,"org.apache.commons.codec.binary.Base64Test.testBase64":172,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":180,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":22,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":50,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":76,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":102,"org.apache.commons.codec.binary.Base64Test.testUUID":156,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":152,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":165,"org.apache.commons.codec.binary.Base64Test.testSingletons":168,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":49,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":178,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":171,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":20,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":114,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":19,"org.apache.commons.codec.binary.Base64Test.testPairs":155,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":99,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":47,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":61,"org.apache.commons.codec.binary.Base64Test.testCodec112":167,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":15,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":65,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":177,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":130,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":187,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":147,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":185,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":64,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":79,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":127,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":150,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":138,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":107,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":81,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":93,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":144,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":146,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":57,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":131,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":119,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":54,"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":26,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":21,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":38,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":86,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":115,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":70,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":158,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":170,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":85,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":12,"org.apache.commons.codec.language.SoundexTest.testDifference":128,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":67,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":145,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":157,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":34},"transformations":[{"failures":[],"tindex":"dd9dc957-3d67-11e6-a808-496459346f65","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:185","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))"},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"status":-2},{"failures":[],"tindex":"dd9df068-3d67-11e6-a808-658620e01eac","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:358","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang))"},"status":-2},{"failures":[0],"tindex":"dd9df069-3d67-11e6-a808-a1f72f60d76a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"index","l_ascii":"element","bits":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"status":-1},{"failures":[],"tindex":"dd9e177a-3d67-11e6-a808-cd15ea69c452","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:305","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[1,2],"tindex":"dd9e177b-3d67-11e6-a808-dbf120ec0db5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:688","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"dd9e177c-3d67-11e6-a808-dfb545d0fb5a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[],"tindex":"dd9e177d-3d67-11e6-a808-4351ba567fa6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:552","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = boxContent.startsWith(\"^\")"},"variableMap":{"boxContent":"content"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:546","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.endsWith(\"]\")"},"status":-2},{"failures":[1,2],"tindex":"dd9e177e-3d67-11e6-a808-53b86ab7e6ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:369","type":"CtOperatorAssignmentImpl","sourcecode":"d &= 268435455"},"variableMap":{"d":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:718","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"dd9e177f-3d67-11e6-a808-0770a5137171","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:180","type":"CtReturnImpl","sourcecode":"return digit"},"variableMap":{"digit":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[],"tindex":"dd9e1780-3d67-11e6-a808-f3f23257fc3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-2},{"failures":[3,1,2],"tindex":"dd9e3e91-3d67-11e6-a808-3b145335aa83","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[4],"tindex":"dd9e3e92-3d67-11e6-a808-b55a1a55ad41","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"dd9e3e93-3d67-11e6-a808-e136825e69e7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"tindex":"dd9e3e94-3d67-11e6-a808-8d8803cede32","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"status":-1},{"failures":[],"tindex":"dd9e65a5-3d67-11e6-a808-9df5c459d7cc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:434","type":"CtReturnImpl","sourcecode":"return buf"},"variableMap":{"buf":"l_ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"status":-2},{"failures":[32],"tindex":"dd9e65a6-3d67-11e6-a808-1fbe060f362f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:389","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha1Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"status":-1},{"failures":[33],"tindex":"dd9e65a7-3d67-11e6-a808-eb983b60c365","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"status":-1},{"failures":[],"tindex":"dd9e65a8-3d67-11e6-a808-bb8e47e54702","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"soundexMapping","index":"length","element":"mapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"status":-2},{"failures":[],"tindex":"dd9e8cb9-3d67-11e6-a808-f1601f7ad7ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"status":-2},{"failures":[34,35],"tindex":"dd9e8cba-3d67-11e6-a808-199cbbe47fc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"variableMap":{"pos":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:349","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-1},{"failures":[36,37,38],"tindex":"dd9e8cbb-3d67-11e6-a808-c90572a702c5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:469","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer)"},"status":-1},{"failures":[],"tindex":"dd9e8cbc-3d67-11e6-a808-7975a499de05","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-2},{"failures":[39,40,41,42,0,43,44,45],"tindex":"dd9e8cbd-3d67-11e6-a808-c15bf97bd746","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:401","type":"CtReturnImpl","sourcecode":"return output.toString()"},"status":-1},{"failures":[15,17,18,21,28,29,30,31],"tindex":"dd9e8cbe-3d67-11e6-a808-39163b5ec842","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:413","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-1},{"failures":[],"tindex":"dd9e8cbf-3d67-11e6-a808-9fb30a75204d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:346","type":"CtAssignmentImpl","sourcecode":"c = org.apache.commons.codec.digest.UnixCrypt.hPermOp(c, (-2), -859045888)"},"variableMap":{"c":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[],"tindex":"dd9e8cc0-3d67-11e6-a808-ed3a345e6b15","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"singleLetter"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"status":-2},{"failures":[46,47],"tindex":"dd9eb3d1-3d67-11e6-a808-d3db0b4517c9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"status":-1},{"failures":[],"tindex":"dd9eb3d2-3d67-11e6-a808-097220a50113","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"other","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"other","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"other"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:134","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Set<java.lang.String>);\n    for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n        ls.add(lang);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"status":-2},{"failures":[],"tindex":"dd9eb3d3-3d67-11e6-a808-55fd50af7948","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:247","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[5,6,7,8,9,10,11,12,13],"tindex":"dd9eb3d4-3d67-11e6-a808-a12e812eeb20","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:523","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : replacements) {\n    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n    nextBranch.processNextReplacement(nextReplacement, force);\n    if (branching) {\n        nextBranches.add(nextBranch);\n    } else {\n        break;\n    }\n}"},"status":-1},{"failures":[],"tindex":"dd9eb3d5-3d67-11e6-a808-75353b088b59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":0},{"failures":[48,49,50,51,52,53],"tindex":"dd9eb3d6-3d67-11e6-a808-2f608e9b54be","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:497","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-1},{"failures":[],"tindex":"dd9eb3d7-3d67-11e6-a808-8be7be51e009","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"status":-2},{"failures":[],"tindex":"dd9eb3d8-3d67-11e6-a808-a90ca568af91","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"status":0},{"failures":[54,55,56,49,50,51,52,57,53],"tindex":"dd9eb3d9-3d67-11e6-a808-7f402052680e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:507","type":"CtAssignmentImpl","sourcecode":"context.long = ((context.long) << 8) + b"},"status":-1},{"failures":[58],"tindex":"dd9eb3da-3d67-11e6-a808-a549c540dae1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-1},{"failures":[39,45],"tindex":"dd9eb3db-3d67-11e6-a808-0d31d41ec1c0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"status":-1},{"failures":[],"tindex":"dd9eb3dc-3d67-11e6-a808-c7ed707071fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"body"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:389","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}"},"status":-2},{"failures":[59],"tindex":"dd9edaed-3d67-11e6-a808-fdb221ac3711","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"variableMap":{"str":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"status":-1},{"failures":[60,61,62,63,64],"tindex":"dd9edaee-3d67-11e6-a808-b1d81ef0fae7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"status":-1},{"failures":[65,66],"tindex":"dd9edaef-3d67-11e6-a808-19be070aa60f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:222","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[67,68,69,70,71,72],"tindex":"dd9edaf0-3d67-11e6-a808-c33ba8e65126","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"variableMap":{"keyLen":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:173","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-1},{"failures":[73,36,37,38,74,75,76,77,78,79,80,81,82,83,84,85,86,4,87,88,89,90,91,92,93,94,32,95,96,97,98,99,100,101,102,103,104],"tindex":"dd9edaf1-3d67-11e6-a808-89a8052f458d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:67","type":"CtTryImpl","sourcecode":"try {\n    return java.security.MessageDigest.getInstance(algorithm);\n} catch (final java.security.NoSuchAlgorithmException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-1},{"failures":[],"tindex":"dd9edaf2-3d67-11e6-a808-596bed843472","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:283","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[5,6,7,8,9,13],"tindex":"dd9edaf3-3d67-11e6-a808-07c69823767e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:541","type":"CtInvocationImpl","sourcecode":"currentBranches.clear()"},"status":-1},{"failures":[],"tindex":"dd9edaf4-3d67-11e6-a808-4f7c448feb09","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:519","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":0},{"failures":[],"tindex":"dd9edaf5-3d67-11e6-a808-cfeb7fa5e50f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"status":-2},{"failures":[],"tindex":"dd9edaf6-3d67-11e6-a808-7550b792ddf7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:264","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"FF\")"},"status":-2},{"failures":[105],"tindex":"dd9f0207-3d67-11e6-a808-47da9a5fa82a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"status":-1},{"failures":[],"tindex":"dd9f0208-3d67-11e6-a808-f35475e95a7c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtIfImpl","sourcecode":"if (!(boxContent.contains(\"[\"))) {\n    final boolean boolean = boxContent.startsWith(\"^\");\n    if (negate) {\n        boxContent = boxContent.substring(1);\n    } \n    final java.lang.String java.lang.String = boxContent;\n    final boolean boolean = !negate;\n    if (startsWith && endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n            }\n        };\n    } \n} "},"variableMap":{"input":"input","boxContent":"content","endsWith":"boxes","startsWith":"endsWith"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtIfImpl","sourcecode":"if (!boxes) {\n    if (startsWith && endsWith) {\n        if ((content.length()) == 0) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return (input.length()) == 0;\n                }\n            };\n        } else {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return input.equals(content);\n                }\n            };\n        }\n    } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n        return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n            }\n        };\n    } \n} else {\n    final boolean boolean = content.startsWith(\"[\");\n    final boolean boolean = content.endsWith(\"]\");\n    if (startsWithBox && endsWithBox) {\n        java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n        if (!(boxContent.contains(\"[\"))) {\n            final boolean boolean = boxContent.startsWith(\"^\");\n            if (negate) {\n                boxContent = boxContent.substring(1);\n            } \n            final java.lang.String java.lang.String = boxContent;\n            final boolean boolean = !negate;\n            if (startsWith && endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (startsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                    }\n                };\n            } \n        } \n    } \n}"},"status":-2},{"failures":[67,106],"tindex":"dd9f0209-3d67-11e6-a808-55b1691f9989","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":-1},{"failures":[],"tindex":"dd9f020a-3d67-11e6-a808-659a62fc7511","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)"},"status":-2},{"failures":[107],"tindex":"dd9f020b-3d67-11e6-a808-bf1c74ea3ac2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[],"tindex":"dd9f020c-3d67-11e6-a808-6396abfe329a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"status":-2},{"failures":[],"tindex":"dd9f020d-3d67-11e6-a808-6d42a969f241","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"variableMap":{"result":"length","org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"length","ibitWorkArea":"length","pos":"length","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"length","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"length","buffer":"buffer","modulus":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:255","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int)"},"status":-2},{"failures":[],"tindex":"dd9f020e-3d67-11e6-a808-675ac8a8bc0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"replacedName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"dc"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-2},{"failures":[108,109,61,62,63,110,64],"tindex":"dd9f020f-3d67-11e6-a808-bf307521710b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"dd9f2920-3d67-11e6-a808-efa7da3166fb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"cnt","left":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:246","type":"CtAssignmentImpl","sourcecode":"cnt = keyBytes.int"},"status":-2},{"failures":[3,111,1,2],"tindex":"dd9f2921-3d67-11e6-a808-7da091f9dcd0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"dd9f2922-3d67-11e6-a808-dbd569da7dcc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"status":-2},{"failures":[112,113,114,115],"tindex":"dd9f2923-3d67-11e6-a808-1f11edf8c81a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[],"tindex":"dd9f2924-3d67-11e6-a808-0d0e7b06312b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:367","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"dd9f2925-3d67-11e6-a808-cfc23409f652","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"lastChar","c2":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"status":-2},{"failures":[116,117,114,115],"tindex":"dd9f2926-3d67-11e6-a808-b3f5e0893ce5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:67","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"status":-1},{"failures":[],"tindex":"dd9f5037-3d67-11e6-a808-9b2a2c46abeb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"ibitWorkArea","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:388","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"tindex":"dd9f7748-3d67-11e6-a808-01abdc99a001","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-1},{"failures":[],"tindex":"dd9f7749-3d67-11e6-a808-c39c6fbc8788","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[73,36,37,38,74,84,85,86,4,87,103],"tindex":"dd9f774a-3d67-11e6-a808-652b05c1680e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:506","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[70],"tindex":"dd9f774b-3d67-11e6-a808-fb00beee1039","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:176","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e)"},"status":-1},{"failures":[],"tindex":"dd9f774c-3d67-11e6-a808-8fa85932cebe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"t","t":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"status":-2},{"failures":[],"tindex":"dd9f9e5d-3d67-11e6-a808-f3dae9114d01","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"buffer","ascii":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:272","type":"CtReturnImpl","sourcecode":"return context.byte[]"},"status":-2},{"failures":[],"tindex":"dd9f9e5e-3d67-11e6-a808-77617af731b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-2},{"failures":[111,1,2],"tindex":"dd9f9e5f-3d67-11e6-a808-456c8394a185","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[],"tindex":"dd9fc570-3d67-11e6-a808-59982dfae86c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:318","type":"CtAssignmentImpl","sourcecode":"b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"variableMap":{"b":"offset","bytes":"b","i":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:388","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 24"},"status":-2},{"failures":[141],"tindex":"dd9fc571-3d67-11e6-a808-07c5ddf76646","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:265","type":"CtIfImpl","sourcecode":"if (!(isPreviousChar(local, n, 'C'))) {\n    code.append(symb);\n} "},"status":-1},{"failures":[36,37,38],"tindex":"dd9fc572-3d67-11e6-a808-a5e83664f139","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:481","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-1},{"failures":[73,36,37,38,84,85,86,87],"tindex":"dd9fc573-3d67-11e6-a808-b5ffa9a1513c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:386","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} "},"status":-1},{"failures":[34,35],"tindex":"dd9fc574-3d67-11e6-a808-03414b1eb411","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"s","minRating":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"status":-1},{"failures":[],"tindex":"dd9fc575-3d67-11e6-a808-07f1f281b9f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"variableMap":{"messageDigest":"obj","valueToDigest":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} "},"status":-2},{"failures":[142],"tindex":"dd9fc576-3d67-11e6-a808-fde14e9bb0e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"compareCode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:84","type":"CtAssignmentImpl","sourcecode":"compareCode = s1.compareTo(s2)"},"status":-1},{"failures":[1,2],"tindex":"dd9fc577-3d67-11e6-a808-51e9a4f87e8f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:688","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"status":-1},{"failures":[],"tindex":"dd9fc578-3d67-11e6-a808-a7c719769b9f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:223","type":"CtWhileImpl","sourcecode":"while (cnt > blocksize) {\n    ctx.update(altResult, 0, blocksize);\n    cnt -= blocksize;\n}"},"variableMap":{"blocksize":"i","altResult":"finalb","ctx":"ctx1","cnt":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:258","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(keyBytes);\n} else {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n}"},"status":-2},{"failures":[36,37,38],"tindex":"dd9fc579-3d67-11e6-a808-b7b5a5cae745","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:489","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer)"},"status":-1},{"failures":[],"tindex":"dd9fc57a-3d67-11e6-a808-41ed296732cd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:749","type":"CtLocalVariableImpl","sourcecode":"int int = bigInt.bitLength()"},"status":-2},{"failures":[128,143],"tindex":"dd9fc57b-3d67-11e6-a808-b5e0fe394046","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"status":-1},{"failures":[],"tindex":"dd9fec8c-3d67-11e6-a808-c5043d1536c9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:450","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:512","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[],"tindex":"dd9fec8d-3d67-11e6-a808-398eb159f733","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:71","type":"CtIfImpl","sourcecode":"if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n    return false;\n} "},"variableMap":{"c1":"key","c2":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : arr) {\n    if (element == key) {\n        return true;\n    } \n}"},"status":-2},{"failures":[],"tindex":"dd9fec8e-3d67-11e6-a808-8d2f2ad2321f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (line.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = line.split(\"=\");\n    if ((parts.int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String java.lang.String = parts[0];\n        final java.lang.String java.lang.String = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char char = r.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"dd9fec8f-3d67-11e6-a808-eb3a9454bb67","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:329","type":"CtAssignmentImpl","sourcecode":"u = ((u ^ (u << 16)) ^ r) ^ (sArr[s])"},"variableMap":{"r":"t","s":"s","u":"j","sArr":"schedule"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = (t << 16) | (s & 65535)"},"status":-2},{"failures":[116,114,115],"tindex":"dd9fec90-3d67-11e6-a808-2da67498daec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:116","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l$\", \"3\")"},"status":-1},{"failures":[],"tindex":"dd9fec91-3d67-11e6-a808-471f1d647d2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],"tindex":"dd9fec92-3d67-11e6-a808-f1bda0637903","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"variableMap":{"resizedBytes":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:640","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.java.lang.Integer.int)"},"status":-1},{"failures":[],"tindex":"dd9fec93-3d67-11e6-a808-311efe5a2436","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"variableMap":{"charset":"org.apache.commons.codec.Charsets.ISO_8859_1","string":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:114","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":0},{"failures":[150,52],"tindex":"dd9fec94-3d67-11e6-a808-e992c4aa53d1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:90","type":"CtReturnImpl","sourcecode":"return +1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:103","type":"CtReturnImpl","sourcecode":"return b < 0 ? 256 + b : b"},"status":-1},{"failures":[176],"tindex":"dd9fec95-3d67-11e6-a808-930c070a106c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:99","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\")"},"status":-1},{"failures":[144,145,177,178,179,180,181,182],"tindex":"dd9fec96-3d67-11e6-a808-d9e1f7420ec1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"from"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"dd9fec97-3d67-11e6-a808-7f01149aba08","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:298","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"status":0},{"failures":[183,184,185,186,187,156,173],"tindex":"dd9fec98-3d67-11e6-a808-db5f7da4f217","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"len","to":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:88","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; j < len ; i++) {\n    int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}"},"status":-1},{"failures":[],"tindex":"dda013a9-3d67-11e6-a808-29aad54fd7ec","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"status":-2},{"failures":[],"tindex":"dda013aa-3d67-11e6-a808-19cc7868fdf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}